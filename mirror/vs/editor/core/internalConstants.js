define('vs/editor/core/internalConstants', [
  'require',
  'exports'
], function(e, t) {
  t.Handler = {
    ExecuteCommand: 'executeCommand',
    ExecuteCommands: 'executeCommands',
    CursorLeft: 'cursorLeft',
    CursorLeftSelect: 'cursorLeftSelect',
    CursorWordLeft: 'cursorWordLeft',
    CursorWordLeftSelect: 'cursorWordLeftSelect',
    CursorRight: 'cursorRight',
    CursorRightSelect: 'cursorRightSelect',
    CursorWordRight: 'cursorWordRight',
    CursorWordRightSelect: 'cursorWordRightSelect',
    CursorUp: 'cursorUp',
    CursorUpSelect: 'cursorUpSelect',
    CursorDown: 'cursorDown',
    CursorDownSelect: 'cursorDownSelect',
    CursorPageUp: 'cursorPageUp',
    CursorPageUpSelect: 'cursorPageUpSelect',
    CursorPageDown: 'cursorPageDown',
    CursorPageDownSelect: 'cursorPageDownSelect',
    CursorHome: 'cursorHome',
    CursorHomeSelect: 'cursorHomeSelect',
    CursorEnd: 'cursorEnd',
    CursorEndSelect: 'cursorEndSelect',
    CursorTop: 'cursorTop',
    CursorTopSelect: 'cursorTopSelect',
    CursorBottom: 'cursorBottom',
    CursorBottomSelect: 'cursorBottomSelect',
    AddCursorDown: 'addCursorDown',
    AddCursorUp: 'addCursorUp',
    MoveTo: 'moveTo',
    MoveToSelect: 'moveToSelect',
    CreateCursor: 'createCursor',
    LastCursorMoveToSelect: 'lastCursorMoveToSelect',
    JumpToBracket: 'jumpToBracket',
    Type: 'type',
    Paste: 'paste',
    Tab: 'tab',
    Indent: 'indent',
    Outdent: 'outdent',
    DeleteLeft: 'deleteLeft',
    DeleteRight: 'deleteRight',
    DeleteWordLeft: 'deleteWordLeft',
    DeleteWordRight: 'deleteWordRight',
    DeleteAllLeft: 'deleteAllLeft',
    DeleteAllRight: 'deleteAllRight',
    Enter: 'enter',
    Escape: 'escape',
    Cut: 'cut',
    Undo: 'undo',
    Redo: 'redo',
    WordSelect: 'wordSelect',
    WordSelectDrag: 'wordSelectDrag',
    LastCursorWordSelect: 'lastCursorWordSelect',
    LineSelect: 'lineSelect',
    LineSelectDrag: 'lineSelectDrag',
    LastCursorLineSelect: 'lastCursorLineSelect',
    LastCursorLineSelectDrag: 'lastCursorLineSelectDrag',
    LineInsertBefore: 'lineInsertBefore',
    LineInsertAfter: 'lineInsertAfter',
    LineBreakInsert: 'lineBreakInsert',
    SelectAll: 'selectAll'
  };
})