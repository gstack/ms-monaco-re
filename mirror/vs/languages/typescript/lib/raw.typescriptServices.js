var TypeScript;

(function(a) {
  var b = function() {
    function b() {}
    b.isArray = function(a) {
      return Object.prototype.toString.apply(a, []) === "[object Array]";
    };

    b.sequenceEquals = function(a, b, c) {
      if (a === b) {
        return !0;
      }
      if (a === null || b === null) {
        return !1;
      }
      if (a.length !== b.length) {
        return !1;
      }
      for (var d = 0, e = a.length; d < e; d++)
        if (!c(a[d], b[d])) {
          return !1;
        }
      return !0;
    };

    b.contains = function(a, b) {
      for (var c = 0; c < a.length; c++)
        if (a[c] === b) {
          return !0;
        }
      return !1;
    };

    b.groupBy = function(a, b) {
      var c = {};
      for (var d = 0, e = a.length; d < e; d++) {
        var f = a[d];

        var g = b(f);

        var h = c[g] || [];
        h.push(f);

        c[g] = h;
      }
      return c;
    };

    b.min = function(a, b) {
      var c = b(a[0]);
      for (var d = 1; d < a.length; d++) {
        var e = b(a[d]);
        if (e < c) {
          c = e;
        }
      }
      return c;
    };

    b.max = function(a, b) {
      var c = b(a[0]);
      for (var d = 1; d < a.length; d++) {
        var e = b(a[d]);
        if (e > c) {
          c = e;
        }
      }
      return c;
    };

    b.last = function(b) {
      if (b.length === 0) throw a.Errors.argumentOutOfRange("array");
      return b[b.length - 1];
    };

    b.firstOrDefault = function(a, b) {
      for (var c = 0, d = a.length; c < d; c++) {
        var e = a[c];
        if (b(e)) {
          return e;
        }
      }
      return null;
    };

    b.sum = function(a, b) {
      var c = 0;
      for (var d = 0, e = a.length; d < e; d++) {
        c += b(a[d]);
      }
      return c;
    };

    b.whereNotNull = function(a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        var d = a[c];
        if (d !== null) {
          b.push(d);
        }
      }
      return b;
    };

    b.select = function(a, b) {
      var c = [];
      for (var d = 0; d < a.length; d++) {
        c.push(b(a[d]));
      }
      return c;
    };

    b.where = function(a, b) {
      var c = [];
      for (var d = 0; d < a.length; d++) {
        if (b(a[d])) {
          c.push(a[d]);
        }
      }
      return c;
    };

    b.any = function(a, b) {
      for (var c = 0, d = a.length; c < d; c++)
        if (b(a[c])) {
          return !0;
        }
      return !1;
    };

    b.all = function(a, b) {
      for (var c = 0, d = a.length; c < d; c++)
        if (!b(a[c])) {
          return !1;
        }
      return !0;
    };

    b.binarySearch = function(a, b) {
      var c = 0;

      var d = a.length - 1;
      while (c <= d) {
        var e = c + (d - c >> 1);

        var f = a[e];
        if (f === b) {
          return e;
        }
        if (f > b) {
          d = e - 1;
        } else {
          c = e + 1;
        }
      }
      return~ c;
    };

    b.createArray = function(a, b) {
      var c = [];
      for (var d = 0; d < a; d++) {
        c.push(b);
      }
      return c;
    };

    b.grow = function(a, b, c) {
      var d = b - a.length;
      for (var e = 0; e < d; e++) {
        a.push(c);
      }
    };

    b.copy = function(a, b, c, d, e) {
      for (var f = 0; f < e; f++) {
        c[d + f] = a[b + f];
      }
    };

    return b;
  }();
  a.ArrayUtilities = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.Max31BitInteger = 1073741823] = "Max31BitInteger";

    a[a.Min31BitInteger = -1073741824] = "Min31BitInteger";
  })(a.Constants || (a.Constants = {}));
  var b = a.Constants;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.requires = function(a) {
      if (!a) throw new Error("Contract violated. False expression.");
    };

    a.throwIfFalse = function(a) {
      if (!a) throw new Error("Contract violated. False expression.");
    };

    a.throwIfNull = function(a) {
      if (a === null) throw new Error("Contract violated. Null value.");
    };

    return a;
  }();
  a.Contract = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.assert = function(a, b) {
      if (!a) throw new Error("Debug Failure. False expression: " + (b ? b : ""));
    };

    return a;
  }();
  a.Debug = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.Warning = 0] = "Warning";

    a[a.Error = 1] = "Error";

    a[a.Message = 2] = "Message";

    a[a.NoPrefix = 3] = "NoPrefix";
  })(a.DiagnosticCategory || (a.DiagnosticCategory = {}));
  var b = a.DiagnosticCategory;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.error_TS_0__1 = 0] = "error_TS_0__1";

    a[a.warning_TS_0__1 = 1] = "warning_TS_0__1";

    a[a._0__NL__1_TB__2 = 2] = "_0__NL__1_TB__2";

    a[a._0_TB__1 = 3] = "_0_TB__1";

    a[a.Unrecognized_escape_sequence = 4] = "Unrecognized_escape_sequence";

    a[a.Unexpected_character_0 = 5] = "Unexpected_character_0";

    a[a.Missing_closing_quote_character = 6] = "Missing_closing_quote_character";

    a[a.Identifier_expected = 7] = "Identifier_expected";

    a[a._0_keyword_expected = 8] = "_0_keyword_expected";

    a[a._0_expected = 9] = "_0_expected";

    a[a.Identifier_expected__0__is_a_keyword = 10] = "Identifier_expected__0__is_a_keyword";

    a[a.Automatic_semicolon_insertion_not_allowed = 11] = "Automatic_semicolon_insertion_not_allowed";

    a[a.Unexpected_token__0_expected = 12] = "Unexpected_token__0_expected";

    a[a.Trailing_separator_not_allowed = 13] = "Trailing_separator_not_allowed";

    a[a._StarSlash__expected = 14] = "_StarSlash__expected";

    a[a._public_or_private_modifier_must_precede__static_ = 15] =
      "_public_or_private_modifier_must_precede__static_";

    a[a.Unexpected_token_ = 16] = "Unexpected_token_";

    a[a.A_catch_clause_variable_cannot_have_a_type_annotation = 17] =
      "A_catch_clause_variable_cannot_have_a_type_annotation";

    a[a.Rest_parameter_must_be_last_in_list = 18] = "Rest_parameter_must_be_last_in_list";

    a[a.Parameter_cannot_have_question_mark_and_initializer = 19] =
      "Parameter_cannot_have_question_mark_and_initializer";

    a[a.Required_parameter_cannot_follow_optional_parameter = 20] =
      "Required_parameter_cannot_follow_optional_parameter";

    a[a.Index_signatures_cannot_have_rest_parameters = 21] = "Index_signatures_cannot_have_rest_parameters";

    a[a.Index_signature_parameter_cannot_have_accessibility_modifiers = 22] =
      "Index_signature_parameter_cannot_have_accessibility_modifiers";

    a[a.Index_signature_parameter_cannot_have_a_question_mark = 23] =
      "Index_signature_parameter_cannot_have_a_question_mark";

    a[a.Index_signature_parameter_cannot_have_an_initializer = 24] =
      "Index_signature_parameter_cannot_have_an_initializer";

    a[a.Index_signature_must_have_a_type_annotation = 25] = "Index_signature_must_have_a_type_annotation";

    a[a.Index_signature_parameter_must_have_a_type_annotation = 26] =
      "Index_signature_parameter_must_have_a_type_annotation";

    a[a.Index_signature_parameter_type_must_be__string__or__number_ = 27] =
      "Index_signature_parameter_type_must_be__string__or__number_";

    a[a._extends__clause_already_seen = 28] = "_extends__clause_already_seen";

    a[a._extends__clause_must_precede__implements__clause = 29] =
      "_extends__clause_must_precede__implements__clause";

    a[a.Class_can_only_extend_single_type = 30] = "Class_can_only_extend_single_type";

    a[a._implements__clause_already_seen = 31] = "_implements__clause_already_seen";

    a[a.Accessibility_modifier_already_seen = 32] = "Accessibility_modifier_already_seen";

    a[a._0__modifier_must_precede__1__modifier = 33] = "_0__modifier_must_precede__1__modifier";

    a[a._0__modifier_already_seen = 34] = "_0__modifier_already_seen";

    a[a._0__modifier_cannot_appear_on_a_class_element = 35] = "_0__modifier_cannot_appear_on_a_class_element";

    a[a.Interface_declaration_cannot_have__implements__clause = 36] =
      "Interface_declaration_cannot_have__implements__clause";

    a[a._super__invocation_cannot_have_type_arguments = 37] = "_super__invocation_cannot_have_type_arguments";

    a[a.Non_ambient_modules_cannot_use_quoted_names = 38] = "Non_ambient_modules_cannot_use_quoted_names";

    a[a.Statements_are_not_allowed_in_ambient_contexts = 39] = "Statements_are_not_allowed_in_ambient_contexts";

    a[a.Implementations_are_not_allowed_in_ambient_contexts = 40] =
      "Implementations_are_not_allowed_in_ambient_contexts";

    a[a._declare__modifier_not_allowed_for_code_already_in_an_ambient_context = 41] =
      "_declare__modifier_not_allowed_for_code_already_in_an_ambient_context";

    a[a.Initializers_are_not_allowed_in_ambient_contexts = 42] = "Initializers_are_not_allowed_in_ambient_contexts";

    a[a.Overload_and_ambient_signatures_cannot_specify_parameter_properties = 43] =
      "Overload_and_ambient_signatures_cannot_specify_parameter_properties";

    a[a.Function_implementation_expected = 44] = "Function_implementation_expected";

    a[a.Constructor_implementation_expected = 45] = "Constructor_implementation_expected";

    a[a.Function_overload_name_must_be__0_ = 46] = "Function_overload_name_must_be__0_";

    a[a._0__modifier_cannot_appear_on_a_module_element = 47] = "_0__modifier_cannot_appear_on_a_module_element";

    a[a._declare__modifier_cannot_appear_on_an_interface_declaration = 48] =
      "_declare__modifier_cannot_appear_on_an_interface_declaration";

    a[a._declare__modifier_required_for_top_level_element = 49] =
      "_declare__modifier_required_for_top_level_element";

    a[a._set__accessor_must_have_only_one_parameter = 50] = "_set__accessor_must_have_only_one_parameter";

    a[a._set__accessor_parameter_cannot_have_accessibility_modifier = 51] =
      "_set__accessor_parameter_cannot_have_accessibility_modifier";

    a[a._set__accessor_parameter_cannot_be_optional = 52] = "_set__accessor_parameter_cannot_be_optional";

    a[a._set__accessor_parameter_cannot_have_initializer = 53] = "_set__accessor_parameter_cannot_have_initializer";

    a[a._set__accessor_cannot_have_rest_parameter = 54] = "_set__accessor_cannot_have_rest_parameter";

    a[a._get__accessor_cannot_have_parameters = 55] = "_get__accessor_cannot_have_parameters";

    a[a.Rest_parameter_cannot_be_optional = 56] = "Rest_parameter_cannot_be_optional";

    a[a.Rest_parameter_cannot_have_initializer = 57] = "Rest_parameter_cannot_have_initializer";

    a[a.Modifiers_cannot_appear_here = 58] = "Modifiers_cannot_appear_here";

    a[a.Accessors_are_only_available_when_targeting_EcmaScript5_and_higher = 59] =
      "Accessors_are_only_available_when_targeting_EcmaScript5_and_higher";

    a[a.Class_name_cannot_be__0_ = 60] = "Class_name_cannot_be__0_";

    a[a.Interface_name_cannot_be__0_ = 61] = "Interface_name_cannot_be__0_";

    a[a.Enum_name_cannot_be__0_ = 62] = "Enum_name_cannot_be__0_";

    a[a.Module_name_cannot_be__0_ = 63] = "Module_name_cannot_be__0_";

    a[a.Enum_member_must_have_initializer = 64] = "Enum_member_must_have_initializer";

    a[a._module_______is_deprecated__Use__require_______instead = 65] =
      "_module_______is_deprecated__Use__require_______instead";

    a[a.Export_assignments_cannot_be_used_in_internal_modules = 66] =
      "Export_assignments_cannot_be_used_in_internal_modules";

    a[a.Export_assignment_not_allowed_in_module_with_exported_element = 67] =
      "Export_assignment_not_allowed_in_module_with_exported_element";

    a[a.Module_cannot_have_multiple_export_assignments = 68] = "Module_cannot_have_multiple_export_assignments";

    a[a.Duplicate_identifier__0_ = 69] = "Duplicate_identifier__0_";

    a[a.The_name__0__does_not_exist_in_the_current_scope = 70] = "The_name__0__does_not_exist_in_the_current_scope";

    a[a.The_name__0__does_not_refer_to_a_value = 71] = "The_name__0__does_not_refer_to_a_value";

    a[a.Keyword__super__can_only_be_used_inside_a_class_instance_method = 72] =
      "Keyword__super__can_only_be_used_inside_a_class_instance_method";

    a[a.The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer = 73] =
      "The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer";

    a[a.Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__ = 74] =
      "Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__";

    a[a.Value_of_type__0__is_not_callable = 75] = "Value_of_type__0__is_not_callable";

    a[a.Value_of_type__0__is_not_newable = 76] = "Value_of_type__0__is_not_newable";

    a[a.Value_of_type__0__is_not_indexable_by_type__1_ = 77] = "Value_of_type__0__is_not_indexable_by_type__1_";

    a[a.Operator__0__cannot_be_applied_to_types__1__and__2_ = 78] =
      "Operator__0__cannot_be_applied_to_types__1__and__2_";

    a[a.Operator__0__cannot_be_applied_to_types__1__and__2__3 = 79] =
      "Operator__0__cannot_be_applied_to_types__1__and__2__3";

    a[a.Cannot_convert__0__to__1_ = 80] = "Cannot_convert__0__to__1_";

    a[a.Cannot_convert__0__to__1__NL__2 = 81] = "Cannot_convert__0__to__1__NL__2";

    a[a.Expected_var__class__interface__or_module = 82] = "Expected_var__class__interface__or_module";

    a[a.Operator__0__cannot_be_applied_to_type__1_ = 83] = "Operator__0__cannot_be_applied_to_type__1_";

    a[a.Getter__0__already_declared = 84] = "Getter__0__already_declared";

    a[a.Setter__0__already_declared = 85] = "Setter__0__already_declared";

    a[a.Accessor_cannot_have_type_parameters = 86] = "Accessor_cannot_have_type_parameters";

    a[a.Exported_class__0__extends_private_class__1_ = 87] = "Exported_class__0__extends_private_class__1_";

    a[a.Exported_class__0__implements_private_interface__1_ = 88] =
      "Exported_class__0__implements_private_interface__1_";

    a[a.Exported_interface__0__extends_private_interface__1_ = 89] =
      "Exported_interface__0__extends_private_interface__1_";

    a[a.Exported_class__0__extends_class_from_inaccessible_module__1_ = 90] =
      "Exported_class__0__extends_class_from_inaccessible_module__1_";

    a[a.Exported_class__0__implements_interface_from_inaccessible_module__1_ = 91] =
      "Exported_class__0__implements_interface_from_inaccessible_module__1_";

    a[a.Exported_interface__0__extends_interface_from_inaccessible_module__1_ = 92] =
      "Exported_interface__0__extends_interface_from_inaccessible_module__1_";

    a[a.Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_ = 93] =
      "Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_";

    a[a.Public_property__0__of__exported_class_has_or_is_using_private_type__1_ = 94] =
      "Public_property__0__of__exported_class_has_or_is_using_private_type__1_";

    a[a.Property__0__of__exported_interface_has_or_is_using_private_type__1_ = 95] =
      "Property__0__of__exported_interface_has_or_is_using_private_type__1_";

    a[a.Exported_variable__0__has_or_is_using_private_type__1_ = 96] =
      "Exported_variable__0__has_or_is_using_private_type__1_";

    a[a.Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_ = 97] =
      "Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_";

    a[a.Public_property__0__of__exported_class_is_using_inaccessible_module__1_ = 98] =
      "Public_property__0__of__exported_class_is_using_inaccessible_module__1_";

    a[a.Property__0__of__exported_interface_is_using_inaccessible_module__1_ = 99] =
      "Property__0__of__exported_interface_is_using_inaccessible_module__1_";

    a[a.Exported_variable__0__is_using_inaccessible_module__1_ = 100] =
      "Exported_variable__0__is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_ = 101] =
      "Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_ = 102] =
      "Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_ = 103] =
      "Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_ = 104] =
      "Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_ = 105] =
      "Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_ = 106] =
      "Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_ = 107] =
      "Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_ = 108] =
      "Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_exported_function_has_or_is_using_private_type__1_ = 109] =
      "Parameter__0__of_exported_function_has_or_is_using_private_type__1_";

    a[a.Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_ = 110] =
      "Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_ = 111] =
      "Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_ = 112] =
      "Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_ = 113] =
      "Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_ = 114] =
      "Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_ = 115] =
      "Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_ = 116] =
      "Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_ = 117] =
      "Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_";

    a[a.Parameter__0__of_exported_function_is_using_inaccessible_module__1_ = 118] =
      "Parameter__0__of_exported_function_is_using_inaccessible_module__1_";

    a[a.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_ = 119] =
      "Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_";

    a[a.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_ = 120] =
      "Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_";

    a[a.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_ = 121] =
      "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_";

    a[a.Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_ = 122] =
      "Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_";

    a[a.Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_ = 123] =
      "Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_";

    a[a.Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_ = 124] =
      "Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_";

    a[a.Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_ = 125] =
      "Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_";

    a[a.Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_ = 126] =
      "Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_";

    a[a.Return_type_of_exported_function_has_or_is_using_private_type__0_ = 127] =
      "Return_type_of_exported_function_has_or_is_using_private_type__0_";

    a[a.Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_ = 128] =
      "Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_";

    a[a.Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_ = 129] =
      "Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_";

    a[a.Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_ = 130] =
      "Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_";

    a[a.Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_ = 131] =
      "Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_";

    a[a.Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_ = 132] =
      "Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_";

    a[a.Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_ = 133] =
      "Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_";

    a[a.Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_ = 134] =
      "Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_";

    a[a.Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_ = 135] =
      "Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_";

    a[a.Return_type_of_exported_function_is_using_inaccessible_module__0_ = 136] =
      "Return_type_of_exported_function_is_using_inaccessible_module__0_";

    a[a._new_T____cannot_be_used_to_create_an_array__Use__new_Array_T_____instead = 137] =
      "_new_T____cannot_be_used_to_create_an_array__Use__new_Array_T_____instead";

    a[a.A_parameter_list_must_follow_a_generic_type_argument_list______expected = 138] =
      "A_parameter_list_must_follow_a_generic_type_argument_list______expected";

    a[a.Multiple_constructor_implementations_are_not_allowed = 139] =
      "Multiple_constructor_implementations_are_not_allowed";

    a[a.Unable_to_resolve_external_module__0_ = 140] = "Unable_to_resolve_external_module__0_";

    a[a.Module_cannot_be_aliased_to_a_non_module_type = 141] = "Module_cannot_be_aliased_to_a_non_module_type";

    a[a.A_class_may_only_extend_another_class = 142] = "A_class_may_only_extend_another_class";

    a[a.A_class_may_only_implement_another_class_or_interface = 143] =
      "A_class_may_only_implement_another_class_or_interface";

    a[a.An_interface_may_only_extend_another_class_or_interface = 144] =
      "An_interface_may_only_extend_another_class_or_interface";

    a[a.An_interface_cannot_implement_another_type = 145] = "An_interface_cannot_implement_another_type";

    a[a.Unable_to_resolve_type = 146] = "Unable_to_resolve_type";

    a[a.Unable_to_resolve_type_of__0_ = 147] = "Unable_to_resolve_type_of__0_";

    a[a.Unable_to_resolve_type_parameter_constraint = 148] = "Unable_to_resolve_type_parameter_constraint";

    a[a.Type_parameter_constraint_cannot_be_a_primitive_type = 149] =
      "Type_parameter_constraint_cannot_be_a_primitive_type";

    a[a.Supplied_parameters_do_not_match_any_signature_of_call_target = 150] =
      "Supplied_parameters_do_not_match_any_signature_of_call_target";

    a[a.Supplied_parameters_do_not_match_any_signature_of_call_target__NL__0 = 151] =
      "Supplied_parameters_do_not_match_any_signature_of_call_target__NL__0";

    a[a.Invalid__new__expression = 152] = "Invalid__new__expression";

    a[a.Call_signatures_used_in_a__new__expression_must_have_a__void__return_type = 153] =
      "Call_signatures_used_in_a__new__expression_must_have_a__void__return_type";

    a[a.Could_not_select_overload_for__new__expression = 154] = "Could_not_select_overload_for__new__expression";

    a[a.Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_ = 155] =
      "Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_";

    a[a.Could_not_select_overload_for__call__expression = 156] = "Could_not_select_overload_for__call__expression";

    a[a.Unable_to_invoke_type_with_no_call_signatures = 157] = "Unable_to_invoke_type_with_no_call_signatures";

    a[a.Calls_to__super__are_only_valid_inside_a_class = 158] = "Calls_to__super__are_only_valid_inside_a_class";

    a[a.Generic_type__0__requires_1_type_argument_s_ = 159] = "Generic_type__0__requires_1_type_argument_s_";

    a[a.Type_of_conditional_expression_cannot_be_determined__Best_common_type_could_not_be_found_between__0__and__1_ =
      160] =
      "Type_of_conditional_expression_cannot_be_determined__Best_common_type_could_not_be_found_between__0__and__1_";

    a[a.Type_of_array_literal_cannot_be_determined__Best_common_type_could_not_be_found_for_array_elements = 161] =
      "Type_of_array_literal_cannot_be_determined__Best_common_type_could_not_be_found_for_array_elements";

    a[a.Could_not_find_enclosing_symbol_for_dotted_name__0_ = 162] =
      "Could_not_find_enclosing_symbol_for_dotted_name__0_";

    a[a.The_property__0__does_not_exist_on_value_of_type__1__ = 163] =
      "The_property__0__does_not_exist_on_value_of_type__1__";

    a[a.Could_not_find_symbol__0_ = 164] = "Could_not_find_symbol__0_";

    a[a._get__and__set__accessor_must_have_the_same_type = 165] =
      "_get__and__set__accessor_must_have_the_same_type";

    a[a._this__cannot_be_referenced_in_current_location = 166] = "_this__cannot_be_referenced_in_current_location";

    a[a.Use_of_deprecated__bool__type__Use__boolean__instead = 167] =
      "Use_of_deprecated__bool__type__Use__boolean__instead";

    a[a.Class__0__is_recursively_referenced_as_a_base_type_of_itself = 168] =
      "Class__0__is_recursively_referenced_as_a_base_type_of_itself";

    a[a.Interface__0__is_recursively_referenced_as_a_base_type_of_itself = 169] =
      "Interface__0__is_recursively_referenced_as_a_base_type_of_itself";

    a[a._super__property_access_is_permitted_only_in_a_constructor__instance_member_function__or_instance_member_accessor_of_a_derived_class =
      170] =
      "_super__property_access_is_permitted_only_in_a_constructor__instance_member_function__or_instance_member_accessor_of_a_derived_class";

    a[a._super__cannot_be_referenced_in_non_derived_classes = 171] =
      "_super__cannot_be_referenced_in_non_derived_classes";

    a[a.A__super__call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_intialized_properties_or_has_parameter_properties =
      172] =
      "A__super__call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_intialized_properties_or_has_parameter_properties";

    a[a.Constructors_for_derived_classes_must_contain_a__super__call = 173] =
      "Constructors_for_derived_classes_must_contain_a__super__call";

    a[a.Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors = 174] =
      "Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors";

    a[a._0_1__is_inaccessible = 175] = "_0_1__is_inaccessible";

    a[a._this__cannot_be_referenced_within_module_bodies = 176] =
      "_this__cannot_be_referenced_within_module_bodies";

    a[a._this__must_only_be_used_inside_a_function_or_script_context = 177] =
      "_this__must_only_be_used_inside_a_function_or_script_context";

    a[a.Invalid__addition__expression___types_do_not_agree = 178] =
      "Invalid__addition__expression___types_do_not_agree";

    a[a.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type = 179] =
      "The_right_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type";

    a[a.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type = 180] =
      "The_left_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type";

    a[a.The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type__any____number__or_an_enum_type = 181] =
      "The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type__any____number__or_an_enum_type";

    a[a.Variable_declarations_for_for_in_expressions_cannot_contain_a_type_annotation = 182] =
      "Variable_declarations_for_for_in_expressions_cannot_contain_a_type_annotation";

    a[a.Variable_declarations_for_for_in_expressions_must_be_of_types__string__or__any_ = 183] =
      "Variable_declarations_for_for_in_expressions_must_be_of_types__string__or__any_";

    a[a.The_right_operand_of_a_for_in_expression_must_be_of_type__any____an_object_type_or_a_type_parameter = 184] =
      "The_right_operand_of_a_for_in_expression_must_be_of_type__any____an_object_type_or_a_type_parameter";

    a[a.The_left_hand_side_of_an__in__expression_must_be_of_types__string__or__any_ = 185] =
      "The_left_hand_side_of_an__in__expression_must_be_of_types__string__or__any_";

    a[a.The_right_hand_side_of_an__in__expression_must_be_of_type__any___an_object_type_or_a_type_parameter = 186] =
      "The_right_hand_side_of_an__in__expression_must_be_of_type__any___an_object_type_or_a_type_parameter";

    a[a.The_left_hand_side_of_an__instanceOf__expression_must_be_of_type__any___an_object_type_or_a_type_parameter =
      187] =
      "The_left_hand_side_of_an__instanceOf__expression_must_be_of_type__any___an_object_type_or_a_type_parameter";

    a[a.The_right_hand_side_of_an__instanceOf__expression_must_be_of_type__any__or_a_subtype_of_the__Function__interface_type =
      188] =
      "The_right_hand_side_of_an__instanceOf__expression_must_be_of_type__any__or_a_subtype_of_the__Function__interface_type";

    a[a.Setters_cannot_return_a_value = 189] = "Setters_cannot_return_a_value";

    a[a.Tried_to_set_variable_type_to_module_type__0__ = 190] = "Tried_to_set_variable_type_to_module_type__0__";

    a[a.Tried_to_set_variable_type_to_uninitialized_module_type__0__ = 191] =
      "Tried_to_set_variable_type_to_uninitialized_module_type__0__";

    a[a.Function__0__declared_a_non_void_return_type__but_has_no_return_expression = 192] =
      "Function__0__declared_a_non_void_return_type__but_has_no_return_expression";

    a[a.Getters_must_return_a_value = 193] = "Getters_must_return_a_value";

    a[a.Getter_and_setter_accessors_do_not_agree_in_visibility = 194] =
      "Getter_and_setter_accessors_do_not_agree_in_visibility";

    a[a.Invalid_left_hand_side_of_assignment_expression = 195] = "Invalid_left_hand_side_of_assignment_expression";

    a[a.Function_declared_a_non_void_return_type__but_has_no_return_expression = 196] =
      "Function_declared_a_non_void_return_type__but_has_no_return_expression";

    a[a.Cannot_resolve_return_type_reference = 197] = "Cannot_resolve_return_type_reference";

    a[a.Constructors_cannot_have_a_return_type_of__void_ = 198] =
      "Constructors_cannot_have_a_return_type_of__void_";

    a[a.Subsequent_variable_declarations_must_have_the_same_type___Variable__0__must_be_of_type__1___but_here_has_type___2_ =
      199] =
      "Subsequent_variable_declarations_must_have_the_same_type___Variable__0__must_be_of_type__1___but_here_has_type___2_";

    a[a.All_symbols_within_a__with__block_will_be_resolved_to__any__ = 200] =
      "All_symbols_within_a__with__block_will_be_resolved_to__any__";

    a[a.Import_declarations_in_an_internal_module_cannot_reference_an_external_module = 201] =
      "Import_declarations_in_an_internal_module_cannot_reference_an_external_module";

    a[a.Class__0__declares_interface__1__but_does_not_implement_it__NL__2 = 202] =
      "Class__0__declares_interface__1__but_does_not_implement_it__NL__2";

    a[a.Class__0__declares_class__1__but_does_not_implement_it__NL__2 = 203] =
      "Class__0__declares_class__1__but_does_not_implement_it__NL__2";

    a[a.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable__property_or_indexer = 204] =
      "The_operand_of_an_increment_or_decrement_operator_must_be_a_variable__property_or_indexer";

    a[a._this__cannot_be_referenced_in_initializers_in_a_class_body = 205] =
      "_this__cannot_be_referenced_in_initializers_in_a_class_body";

    a[a.Class__0__cannot_extend_class__1__NL__2 = 206] = "Class__0__cannot_extend_class__1__NL__2";

    a[a.Interface__0__cannot_extend_class__1__NL__2 = 207] = "Interface__0__cannot_extend_class__1__NL__2";

    a[a.Interface__0__cannot_extend_interface__1__NL__2 = 208] = "Interface__0__cannot_extend_interface__1__NL__2";

    a[a.Duplicate_overload_signature_for__0_ = 209] = "Duplicate_overload_signature_for__0_";

    a[a.Duplicate_constructor_overload_signature = 210] = "Duplicate_constructor_overload_signature";

    a[a.Duplicate_overload_call_signature = 211] = "Duplicate_overload_call_signature";

    a[a.Duplicate_overload_construct_signature = 212] = "Duplicate_overload_construct_signature";

    a[a.Overload_signature_is_not_compatible_with_function_definition = 213] =
      "Overload_signature_is_not_compatible_with_function_definition";

    a[a.Overload_signature_is_not_compatible_with_function_definition__NL__0 = 214] =
      "Overload_signature_is_not_compatible_with_function_definition__NL__0";

    a[a.Overload_signatures_must_all_be_public_or_private = 215] =
      "Overload_signatures_must_all_be_public_or_private";

    a[a.Overload_signatures_must_all_be_exported_or_local = 216] =
      "Overload_signatures_must_all_be_exported_or_local";

    a[a.Overload_signatures_must_all_be_ambient_or_non_ambient = 217] =
      "Overload_signatures_must_all_be_ambient_or_non_ambient";

    a[a.Overload_signatures_must_all_be_optional_or_required = 218] =
      "Overload_signatures_must_all_be_optional_or_required";

    a[a.Specialized_overload_signature_is_not_subtype_of_any_non_specialized_signature = 219] =
      "Specialized_overload_signature_is_not_subtype_of_any_non_specialized_signature";

    a[a._this__cannot_be_referenced_in_constructor_arguments = 220] =
      "_this__cannot_be_referenced_in_constructor_arguments";

    a[a.Static_member_cannot_be_accessed_off_an_instance_variable = 221] =
      "Static_member_cannot_be_accessed_off_an_instance_variable";

    a[a.Instance_member_cannot_be_accessed_off_a_class = 222] = "Instance_member_cannot_be_accessed_off_a_class";

    a[a.Untyped_function_calls_may_not_accept_type_arguments = 223] =
      "Untyped_function_calls_may_not_accept_type_arguments";

    a[a.Non_generic_functions_may_not_accept_type_arguments = 224] =
      "Non_generic_functions_may_not_accept_type_arguments";

    a[a.A_generic_type_may_not_reference_itself_with_its_own_type_parameters = 225] =
      "A_generic_type_may_not_reference_itself_with_its_own_type_parameters";

    a[a.Static_methods_cannot_reference_class_type_parameters = 226] =
      "Static_methods_cannot_reference_class_type_parameters";

    a[a.Value_of_type__0__is_not_callable__Did_you_mean_to_include__new___ = 227] =
      "Value_of_type__0__is_not_callable__Did_you_mean_to_include__new___";

    a[a.Rest_parameters_must_be_array_types = 228] = "Rest_parameters_must_be_array_types";

    a[a.Overload_signature_implementation_cannot_use_specialized_type = 229] =
      "Overload_signature_implementation_cannot_use_specialized_type";

    a[a.Export_assignments_may_only_be_used_in_External_modules = 230] =
      "Export_assignments_may_only_be_used_in_External_modules";

    a[a.Export_assignments_may_only_be_made_with_acceptable_kinds = 231] =
      "Export_assignments_may_only_be_made_with_acceptable_kinds";

    a[a.Only_public_instance_methods_of_the_base_class_are_accessible_via_the_super_keyword = 232] =
      "Only_public_instance_methods_of_the_base_class_are_accessible_via_the_super_keyword";

    a[a.Numeric_indexer_type___0___must_be_a_subtype_of_string_indexer_type___1__ = 233] =
      "Numeric_indexer_type___0___must_be_a_subtype_of_string_indexer_type___1__";

    a[a.Numeric_indexer_type___0___must_be_a_subtype_of_string_indexer_type___1____NL__2 = 234] =
      "Numeric_indexer_type___0___must_be_a_subtype_of_string_indexer_type___1____NL__2";

    a[a.All_numerically_named_properties_must_be_subtypes_of_numeric_indexer_type___0__ = 235] =
      "All_numerically_named_properties_must_be_subtypes_of_numeric_indexer_type___0__";

    a[a.All_numerically_named_properties_must_be_subtypes_of_numeric_indexer_type___0____NL__1 = 236] =
      "All_numerically_named_properties_must_be_subtypes_of_numeric_indexer_type___0____NL__1";

    a[a.All_named_properties_must_be_subtypes_of_string_indexer_type___0__ = 237] =
      "All_named_properties_must_be_subtypes_of_string_indexer_type___0__";

    a[a.All_named_properties_must_be_subtypes_of_string_indexer_type___0____NL__1 = 238] =
      "All_named_properties_must_be_subtypes_of_string_indexer_type___0____NL__1";

    a[a.Generic_type_references_must_include_all_type_arguments = 239] =
      "Generic_type_references_must_include_all_type_arguments";

    a[a.Type__0__is_missing_property__1__from_type__2_ = 240] = "Type__0__is_missing_property__1__from_type__2_";

    a[a.Types_of_property__0__of_types__1__and__2__are_incompatible = 241] =
      "Types_of_property__0__of_types__1__and__2__are_incompatible";

    a[a.Types_of_property__0__of_types__1__and__2__are_incompatible__NL__3 = 242] =
      "Types_of_property__0__of_types__1__and__2__are_incompatible__NL__3";

    a[a.Property__0__defined_as_private_in_type__1__is_defined_as_public_in_type__2_ = 243] =
      "Property__0__defined_as_private_in_type__1__is_defined_as_public_in_type__2_";

    a[a.Property__0__defined_as_public_in_type__1__is_defined_as_private_in_type__2_ = 244] =
      "Property__0__defined_as_public_in_type__1__is_defined_as_private_in_type__2_";

    a[a.Types__0__and__1__define_property__2__as_private = 245] =
      "Types__0__and__1__define_property__2__as_private";

    a[a.Call_signatures_of_types__0__and__1__are_incompatible = 246] =
      "Call_signatures_of_types__0__and__1__are_incompatible";

    a[a.Call_signatures_of_types__0__and__1__are_incompatible__NL__2 = 247] =
      "Call_signatures_of_types__0__and__1__are_incompatible__NL__2";

    a[a.Type__0__requires_a_call_signature__but_Type__1__lacks_one = 248] =
      "Type__0__requires_a_call_signature__but_Type__1__lacks_one";

    a[a.Construct_signatures_of_types__0__and__1__are_incompatible = 249] =
      "Construct_signatures_of_types__0__and__1__are_incompatible";

    a[a.Construct_signatures_of_types__0__and__1__are_incompatible__NL__2 = 250] =
      "Construct_signatures_of_types__0__and__1__are_incompatible__NL__2";

    a[a.Type__0__requires_a_construct_signature__but_Type__1__lacks_one = 251] =
      "Type__0__requires_a_construct_signature__but_Type__1__lacks_one";

    a[a.Index_signatures_of_types__0__and__1__are_incompatible = 252] =
      "Index_signatures_of_types__0__and__1__are_incompatible";

    a[a.Index_signatures_of_types__0__and__1__are_incompatible__NL__2 = 253] =
      "Index_signatures_of_types__0__and__1__are_incompatible__NL__2";

    a[a.Call_signature_expects__0__or_fewer_parameters = 254] = "Call_signature_expects__0__or_fewer_parameters";

    a[a.Could_not_apply_type__0__to_argument__1__which_is_of_type__2_ = 255] =
      "Could_not_apply_type__0__to_argument__1__which_is_of_type__2_";

    a[a.Class__0__defines_instance_member_accessor__1___but_extended_class__2__defines_it_as_instance_member_function =
      256] =
      "Class__0__defines_instance_member_accessor__1___but_extended_class__2__defines_it_as_instance_member_function";

    a[a.Class__0__defines_instance_member_property__1___but_extended_class__2__defines_it_as_instance_member_function =
      257] =
      "Class__0__defines_instance_member_property__1___but_extended_class__2__defines_it_as_instance_member_function";

    a[a.Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_accessor =
      258] =
      "Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_accessor";

    a[a.Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_property =
      259] =
      "Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_property";

    a[a.Types_of_static_property__0__of_class__1__and_class__2__are_incompatible = 260] =
      "Types_of_static_property__0__of_class__1__and_class__2__are_incompatible";

    a[a.Types_of_static_property__0__of_class__1__and_class__2__are_incompatible__NL__3 = 261] =
      "Types_of_static_property__0__of_class__1__and_class__2__are_incompatible__NL__3";

    a[a.Type_reference_cannot_refer_to_container__0_ = 262] = "Type_reference_cannot_refer_to_container__0_";

    a[a.Type_reference_must_refer_to_type = 263] = "Type_reference_must_refer_to_type";

    a[a.Enums_with_multiple_declarations_must_provide_an_initializer_for_the_first_enum_element = 264] =
      "Enums_with_multiple_declarations_must_provide_an_initializer_for_the_first_enum_element";

    a[a.Current_host_does_not_support__w_atch_option = 265] = "Current_host_does_not_support__w_atch_option";

    a[a.ECMAScript_target_version__0__not_supported___Using_default__1__code_generation = 266] =
      "ECMAScript_target_version__0__not_supported___Using_default__1__code_generation";

    a[a.Module_code_generation__0__not_supported___Using_default__1__code_generation = 267] =
      "Module_code_generation__0__not_supported___Using_default__1__code_generation";

    a[a.Could_not_find_file___0_ = 268] = "Could_not_find_file___0_";

    a[a.Unknown_extension_for_file___0__Only__ts_and_d_ts_extensions_are_allowed = 269] =
      "Unknown_extension_for_file___0__Only__ts_and_d_ts_extensions_are_allowed";

    a[a.A_file_cannot_have_a_reference_itself = 270] = "A_file_cannot_have_a_reference_itself";

    a[a.Cannot_resolve_referenced_file___0_ = 271] = "Cannot_resolve_referenced_file___0_";

    a[a.Cannot_resolve_imported_file___0_ = 272] = "Cannot_resolve_imported_file___0_";

    a[a.Cannot_find_the_common_subdirectory_path_for_the_input_files = 273] =
      "Cannot_find_the_common_subdirectory_path_for_the_input_files";

    a[a.Cannot_compile_dynamic_modules_when_emitting_into_single_file = 274] =
      "Cannot_compile_dynamic_modules_when_emitting_into_single_file";

    a[a.Emit_Error__0 = 275] = "Emit_Error__0";
  })(a.DiagnosticCode || (a.DiagnosticCode = {}));
  var b = a.DiagnosticCode;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  a.diagnosticMessages = {
    error_TS_0__1: {
      category: 3,
      message: "error TS{0}: {1}",
      code: 0
    },
    warning_TS_0__1: {
      category: 3,
      message: "warning TS{0}: {1}",
      code: 1
    },
    _0__NL__1_TB__2: {
      category: 3,
      message: "{0}{NL}{{1}TB}{2}",
      code: 21
    },
    _0_TB__1: {
      category: 3,
      message: "{{0}TB}{1}",
      code: 22
    },
    Unrecognized_escape_sequence: {
      category: 1,
      message: "Unrecognized escape sequence.",
      code: 1e3
    },
    Unexpected_character_0: {
      category: 1,
      message: "Unexpected character {0}.",
      code: 1001
    },
    Missing_closing_quote_character: {
      category: 1,
      message: "Missing close quote character.",
      code: 1002
    },
    Identifier_expected: {
      category: 1,
      message: "Identifier expected.",
      code: 1003
    },
    _0_keyword_expected: {
      category: 1,
      message: "'{0}' keyword expected.",
      code: 1004
    },
    _0_expected: {
      category: 1,
      message: "'{0}' expected.",
      code: 1005
    },
    Identifier_expected__0__is_a_keyword: {
      category: 1,
      message: "Identifier expected; '{0}' is a keyword.",
      code: 1006
    },
    Automatic_semicolon_insertion_not_allowed: {
      category: 1,
      message: "Automatic semicolon insertion not allowed.",
      code: 1007
    },
    Unexpected_token__0_expected: {
      category: 1,
      message: "Unexpected token; '{0}' expected.",
      code: 1008
    },
    Trailing_separator_not_allowed: {
      category: 1,
      message: "Trailing separator not allowed.",
      code: 1009
    },
    _StarSlash__expected: {
      category: 1,
      message: "'*/' expected.",
      code: 1010
    },
    _public_or_private_modifier_must_precede__static_: {
      category: 1,
      message: "'public' or 'private' modifier must precede 'static'.",
      code: 1011
    },
    Unexpected_token_: {
      category: 1,
      message: "Unexpected token.",
      code: 1012
    },
    A_catch_clause_variable_cannot_have_a_type_annotation: {
      category: 1,
      message: "A catch clause variable cannot have a type annotation.",
      code: 1013
    },
    Rest_parameter_must_be_last_in_list: {
      category: 1,
      message: "Rest parameter must be last in list.",
      code: 1014
    },
    Parameter_cannot_have_question_mark_and_initializer: {
      category: 1,
      message: "Parameter cannot have question mark and initializer.",
      code: 1015
    },
    Required_parameter_cannot_follow_optional_parameter: {
      category: 1,
      message: "Required parameter cannot follow optional parameter.",
      code: 1016
    },
    Index_signatures_cannot_have_rest_parameters: {
      category: 1,
      message: "Index signatures cannot have rest parameters.",
      code: 1017
    },
    Index_signature_parameter_cannot_have_accessibility_modifiers: {
      category: 1,
      message: "Index signature parameter cannot have accessibility modifiers.",
      code: 1018
    },
    Index_signature_parameter_cannot_have_a_question_mark: {
      category: 1,
      message: "Index signature parameter cannot have a question mark.",
      code: 1019
    },
    Index_signature_parameter_cannot_have_an_initializer: {
      category: 1,
      message: "Index signature parameter cannot have an initializer.",
      code: 1020
    },
    Index_signature_must_have_a_type_annotation: {
      category: 1,
      message: "Index signature must have a type annotation.",
      code: 1021
    },
    Index_signature_parameter_must_have_a_type_annotation: {
      category: 1,
      message: "Index signature parameter must have a type annotation.",
      code: 1022
    },
    Index_signature_parameter_type_must_be__string__or__number_: {
      category: 1,
      message: "Index signature parameter type must be 'string' or 'number'.",
      code: 1023
    },
    _extends__clause_already_seen: {
      category: 1,
      message: "'extends' clause already seen.",
      code: 1024
    },
    _extends__clause_must_precede__implements__clause: {
      category: 1,
      message: "'extends' clause must precede 'implements' clause.",
      code: 1025
    },
    Class_can_only_extend_single_type: {
      category: 1,
      message: "Class can only extend single type.",
      code: 1026
    },
    _implements__clause_already_seen: {
      category: 1,
      message: "'implements' clause already seen.",
      code: 1027
    },
    Accessibility_modifier_already_seen: {
      category: 1,
      message: "Accessibility modifier already seen.",
      code: 1028
    },
    _0__modifier_must_precede__1__modifier: {
      category: 1,
      message: "'{0}' modifier must precede '{1}' modifier.",
      code: 1029
    },
    _0__modifier_already_seen: {
      category: 1,
      message: "'{0}' modifier already seen.",
      code: 1030
    },
    _0__modifier_cannot_appear_on_a_class_element: {
      category: 1,
      message: "'{0}' modifier cannot appear on a class element.",
      code: 1031
    },
    Interface_declaration_cannot_have__implements__clause: {
      category: 1,
      message: "Interface declaration cannot have 'implements' clause.",
      code: 1032
    },
    _super__invocation_cannot_have_type_arguments: {
      category: 1,
      message: "'super' invocation cannot have type arguments.",
      code: 1034
    },
    Non_ambient_modules_cannot_use_quoted_names: {
      category: 1,
      message: "Non ambient modules cannot use quoted names.",
      code: 1035
    },
    Statements_are_not_allowed_in_ambient_contexts: {
      category: 1,
      message: "Statements are not allowed in ambient contexts.",
      code: 1036
    },
    Implementations_are_not_allowed_in_ambient_contexts: {
      category: 1,
      message: "Implementations are not allowed in ambient contexts.",
      code: 1037
    },
    _declare__modifier_not_allowed_for_code_already_in_an_ambient_context: {
      category: 1,
      message: "'declare' modifier not allowed for code already in an ambient context.",
      code: 1038
    },
    Initializers_are_not_allowed_in_ambient_contexts: {
      category: 1,
      message: "Initializers are not allowed in ambient contexts.",
      code: 1039
    },
    Overload_and_ambient_signatures_cannot_specify_parameter_properties: {
      category: 1,
      message: "Overload and ambient signatures cannot specify parameter properties.",
      code: 1040
    },
    Function_implementation_expected: {
      category: 1,
      message: "Function implementation expected.",
      code: 1041
    },
    Constructor_implementation_expected: {
      category: 1,
      message: "Constructor implementation expected.",
      code: 1042
    },
    Function_overload_name_must_be__0_: {
      category: 1,
      message: "Function overload name must be '{0}'.",
      code: 1043
    },
    _0__modifier_cannot_appear_on_a_module_element: {
      category: 1,
      message: "'{0}' modifier cannot appear on a module element.",
      code: 1044
    },
    _declare__modifier_cannot_appear_on_an_interface_declaration: {
      category: 1,
      message: "'declare' modifier cannot appear on an interface declaration.",
      code: 1045
    },
    _declare__modifier_required_for_top_level_element: {
      category: 1,
      message: "'declare' modifier required for top level element.",
      code: 1046
    },
    Rest_parameter_cannot_be_optional: {
      category: 1,
      message: "Rest parameter cannot be optional.",
      code: 1047
    },
    Rest_parameter_cannot_have_initializer: {
      category: 1,
      message: "Rest parameter cannot have initializer.",
      code: 1048
    },
    _set__accessor_must_have_only_one_parameter: {
      category: 1,
      message: "'set' accessor must have one and only one parameter.",
      code: 1049
    },
    _set__accessor_parameter_cannot_have_accessibility_modifier: {
      category: 1,
      message: "'set' accessor parameter cannot have accessibility modifier.",
      code: 1050
    },
    _set__accessor_parameter_cannot_be_optional: {
      category: 1,
      message: "'set' accessor parameter cannot be optional.",
      code: 1051
    },
    _set__accessor_parameter_cannot_have_initializer: {
      category: 1,
      message: "'set' accessor parameter cannot have initializer.",
      code: 1052
    },
    _set__accessor_cannot_have_rest_parameter: {
      category: 1,
      message: "'set' accessor cannot have rest parameter.",
      code: 1053
    },
    _get__accessor_cannot_have_parameters: {
      category: 1,
      message: "'get' accessor cannot have parameters.",
      code: 1054
    },
    Modifiers_cannot_appear_here: {
      category: 1,
      message: "Modifiers cannot appear here.",
      code: 1055
    },
    Accessors_are_only_available_when_targeting_EcmaScript5_and_higher: {
      category: 1,
      message: "Accessors are only when targeting EcmaScript5 and higher.",
      code: 1056
    },
    Class_name_cannot_be__0_: {
      category: 1,
      message: "Class name cannot be '{0}'.",
      code: 1057
    },
    Interface_name_cannot_be__0_: {
      category: 1,
      message: "Interface name cannot be '{0}'.",
      code: 1058
    },
    Enum_name_cannot_be__0_: {
      category: 1,
      message: "Enum name cannot be '{0}'.",
      code: 1059
    },
    Module_name_cannot_be__0_: {
      category: 1,
      message: "Module name cannot be '{0}'.",
      code: 1060
    },
    Enum_member_must_have_initializer: {
      category: 1,
      message: "Enum member must have initializer.",
      code: 1061
    },
    _module_______is_deprecated__Use__require_______instead: {
      category: 0,
      message: "'module(...)' is deprecated. Use 'require(...)' instead.",
      code: 1062
    },
    Export_assignments_cannot_be_used_in_internal_modules: {
      category: 1,
      message: "Export assignments cannot be used in internal modules.",
      code: 1063
    },
    Export_assignment_not_allowed_in_module_with_exported_element: {
      category: 1,
      message: "Export assignment not allowed in module with exported element.",
      code: 1064
    },
    Module_cannot_have_multiple_export_assignments: {
      category: 1,
      message: "Module cannot have multiple export assignments.",
      code: 1065
    },
    Duplicate_identifier__0_: {
      category: 1,
      message: "Duplicate identifier '{0}'.",
      code: 2e3
    },
    The_name__0__does_not_exist_in_the_current_scope: {
      category: 1,
      message: "The name '{0}' does not exist in the current scope.",
      code: 2001
    },
    The_name__0__does_not_refer_to_a_value: {
      category: 1,
      message: "The name '{0}' does not refer to a value.",
      code: 2002
    },
    Keyword__super__can_only_be_used_inside_a_class_instance_method: {
      category: 1,
      message: "Keyword 'super' can only be used inside a class instance method.",
      code: 2003
    },
    The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer: {
      category: 1,
      message: "The left-hand side of an assignment expression must be a variable, property or indexer.",
      code: 2004
    },
    Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__: {
      category: 1,
      message: "Value of type '{0}' is not callable. Did you mean to include 'new'?",
      code: 2005
    },
    Value_of_type__0__is_not_callable: {
      category: 1,
      message: "Value of type '{0}' is not callable.",
      code: 2006
    },
    Value_of_type__0__is_not_newable: {
      category: 1,
      message: "Value of type '{0}' is not newable.",
      code: 2007
    },
    Value_of_type__0__is_not_indexable_by_type__1_: {
      category: 1,
      message: "Value of type '{0}' is not indexable by type '{1}'.",
      code: 2008
    },
    Operator__0__cannot_be_applied_to_types__1__and__2_: {
      category: 1,
      message: "Operator '{0}' cannot be applied to types '{1}' and '{2}'.",
      code: 2009
    },
    Operator__0__cannot_be_applied_to_types__1__and__2__3: {
      category: 1,
      message: "Operator '{0}' cannot be applied to types '{1}' and '{2}': {3}",
      code: 2010
    },
    Cannot_convert__0__to__1_: {
      category: 1,
      message: "Cannot convert '{0}' to '{1}'.",
      code: 2011
    },
    Cannot_convert__0__to__1__NL__2: {
      category: 1,
      message: "Cannot convert '{0}' to '{1}':{NL}{2}",
      code: 2012
    },
    Expected_var__class__interface__or_module: {
      category: 1,
      message: "Expected var, class, interface, or module.",
      code: 2013
    },
    Operator__0__cannot_be_applied_to_type__1_: {
      category: 1,
      message: "Operator '{0}' cannot be applied to type '{1}'.",
      code: 2014
    },
    Getter__0__already_declared: {
      category: 1,
      message: "Getter '{0}' already declared.",
      code: 2015
    },
    Setter__0__already_declared: {
      category: 1,
      message: "Setter '{0}' already declared.",
      code: 2016
    },
    Accessor_cannot_have_type_parameters: {
      category: 1,
      message: "Accessors cannot have type parameters.",
      code: 2017
    },
    Exported_class__0__extends_private_class__1_: {
      category: 1,
      message: "Exported class '{0}' extends private class '{1}'.",
      code: 2018
    },
    Exported_class__0__implements_private_interface__1_: {
      category: 1,
      message: "Exported class '{0}' implements private interface '{1}'.",
      code: 2019
    },
    Exported_interface__0__extends_private_interface__1_: {
      category: 1,
      message: "Exported interface '{0}' extends private interface '{1}'.",
      code: 2020
    },
    Exported_class__0__extends_class_from_inaccessible_module__1_: {
      category: 1,
      message: "Exported class '{0}' extends class from inaccessible module {1}.",
      code: 2021
    },
    Exported_class__0__implements_interface_from_inaccessible_module__1_: {
      category: 1,
      message: "Exported class '{0}' implements interface from inaccessible module {1}.",
      code: 2022
    },
    Exported_interface__0__extends_interface_from_inaccessible_module__1_: {
      category: 1,
      message: "Exported interface '{0}' extends interface from inaccessible module {1}.",
      code: 2023
    },
    Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Public static property '{0}' of exported class has or is using private type '{1}'.",
      code: 2024
    },
    Public_property__0__of__exported_class_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Public property '{0}' of exported class has or is using private type '{1}'.",
      code: 2025
    },
    Property__0__of__exported_interface_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Property '{0}' of exported interface has or is using private type '{1}'.",
      code: 2026
    },
    Exported_variable__0__has_or_is_using_private_type__1_: {
      category: 1,
      message: "Exported variable '{0}' has or is using private type '{1}'.",
      code: 2027
    },
    Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Public static property '{0}' of exported class is using inaccessible module {1}.",
      code: 2028
    },
    Public_property__0__of__exported_class_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Public property '{0}' of exported class is using inaccessible module {1}.",
      code: 2029
    },
    Property__0__of__exported_interface_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Property '{0}' of exported interface is using inaccessible module {1}.",
      code: 2030
    },
    Exported_variable__0__is_using_inaccessible_module__1_: {
      category: 1,
      message: "Exported variable '{0}' is using inaccessible module {1}.",
      code: 2031
    },
    Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of constructor from exported class has or is using private type '{1}'.",
      code: 2032
    },
    Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of public static property setter from exported class has or is using private type '{1}'.",
      code: 2033
    },
    Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of public property setter from exported class has or is using private type '{1}'.",
      code: 2034
    },
    Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.",
      code: 2035
    },
    Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of call signature from exported interface has or is using private type '{1}'.",
      code: 2036
    },
    Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of public static method from exported class has or is using private type '{1}'.",
      code: 2037
    },
    Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of public method from exported class has or is using private type '{1}'.",
      code: 2038
    },
    Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of method from exported interface has or is using private type '{1}'.",
      code: 2039
    },
    Parameter__0__of_exported_function_has_or_is_using_private_type__1_: {
      category: 1,
      message: "Parameter '{0}' of exported function has or is using private type '{1}'.",
      code: 2040
    },
    Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of constructor from exported class is using inaccessible module {1}.",
      code: 2041
    },
    Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of public static property setter from exported class is using inaccessible module {1}.",
      code: 2042
    },
    Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of public property setter from exported class is using inaccessible module {1}.",
      code: 2043
    },
    Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.",
      code: 2044
    },
    Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of call signature from exported interface is using inaccessible module {1}",
      code: 2045
    },
    Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of public static method from exported class is using inaccessible module {1}.",
      code: 2046
    },
    Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of public method from exported class is using inaccessible module {1}.",
      code: 2047
    },
    Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of method from exported interface is using inaccessible module {1}.",
      code: 2048
    },
    Parameter__0__of_exported_function_is_using_inaccessible_module__1_: {
      category: 1,
      message: "Parameter '{0}' of exported function is using inaccessible module {1}.",
      code: 2049
    },
    Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of public static property getter from exported class has or is using private type '{0}'.",
      code: 2050
    },
    Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of public property getter from exported class has or is using private type '{0}'.",
      code: 2051
    },
    Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of constructor signature from exported interface has or is using private type '{0}'.",
      code: 2052
    },
    Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of call signature from exported interface has or is using private type '{0}'.",
      code: 2053
    },
    Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of index signature from exported interface has or is using private type '{0}'.",
      code: 2054
    },
    Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of public static method from exported class has or is using private type '{0}'.",
      code: 2055
    },
    Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of public method from exported class has or is using private type '{0}'.",
      code: 2056
    },
    Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of method from exported interface has or is using private type '{0}'.",
      code: 2057
    },
    Return_type_of_exported_function_has_or_is_using_private_type__0_: {
      category: 1,
      message: "Return type of exported function has or is using private type '{0}'.",
      code: 2058
    },
    Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of public static property getter from exported class is using inaccessible module {0}.",
      code: 2059
    },
    Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of public property getter from exported class is using inaccessible module {0}.",
      code: 2060
    },
    Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of constructor signature from exported interface is using inaccessible module {0}.",
      code: 2061
    },
    Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of call signature from exported interface is using inaccessible module {0}.",
      code: 2062
    },
    Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of index signature from exported interface is using inaccessible module {0}.",
      code: 2063
    },
    Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of public static method from exported class is using inaccessible module {0}.",
      code: 2064
    },
    Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of public method from exported class is using inaccessible module {0}.",
      code: 2065
    },
    Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of method from exported interface is using inaccessible module {0}.",
      code: 2066
    },
    Return_type_of_exported_function_is_using_inaccessible_module__0_: {
      category: 1,
      message: "Return type of exported function is using inaccessible module {0}.",
      code: 2067
    },
    _new_T____cannot_be_used_to_create_an_array__Use__new_Array_T_____instead: {
      category: 1,
      message: "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.",
      code: 2068
    },
    A_parameter_list_must_follow_a_generic_type_argument_list______expected: {
      category: 1,
      message: "A parameter list must follow a generic type argument list. '(' expected.",
      code: 2069
    },
    Multiple_constructor_implementations_are_not_allowed: {
      category: 1,
      message: "Multiple constructor implementations are not allowed.",
      code: 2070
    },
    Unable_to_resolve_external_module__0_: {
      category: 1,
      message: "Unable to resolve external module '{0}'.",
      code: 2071
    },
    Module_cannot_be_aliased_to_a_non_module_type: {
      category: 1,
      message: "Module cannot be aliased to a non-module type.",
      code: 2072
    },
    A_class_may_only_extend_another_class: {
      category: 1,
      message: "A class may only extend another class.",
      code: 2073
    },
    A_class_may_only_implement_another_class_or_interface: {
      category: 1,
      message: "A class may only implement another class or interface.",
      code: 2074
    },
    An_interface_may_only_extend_another_class_or_interface: {
      category: 1,
      message: "An interface may only extend another class or interface.",
      code: 2075
    },
    An_interface_cannot_implement_another_type: {
      category: 1,
      message: "An interface cannot implement another type.",
      code: 2076
    },
    Unable_to_resolve_type: {
      category: 1,
      message: "Unable to resolve type.",
      code: 2077
    },
    Unable_to_resolve_type_of__0_: {
      category: 1,
      message: "Unable to resolve type of '{0}'.",
      code: 2078
    },
    Unable_to_resolve_type_parameter_constraint: {
      category: 1,
      message: "Unable to resolve type parameter constraint.",
      code: 2079
    },
    Type_parameter_constraint_cannot_be_a_primitive_type: {
      category: 1,
      message: "Type parameter constraint cannot be a primitive type.",
      code: 2080
    },
    Supplied_parameters_do_not_match_any_signature_of_call_target: {
      category: 1,
      message: "Supplied parameters do not match any signature of call target.",
      code: 2081
    },
    Supplied_parameters_do_not_match_any_signature_of_call_target__NL__0: {
      category: 1,
      message: "Supplied parameters do not match any signature of call target:{NL}{0}",
      code: 2082
    },
    Invalid__new__expression: {
      category: 1,
      message: "Invalid 'new' expression.",
      code: 2083
    },
    Call_signatures_used_in_a__new__expression_must_have_a__void__return_type: {
      category: 1,
      message: "Call signatures used in a 'new' expression must have a 'void' return type.",
      code: 2084
    },
    Could_not_select_overload_for__new__expression: {
      category: 1,
      message: "Could not select overload for 'new' expression.",
      code: 2085
    },
    Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_: {
      category: 1,
      message: "Type '{0}' does not satisfy the constraint '{1}' for type parameter '{2}'.",
      code: 2086
    },
    Could_not_select_overload_for__call__expression: {
      category: 1,
      message: "Could not select overload for 'call' expression.",
      code: 2087
    },
    Unable_to_invoke_type_with_no_call_signatures: {
      category: 1,
      message: "Unable to invoke type with no call signatures.",
      code: 2088
    },
    Calls_to__super__are_only_valid_inside_a_class: {
      category: 1,
      message: "Calls to 'super' are only valid inside a class.",
      code: 2089
    },
    Generic_type__0__requires_1_type_argument_s_: {
      category: 1,
      message: "Generic type '{0}' requires {1} type argument(s).",
      code: 2090
    },
    Type_of_conditional_expression_cannot_be_determined__Best_common_type_could_not_be_found_between__0__and__1_: {
      category: 1,
      message: "Type of conditional expression cannot be determined. Best common type could not be found between '{0}' and '{1}'.",
      code: 2091
    },
    Type_of_array_literal_cannot_be_determined__Best_common_type_could_not_be_found_for_array_elements: {
      category: 1,
      message: "Type of array literal cannot be determined. Best common type could not be found for array elements.",
      code: 2092
    },
    Could_not_find_enclosing_symbol_for_dotted_name__0_: {
      category: 1,
      message: "Could not find enclosing symbol for dotted name '{0}'.",
      code: 2093
    },
    The_property__0__does_not_exist_on_value_of_type__1__: {
      category: 1,
      message: "The property '{0}' does not exist on value of type '{1}'.",
      code: 2094
    },
    Could_not_find_symbol__0_: {
      category: 1,
      message: "Could not find symbol '{0}'.",
      code: 2095
    },
    _get__and__set__accessor_must_have_the_same_type: {
      category: 1,
      message: "'get' and 'set' accessor must have the same type.",
      code: 2096
    },
    _this__cannot_be_referenced_in_current_location: {
      category: 1,
      message: "'this' cannot be referenced in current location.",
      code: 2097
    },
    Use_of_deprecated__bool__type__Use__boolean__instead: {
      category: 0,
      message: "Use of deprecated type 'bool'. Use 'boolean' instead.",
      code: 2098
    },
    Static_methods_cannot_reference_class_type_parameters: {
      category: 1,
      message: "Static methods cannot reference class type parameters.",
      code: 2099
    },
    Class__0__is_recursively_referenced_as_a_base_type_of_itself: {
      category: 1,
      message: "Class '{0}' is recursively referenced as a base type of itself.",
      code: 2100
    },
    Interface__0__is_recursively_referenced_as_a_base_type_of_itself: {
      category: 1,
      message: "Interface '{0}' is recursively referenced as a base type of itself.",
      code: 2101
    },
    _super__property_access_is_permitted_only_in_a_constructor__instance_member_function__or_instance_member_accessor_of_a_derived_class: {
      category: 1,
      message: "'super' property access is permitted only in a constructor, instance member function, or instance member accessor of a derived class.",
      code: 2102
    },
    _super__cannot_be_referenced_in_non_derived_classes: {
      category: 1,
      message: "'super' cannot be referenced in non-derived classes.",
      code: 2103
    },
    A__super__call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_intialized_properties_or_has_parameter_properties: {
      category: 1,
      message: "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.",
      code: 2104
    },
    Constructors_for_derived_classes_must_contain_a__super__call: {
      category: 1,
      message: "Constructors for derived classes must contain a 'super' call.",
      code: 2105
    },
    Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors: {
      category: 1,
      message: "Super calls are not permitted outside constructors or in local functions inside constructors.",
      code: 2106
    },
    _0_1__is_inaccessible: {
      category: 1,
      message: "'{0}.{1}' is inaccessible.",
      code: 2107
    },
    _this__cannot_be_referenced_within_module_bodies: {
      category: 1,
      message: "'this' cannot be referenced within module bodies.",
      code: 2108
    },
    _this__must_only_be_used_inside_a_function_or_script_context: {
      category: 1,
      message: "'this' must only be used inside a function or script context.",
      code: 2109
    },
    Invalid__addition__expression___types_do_not_agree: {
      category: 1,
      message: "Invalid '+' expression - types not known to support the addition operator.",
      code: 2111
    },
    The_right_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type: {
      category: 1,
      message: "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.",
      code: 2112
    },
    The_left_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type: {
      category: 1,
      message: "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.",
      code: 2113
    },
    The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type__any____number__or_an_enum_type: {
      category: 1,
      message: "The type of a unary arithmetic operation operand must be of type 'any', 'number' or an enum type.",
      code: 2114
    },
    Variable_declarations_for_for_in_expressions_cannot_contain_a_type_annotation: {
      category: 1,
      message: "Variable declarations for for/in expressions cannot contain a type annotation.",
      code: 2115
    },
    Variable_declarations_for_for_in_expressions_must_be_of_types__string__or__any_: {
      category: 1,
      message: "Variable declarations for for/in expressions must be of types 'string' or 'any'.",
      code: 2116
    },
    The_right_operand_of_a_for_in_expression_must_be_of_type__any____an_object_type_or_a_type_parameter: {
      category: 1,
      message: "The right operand of a for/in expression must be of type 'any', an object type or a type parameter.",
      code: 2117
    },
    The_left_hand_side_of_an__in__expression_must_be_of_types__string__or__any_: {
      category: 1,
      message: "The left-hand side of an 'in' expression must be of types 'string' or 'any'.",
      code: 2118
    },
    The_right_hand_side_of_an__in__expression_must_be_of_type__any___an_object_type_or_a_type_parameter: {
      category: 1,
      message: "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter.",
      code: 2119
    },
    The_left_hand_side_of_an__instanceOf__expression_must_be_of_type__any___an_object_type_or_a_type_parameter: {
      category: 1,
      message: "The left-hand side of an 'instanceOf' expression must be of type 'any', an object type or a type parameter.",
      code: 2120
    },
    The_right_hand_side_of_an__instanceOf__expression_must_be_of_type__any__or_a_subtype_of_the__Function__interface_type: {
      category: 1,
      message: "The right-hand side of an 'instanceOf' expression must be of type 'any' or a subtype of the 'Function' interface type.",
      code: 2121
    },
    Setters_cannot_return_a_value: {
      category: 1,
      message: "Setters cannot return a value.",
      code: 2122
    },
    Tried_to_set_variable_type_to_module_type__0__: {
      category: 1,
      message: "Tried to set variable type to container type '{0}'.",
      code: 2123
    },
    Tried_to_set_variable_type_to_uninitialized_module_type__0__: {
      category: 1,
      message: "Tried to set variable type to uninitialized module type '{0}'.",
      code: 2124
    },
    Function__0__declared_a_non_void_return_type__but_has_no_return_expression: {
      category: 1,
      message: "Function {0} declared a non-void return type, but has no return expression.",
      code: 2125
    },
    Getters_must_return_a_value: {
      category: 1,
      message: "Getters must return a value.",
      code: 2126
    },
    Getter_and_setter_accessors_do_not_agree_in_visibility: {
      category: 1,
      message: "Getter and setter accessors do not agree in visibility.",
      code: 2127
    },
    Invalid_left_hand_side_of_assignment_expression: {
      category: 1,
      message: "Invalid left-hand side of assignment expression.",
      code: 2130
    },
    Function_declared_a_non_void_return_type__but_has_no_return_expression: {
      category: 1,
      message: "Function declared a non-void return type, but has no return expression.",
      code: 2131
    },
    Cannot_resolve_return_type_reference: {
      category: 1,
      message: "Cannot resolve return type reference.",
      code: 2132
    },
    Constructors_cannot_have_a_return_type_of__void_: {
      category: 1,
      message: "Constructors cannot have a return type of 'void'.",
      code: 2133
    },
    Subsequent_variable_declarations_must_have_the_same_type___Variable__0__must_be_of_type__1___but_here_has_type___2_: {
      category: 1,
      message: "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'",
      code: 2134
    },
    All_symbols_within_a__with__block_will_be_resolved_to__any__: {
      category: 1,
      message: "All symbols within a with block will be resolved to 'any'.",
      code: 2135
    },
    Import_declarations_in_an_internal_module_cannot_reference_an_external_module: {
      category: 1,
      message: "Import declarations in an internal module cannot reference an external module.",
      code: 2136
    },
    Class__0__declares_interface__1__but_does_not_implement_it__NL__2: {
      category: 1,
      message: "Class {0} declares interface {1} but does not implement it:{NL}{2}",
      code: 2137
    },
    Class__0__declares_class__1__but_does_not_implement_it__NL__2: {
      category: 1,
      message: "Class {0} declares class {1} as an implemented interface but does not implement it:{NL}{2}",
      code: 2138
    },
    The_operand_of_an_increment_or_decrement_operator_must_be_a_variable__property_or_indexer: {
      category: 1,
      message: "The operand of an increment or decrement operator must be a variable, property or indexer.",
      code: 2139
    },
    _this__cannot_be_referenced_in_initializers_in_a_class_body: {
      category: 1,
      message: "'this' cannot be referenced in initializers in a class body.",
      code: 2140
    },
    Class__0__cannot_extend_class__1__NL__2: {
      category: 1,
      message: "Class '{0}' cannot extend class '{1}':{NL}{2}",
      code: 2141
    },
    Interface__0__cannot_extend_class__1__NL__2: {
      category: 1,
      message: "Interface '{0}' cannot extend class '{1}':{NL}{2}",
      code: 2142
    },
    Interface__0__cannot_extend_interface__1__NL__2: {
      category: 1,
      message: "Interface '{0}' cannot extend interface '{1}':{NL}{2}",
      code: 2143
    },
    Duplicate_overload_signature_for__0_: {
      category: 1,
      message: "Duplicate overload signature for '{0}'.",
      code: 2144
    },
    Duplicate_constructor_overload_signature: {
      category: 1,
      message: "Duplicate constructor overload signature.",
      code: 2145
    },
    Duplicate_overload_call_signature: {
      category: 1,
      message: "Duplicate overload call signature.",
      code: 2146
    },
    Duplicate_overload_construct_signature: {
      category: 1,
      message: "Duplicate overload construct signature.",
      code: 2147
    },
    Overload_signature_is_not_compatible_with_function_definition: {
      category: 1,
      message: "Overload signature is not compatible with function definition.",
      code: 2148
    },
    Overload_signature_is_not_compatible_with_function_definition__NL__0: {
      category: 1,
      message: "Overload signature is not compatible with function definition:{NL}{0}",
      code: 2149
    },
    Overload_signatures_must_all_be_public_or_private: {
      category: 1,
      message: "Overload signatures must all be public or private.",
      code: 2150
    },
    Overload_signatures_must_all_be_exported_or_local: {
      category: 1,
      message: "Overload signatures must all be exported or local.",
      code: 2151
    },
    Overload_signatures_must_all_be_ambient_or_non_ambient: {
      category: 1,
      message: "Overload signatures must all be ambient or non-ambient.",
      code: 2152
    },
    Overload_signatures_must_all_be_optional_or_required: {
      category: 1,
      message: "Overload signatures must all be optional or required.",
      code: 2153
    },
    Specialized_overload_signature_is_not_subtype_of_any_non_specialized_signature: {
      category: 1,
      message: "Specialized overload signature is not subtype of any non-specialized signature.",
      code: 2154
    },
    _this__cannot_be_referenced_in_constructor_arguments: {
      category: 1,
      message: "'this' cannot be referenced in constructor arguments.",
      code: 2155
    },
    Static_member_cannot_be_accessed_off_an_instance_variable: {
      category: 1,
      message: "Static member cannot be accessed off an instance variable.",
      code: 2156
    },
    Instance_member_cannot_be_accessed_off_a_class: {
      category: 1,
      message: "Instance member cannot be accessed off a class.",
      code: 2157
    },
    Untyped_function_calls_may_not_accept_type_arguments: {
      category: 1,
      message: "Untyped function calls may not accept type arguments.",
      code: 2158
    },
    Non_generic_functions_may_not_accept_type_arguments: {
      category: 1,
      message: "Non-generic functions may not accept type arguments.",
      code: 2159
    },
    A_generic_type_may_not_reference_itself_with_its_own_type_parameters: {
      category: 1,
      message: "A generic type may not reference itself with a wrapped form of its own type parameters.",
      code: 2160
    },
    Value_of_type__0__is_not_callable__Did_you_mean_to_include__new___: {
      category: 1,
      message: "Value of type '{0}' is not callable. Did you mean to include 'new'?",
      code: 2161
    },
    Rest_parameters_must_be_array_types: {
      category: 1,
      message: "Rest parameters must be array types.",
      code: 2162
    },
    Overload_signature_implementation_cannot_use_specialized_type: {
      category: 1,
      message: "Overload signature implementation cannot use specialized type.",
      code: 2163
    },
    Export_assignments_may_only_be_used_in_External_modules: {
      category: 1,
      message: "Export assignments may only be used at the top-level of external modules",
      code: 2164
    },
    Export_assignments_may_only_be_made_with_acceptable_kinds: {
      category: 1,
      message: "Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules",
      code: 2165
    },
    Only_public_instance_methods_of_the_base_class_are_accessible_via_the_super_keyword: {
      category: 1,
      message: "Only public instance methods of the base class are accessible via the super keyword",
      code: 2166
    },
    Numeric_indexer_type___0___must_be_a_subtype_of_string_indexer_type___1__: {
      category: 1,
      message: "Numeric indexer type '{0}' must be a subtype of string indexer type '{1}'",
      code: 2167
    },
    Numeric_indexer_type___0___must_be_a_subtype_of_string_indexer_type___1____NL__2: {
      category: 1,
      message: "Numeric indexer type '{0}' must be a subtype of string indexer type '{1}':{NL}{2}",
      code: 2168
    },
    All_numerically_named_properties_must_be_subtypes_of_numeric_indexer_type___0__: {
      category: 1,
      message: "All numerically named properties must be subtypes of numeric indexer type '{0}'",
      code: 2169
    },
    All_numerically_named_properties_must_be_subtypes_of_numeric_indexer_type___0____NL__1: {
      category: 1,
      message: "All numerically named properties must be subtypes of numeric indexer type '{0}':{NL}{1}",
      code: 2170
    },
    All_named_properties_must_be_subtypes_of_string_indexer_type___0__: {
      category: 1,
      message: "All named properties must be subtypes of string indexer type '{0}'",
      code: 2171
    },
    All_named_properties_must_be_subtypes_of_string_indexer_type___0____NL__1: {
      category: 1,
      message: "All named properties must be subtypes of string indexer type '{0}':{NL}{1}",
      code: 2172
    },
    Generic_type_references_must_include_all_type_arguments: {
      category: 1,
      message: "Generic type references must include all type arguments",
      code: 2173
    },
    Type__0__is_missing_property__1__from_type__2_: {
      category: 3,
      message: "Type '{0}' is missing property '{1}' from type '{2}'.",
      code: 4e3
    },
    Types_of_property__0__of_types__1__and__2__are_incompatible: {
      category: 3,
      message: "Types of property '{0}' of types '{1}' and '{2}' are incompatible.",
      code: 4001
    },
    Types_of_property__0__of_types__1__and__2__are_incompatible__NL__3: {
      category: 3,
      message: "Types of property '{0}' of types '{1}' and '{2}' are incompatible:{NL}{3}",
      code: 4002
    },
    Property__0__defined_as_private_in_type__1__is_defined_as_public_in_type__2_: {
      category: 3,
      message: "Property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.",
      code: 4003
    },
    Property__0__defined_as_public_in_type__1__is_defined_as_private_in_type__2_: {
      category: 3,
      message: "Property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.",
      code: 4004
    },
    Types__0__and__1__define_property__2__as_private: {
      category: 3,
      message: "Types '{0}' and '{1}' define property '{2}' as private.",
      code: 4005
    },
    Call_signatures_of_types__0__and__1__are_incompatible: {
      category: 3,
      message: "Call signatures of types '{0}' and '{1}' are incompatible.",
      code: 4006
    },
    Call_signatures_of_types__0__and__1__are_incompatible__NL__2: {
      category: 3,
      message: "Call signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
      code: 4007
    },
    Type__0__requires_a_call_signature__but_Type__1__lacks_one: {
      category: 3,
      message: "Type '{0}' requires a call signature, but type '{1}' lacks one.",
      code: 4008
    },
    Construct_signatures_of_types__0__and__1__are_incompatible: {
      category: 3,
      message: "Construct signatures of types '{0}' and '{1}' are incompatible.",
      code: 4009
    },
    Construct_signatures_of_types__0__and__1__are_incompatible__NL__2: {
      category: 3,
      message: "Construct signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
      code: 40010
    },
    Type__0__requires_a_construct_signature__but_Type__1__lacks_one: {
      category: 3,
      message: "Type '{0}' requires a construct signature, but type '{1}' lacks one.",
      code: 4011
    },
    Index_signatures_of_types__0__and__1__are_incompatible: {
      category: 3,
      message: "Index signatures of types '{0}' and '{1}' are incompatible.",
      code: 4012
    },
    Index_signatures_of_types__0__and__1__are_incompatible__NL__2: {
      category: 3,
      message: "Index signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
      code: 4013
    },
    Call_signature_expects__0__or_fewer_parameters: {
      category: 3,
      message: "Call signature expects {0} or fewer parameters.",
      code: 4014
    },
    Could_not_apply_type__0__to_argument__1__which_is_of_type__2_: {
      category: 3,
      message: "Could not apply type'{0}' to argument {1} which is of type '{2}'.",
      code: 4015
    },
    Class__0__defines_instance_member_accessor__1___but_extended_class__2__defines_it_as_instance_member_function: {
      category: 3,
      message: "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.",
      code: 4016
    },
    Class__0__defines_instance_member_property__1___but_extended_class__2__defines_it_as_instance_member_function: {
      category: 3,
      message: "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.",
      code: 4017
    },
    Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_accessor: {
      category: 3,
      message: "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.",
      code: 4018
    },
    Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_property: {
      category: 3,
      message: "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.",
      code: 4019
    },
    Types_of_static_property__0__of_class__1__and_class__2__are_incompatible: {
      category: 3,
      message: "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible.",
      code: 4020
    },
    Types_of_static_property__0__of_class__1__and_class__2__are_incompatible__NL__3: {
      category: 3,
      message: "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible:{NL}{3}",
      code: 4021
    },
    Type_reference_cannot_refer_to_container__0_: {
      category: 1,
      message: "Type reference cannot refer to container '{0}'.",
      code: 4022
    },
    Type_reference_must_refer_to_type: {
      category: 1,
      message: "Type reference cannot must refer to type.",
      code: 4023
    },
    Enums_with_multiple_declarations_must_provide_an_initializer_for_the_first_enum_element: {
      category: 1,
      message: "Enums with multiple declarations must provide an initializer for the first enum element.",
      code: 4024
    },
    Current_host_does_not_support__w_atch_option: {
      category: 1,
      message: "Current host does not support -w[atch] option.",
      code: 5001
    },
    ECMAScript_target_version__0__not_supported___Using_default__1__code_generation: {
      category: 0,
      message: "ECMAScript target version '{0}' not supported.  Using default '{1}' code generation.",
      code: 5002
    },
    Module_code_generation__0__not_supported___Using_default__1__code_generation: {
      category: 0,
      message: "Module code generation '{0}' not supported.  Using default '{1}' code generation.",
      code: 5003
    },
    Could_not_find_file___0_: {
      category: 1,
      message: "Could not find file: '{0}'.",
      code: 5004
    },
    Unknown_extension_for_file___0__Only__ts_and_d_ts_extensions_are_allowed: {
      category: 1,
      message: "Unknown extension for file: '{0}'. Only .ts and .d.ts extensions are allowed.",
      code: 5005
    },
    A_file_cannot_have_a_reference_itself: {
      category: 1,
      message: "A file cannot have a reference itself.",
      code: 5006
    },
    Cannot_resolve_referenced_file___0_: {
      category: 1,
      message: "Cannot resolve referenced file: '{0}'.",
      code: 5007
    },
    Cannot_resolve_imported_file___0_: {
      category: 1,
      message: "Cannot resolve imported file: '{0}'.",
      code: 5008
    },
    Cannot_find_the_common_subdirectory_path_for_the_input_files: {
      category: 1,
      message: "Cannot find the common subdirectory path for the input files",
      code: 5009
    },
    Cannot_compile_dynamic_modules_when_emitting_into_single_file: {
      category: 1,
      message: "Cannot compile dynamic modules when emitting into single file",
      code: 5010
    },
    Emit_Error__0: {
      category: 1,
      message: "Emit Error: {0}.",
      code: 5011
    }
  };
  var b = [];
  for (var c in a.diagnosticMessages)
    if (a.diagnosticMessages.hasOwnProperty(c)) {
      var d = a.diagnosticMessages[c];

      var e = b[d.code];
      if (e) throw new Error("Duplicate diagnostic code: " + d.code);
      b[d.code] = d;
    }
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.argument = function(a, b) {
      return new Error("Invalid argument: " + a + "." + (b ? " " + b : ""));
    };

    a.argumentOutOfRange = function(a) {
      return new Error("Argument out of range: " + a + ".");
    };

    a.argumentNull = function(a) {
      return new Error("Argument null: " + a + ".");
    };

    a.abstract = function() {
      return new Error("Operation not implemented properly by subclass.");
    };

    a.notYetImplemented = function() {
      return new Error("Not yet implemented.");
    };

    a.invalidOperation = function(a) {
      return new Error(a ? "Invalid operation: " + a : "Invalid operation.");
    };

    return a;
  }();
  a.Errors = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b() {}
    b.computeFnv1aCharArrayHashCode = function(a, c, d) {
      var e = b.FNV_BASE;

      var f = c + d;
      for (var g = c; g < f; g++) {
        e = (e ^ a[g]) * b.FNV_PRIME;
      }
      return e;
    };

    b.computeSimple31BitCharArrayHashCode = function(a, b, c) {
      var d = 0;
      for (var e = 0; e < c; e++) {
        var f = a[b + e];
        d = (d << 5) + d + f | 0;
      }
      return d & 2147483647;
    };

    b.computeSimple31BitStringHashCode = function(a) {
      var b = 0;

      var c = 0;

      var d = a.length;
      for (var e = 0; e < d; e++) {
        var f = a.charCodeAt(c + e);
        b = (b << 5) + b + f | 0;
      }
      return b & 2147483647;
    };

    b.computeMurmur2CharArrayHashCode = function(a, b, c) {
      var d = 1540483477;

      var e = 24;

      var f = c;

      var g = 0 ^ f;

      var h = b;
      while (f >= 2) {
        var i = a[h];

        var j = a[h + 1];

        var k = i | j << 16;
        k *= d;

        k ^= k >> e;

        k *= d;

        g *= d;

        g ^= k;

        h += 2;

        f -= 2;
      }
      f === 1 && (g ^= a[h], g *= d);

      g ^= g >> 13;

      g *= d;

      g ^= g >> 15;

      return g;
    };

    b.computeMurmur2StringHashCode = function(a) {
      var b = 1540483477;

      var c = 24;

      var d = 0;

      var e = a.length;

      var f = e;

      var g = 0 ^ f;

      var h = d;
      while (f >= 2) {
        var i = a.charCodeAt(h);

        var j = a.charCodeAt(h + 1);

        var k = i | j << 16;
        k *= b;

        k ^= k >> c;

        k *= b;

        g *= b;

        g ^= k;

        h += 2;

        f -= 2;
      }
      f === 1 && (g ^= a.charCodeAt(h), g *= b);

      g ^= g >> 13;

      g *= b;

      g ^= g >> 15;

      return g;
    };

    b.getPrime = function(c) {
      for (var d = 0; d < b.primes.length; d++) {
        var e = b.primes[d];
        if (e >= c) {
          return e;
        }
      }
      throw a.Errors.notYetImplemented();
    };

    b.expandPrime = function(a) {
      var c = a << 1;
      return c > 2146435069 && 2146435069 > a ? 2146435069 : b.getPrime(c);
    };

    b.combine = function(a, b) {
      return (b << 5) + b + a & 2147483647;
    };

    b.FNV_BASE = 2166136261;

    b.FNV_PRIME = 16777619;

    b.primes = [3, 7, 11, 17, 23, 29, 37, 47, 59, 71, 89, 107, 131, 163, 197, 239, 293, 353, 431, 521, 631, 761, 919,
      1103, 1327, 1597, 1931, 2333, 2801, 3371, 4049, 4861, 5839, 7013, 8419, 10103, 12143, 14591, 17519, 21023,
      25229, 30293, 36353, 43627, 52361, 62851, 75431, 90523, 108631, 130363, 156437, 187751, 225307, 270371, 324449,
      389357, 467237, 560689, 672827, 807403, 968897, 1162687, 1395263, 1674319, 2009191, 2411033, 2893249, 3471899,
      4166287, 4999559, 5999471, 7199369
    ];

    return b;
  }();
  a.Hash = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function e(a, c, e) {
      typeof a == "undefined" && (a = b.DefaultHashTableCapacity);

      typeof c == "undefined" && (c = null);

      typeof e == "undefined" && (e = null);

      return new d(a, c, e);
    }

    function g(a) {
      a.__hash === undefined && (a.__hash = f, f++);

      return a.__hash;
    }
    b.DefaultHashTableCapacity = 256;
    var c = function() {
      function a(a, b, c, d) {
        this.Key = a;

        this.Value = b;

        this.HashCode = c;

        this.Next = d;
      }
      return a;
    }();

    var d = function() {
      function b(b, c, d) {
        this.hash = c;

        this.equals = d;

        this.entries = [];

        this.count = 0;
        var e = a.Hash.getPrime(b);
        this.hash = c;

        this.equals = d;

        this.entries = a.ArrayUtilities.createArray(e, null);
      }
      b.prototype.set = function(a, b) {
        this.addOrSet(a, b, !1);
      };

      b.prototype.add = function(a, b) {
        this.addOrSet(a, b, !0);
      };

      b.prototype.containsKey = function(a) {
        var b = this.computeHashCode(a);

        var c = this.findEntry(a, b);
        return c !== null;
      };

      b.prototype.get = function(a) {
        var b = this.computeHashCode(a);

        var c = this.findEntry(a, b);
        return c === null ? null : c.Value;
      };

      b.prototype.computeHashCode = function(b) {
        var c = this.hash === null ? b.hashCode() : this.hash(b);
        c &= 2147483647;

        a.Debug.assert(c > 0);

        return c;
      };

      b.prototype.addOrSet = function(b, c, d) {
        var e = this.computeHashCode(b);

        var f = this.findEntry(b, e);
        if (f !== null) {
          if (d) throw a.Errors.argument("key", "Key was already in table.");
          f.Key = b;

          f.Value = c;
          return;
        }
        return this.addEntry(b, c, e);
      };

      b.prototype.findEntry = function(a, b) {
        for (var c = this.entries[b % this.entries.length]; c !== null; c = c.Next)
          if (c.HashCode === b) {
            var d = this.equals === null ? a === c.Key : this.equals(a, c.Key);
            if (d) {
              return c;
            }
          }
        return null;
      };

      b.prototype.addEntry = function(a, b, d) {
        var e = d % this.entries.length;

        var f = new c(a, b, d, this.entries[e]);
        this.entries[e] = f;

        this.count === this.entries.length && this.grow();

        this.count++;

        return f.Key;
      };

      b.prototype.grow = function() {
        var b = a.Hash.expandPrime(this.entries.length);

        var c = this.entries;

        var d = a.ArrayUtilities.createArray(b, null);
        this.entries = d;
        for (var e = 0; e < c.length; e++) {
          var f = c[e];
          while (f !== null) {
            var g = f.HashCode % b;

            var h = f.Next;
            f.Next = d[g];

            d[g] = f;

            f = h;
          }
        }
      };

      return b;
    }();
    b.HashTable = d;

    b.createHashTable = e;
    var f = 1;
    b.identityHashCode = g;
  })(a.Collections || (a.Collections = {}));
  var b = a.Collections;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function c(a) {
    var b = -1;

    var c = a.split("_");
    for (var d = 0; d < c.length; d++) {
      var e = parseInt(c[d]);
      if (!isNaN(e) && e > b) {
        b = e;
      }
    }
    return b;
  }

  function d(b) {
    var c = a.DiagnosticCode[b];
    return a.diagnosticMessages[c];
  }

  function e(b, d) {
    var e = a.DiagnosticCode[b];

    var f = a.diagnosticMessages[e];

    var g = d ? d.length : 0;
    if (!f) throw new Error("Invalid diagnostic");
    var h = 1 + c(e);
    if (h !== g) throw new Error("Expected " + h + " arguments to diagnostic, got " + g + " instead");
    var i = f.message.replace(/{({(\d+)})?TB}/g, function(a, b, c) {
      var e = "	";

      var f = e;
      if (c && d[c])
        for (var g = 1; g < d[c]; g++) {
          f += e;
        }
      return f;
    });
    i = i.replace(/{(\d+)}/g, function(a, b) {
      return typeof d[b] != "undefined" ? d[b] : a;
    });

    i = i.replace(/{(NL)}/g, function(a) {
      return "\r\n";
    });

    return i;
  }

  function f(a, b) {
    var c = d(a);

    var f = e(a, b);

    var g;
    c.category === 1 ? g = e(0, [c.code, f]) : c.category === 0 ? g = e(1, [c.code, f]) : g = f;

    return g;
  }
  var b = function() {
    function b(a, b, c, d, e) {
      if (typeof e == "undefined") {
        e = null;
      }

      this._diagnosticCode = d;

      this._arguments = e && e.length > 0 ? e : null;

      this._fileName = a;

      this._originalStart = this._start = b;

      this._length = c;
    }
    b.prototype.toJSON = function(b) {
      var c = {};
      c.start = this.start();

      c.length = this.length();

      c.diagnosticCode = a.DiagnosticCode[this.diagnosticCode()];
      var d = this.arguments();
      d && d.length > 0 && (c.arguments = d);

      return c;
    };

    b.prototype.fileName = function() {
      return this._fileName;
    };

    b.prototype.start = function() {
      return this._start;
    };

    b.prototype.length = function() {
      return this._length;
    };

    b.prototype.diagnosticCode = function() {
      return this._diagnosticCode;
    };

    b.prototype.arguments = function() {
      return this._arguments;
    };

    b.prototype.text = function() {
      return a.getDiagnosticText(this._diagnosticCode, this._arguments);
    };

    b.prototype.message = function() {
      return a.getDiagnosticMessage(this._diagnosticCode, this._arguments);
    };

    b.prototype.adjustOffset = function(a) {
      this._start = this._originalStart + a;
    };

    b.prototype.additionalLocations = function() {
      return [];
    };

    b.equals = function(b, c) {
      return b._fileName === c._fileName && b._start === c._start && b._length === c._length && b._diagnosticCode ===
        c._diagnosticCode && a.ArrayUtilities.sequenceEquals(b._arguments, c._arguments, function(a, b) {
          return a === b;
        });
    };

    return b;
  }();
  a.Diagnostic = b;

  a.getDiagnosticInfoFromCode = d;

  a.getDiagnosticText = e;

  a.getDiagnosticMessage = f;
})(TypeScript || (TypeScript = {}));

var ByteOrderMark;

(function(a) {
  a[a.None = 0] = "None";

  a[a.Utf8 = 1] = "Utf8";

  a[a.Utf16BigEndian = 2] = "Utf16BigEndian";

  a[a.Utf16LittleEndian = 3] = "Utf16LittleEndian";
})(ByteOrderMark || (ByteOrderMark = {}));

var FileInformation = function() {
  function a(a, b) {
    this._contents = a;

    this._byteOrderMark = b;
  }
  a.prototype.contents = function() {
    return this._contents;
  };

  a.prototype.byteOrderMark = function() {
    return this._byteOrderMark;
  };

  return a;
}();

var Environment = function() {
  function a() {
    function d() {
      return c.length > 0 ? c.pop() : new ActiveXObject("ADODB.Stream");
    }

    function e(a) {
      c.push(a);
    }
    try {
      var a = new ActiveXObject("Scripting.FileSystemObject");
    } catch (b) {
      return null;
    }
    var c = [];

    var f = [];
    for (var g = 0; g < WScript.Arguments.length; g++) {
      f[g] = WScript.Arguments.Item(g);
    }
    return {
      currentDirectory: function() {
        return WScript.CreateObject("WScript.Shell").CurrentDirectory;
      },
      readFile: function(a) {
        try {
          var b = d();
          b.Open();

          b.Type = 2;

          b.Charset = "x-ansi";

          b.LoadFromFile(a);
          var c = b.ReadText(2);
          b.Position = 0;
          var f = 0;
          if (c.charCodeAt(0) === 254 && c.charCodeAt(1) === 255) {
            b.Charset = "unicode";
            f = 2;
          } else {
            if (c.charCodeAt(0) === 255 && c.charCodeAt(1) === 254) {
              b.Charset = "unicode";
              f = 3;
            } else {
              if (c.charCodeAt(0) === 239 && c.charCodeAt(1) === 187) {
                b.Charset = "utf-8";
                f = 1;
              } else {
                b.Charset = "utf-8";
              }
            }
          }
          var g = b.ReadText(-1);
          b.Close();

          e(b);

          return new FileInformation(g, f);
        } catch (h) {
          throw new Error('Error reading file "' + a + '": ' + h.message);
        }
      },
      writeFile: function(a, b, c) {
        var e = d();
        e.Charset = "utf-8";

        e.Open();

        e.WriteText(b, 0);

        if (c) {
          e.Position = 0;
        } else {
          e.Position = 3;
        }
        var f = d();
        f.Type = 1;

        f.Open();

        e.CopyTo(f);

        f.Flush();

        f.SaveToFile(a, 2);

        f.Close();

        e.Flush();

        e.Close();
      },
      fileExists: function(b) {
        return a.FileExists(b);
      },
      deleteFile: function(b) {
        if (a.FileExists(b)) {
          a.DeleteFile(b, !0);
        }
      },
      directoryExists: function(b) {
        return a.FolderExists(b);
      },
      listFiles: function(b, c, d) {
        function e(a, b) {
          var f = [];

          var g;
          if (d.recursive) {
            g = new Enumerator(a.subfolders);
            for (; !g.atEnd(); g.moveNext()) {
              f = f.concat(e(g.item(), b + "\\" + g.item().Name));
            }
          }
          g = new Enumerator(a.files);
          for (; !g.atEnd(); g.moveNext()) {
            if (!c || g.item().Name.match(c)) {
              f.push(b + "\\" + g.item().Name);
            }
          }
          return f;
        }
        d = d || {};
        var f = a.GetFolder(b);

        var g = [];
        return e(f, b);
      },
      arguments: f,
      standardOut: WScript.StdOut
    };
  }

  function b() {
    var a = require("fs");

    var b = require("path");

    var c = require("module");
    return {
      currentDirectory: function() {
        return process.cwd();
      },
      readFile: function(b) {
        var c = a.readFileSync(b);
        switch (c[0]) {
          case 254:
            if (c[1] === 255) {
              var d = 0;
              while (d + 1 < c.length) {
                var e = c[d];
                c[d] = c[d + 1];

                c[d + 1] = e;

                d += 2;
              }
              return new FileInformation(c.toString("ucs2", 2), 2);
            }
            break;
          case 255:
            if (c[1] === 254) {
              return new FileInformation(c.toString("ucs2", 2), 3);
            }
            break;
          case 239:
            if (c[1] === 187) {
              return new FileInformation(c.toString("utf8", 3), 1);
            }
        }
        return new FileInformation(c.toString("utf8", 0), 0);
      },
      writeFile: function(c, d, e) {
        function f(c) {
          var d = a.statSync(c);
          if (d.isFile()) throw '"' + c + "\" exists but isn't a directory.";
          if (d.isDirectory()) return;
          f(b.dirname(c));

          a.mkdirSync(c, 509);
        }
        f(b.dirname(c));

        if (e) {
          d = "﻿" + d;
        }

        a.writeFileSync(c, d, "utf8");
      },
      fileExists: function(b) {
        return a.existsSync(b);
      },
      deleteFile: function(b) {
        try {
          a.unlinkSync(b);
        } catch (c) {}
      },
      directoryExists: function(b) {
        return a.existsSync(b) && a.statSync(b).isDirectory();
      },
      listFiles: function(c, d, e) {
        function f(b) {
          var c = [];

          var g = a.readdirSync(b);
          for (var h = 0; h < g.length; h++) {
            var i = a.statSync(b + "\\" + g[h]);
            if (e.recursive && i.isDirectory()) {
              c = c.concat(f(b + "\\" + g[h]));
            } else {
              if (i.isFile() && (!d || g[h].match(d))) {
                c.push(b + "\\" + g[h]);
              }
            }
          }
          return c;
        }
        e = e || {};

        return f(c);
      },
      arguments: process.argv.slice(2),
      standardOut: {
        Write: function(a) {
          process.stdout.write(a);
        },
        WriteLine: function(a) {
          process.stdout.write(a + "\n");
        },
        Close: function() {}
      }
    };
  }
  return typeof WScript != "undefined" && typeof ActiveXObject == "function" ? a() : typeof module != "undefined" &&
    module.exports ? b() : null;
}();

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.integerDivide = function(a, b) {
      return a / b >> 0;
    };

    a.integerMultiplyLow32Bits = function(a, b) {
      var c = a & 65535;

      var d = a >>> 16;

      var e = b & 65535;

      var f = b >>> 16;

      var g = ((a & 4294901760) * b >>> 0) + ((a & 65535) * b >>> 0) >>> 0;
      return g;
    };

    a.integerMultiplyHigh32Bits = function(a, b) {
      var c = a & 65535;

      var d = a >>> 16;

      var e = b & 65535;

      var f = b >>> 16;

      var g = d * f + ((c * e >>> 17) + c * f >>> 15);
      return g;
    };

    return a;
  }();
  a.IntegerUtilities = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.max = function(a, b) {
      return a >= b ? a : b;
    };

    a.min = function(a, b) {
      return a <= b ? a : b;
    };

    return a;
  }();
  a.MathPrototype = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    b.DefaultStringTableCapacity = 256;
    var c = function() {
      function a(a, b, c) {
        this.Text = a;

        this.HashCode = b;

        this.Next = c;
      }
      return a;
    }();

    var d = function() {
      function b(b) {
        this.entries = [];

        this.count = 0;
        var c = a.Hash.getPrime(b);
        this.entries = a.ArrayUtilities.createArray(c, null);
      }
      b.prototype.addCharArray = function(b, c, d) {
        var e = a.Hash.computeSimple31BitCharArrayHashCode(b, c, d) & 2147483647;

        var f = this.findCharArrayEntry(b, c, d, e);
        if (f !== null) {
          return f.Text;
        }
        var g = b.slice(c, c + d);
        return this.addEntry(a.StringUtilities.fromCharCodeArray(g), e);
      };

      b.prototype.findCharArrayEntry = function(a, c, d, e) {
        for (var f = this.entries[e % this.entries.length]; f !== null; f = f.Next)
          if (f.HashCode === e && b.textCharArrayEquals(f.Text, a, c, d)) {
            return f;
          }
        return null;
      };

      b.prototype.addEntry = function(a, b) {
        var d = b % this.entries.length;

        var e = new c(a, b, this.entries[d]);
        this.entries[d] = e;

        this.count === this.entries.length && this.grow();

        this.count++;

        return e.Text;
      };

      b.prototype.grow = function() {
        var b = a.Hash.expandPrime(this.entries.length);

        var c = this.entries;

        var d = a.ArrayUtilities.createArray(b, null);
        this.entries = d;
        for (var e = 0; e < c.length; e++) {
          var f = c[e];
          while (f !== null) {
            var g = f.HashCode % b;

            var h = f.Next;
            f.Next = d[g];

            d[g] = f;

            f = h;
          }
        }
      };

      b.textCharArrayEquals = function(a, b, c, d) {
        if (a.length !== d) {
          return !1;
        }
        var e = c;
        for (var f = 0; f < d; f++) {
          if (a.charCodeAt(f) !== b[e]) {
            return !1;
          }
          e++;
        }
        return !0;
      };

      return b;
    }();
    b.StringTable = d;

    b.DefaultStringTable = new d(b.DefaultStringTableCapacity);
  })(a.Collections || (a.Collections = {}));
  var b = a.Collections;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.isString = function(a) {
      return Object.prototype.toString.apply(a, []) === "[object String]";
    };

    a.fromCharCodeArray = function(a) {
      return String.fromCharCode.apply(null, a);
    };

    a.endsWith = function(a, b) {
      return a.substring(a.length - b.length, a.length) === b;
    };

    a.startsWith = function(a, b) {
      return a.substr(0, b.length) === b;
    };

    a.copyTo = function(a, b, c, d, e) {
      for (var f = 0; f < e; f++) {
        c[d + f] = a.charCodeAt(b + f);
      }
    };

    a.repeat = function(a, b) {
      return Array(b + 1).join(a);
    };

    a.stringEquals = function(a, b) {
      return a === b;
    };

    return a;
  }();
  a.StringUtilities = b;
})(TypeScript || (TypeScript = {}));

var global = Function("return this").call(null);

var TypeScript;

(function(a) {
  var b;
  (function(a) {
    a.now;

    a.resolution;

    if (typeof WScript != "undefined" && typeof global.WScript.InitializeProjection != "undefined") {
      global.WScript.InitializeProjection();
      a.now = function() {
        return TestUtilities.QueryPerformanceCounter();
      };
      a.resolution = TestUtilities.QueryPerformanceFrequency();
    } else {
      a.now = function() {
        return Date.now();
      };
      a.resolution = 1e3;
    }
  })(b || (b = {}));
  var c = function() {
    function a() {
      this.time = 0;
    }
    a.prototype.start = function() {
      this.time = 0;

      this.startTime = b.now();
    };

    a.prototype.end = function() {
      this.time = b.now() - this.startTime;
    };

    return a;
  }();
  a.Timer = c;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.nullCharacter = 0] = "nullCharacter";

    a[a.maxAsciiCharacter = 127] = "maxAsciiCharacter";

    a[a.lineFeed = 10] = "lineFeed";

    a[a.carriageReturn = 13] = "carriageReturn";

    a[a.lineSeparator = 8232] = "lineSeparator";

    a[a.paragraphSeparator = 8233] = "paragraphSeparator";

    a[a.nextLine = 133] = "nextLine";

    a[a.space = 32] = "space";

    a[a.nonBreakingSpace = 160] = "nonBreakingSpace";

    a[a.enQuad = 8192] = "enQuad";

    a[a.emQuad = 8193] = "emQuad";

    a[a.enSpace = 8194] = "enSpace";

    a[a.emSpace = 8195] = "emSpace";

    a[a.threePerEmSpace = 8196] = "threePerEmSpace";

    a[a.fourPerEmSpace = 8197] = "fourPerEmSpace";

    a[a.sixPerEmSpace = 8198] = "sixPerEmSpace";

    a[a.figureSpace = 8199] = "figureSpace";

    a[a.punctuationSpace = 8200] = "punctuationSpace";

    a[a.thinSpace = 8201] = "thinSpace";

    a[a.hairSpace = 8202] = "hairSpace";

    a[a.zeroWidthSpace = 8203] = "zeroWidthSpace";

    a[a.narrowNoBreakSpace = 8239] = "narrowNoBreakSpace";

    a[a.ideographicSpace = 12288] = "ideographicSpace";

    a[a._ = 95] = "_";

    a[a.$ = 36] = "$";

    a[a._0 = 48] = "_0";

    a[a._9 = 57] = "_9";

    a[a.a = 97] = "a";

    a[a.b = 98] = "b";

    a[a.c = 99] = "c";

    a[a.d = 100] = "d";

    a[a.e = 101] = "e";

    a[a.f = 102] = "f";

    a[a.g = 103] = "g";

    a[a.h = 104] = "h";

    a[a.i = 105] = "i";

    a[a.k = 107] = "k";

    a[a.l = 108] = "l";

    a[a.m = 109] = "m";

    a[a.n = 110] = "n";

    a[a.o = 111] = "o";

    a[a.p = 112] = "p";

    a[a.q = 113] = "q";

    a[a.r = 114] = "r";

    a[a.s = 115] = "s";

    a[a.t = 116] = "t";

    a[a.u = 117] = "u";

    a[a.v = 118] = "v";

    a[a.w = 119] = "w";

    a[a.x = 120] = "x";

    a[a.y = 121] = "y";

    a[a.z = 122] = "z";

    a[a.A = 65] = "A";

    a[a.E = 69] = "E";

    a[a.F = 70] = "F";

    a[a.X = 88] = "X";

    a[a.Z = 90] = "Z";

    a[a.ampersand = 38] = "ampersand";

    a[a.asterisk = 42] = "asterisk";

    a[a.at = 64] = "at";

    a[a.backslash = 92] = "backslash";

    a[a.bar = 124] = "bar";

    a[a.caret = 94] = "caret";

    a[a.closeBrace = 125] = "closeBrace";

    a[a.closeBracket = 93] = "closeBracket";

    a[a.closeParen = 41] = "closeParen";

    a[a.colon = 58] = "colon";

    a[a.comma = 44] = "comma";

    a[a.dot = 46] = "dot";

    a[a.doubleQuote = 34] = "doubleQuote";

    a[a.equals = 61] = "equals";

    a[a.exclamation = 33] = "exclamation";

    a[a.greaterThan = 62] = "greaterThan";

    a[a.lessThan = 60] = "lessThan";

    a[a.minus = 45] = "minus";

    a[a.openBrace = 123] = "openBrace";

    a[a.openBracket = 91] = "openBracket";

    a[a.openParen = 40] = "openParen";

    a[a.percent = 37] = "percent";

    a[a.plus = 43] = "plus";

    a[a.question = 63] = "question";

    a[a.semicolon = 59] = "semicolon";

    a[a.singleQuote = 39] = "singleQuote";

    a[a.slash = 47] = "slash";

    a[a.tilde = 126] = "tilde";

    a[a.backspace = 8] = "backspace";

    a[a.formFeed = 12] = "formFeed";

    a[a.byteOrderMark = 65279] = "byteOrderMark";

    a[a.tab = 9] = "tab";

    a[a.verticalTab = 11] = "verticalTab";
  })(a.CharacterCodes || (a.CharacterCodes = {}));
  var b = a.CharacterCodes;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function d(a) {
      return new c(a);
    }
    var c = function() {
      function b(a) {
        this.text = a;
      }
      b.prototype.getText = function(a, b) {
        return this.text.substring(a, b);
      };

      b.prototype.getLength = function() {
        return this.text.length;
      };

      b.prototype.getLineStartPositions = function() {
        return a.TextUtilities.parseLineStarts(a.SimpleText.fromString(this.text));
      };

      b.prototype.getTextChangeRangeSinceVersion = function(b) {
        throw a.Errors.notYetImplemented();
      };

      return b;
    }();
    b.fromString = d;
  })(a.ScriptSnapshot || (a.ScriptSnapshot = {}));
  var b = a.ScriptSnapshot;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a, b) {
      this._lineStarts = a;

      this.length = b;
    }
    b.prototype.toJSON = function(a) {
      return {
        lineStarts: this._lineStarts,
        length: this.length
      };
    };

    b.prototype.equals = function(b) {
      return this.length === b.length && a.ArrayUtilities.sequenceEquals(this.lineStarts(), b.lineStarts(), function(
        a, b) {
        return a === b;
      });
    };

    b.prototype.lineStarts = function() {
      return this._lineStarts;
    };

    b.prototype.lineCount = function() {
      return this.lineStarts().length;
    };

    b.prototype.getPosition = function(a, b) {
      return this.lineStarts()[a] + b;
    };

    b.prototype.getLineNumberFromPosition = function(b) {
      if (b < 0 || b > this.length) throw a.Errors.argumentOutOfRange("position");
      if (b === this.length) {
        return this.lineCount() - 1;
      }
      var c = a.ArrayUtilities.binarySearch(this.lineStarts(), b);
      c < 0 && (c = ~c - 1);

      return c;
    };

    b.prototype.getLineStartPosition = function(a) {
      return this.lineStarts()[a];
    };

    b.prototype.fillLineAndCharacterFromPosition = function(b, c) {
      if (b < 0 || b > this.length) throw a.Errors.argumentOutOfRange("position");
      var d = this.getLineNumberFromPosition(b);
      c.line = d;

      c.character = b - this.lineStarts()[d];
    };

    b.prototype.getLineAndCharacterFromPosition = function(b) {
      if (b < 0 || b > this.length) throw a.Errors.argumentOutOfRange("position");
      var c = this.getLineNumberFromPosition(b);
      return new a.LineAndCharacter(c, b - this.lineStarts()[c]);
    };

    b.fromSimpleText = function(c) {
      var d = a.TextUtilities.parseLineStarts(c);
      return new b(d, c.length());
    };

    b.fromScriptSnapshot = function(a) {
      return new b(a.getLineStartPositions(), a.getLength());
    };

    b.fromString = function(c) {
      return b.fromSimpleText(a.SimpleText.fromString(c));
    };

    b.empty = new b([0], 0);

    return b;
  }();
  a.LineMap = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(b, c) {
      this._line = 0;

      this._character = 0;
      if (b < 0) throw a.Errors.argumentOutOfRange("line");
      if (c < 0) throw a.Errors.argumentOutOfRange("character");
      this._line = b;

      this._character = c;
    }
    b.prototype.line = function() {
      return this._line;
    };

    b.prototype.character = function() {
      return this._character;
    };

    return b;
  }();
  a.LineAndCharacter = b;
})(TypeScript || (TypeScript = {}));

var __extends = this.__extends || function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var c in b) {
      if (b.hasOwnProperty(c)) {
        a[c] = b[c];
      }
    }
    d.prototype = b.prototype;

    a.prototype = new d;
  };

var TypeScript;

(function(a) {
  (function(b) {
    function c(b, c, d) {
      var e = b.charCodeAt(c);
      if (e === 10) {
        if (c > 0 && b.charCodeAt(c - 1) === 13) {
          d.startPosition = c - 1;
          d.length = 2;
        } else {
          d.startPosition = c;
          d.length = 1;
        }
      } else {
        if (a.TextUtilities.isAnyLineBreakCharacter(e)) {
          d.startPosition = c;
          d.length = 1;
        } else {
          d.startPosition = c + 1;
          d.length = 0;
        }
      }
    }

    function i(a) {
      return new h(a);
    }
    var d = function() {
      function a(a, b) {
        this.startPosition = a;

        this.length = b;
      }
      return a;
    }();

    var e = function() {
      function b(b, c, d, e) {
        this._text = null;

        this._textSpan = null;

        a.Contract.throwIfNull(b);

        a.Contract.throwIfFalse(d >= 0);

        a.Contract.requires(e >= 0);

        this._text = b;

        this._textSpan = c;

        this._lineBreakLength = d;

        this._lineNumber = e;
      }
      b.prototype.start = function() {
        return this._textSpan.start();
      };

      b.prototype.end = function() {
        return this._textSpan.end();
      };

      b.prototype.endIncludingLineBreak = function() {
        return this.end() + this._lineBreakLength;
      };

      b.prototype.extent = function() {
        return this._textSpan;
      };

      b.prototype.extentIncludingLineBreak = function() {
        return a.TextSpan.fromBounds(this.start(), this.endIncludingLineBreak());
      };

      b.prototype.toString = function() {
        return this._text.toString(this._textSpan);
      };

      b.prototype.lineNumber = function() {
        return this._lineNumber;
      };

      return b;
    }();

    var f = function() {
      function b() {
        this.lazyLineStarts = null;

        this.linebreakInfo = new d(0, 0);

        this.lastLineFoundForPosition = null;
      }
      b.prototype.length = function() {
        throw a.Errors.abstract();
      };

      b.prototype.charCodeAt = function(b) {
        throw a.Errors.abstract();
      };

      b.prototype.checkSubSpan = function(b) {
        if (b.start() < 0 || b.start() > this.length() || b.end() > this.length()) throw a.Errors.argumentOutOfRange(
          "span");
      };

      b.prototype.toString = function(b) {
        throw typeof b == "undefined" && (b = null), a.Errors.abstract();
      };

      b.prototype.subText = function(a) {
        this.checkSubSpan(a);

        return new g(this, a);
      };

      b.prototype.substr = function(b, c, d) {
        throw a.Errors.abstract();
      };

      b.prototype.copyTo = function(b, c, d, e) {
        throw a.Errors.abstract();
      };

      b.prototype.lineCount = function() {
        return this.lineStarts().length;
      };

      b.prototype.lines = function() {
        var a = [];

        var b = this.lineCount();
        for (var c = 0; c < b; ++c) {
          a[c] = this.getLineFromLineNumber(c);
        }
        return a;
      };

      b.prototype.lineMap = function() {
        return new a.LineMap(this.lineStarts(), this.length());
      };

      b.prototype.lineStarts = function() {
        this.lazyLineStarts === null && (this.lazyLineStarts = a.TextUtilities.parseLineStarts(this));

        return this.lazyLineStarts;
      };

      b.prototype.getLineFromLineNumber = function(b) {
        var d = this.lineStarts();
        if (b < 0 || b >= d.length) throw a.Errors.argumentOutOfRange("lineNumber");
        var f = d[b];
        return b === d.length - 1 ? new e(this, new a.TextSpan(f, this.length() - f), 0, b) : (c(this, d[b + 1] - 1,
          this.linebreakInfo), new e(this, new a.TextSpan(f, this.linebreakInfo.startPosition - f), this.linebreakInfo
          .length, b));
      };

      b.prototype.getLineFromPosition = function(a) {
        var b = this.lastLineFoundForPosition;
        if (b !== null && b.start() <= a && b.endIncludingLineBreak() > a) {
          return b;
        }
        var c = this.getLineNumberFromPosition(a);

        var d = this.getLineFromLineNumber(c);
        this.lastLineFoundForPosition = d;

        return d;
      };

      b.prototype.getLineNumberFromPosition = function(b) {
        if (b < 0 || b > this.length()) throw a.Errors.argumentOutOfRange("position");
        if (b === this.length()) {
          return this.lineCount() - 1;
        }
        var c = a.ArrayUtilities.binarySearch(this.lineStarts(), b);
        c < 0 && (c = ~c - 1);

        return c;
      };

      b.prototype.getLinePosition = function(b) {
        if (b < 0 || b > this.length()) throw a.Errors.argumentOutOfRange("position");
        var c = this.getLineNumberFromPosition(b);
        return new a.LineAndCharacter(c, b - this.lineStarts()[c]);
      };

      return b;
    }();

    var g = function(b) {
      function c(c, d) {
        b.call(this);
        if (c === null) throw a.Errors.argumentNull("text");
        if (d.start() < 0 || d.start() >= c.length() || d.end() < 0 || d.end() > c.length()) throw a.Errors.argument(
          "span");
        this.text = c;

        this.span = d;
      }
      __extends(c, b);

      c.prototype.length = function() {
        return this.span.length();
      };

      c.prototype.charCodeAt = function(b) {
        if (b < 0 || b > this.length()) throw a.Errors.argumentOutOfRange("position");
        return this.text.charCodeAt(this.span.start() + b);
      };

      c.prototype.subText = function(a) {
        this.checkSubSpan(a);

        return new c(this.text, this.getCompositeSpan(a.start(), a.length()));
      };

      c.prototype.copyTo = function(a, b, c, d) {
        var e = this.getCompositeSpan(a, d);
        this.text.copyTo(e.start(), b, c, e.length());
      };

      c.prototype.getCompositeSpan = function(b, c) {
        var d = a.MathPrototype.min(this.text.length(), this.span.start() + b);

        var e = a.MathPrototype.min(this.text.length(), d + c);
        return new a.TextSpan(d, e - d);
      };

      return c;
    }(f);

    var h = function(b) {
      function c(c) {
        b.call(this);

        this.source = null;
        if (c === null) throw a.Errors.argumentNull("data");
        this.source = c;
      }
      __extends(c, b);

      c.prototype.length = function() {
        return this.source.length;
      };

      c.prototype.charCodeAt = function(b) {
        if (b < 0 || b >= this.source.length) throw a.Errors.argumentOutOfRange("position");
        return this.source.charCodeAt(b);
      };

      c.prototype.substr = function(a, b, c) {
        return this.source.substr(a, b);
      };

      c.prototype.toString = function(b) {
        typeof b == "undefined" && (b = null);

        b === null && (b = new a.TextSpan(0, this.length()));

        this.checkSubSpan(b);

        return b.start() === 0 && b.length() === this.length() ? this.source : this.source.substr(b.start(), b.length());
      };

      c.prototype.copyTo = function(b, c, d, e) {
        a.StringUtilities.copyTo(this.source, b, c, d, e);
      };

      return c;
    }(f);
    b.createText = i;
  })(a.TextFactory || (a.TextFactory = {}));
  var b = a.TextFactory;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function f(a) {
      return new d(a);
    }

    function g(a) {
      return new e(a);
    }
    var c = function() {
      function b(b, c) {
        this.text = null;

        this.span = null;
        if (b === null) throw a.Errors.argumentNull("text");
        if (c.start() < 0 || c.start() >= b.length() || c.end() < 0 || c.end() > b.length()) throw a.Errors.argument(
          "span");
        this.text = b;

        this.span = c;
      }
      b.prototype.checkSubSpan = function(b) {
        if (b.start() < 0 || b.start() > this.length() || b.end() > this.length()) throw a.Errors.argumentOutOfRange(
          "span");
      };

      b.prototype.checkSubPosition = function(b) {
        if (b < 0 || b >= this.length()) throw a.Errors.argumentOutOfRange("position");
      };

      b.prototype.length = function() {
        return this.span.length();
      };

      b.prototype.subText = function(a) {
        this.checkSubSpan(a);

        return new b(this.text, this.getCompositeSpan(a.start(), a.length()));
      };

      b.prototype.copyTo = function(a, b, c, d) {
        var e = this.getCompositeSpan(a, d);
        this.text.copyTo(e.start(), b, c, e.length());
      };

      b.prototype.substr = function(a, b, c) {
        var d = this.getCompositeSpan(a, b);
        return this.text.substr(d.start(), d.length(), c);
      };

      b.prototype.getCompositeSpan = function(b, c) {
        var d = a.MathPrototype.min(this.text.length(), this.span.start() + b);

        var e = a.MathPrototype.min(this.text.length(), d + c);
        return new a.TextSpan(d, e - d);
      };

      b.prototype.charCodeAt = function(a) {
        this.checkSubPosition(a);

        return this.text.charCodeAt(this.span.start() + a);
      };

      b.prototype.lineMap = function() {
        return a.LineMap.fromSimpleText(this);
      };

      return b;
    }();

    var d = function() {
      function b(a) {
        this.value = a;
      }
      b.prototype.length = function() {
        return this.value.length;
      };

      b.prototype.copyTo = function(b, c, d, e) {
        a.StringUtilities.copyTo(this.value, b, c, d, e);
      };

      b.prototype.substr = function(c, d, e) {
        if (e) {
          var f = d <= b.charArray.length ? b.charArray : a.ArrayUtilities.createArray(d, 0);
          this.copyTo(c, f, 0, d);

          return a.Collections.DefaultStringTable.addCharArray(f, 0, d);
        }
        return this.value.substr(c, d);
      };

      b.prototype.subText = function(a) {
        return new c(this, a);
      };

      b.prototype.charCodeAt = function(a) {
        return this.value.charCodeAt(a);
      };

      b.prototype.lineMap = function() {
        return a.LineMap.fromSimpleText(this);
      };

      b.charArray = a.ArrayUtilities.createArray(1024, 0);

      return b;
    }();

    var e = function() {
      function b(a) {
        this.scriptSnapshot = a;
      }
      b.prototype.charCodeAt = function(a) {
        return this.scriptSnapshot.getText(a, a + 1).charCodeAt(0);
      };

      b.prototype.length = function() {
        return this.scriptSnapshot.getLength();
      };

      b.prototype.copyTo = function(b, c, d, e) {
        var f = this.scriptSnapshot.getText(b, b + e);
        a.StringUtilities.copyTo(f, 0, c, d, e);
      };

      b.prototype.substr = function(a, b, c) {
        return this.scriptSnapshot.getText(a, a + b);
      };

      b.prototype.subText = function(a) {
        return new c(this, a);
      };

      b.prototype.lineMap = function() {
        var b = this.scriptSnapshot.getLineStartPositions();
        return new a.LineMap(b, this.length());
      };

      return b;
    }();
    b.fromString = f;

    b.fromScriptSnapshot = g;
  })(a.SimpleText || (a.SimpleText = {}));
  var b = a.SimpleText;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    function b(b) {
      var c = b.length();
      if (0 === c) {
        var d = [];
        d.push(0);

        return d;
      }
      var e = 0;

      var f = 0;

      var g = [];

      var h = 0;
      while (f < c) {
        var i = b.charCodeAt(f);

        var j;
        if (i > 13 && i <= 127) {
          f++;
          continue;
        }
        if (i === 13 && f + 1 < c && b.charCodeAt(f + 1) === 10) {
          j = 2;
        } else {
          if (i === 10) {
            j = 1;
          } else {
            j = a.getLengthOfLineBreak(b, f);
          }
        }

        if (0 === j) {
          f++;
        } else {
          g.push(e);
          f += j;
          e = f;
          h++;
        }
      }
      g.push(e);

      return g;
    }

    function c(a, b, c) {
      if (c === 13) {
        var d = b + 1;
        return d < a.length() && 10 === a.charCodeAt(d) ? 2 : 1;
      }
      return e(c) ? 1 : 0;
    }

    function d(a, b) {
      var d = a.charCodeAt(b);
      return d > 13 && d <= 127 ? 0 : c(a, b, d);
    }

    function e(a) {
      return a === 10 || a === 13 || a === 133 || a === 8232 || a === 8233;
    }
    a.parseLineStarts = b;

    a.getLengthOfLineBreakSlow = c;

    a.getLengthOfLineBreak = d;

    a.isAnyLineBreakCharacter = e;
  })(a.TextUtilities || (a.TextUtilities = {}));
  var b = a.TextUtilities;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(b, c) {
      if (b < 0) {
        a.Errors.argument("start");
      }
      if (b + c < b) throw new Error("length");
      this._start = b;

      this._length = c;
    }
    b.prototype.start = function() {
      return this._start;
    };

    b.prototype.length = function() {
      return this._length;
    };

    b.prototype.end = function() {
      return this._start + this._length;
    };

    b.prototype.isEmpty = function() {
      return this._length === 0;
    };

    b.prototype.containsPosition = function(a) {
      return a >= this._start && a < this.end();
    };

    b.prototype.containsTextSpan = function(a) {
      return a._start >= this._start && a.end() <= this.end();
    };

    b.prototype.overlapsWith = function(b) {
      var c = a.MathPrototype.max(this._start, b._start);

      var d = a.MathPrototype.min(this.end(), b.end());
      return c < d;
    };

    b.prototype.overlap = function(c) {
      var d = a.MathPrototype.max(this._start, c._start);

      var e = a.MathPrototype.min(this.end(), c.end());
      return d < e ? b.fromBounds(d, e) : null;
    };

    b.prototype.intersectsWithTextSpan = function(a) {
      return a._start <= this.end() && a.end() >= this._start;
    };

    b.prototype.intersectsWith = function(a, b) {
      var c = a + b;
      return a <= this.end() && c >= this._start;
    };

    b.prototype.intersectsWithPosition = function(a) {
      return a <= this.end() && a >= this._start;
    };

    b.prototype.intersection = function(c) {
      var d = a.MathPrototype.max(this._start, c._start);

      var e = a.MathPrototype.min(this.end(), c.end());
      return d <= e ? b.fromBounds(d, e) : null;
    };

    b.fromBounds = function(c, d) {
      a.Contract.requires(c >= 0);

      a.Contract.requires(d - c >= 0);

      return new b(c, d - c);
    };

    return b;
  }();
  a.TextSpan = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(b, c) {
      if (c < 0) throw a.Errors.argumentOutOfRange("newLength");
      this._span = b;

      this._newLength = c;
    }
    b.prototype.span = function() {
      return this._span;
    };

    b.prototype.newLength = function() {
      return this._newLength;
    };

    b.prototype.newSpan = function() {
      return new a.TextSpan(this.span().start(), this.newLength());
    };

    b.prototype.isUnchanged = function() {
      return this.span().isEmpty() && this.newLength() === 0;
    };

    b.collapseChangesFromSingleVersion = function(c) {
      var d = 0;

      var e = 1073741823;

      var f = 0;
      for (var g = 0; g < c.length; g++) {
        var h = c[g];
        d += h.newLength() - h.span().length();

        if (h.span().start() < e) {
          e = h.span().start();
        }

        if (h.span().end() > f) {
          f = h.span().end();
        }
      }
      if (e > f) {
        return null;
      }
      var i = a.TextSpan.fromBounds(e, f);

      var j = i.length() + d;
      return new b(i, j);
    };

    b.collapseChangesAcrossMultipleVersions = function(c) {
      if (c.length === 0) {
        return b.unchanged;
      }
      if (c.length === 1) {
        return c[0];
      }
      var d = c[0];

      var e = d.span().start();

      var f = d.span().end();

      var g = e + d.newLength();
      for (var h = 1; h < c.length; h++) {
        var i = c[h];

        var j = e;

        var k = f;

        var l = g;

        var m = i.span().start();

        var n = i.span().end();

        var o = m + i.newLength();
        e = a.MathPrototype.min(j, m);

        f = a.MathPrototype.max(k, k + (n - l));

        g = a.MathPrototype.max(o, o + (l - n));
      }
      return new b(a.TextSpan.fromBounds(e, f), g - e);
    };

    b.unchanged = new b(new a.TextSpan(0, 0), 0);

    return b;
  }();
  a.TextChangeRange = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.isDecimalDigit = function(a) {
      return a >= 48 && a <= 57;
    };

    a.isHexDigit = function(b) {
      return a.isDecimalDigit(b) || b >= 65 && b <= 70 || b >= 97 && b <= 102;
    };

    a.hexValue = function(b) {
      return a.isDecimalDigit(b) ? b - 48 : b >= 65 && b <= 70 ? b - 65 + 10 : b - 97 + 10;
    };

    a.isWhitespace = function(a) {
      switch (a) {
        case 32:
        case 160:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8203:
        case 8239:
        case 12288:
        case 9:
        case 11:
        case 12:
        case 65279:
          return !0;
      }
      return !1;
    };

    a.isLineTerminator = function(a) {
      switch (a) {
        case 13:
        case 10:
        case 8233:
        case 8232:
          return !0;
      }
      return !1;
    };

    return a;
  }();
  a.CharacterInfo = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.TriviaNewLineMask = 1] = "TriviaNewLineMask";

    a[a.TriviaCommentMask = 2] = "TriviaCommentMask";

    a[a.TriviaFullWidthShift = 2] = "TriviaFullWidthShift";

    a[a.NodeDataComputed = 1] = "NodeDataComputed";

    a[a.NodeIncrementallyUnusableMask = 2] = "NodeIncrementallyUnusableMask";

    a[a.NodeParsedInStrictModeMask = 4] = "NodeParsedInStrictModeMask";

    a[a.NodeFullWidthShift = 3] = "NodeFullWidthShift";
  })(a.SyntaxConstants || (a.SyntaxConstants = {}));
  var b = a.SyntaxConstants;
})(TypeScript || (TypeScript = {}));

var FormattingOptions = function() {
  function a(a, b, c, d) {
    this.useTabs = a;

    this.spacesPerTab = b;

    this.indentSpaces = c;

    this.newLineCharacter = d;
  }
  a.defaultOptions = new a(!1, 4, 4, "\r\n");

  return a;
}();

var TypeScript;

(function(a) {
  (function(b) {
    function c(a, b, c) {
      return d(a, b, c) + a.width();
    }

    function d(a, b, c) {
      var d = b.firstTokenInLineContainingToken(a);

      var e = [];

      var h = a;
      while (h !== d) {
        h = b.previousToken(h);
        if (h === d) {
          e.push(h.trailingTrivia().fullText());
          e.push(h.text());
        } else {
          e.push(h.fullText());
        }
      }
      f(d, e);

      return g(e, c);
    }

    function e(a, b, c) {
      var d = b.firstTokenInLineContainingToken(a);

      var e = [];
      f(d, e);

      return g(e, c);
    }

    function f(b, c) {
      var d = b.leadingTrivia();
      for (var e = d.count() - 1; e >= 0; e--) {
        var f = d.syntaxTriviaAt(e);
        if (f.kind() === 5) break;
        if (f.kind() === 6) {
          var g = a.Syntax.splitMultiLineCommentTriviaIntoMultipleLines(f);
          c.push(a.ArrayUtilities.last(g));
          if (g.length > 0) break;
        }
        c.push(f.fullText());
      }
    }

    function g(a, b) {
      var c = 0;
      for (var d = a.length - 1; d >= 0; d--) {
        var e = a[d];
        c = i(e, e.length, c, b);
      }
      return c;
    }

    function h(a, b, c) {
      return i(a, b, 0, c);
    }

    function i(a, b, c, d) {
      var e = c;

      var f = d.spacesPerTab;
      for (var g = 0; g < b; g++) {
        var h = a.charCodeAt(g);
        if (h === 9) {
          e += f - e % f;
        } else {
          e++;
        }
      }
      return e;
    }

    function j(b, c) {
      var d = 0;

      var e = a.MathPrototype.max(0, b);
      c.useTabs && (d = Math.floor(b / c.spacesPerTab), e -= d * c.spacesPerTab);

      return a.StringUtilities.repeat("	", d) + a.StringUtilities.repeat(" ", e);
    }

    function k(b, c) {
      return a.Syntax.whitespace(this.indentationString(b, c));
    }

    function l(b) {
      for (var c = 0; c < b.length; c++) {
        var d = b.charCodeAt(c);
        if (!a.CharacterInfo.isWhitespace(d)) {
          return c;
        }
      }
      return b.length;
    }
    b.columnForEndOfToken = c;

    b.columnForStartOfToken = d;

    b.columnForStartOfFirstTokenInLineContainingToken = e;

    b.columnForPositionInString = h;

    b.indentationString = j;

    b.indentationTrivia = k;

    b.firstNonWhitespacePosition = l;
  })(a.Indentation || (a.Indentation = {}));
  var b = a.Indentation;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.EcmaScript3 = 0] = "EcmaScript3";

    a[a.EcmaScript5 = 1] = "EcmaScript5";
  })(a.LanguageVersion || (a.LanguageVersion = {}));
  var b = a.LanguageVersion;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a(a, b) {
      this._allowAutomaticSemicolonInsertion = a;

      this._allowModuleKeywordInExternalModuleReference = b;
    }
    a.prototype.toJSON = function(a) {
      return {
        allowAutomaticSemicolonInsertion: this._allowAutomaticSemicolonInsertion,
        allowModuleKeywordInExternalModuleReference: this._allowModuleKeywordInExternalModuleReference
      };
    };

    a.prototype.allowAutomaticSemicolonInsertion = function() {
      return this._allowAutomaticSemicolonInsertion;
    };

    a.prototype.allowModuleKeywordInExternalModuleReference = function() {
      return this._allowModuleKeywordInExternalModuleReference;
    };

    return a;
  }();
  a.ParseOptions = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a, b, c) {
      this._parent = a;

      this._element = b;

      this._fullStart = c;
    }
    b.create = function(b, c, h) {
      if (c === null) {
        return null;
      }
      if (c.isNode()) {
        return new d(b, c, h);
      }
      if (c.isToken()) {
        return new e(b, c, h);
      }
      if (c.isList()) {
        return new f(b, c, h);
      }
      if (c.isSeparatedList()) {
        return new g(b, c, h);
      }
      throw a.Errors.invalidOperation();
    };

    b.prototype.parent = function() {
      return this._parent;
    };

    b.prototype.parentElement = function() {
      return this._parent && this._parent._element;
    };

    b.prototype.element = function() {
      return this._element;
    };

    b.prototype.kind = function() {
      return this.element().kind();
    };

    b.prototype.childIndex = function(b) {
      return a.Syntax.childIndex(this.element(), b);
    };

    b.prototype.childCount = function() {
      return this.element().childCount();
    };

    b.prototype.childAt = function(c) {
      var d = a.Syntax.childOffsetAt(this.element(), c);
      return b.create(this, this.element().childAt(c), this.fullStart() + d);
    };

    b.prototype.childStart = function(b) {
      var c = a.Syntax.childOffset(this.element(), b);
      return this.fullStart() + c + b.leadingTriviaWidth();
    };

    b.prototype.childEnd = function(b) {
      var c = a.Syntax.childOffset(this.element(), b);
      return this.fullStart() + c + b.leadingTriviaWidth() + b.width();
    };

    b.prototype.childStartAt = function(b) {
      var c = a.Syntax.childOffsetAt(this.element(), b);

      var d = this.element().childAt(b);
      return this.fullStart() + c + d.leadingTriviaWidth();
    };

    b.prototype.childEndAt = function(b) {
      var c = a.Syntax.childOffsetAt(this.element(), b);

      var d = this.element().childAt(b);
      return this.fullStart() + c + d.leadingTriviaWidth() + d.width();
    };

    b.prototype.getPositionedChild = function(c) {
      var d = a.Syntax.childOffset(this.element(), c);
      return b.create(this, c, this.fullStart() + d);
    };

    b.prototype.fullStart = function() {
      return this._fullStart;
    };

    b.prototype.fullEnd = function() {
      return this.fullStart() + this.element().fullWidth();
    };

    b.prototype.fullWidth = function() {
      return this.element().fullWidth();
    };

    b.prototype.start = function() {
      return this.fullStart() + this.element().leadingTriviaWidth();
    };

    b.prototype.end = function() {
      return this.fullStart() + this.element().leadingTriviaWidth() + this.element().width();
    };

    b.prototype.root = function() {
      var a = this;
      while (a.parent() !== null) {
        a = a.parent();
      }
      return a;
    };

    b.prototype.containingNode = function() {
      var a = this.parent();
      while (a !== null && !a.element().isNode()) {
        a = a.parent();
      }
      return a;
    };

    return b;
  }();
  a.PositionedElement = b;
  var c = function(a) {
    function b(b, c, d) {
      a.call(this, b, c, d);
    }
    __extends(b, a);

    b.prototype.nodeOrToken = function() {
      return this.element();
    };

    return b;
  }(b);
  a.PositionedNodeOrToken = c;
  var d = function(a) {
    function b(b, c, d) {
      a.call(this, b, c, d);
    }
    __extends(b, a);

    b.prototype.node = function() {
      return this.element();
    };

    return b;
  }(c);
  a.PositionedNode = d;
  var e = function(a) {
    function b(b, c, d) {
      a.call(this, b, c, d);
    }
    __extends(b, a);

    b.prototype.token = function() {
      return this.element();
    };

    b.prototype.previousToken = function(a) {
      if (typeof a == "undefined") {
        a = !1;
      }
      var b = this.token().leadingTrivia();
      if (a && b && b.hasSkippedToken()) {
        var c = this.start();
        for (var d = b.count() - 1; d >= 0; d--) {
          var e = b.syntaxTriviaAt(d);
          if (e.isSkippedToken()) {
            return new h(this, e.skippedToken(), c - e.fullWidth());
          }
          c -= e.fullWidth();
        }
      }
      var f = this.fullStart();
      return f === 0 ? null : this.root().node().findToken(f - 1, a);
    };

    b.prototype.nextToken = function(a) {
      if (typeof a == "undefined") {
        a = !1;
      }
      if (this.token().tokenKind === 10) {
        return null;
      }
      var b = this.token().trailingTrivia();
      if (a && b && b.hasSkippedToken()) {
        var c = this.end();
        for (var d = 0, e = b.count(); d < e; d++) {
          var f = b.syntaxTriviaAt(d);
          if (f.isSkippedToken()) {
            return new h(this, f.skippedToken(), c);
          }
          c += f.fullWidth();
        }
      }
      return this.root().node().findToken(this.fullEnd(), a);
    };

    return b;
  }(c);
  a.PositionedToken = e;
  var f = function(a) {
    function b(b, c, d) {
      a.call(this, b, c, d);
    }
    __extends(b, a);

    b.prototype.list = function() {
      return this.element();
    };

    return b;
  }(b);
  a.PositionedList = f;
  var g = function(a) {
    function b(b, c, d) {
      a.call(this, b, c, d);
    }
    __extends(b, a);

    b.prototype.list = function() {
      return this.element();
    };

    return b;
  }(b);
  a.PositionedSeparatedList = g;
  var h = function(b) {
    function c(a, c, d) {
      b.call(this, a.parent(), c, d);

      this._parentToken = a;
    }
    __extends(c, b);

    c.prototype.parentToken = function() {
      return this._parentToken;
    };

    c.prototype.previousToken = function(b) {
      if (typeof b == "undefined") {
        b = !1;
      }
      var c = this.fullStart();
      if (b) {
        var d;
        if (c >= this.parentToken().end()) {
          d = a.Syntax.findSkippedTokenInTrailingTriviaList(this.parentToken(), c - 1);
          return d ? d : this.parentToken();
        }
        d = a.Syntax.findSkippedTokenInLeadingTriviaList(this.parentToken(), c - 1);
        if (d) {
          return d;
        }
      }
      var c = this.parentToken().fullStart();
      return c === 0 ? null : this.root().node().findToken(c - 1, b);
    };

    c.prototype.nextToken = function(b) {
      if (typeof b == "undefined") {
        b = !1;
      }
      if (this.token().tokenKind === 10) {
        return null;
      }
      if (b) {
        var c = this.end();

        var d;
        if (c <= this.parentToken().start()) {
          d = a.Syntax.findSkippedTokenInLeadingTriviaList(this.parentToken(), c);
          return d ? d : this.parentToken();
        }
        d = a.Syntax.findSkippedTokenInTrailingTriviaList(this.parentToken(), c);
        if (d) {
          return d;
        }
      }
      return this.root().node().findToken(this.parentToken().fullEnd(), b);
    };

    return c;
  }(e);
  a.PositionedSkippedToken = h;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(c, d, e, f) {
      if (typeof f == "undefined") {
        f = a.ArrayUtilities.createArray(2048, 0);
      }

      b.initializeStaticData();

      this.slidingWindow = new a.SlidingWindow(this, f, 0, d.length());

      this.fileName = c;

      this.text = d;

      this._languageVersion = e;
    }
    b.initializeStaticData = function() {
      if (b.isKeywordStartCharacter.length === 0) {
        b.isKeywordStartCharacter = a.ArrayUtilities.createArray(127, !1);

        b.isIdentifierStartCharacter = a.ArrayUtilities.createArray(127, !1);

        b.isIdentifierPartCharacter = a.ArrayUtilities.createArray(127, !1);

        b.isNumericLiteralStart = a.ArrayUtilities.createArray(127, !1);
        for (var c = 0; c < 127; c++) {
          if (c >= 97 && c <= 122) {
            b.isIdentifierStartCharacter[c] = !0;
            b.isIdentifierPartCharacter[c] = !0;
          } else {
            if (c >= 65 && c <= 90 || c === 95 || c === 36) {
              b.isIdentifierStartCharacter[c] = !0;
              b.isIdentifierPartCharacter[c] = !0;
            } else {
              if (c >= 48 && c <= 57) {
                b.isIdentifierPartCharacter[c] = !0;
                b.isNumericLiteralStart[c] = !0;
              }
            }
          }
        }
        b.isNumericLiteralStart[46] = !0;
        for (var d = a.SyntaxKind.FirstKeyword; d <= a.SyntaxKind.LastKeyword; d++) {
          var e = a.SyntaxFacts.getText(d);
          b.isKeywordStartCharacter[e.charCodeAt(0)] = !0;
        }
      }
    };

    b.prototype.languageVersion = function() {
      return this._languageVersion;
    };

    b.prototype.fetchMoreItems = function(b, c, d, e, f) {
      var g = this.text.length() - c;

      var h = a.MathPrototype.min(g, f);
      this.text.copyTo(c, d, e, h);

      return h;
    };

    b.prototype.currentCharCode = function() {
      return this.slidingWindow.currentItem(null);
    };

    b.prototype.absoluteIndex = function() {
      return this.slidingWindow.absoluteIndex();
    };

    b.prototype.setAbsoluteIndex = function(a) {
      this.slidingWindow.setAbsoluteIndex(a);
    };

    b.prototype.scan = function(b, c) {
      var d = b.length;

      var e = this.slidingWindow.absoluteIndex();

      var f = this.scanTriviaInfo(b, !1);

      var g = this.slidingWindow.absoluteIndex();

      var h = this.scanSyntaxToken(b, c);

      var i = this.slidingWindow.absoluteIndex();

      var j = this.scanTriviaInfo(b, !0);

      var k = this.createToken(e, f, g, h, i, j);
      return d !== b.length ? a.Syntax.realizeToken(k) : k;
    };

    b.prototype.createToken = function(b, c, d, e, f, g) {
      if (e >= a.SyntaxKind.FirstFixedWidth) {
        return c === 0 ? g === 0 ? new a.Syntax.FixedWidthTokenWithNoTrivia(e) : new a.Syntax.FixedWidthTokenWithTrailingTrivia(
          this.text, b, e, g) : g === 0 ? new a.Syntax.FixedWidthTokenWithLeadingTrivia(this.text, b, e, c) : new a.Syntax
          .FixedWidthTokenWithLeadingAndTrailingTrivia(this.text, b, e, c, g);
      }
      var h = f - d;
      return c === 0 ? g === 0 ? new a.Syntax.VariableWidthTokenWithNoTrivia(this.text, b, e, h) : new a.Syntax.VariableWidthTokenWithTrailingTrivia(
        this.text, b, e, h, g) : g === 0 ? new a.Syntax.VariableWidthTokenWithLeadingTrivia(this.text, b, e, c, h) :
        new a.Syntax.VariableWidthTokenWithLeadingAndTrailingTrivia(this.text, b, e, c, h, g);
    };

    b.scanTrivia = function(c, d, e, f) {
      var g = new b(null, c.subText(new a.TextSpan(d, e)), 1, b.triviaWindow);
      return g.scanTrivia(f);
    };

    b.prototype.scanTrivia = function(b) {
      var c = [];
      for (;;) {
        if (!this.slidingWindow.isAtEndOfSource()) {
          var d = this.currentCharCode();
          switch (d) {
            case 32:
            case 160:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8203:
            case 8239:
            case 12288:
            case 9:
            case 11:
            case 12:
            case 65279:
              c.push(this.scanWhitespaceTrivia());
              continue;
            case 47:
              var e = this.slidingWindow.peekItemN(1);
              if (e === 47) {
                c.push(this.scanSingleLineCommentTrivia());
                continue;
              }
              if (e === 42) {
                c.push(this.scanMultiLineCommentTrivia());
                continue;
              }
              throw a.Errors.invalidOperation();
            case 13:
            case 10:
            case 8233:
            case 8232:
              c.push(this.scanLineTerminatorSequenceTrivia(d));
              if (!b) continue;
              break;
            default:
              throw a.Errors.invalidOperation();
          }
        }
        return a.Syntax.triviaList(c);
      }
    };

    b.prototype.scanTriviaInfo = function(a, b) {
      var c = 0;

      var d = 0;
      for (;;) {
        var e = this.currentCharCode();
        switch (e) {
          case 32:
          case 160:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8203:
          case 8239:
          case 12288:
          case 9:
          case 11:
          case 12:
          case 65279:
            this.slidingWindow.moveToNextItem();

            c++;
            continue;
          case 47:
            var f = this.slidingWindow.peekItemN(1);
            if (f === 47) {
              d |= 2;

              c += this.scanSingleLineCommentTriviaLength();
              continue;
            }
            if (f === 42) {
              d |= 2;

              c += this.scanMultiLineCommentTriviaLength(a);
              continue;
            }
            break;
          case 13:
          case 10:
          case 8233:
          case 8232:
            d |= 1;

            c += this.scanLineTerminatorSequenceLength(e);
            if (!b) continue;
        }
        return c << 2 | d;
      }
    };

    b.prototype.isNewLineCharacter = function(a) {
      switch (a) {
        case 13:
        case 10:
        case 8233:
        case 8232:
          return !0;
        default:
          return !1;
      }
    };

    b.prototype.scanWhitespaceTrivia = function() {
      var b = this.slidingWindow.getAndPinAbsoluteIndex();

      var c = 0;
      for (;;) {
        var d = this.currentCharCode();
        switch (d) {
          case 32:
          case 160:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8203:
          case 8239:
          case 12288:
          case 9:
          case 11:
          case 12:
          case 65279:
            this.slidingWindow.moveToNextItem();

            c++;
            continue;
        }
        break;
      }
      var e = this.substring(b, b + c, !1);
      this.slidingWindow.releaseAndUnpinAbsoluteIndex(b);

      return a.Syntax.whitespace(e);
    };

    b.prototype.scanSingleLineCommentTrivia = function() {
      var b = this.slidingWindow.getAndPinAbsoluteIndex();

      var c = this.scanSingleLineCommentTriviaLength();

      var d = this.substring(b, b + c, !1);
      this.slidingWindow.releaseAndUnpinAbsoluteIndex(b);

      return a.Syntax.singleLineComment(d);
    };

    b.prototype.scanSingleLineCommentTriviaLength = function() {
      this.slidingWindow.moveToNextItem();

      this.slidingWindow.moveToNextItem();
      var a = 2;
      for (;;) {
        if (this.slidingWindow.isAtEndOfSource() || this.isNewLineCharacter(this.currentCharCode())) {
          return a;
        }
        this.slidingWindow.moveToNextItem();

        a++;
      }
    };

    b.prototype.scanMultiLineCommentTrivia = function() {
      var b = this.slidingWindow.getAndPinAbsoluteIndex();

      var c = this.scanMultiLineCommentTriviaLength(null);

      var d = this.substring(b, b + c, !1);
      this.slidingWindow.releaseAndUnpinAbsoluteIndex(b);

      return a.Syntax.multiLineComment(d);
    };

    b.prototype.scanMultiLineCommentTriviaLength = function(b) {
      this.slidingWindow.moveToNextItem();

      this.slidingWindow.moveToNextItem();
      var c = 2;
      for (;;) {
        if (this.slidingWindow.isAtEndOfSource()) {
          b !== null && b.push(new a.SyntaxDiagnostic(this.fileName, this.slidingWindow.absoluteIndex(), 0, 14, null));
          return c;
        }
        var d = this.currentCharCode();
        if (d === 42 && this.slidingWindow.peekItemN(1) === 47) {
          this.slidingWindow.moveToNextItem();
          this.slidingWindow.moveToNextItem();
          c += 2;
          return c;
        }
        this.slidingWindow.moveToNextItem();

        c++;
      }
    };

    b.prototype.scanLineTerminatorSequenceTrivia = function(b) {
      var c = this.slidingWindow.getAndPinAbsoluteIndex();

      var d = this.scanLineTerminatorSequenceLength(b);

      var e = this.substring(c, c + d, !1);
      this.slidingWindow.releaseAndUnpinAbsoluteIndex(c);

      return a.Syntax.trivia(5, e);
    };

    b.prototype.scanLineTerminatorSequenceLength = function(a) {
      this.slidingWindow.moveToNextItem();

      return a === 13 && this.currentCharCode() === 10 ? (this.slidingWindow.moveToNextItem(), 2) : 1;
    };

    b.prototype.scanSyntaxToken = function(a, c) {
      if (this.slidingWindow.isAtEndOfSource()) {
        return 10;
      }
      var d = this.currentCharCode();
      switch (d) {
        case 34:
        case 39:
          return this.scanStringLiteral(a);
        case 47:
          return this.scanSlashToken(c);
        case 46:
          return this.scanDotToken();
        case 45:
          return this.scanMinusToken();
        case 33:
          return this.scanExclamationToken();
        case 61:
          return this.scanEqualsToken();
        case 124:
          return this.scanBarToken();
        case 42:
          return this.scanAsteriskToken();
        case 43:
          return this.scanPlusToken();
        case 37:
          return this.scanPercentToken();
        case 38:
          return this.scanAmpersandToken();
        case 94:
          return this.scanCaretToken();
        case 60:
          return this.scanLessThanToken();
        case 62:
          return this.advanceAndSetTokenKind(82);
        case 44:
          return this.advanceAndSetTokenKind(80);
        case 58:
          return this.advanceAndSetTokenKind(107);
        case 59:
          return this.advanceAndSetTokenKind(79);
        case 126:
          return this.advanceAndSetTokenKind(103);
        case 40:
          return this.advanceAndSetTokenKind(73);
        case 41:
          return this.advanceAndSetTokenKind(74);
        case 123:
          return this.advanceAndSetTokenKind(71);
        case 125:
          return this.advanceAndSetTokenKind(72);
        case 91:
          return this.advanceAndSetTokenKind(75);
        case 93:
          return this.advanceAndSetTokenKind(76);
        case 63:
          return this.advanceAndSetTokenKind(106);
      }
      if (b.isNumericLiteralStart[d]) {
        return this.scanNumericLiteral();
      }
      if (b.isIdentifierStartCharacter[d]) {
        var e = this.tryFastScanIdentifierOrKeyword(d);
        if (e !== 0) {
          return e;
        }
      }
      return this.isIdentifierStart(this.peekCharOrUnicodeEscape()) ? this.slowScanIdentifier(a) : this.scanDefaultCharacter(
        d, a);
    };

    b.prototype.isIdentifierStart = function(c) {
      return b.isIdentifierStartCharacter[c] ? !0 : c > 127 && a.Unicode.isIdentifierStart(c, this._languageVersion);
    };

    b.prototype.isIdentifierPart = function(c) {
      return b.isIdentifierPartCharacter[c] ? !0 : c > 127 && a.Unicode.isIdentifierPart(c, this._languageVersion);
    };

    b.prototype.tryFastScanIdentifierOrKeyword = function(c) {
      var d = this.slidingWindow.getAndPinAbsoluteIndex();
      for (;;) {
        var e = this.currentCharCode();
        if (!b.isIdentifierPartCharacter[e]) {
          if (e === 92 || e > 127) {
            this.slidingWindow.rewindToPinnedIndex(d);
            this.slidingWindow.releaseAndUnpinAbsoluteIndex(d);
            return 0;
          }
          var f = this.slidingWindow.absoluteIndex();

          var g;
          if (b.isKeywordStartCharacter[c]) {
            var h = d - this.slidingWindow.windowAbsoluteStartIndex;
            g = a.ScannerUtilities.identifierKind(this.slidingWindow.window, h, f - d);
          } else {
            g = 11;
          }
          this.slidingWindow.releaseAndUnpinAbsoluteIndex(d);

          return g;
        }
        this.slidingWindow.moveToNextItem();
      }
    };

    b.prototype.slowScanIdentifier = function(a) {
      var b = this.slidingWindow.absoluteIndex();
      do {
        this.scanCharOrUnicodeEscape(a);
      } while (this.isIdentifierPart(this.peekCharOrUnicodeEscape()));
      return 11;
    };

    b.prototype.scanNumericLiteral = function() {
      return this.isHexNumericLiteral() ? this.scanHexNumericLiteral() : this.scanDecimalNumericLiteral();
    };

    b.prototype.scanDecimalNumericLiteral = function() {
      while (a.CharacterInfo.isDecimalDigit(this.currentCharCode())) {
        this.slidingWindow.moveToNextItem();
      }
      if (this.currentCharCode() === 46) {
        this.slidingWindow.moveToNextItem();
      }
      while (a.CharacterInfo.isDecimalDigit(this.currentCharCode())) {
        this.slidingWindow.moveToNextItem();
      }
      var b = this.currentCharCode();
      if (b === 101 || b === 69) {
        this.slidingWindow.moveToNextItem();
        b = this.currentCharCode();
        if ((b === 45 || b === 43) && a.CharacterInfo.isDecimalDigit(this.slidingWindow.peekItemN(1))) {
          this.slidingWindow.moveToNextItem();
        }
      }
      while (a.CharacterInfo.isDecimalDigit(this.currentCharCode())) {
        this.slidingWindow.moveToNextItem();
      }
      return 13;
    };

    b.prototype.scanHexNumericLiteral = function() {
      this.slidingWindow.moveToNextItem();

      this.slidingWindow.moveToNextItem();
      while (a.CharacterInfo.isHexDigit(this.currentCharCode())) {
        this.slidingWindow.moveToNextItem();
      }
      return 13;
    };

    b.prototype.isHexNumericLiteral = function() {
      if (this.currentCharCode() === 48) {
        var b = this.slidingWindow.peekItemN(1);
        if (b === 120 || b === 88) {
          b = this.slidingWindow.peekItemN(2);
          return a.CharacterInfo.isHexDigit(b);
        }
      }
      return !1;
    };

    b.prototype.advanceAndSetTokenKind = function(a) {
      this.slidingWindow.moveToNextItem();

      return a;
    };

    b.prototype.scanLessThanToken = function() {
      this.slidingWindow.moveToNextItem();

      return this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(), 83) : this.currentCharCode() ===
        60 ? (this.slidingWindow.moveToNextItem(), this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(),
          113) : 96) : 81;
    };

    b.prototype.scanBarToken = function() {
      this.slidingWindow.moveToNextItem();

      return this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(), 117) : this.currentCharCode() ===
        124 ? (this.slidingWindow.moveToNextItem(), 105) : 100;
    };

    b.prototype.scanCaretToken = function() {
      this.slidingWindow.moveToNextItem();

      return this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(), 118) : 101;
    };

    b.prototype.scanAmpersandToken = function() {
      this.slidingWindow.moveToNextItem();
      var a = this.currentCharCode();
      return a === 61 ? (this.slidingWindow.moveToNextItem(), 116) : this.currentCharCode() === 38 ? (this.slidingWindow
        .moveToNextItem(), 104) : 99;
    };

    b.prototype.scanPercentToken = function() {
      this.slidingWindow.moveToNextItem();

      return this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(), 112) : 93;
    };

    b.prototype.scanMinusToken = function() {
      this.slidingWindow.moveToNextItem();
      var a = this.currentCharCode();
      return a === 61 ? (this.slidingWindow.moveToNextItem(), 110) : a === 45 ? (this.slidingWindow.moveToNextItem(),
        95) : 91;
    };

    b.prototype.scanPlusToken = function() {
      this.slidingWindow.moveToNextItem();
      var a = this.currentCharCode();
      return a === 61 ? (this.slidingWindow.moveToNextItem(), 109) : a === 43 ? (this.slidingWindow.moveToNextItem(),
        94) : 90;
    };

    b.prototype.scanAsteriskToken = function() {
      this.slidingWindow.moveToNextItem();

      return this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(), 111) : 92;
    };

    b.prototype.scanEqualsToken = function() {
      this.slidingWindow.moveToNextItem();
      var a = this.currentCharCode();
      return a === 61 ? (this.slidingWindow.moveToNextItem(), this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(),
        88) : 85) : a === 62 ? (this.slidingWindow.moveToNextItem(), 86) : 108;
    };

    b.prototype.isDotPrefixedNumericLiteral = function() {
      if (this.currentCharCode() === 46) {
        var b = this.slidingWindow.peekItemN(1);
        return a.CharacterInfo.isDecimalDigit(b);
      }
      return !1;
    };

    b.prototype.scanDotToken = function() {
      return this.isDotPrefixedNumericLiteral() ? this.scanNumericLiteral() : (this.slidingWindow.moveToNextItem(),
        this.currentCharCode() === 46 && this.slidingWindow.peekItemN(1) === 46 ? (this.slidingWindow.moveToNextItem(),
          this.slidingWindow.moveToNextItem(), 78) : 77);
    };

    b.prototype.scanSlashToken = function(a) {
      if (a) {
        var b = this.tryScanRegularExpressionToken();
        if (b !== 0) {
          return b;
        }
      }
      this.slidingWindow.moveToNextItem();

      return this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(), 120) : 119;
    };

    b.prototype.tryScanRegularExpressionToken = function() {
      var a = this.slidingWindow.getAndPinAbsoluteIndex();
      try {
        this.slidingWindow.moveToNextItem();
        var c = !1;

        var d = !1;
        for (;;) {
          var e = this.currentCharCode();
          if (this.isNewLineCharacter(e) || this.slidingWindow.isAtEndOfSource()) {
            this.slidingWindow.rewindToPinnedIndex(a);
            return 0;
          }
          this.slidingWindow.moveToNextItem();
          if (c) {
            c = !1;
            continue;
          }
          switch (e) {
            case 92:
              c = !0;
              continue;
            case 91:
              d = !0;
              continue;
            case 93:
              d = !1;
              continue;
            case 47:
              if (d) continue;
              break;
            default:
              continue;
          }
          break;
        }
        while (b.isIdentifierPartCharacter[this.currentCharCode()]) {
          this.slidingWindow.moveToNextItem();
        }
        return 12;
      } finally {
        this.slidingWindow.releaseAndUnpinAbsoluteIndex(a);
      }
    };

    b.prototype.scanExclamationToken = function() {
      this.slidingWindow.moveToNextItem();

      return this.currentCharCode() === 61 ? (this.slidingWindow.moveToNextItem(), this.currentCharCode() === 61 ? (
        this.slidingWindow.moveToNextItem(), 89) : 87) : 102;
    };

    b.prototype.scanDefaultCharacter = function(b, c) {
      var d = this.slidingWindow.absoluteIndex();
      this.slidingWindow.moveToNextItem();
      var e = String.fromCharCode(b);

      var f = this.getErrorMessageText(e);
      c.push(new a.SyntaxDiagnostic(this.fileName, d, 1, 5, [f]));

      return 9;
    };

    b.prototype.getErrorMessageText = function(a) {
      return a === "\\" ? '"\\"' : JSON.stringify(a);
    };

    b.prototype.skipEscapeSequence = function(a) {
      var b = this.slidingWindow.getAndPinAbsoluteIndex();
      try {
        this.slidingWindow.moveToNextItem();
        var c = this.currentCharCode();
        this.slidingWindow.moveToNextItem();
        switch (c) {
          case 120:
          case 117:
            this.slidingWindow.rewindToPinnedIndex(b);
            var d = this.scanUnicodeOrHexEscape(a);
            return;
          case 13:
            if (this.currentCharCode() === 10) {
              this.slidingWindow.moveToNextItem();
            }
            return;
          default:
            return;
        }
      } finally {
        this.slidingWindow.releaseAndUnpinAbsoluteIndex(b);
      }
    };

    b.prototype.scanStringLiteral = function(b) {
      var c = this.currentCharCode();
      this.slidingWindow.moveToNextItem();
      for (;;) {
        var d = this.currentCharCode();
        if (d === 92) {
          this.skipEscapeSequence(b);
        } else {
          if (d === c) {
            this.slidingWindow.moveToNextItem();
            break;
          }
          if (this.isNewLineCharacter(d) || this.slidingWindow.isAtEndOfSource()) {
            b.push(new a.SyntaxDiagnostic(this.fileName, this.slidingWindow.absoluteIndex(), 1, 6, null));
            break;
          }
          this.slidingWindow.moveToNextItem();
        }
      }
      return 14;
    };

    b.prototype.isUnicodeOrHexEscape = function(a) {
      return this.isUnicodeEscape(a) || this.isHexEscape(a);
    };

    b.prototype.isUnicodeEscape = function(a) {
      if (a === 92) {
        var b = this.slidingWindow.peekItemN(1);
        if (b === 117) {
          return !0;
        }
      }
      return !1;
    };

    b.prototype.isHexEscape = function(a) {
      if (a === 92) {
        var b = this.slidingWindow.peekItemN(1);
        if (b === 120) {
          return !0;
        }
      }
      return !1;
    };

    b.prototype.peekCharOrUnicodeOrHexEscape = function() {
      var a = this.currentCharCode();
      return this.isUnicodeOrHexEscape(a) ? this.peekUnicodeOrHexEscape() : a;
    };

    b.prototype.peekCharOrUnicodeEscape = function() {
      var a = this.currentCharCode();
      return this.isUnicodeEscape(a) ? this.peekUnicodeOrHexEscape() : a;
    };

    b.prototype.peekUnicodeOrHexEscape = function() {
      var a = this.slidingWindow.getAndPinAbsoluteIndex();

      var b = this.scanUnicodeOrHexEscape(null);
      this.slidingWindow.rewindToPinnedIndex(a);

      this.slidingWindow.releaseAndUnpinAbsoluteIndex(a);

      return b;
    };

    b.prototype.scanCharOrUnicodeEscape = function(a) {
      var b = this.currentCharCode();
      if (b === 92) {
        var c = this.slidingWindow.peekItemN(1);
        if (c === 117) {
          return this.scanUnicodeOrHexEscape(a);
        }
      }
      this.slidingWindow.moveToNextItem();

      return b;
    };

    b.prototype.scanCharOrUnicodeOrHexEscape = function(a) {
      var b = this.currentCharCode();
      if (b === 92) {
        var c = this.slidingWindow.peekItemN(1);
        if (c === 117 || c === 120) {
          return this.scanUnicodeOrHexEscape(a);
        }
      }
      this.slidingWindow.moveToNextItem();

      return b;
    };

    b.prototype.scanUnicodeOrHexEscape = function(b) {
      var c = this.slidingWindow.absoluteIndex();

      var d = this.currentCharCode();
      this.slidingWindow.moveToNextItem();

      d = this.currentCharCode();
      var e = 0;
      this.slidingWindow.moveToNextItem();
      var f = d === 117 ? 4 : 2;
      for (var g = 0; g < f; g++) {
        var h = this.currentCharCode();
        if (!a.CharacterInfo.isHexDigit(h)) {
          if (b !== null) {
            var i = this.slidingWindow.absoluteIndex();

            var j = this.createIllegalEscapeDiagnostic(c, i);
            b.push(j);
          }
          break;
        }
        e = (e << 4) + a.CharacterInfo.hexValue(h);

        this.slidingWindow.moveToNextItem();
      }
      return e;
    };

    b.prototype.substring = function(b, c, d) {
      var e = c - b;

      var f = b - this.slidingWindow.windowAbsoluteStartIndex;
      return d ? a.Collections.DefaultStringTable.addCharArray(this.slidingWindow.window, f, e) : a.StringUtilities.fromCharCodeArray(
        this.slidingWindow.window.slice(f, f + e));
    };

    b.prototype.createIllegalEscapeDiagnostic = function(b, c) {
      return new a.SyntaxDiagnostic(this.fileName, b, c - b, 4, null);
    };

    b.isValidIdentifier = function(c, d) {
      var e = new b(null, c, a.LanguageVersion, b.triviaWindow);

      var f = [];

      var g = e.scan(f, !1);
      return f.length === 0 && a.SyntaxFacts.isIdentifierNameOrAnyKeyword(g) && g.width() === c.length();
    };

    b.isKeywordStartCharacter = [];

    b.isIdentifierStartCharacter = [];

    b.isIdentifierPartCharacter = [];

    b.isNumericLiteralStart = [];

    b.triviaWindow = a.ArrayUtilities.createArray(2048, 0);

    return b;
  }();
  a.Scanner = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.identifierKind = function(a, b, c) {
      switch (c) {
        case 2:
          switch (a[b]) {
            case 100:
              return a[b + 1] === 111 ? 22 : 11;
            case 105:
              switch (a[b + 1]) {
                case 102:
                  return 28;
                case 110:
                  return 29;
                default:
                  return 11;
              }
            default:
              return 11;
          }
        case 3:
          switch (a[b]) {
            case 102:
              return a[b + 1] === 111 && a[b + 2] === 114 ? 26 : 11;
            case 110:
              return a[b + 1] === 101 && a[b + 2] === 119 ? 31 : 11;
            case 116:
              return a[b + 1] === 114 && a[b + 2] === 121 ? 38 : 11;
            case 118:
              return a[b + 1] === 97 && a[b + 2] === 114 ? 40 : 11;
            case 108:
              return a[b + 1] === 101 && a[b + 2] === 116 ? 53 : 11;
            case 97:
              return a[b + 1] === 110 && a[b + 2] === 121 ? 60 : 11;
            case 103:
              return a[b + 1] === 101 && a[b + 2] === 116 ? 65 : 11;
            case 115:
              return a[b + 1] === 101 && a[b + 2] === 116 ? 69 : 11;
            default:
              return 11;
          }
        case 4:
          switch (a[b]) {
            case 99:
              return a[b + 1] === 97 && a[b + 2] === 115 && a[b + 3] === 101 ? 16 : 11;
            case 101:
              switch (a[b + 1]) {
                case 108:
                  return a[b + 2] === 115 && a[b + 3] === 101 ? 23 : 11;
                case 110:
                  return a[b + 2] === 117 && a[b + 3] === 109 ? 46 : 11;
                default:
                  return 11;
              }
            case 110:
              return a[b + 1] === 117 && a[b + 2] === 108 && a[b + 3] === 108 ? 32 : 11;
            case 116:
              switch (a[b + 1]) {
                case 104:
                  return a[b + 2] === 105 && a[b + 3] === 115 ? 35 : 11;
                case 114:
                  return a[b + 2] === 117 && a[b + 3] === 101 ? 37 : 11;
                default:
                  return 11;
              }
            case 118:
              return a[b + 1] === 111 && a[b + 2] === 105 && a[b + 3] === 100 ? 41 : 11;
            case 119:
              return a[b + 1] === 105 && a[b + 2] === 116 && a[b + 3] === 104 ? 43 : 11;
            case 98:
              return a[b + 1] === 111 && a[b + 2] === 111 && a[b + 3] === 108 ? 62 : 11;
            default:
              return 11;
          }
        case 5:
          switch (a[b]) {
            case 98:
              return a[b + 1] === 114 && a[b + 2] === 101 && a[b + 3] === 97 && a[b + 4] === 107 ? 15 : 11;
            case 99:
              switch (a[b + 1]) {
                case 97:
                  return a[b + 2] === 116 && a[b + 3] === 99 && a[b + 4] === 104 ? 17 : 11;
                case 108:
                  return a[b + 2] === 97 && a[b + 3] === 115 && a[b + 4] === 115 ? 44 : 11;
                case 111:
                  return a[b + 2] === 110 && a[b + 3] === 115 && a[b + 4] === 116 ? 45 : 11;
                default:
                  return 11;
              }
            case 102:
              return a[b + 1] === 97 && a[b + 2] === 108 && a[b + 3] === 115 && a[b + 4] === 101 ? 24 : 11;
            case 116:
              return a[b + 1] === 104 && a[b + 2] === 114 && a[b + 3] === 111 && a[b + 4] === 119 ? 36 : 11;
            case 119:
              return a[b + 1] === 104 && a[b + 2] === 105 && a[b + 3] === 108 && a[b + 4] === 101 ? 42 : 11;
            case 115:
              return a[b + 1] === 117 && a[b + 2] === 112 && a[b + 3] === 101 && a[b + 4] === 114 ? 50 : 11;
            case 121:
              return a[b + 1] === 105 && a[b + 2] === 101 && a[b + 3] === 108 && a[b + 4] === 100 ? 59 : 11;
            default:
              return 11;
          }
        case 6:
          switch (a[b]) {
            case 100:
              return a[b + 1] === 101 && a[b + 2] === 108 && a[b + 3] === 101 && a[b + 4] === 116 && a[b + 5] === 101 ?
                21 : 11;
            case 114:
              return a[b + 1] === 101 && a[b + 2] === 116 && a[b + 3] === 117 && a[b + 4] === 114 && a[b + 5] === 110 ?
                33 : 11;
            case 115:
              switch (a[b + 1]) {
                case 119:
                  return a[b + 2] === 105 && a[b + 3] === 116 && a[b + 4] === 99 && a[b + 5] === 104 ? 34 : 11;
                case 116:
                  switch (a[b + 2]) {
                    case 97:
                      return a[b + 3] === 116 && a[b + 4] === 105 && a[b + 5] === 99 ? 58 : 11;
                    case 114:
                      return a[b + 3] === 105 && a[b + 4] === 110 && a[b + 5] === 103 ? 70 : 11;
                    default:
                      return 11;
                  }
                default:
                  return 11;
              }
            case 116:
              return a[b + 1] === 121 && a[b + 2] === 112 && a[b + 3] === 101 && a[b + 4] === 111 && a[b + 5] === 102 ?
                39 : 11;
            case 101:
              return a[b + 1] === 120 && a[b + 2] === 112 && a[b + 3] === 111 && a[b + 4] === 114 && a[b + 5] === 116 ?
                47 : 11;
            case 105:
              return a[b + 1] === 109 && a[b + 2] === 112 && a[b + 3] === 111 && a[b + 4] === 114 && a[b + 5] === 116 ?
                49 : 11;
            case 112:
              return a[b + 1] === 117 && a[b + 2] === 98 && a[b + 3] === 108 && a[b + 4] === 105 && a[b + 5] === 99 ?
                57 : 11;
            case 109:
              return a[b + 1] === 111 && a[b + 2] === 100 && a[b + 3] === 117 && a[b + 4] === 108 && a[b + 5] === 101 ?
                66 : 11;
            case 110:
              return a[b + 1] === 117 && a[b + 2] === 109 && a[b + 3] === 98 && a[b + 4] === 101 && a[b + 5] === 114 ?
                68 : 11;
            default:
              return 11;
          }
        case 7:
          switch (a[b]) {
            case 100:
              switch (a[b + 1]) {
                case 101:
                  switch (a[b + 2]) {
                    case 102:
                      return a[b + 3] === 97 && a[b + 4] === 117 && a[b + 5] === 108 && a[b + 6] === 116 ? 20 : 11;
                    case 99:
                      return a[b + 3] === 108 && a[b + 4] === 97 && a[b + 5] === 114 && a[b + 6] === 101 ? 64 : 11;
                    default:
                      return 11;
                  }
                default:
                  return 11;
              }
            case 102:
              return a[b + 1] === 105 && a[b + 2] === 110 && a[b + 3] === 97 && a[b + 4] === 108 && a[b + 5] === 108 &&
                a[b + 6] === 121 ? 25 : 11;
            case 101:
              return a[b + 1] === 120 && a[b + 2] === 116 && a[b + 3] === 101 && a[b + 4] === 110 && a[b + 5] === 100 &&
                a[b + 6] === 115 ? 48 : 11;
            case 112:
              switch (a[b + 1]) {
                case 97:
                  return a[b + 2] === 99 && a[b + 3] === 107 && a[b + 4] === 97 && a[b + 5] === 103 && a[b + 6] ===
                    101 ? 54 : 11;
                case 114:
                  return a[b + 2] === 105 && a[b + 3] === 118 && a[b + 4] === 97 && a[b + 5] === 116 && a[b + 6] ===
                    101 ? 55 : 11;
                default:
                  return 11;
              }
            case 98:
              return a[b + 1] === 111 && a[b + 2] === 111 && a[b + 3] === 108 && a[b + 4] === 101 && a[b + 5] === 97 &&
                a[b + 6] === 110 ? 61 : 11;
            case 114:
              return a[b + 1] === 101 && a[b + 2] === 113 && a[b + 3] === 117 && a[b + 4] === 105 && a[b + 5] === 114 &&
                a[b + 6] === 101 ? 67 : 11;
            default:
              return 11;
          }
        case 8:
          switch (a[b]) {
            case 99:
              return a[b + 1] === 111 && a[b + 2] === 110 && a[b + 3] === 116 && a[b + 4] === 105 && a[b + 5] === 110 &&
                a[b + 6] === 117 && a[b + 7] === 101 ? 18 : 11;
            case 100:
              return a[b + 1] === 101 && a[b + 2] === 98 && a[b + 3] === 117 && a[b + 4] === 103 && a[b + 5] === 103 &&
                a[b + 6] === 101 && a[b + 7] === 114 ? 19 : 11;
            case 102:
              return a[b + 1] === 117 && a[b + 2] === 110 && a[b + 3] === 99 && a[b + 4] === 116 && a[b + 5] === 105 &&
                a[b + 6] === 111 && a[b + 7] === 110 ? 27 : 11;
            default:
              return 11;
          }
        case 9:
          switch (a[b]) {
            case 105:
              return a[b + 1] === 110 && a[b + 2] === 116 && a[b + 3] === 101 && a[b + 4] === 114 && a[b + 5] === 102 &&
                a[b + 6] === 97 && a[b + 7] === 99 && a[b + 8] === 101 ? 52 : 11;
            case 112:
              return a[b + 1] === 114 && a[b + 2] === 111 && a[b + 3] === 116 && a[b + 4] === 101 && a[b + 5] === 99 &&
                a[b + 6] === 116 && a[b + 7] === 101 && a[b + 8] === 100 ? 56 : 11;
            default:
              return 11;
          }
        case 10:
          switch (a[b]) {
            case 105:
              switch (a[b + 1]) {
                case 110:
                  return a[b + 2] === 115 && a[b + 3] === 116 && a[b + 4] === 97 && a[b + 5] === 110 && a[b + 6] ===
                    99 && a[b + 7] === 101 && a[b + 8] === 111 && a[b + 9] === 102 ? 30 : 11;
                case 109:
                  return a[b + 2] === 112 && a[b + 3] === 108 && a[b + 4] === 101 && a[b + 5] === 109 && a[b + 6] ===
                    101 && a[b + 7] === 110 && a[b + 8] === 116 && a[b + 9] === 115 ? 51 : 11;
                default:
                  return 11;
              }
            default:
              return 11;
          }
        case 11:
          return a[b] === 99 && a[b + 1] === 111 && a[b + 2] === 110 && a[b + 3] === 115 && a[b + 4] === 116 && a[b +
            5] === 114 && a[b + 6] === 117 && a[b + 7] === 99 && a[b + 8] === 116 && a[b + 9] === 111 && a[b + 10] ===
            114 ? 63 : 11;
        default:
          return 11;
      }
    };

    return a;
  }();
  a.ScannerUtilities = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function f(a) {
      return g(a, !1);
    }

    function g(a, c) {
      if (a === undefined || a === null || a.length === 0) {
        return b.emptySeparatedList;
      }
      if (c)
        for (var f = 0; f < a.length; f++) {
          var g = a[f];
          f % 2 !== 1;
        }
      return a.length === 1 ? new d(a[0]) : new e(a);
    }
    var c = function() {
      function c() {}
      c.prototype.kind = function() {
        return 2;
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !1;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !0;
      };

      c.prototype.toJSON = function(a) {
        return [];
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.nonSeparatorCount = function() {
        return 0;
      };

      c.prototype.separatorCount = function() {
        return 0;
      };

      c.prototype.toArray = function() {
        return [];
      };

      c.prototype.toNonSeparatorArray = function() {
        return [];
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.nonSeparatorAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.separatorAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.collectTextElements = function(a) {};

      c.prototype.firstToken = function() {
        return null;
      };

      c.prototype.lastToken = function() {
        return null;
      };

      c.prototype.fullWidth = function() {
        return 0;
      };

      c.prototype.fullText = function() {
        return "";
      };

      c.prototype.width = function() {
        return 0;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return !1;
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        throw a.Errors.invalidOperation();
      };

      c.prototype.insertChildrenInto = function(a, b) {};

      c.prototype.leadingTrivia = function() {
        return b.emptyTriviaList;
      };

      c.prototype.trailingTrivia = function() {
        return b.emptyTriviaList;
      };

      c.prototype.leadingTriviaWidth = function() {
        return 0;
      };

      c.prototype.trailingTriviaWidth = function() {
        return 0;
      };

      return c;
    }();
    b.emptySeparatedList = new c;
    var d = function() {
      function b(a) {
        this.item = a;
      }
      b.prototype.toJSON = function(a) {
        return [this.item];
      };

      b.prototype.kind = function() {
        return 2;
      };

      b.prototype.isNode = function() {
        return !1;
      };

      b.prototype.isToken = function() {
        return !1;
      };

      b.prototype.isList = function() {
        return !1;
      };

      b.prototype.isSeparatedList = function() {
        return !0;
      };

      b.prototype.childCount = function() {
        return 1;
      };

      b.prototype.nonSeparatorCount = function() {
        return 1;
      };

      b.prototype.separatorCount = function() {
        return 0;
      };

      b.prototype.toArray = function() {
        return [this.item];
      };

      b.prototype.toNonSeparatorArray = function() {
        return [this.item];
      };

      b.prototype.childAt = function(b) {
        if (b !== 0) throw a.Errors.argumentOutOfRange("index");
        return this.item;
      };

      b.prototype.nonSeparatorAt = function(b) {
        if (b !== 0) throw a.Errors.argumentOutOfRange("index");
        return this.item;
      };

      b.prototype.separatorAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      b.prototype.collectTextElements = function(a) {
        this.item.collectTextElements(a);
      };

      b.prototype.firstToken = function() {
        return this.item.firstToken();
      };

      b.prototype.lastToken = function() {
        return this.item.lastToken();
      };

      b.prototype.fullWidth = function() {
        return this.item.fullWidth();
      };

      b.prototype.width = function() {
        return this.item.width();
      };

      b.prototype.fullText = function() {
        return this.item.fullText();
      };

      b.prototype.leadingTrivia = function() {
        return this.item.leadingTrivia();
      };

      b.prototype.trailingTrivia = function() {
        return this.item.trailingTrivia();
      };

      b.prototype.leadingTriviaWidth = function() {
        return this.item.leadingTriviaWidth();
      };

      b.prototype.trailingTriviaWidth = function() {
        return this.item.trailingTriviaWidth();
      };

      b.prototype.isTypeScriptSpecific = function() {
        return this.item.isTypeScriptSpecific();
      };

      b.prototype.isIncrementallyUnusable = function() {
        return this.item.isIncrementallyUnusable();
      };

      b.prototype.findTokenInternal = function(b, c, d) {
        return this.item.findTokenInternal(new a.PositionedSeparatedList(b, this, d), c, d);
      };

      b.prototype.insertChildrenInto = function(a, b) {
        a.splice(b, 0, this.item);
      };

      return b;
    }();

    var e = function() {
      function b(a) {
        this._data = 0;

        this.elements = a;
      }
      b.prototype.kind = function() {
        return 2;
      };

      b.prototype.isToken = function() {
        return !1;
      };

      b.prototype.isNode = function() {
        return !1;
      };

      b.prototype.isList = function() {
        return !1;
      };

      b.prototype.isSeparatedList = function() {
        return !0;
      };

      b.prototype.toJSON = function(a) {
        return this.elements;
      };

      b.prototype.childCount = function() {
        return this.elements.length;
      };

      b.prototype.nonSeparatorCount = function() {
        return a.IntegerUtilities.integerDivide(this.elements.length + 1, 2);
      };

      b.prototype.separatorCount = function() {
        return a.IntegerUtilities.integerDivide(this.elements.length, 2);
      };

      b.prototype.toArray = function() {
        return this.elements.slice(0);
      };

      b.prototype.toNonSeparatorArray = function() {
        var a = [];
        for (var b = 0, c = this.nonSeparatorCount(); b < c; b++) {
          a.push(this.nonSeparatorAt(b));
        }
        return a;
      };

      b.prototype.childAt = function(b) {
        if (b < 0 || b >= this.elements.length) throw a.Errors.argumentOutOfRange("index");
        return this.elements[b];
      };

      b.prototype.nonSeparatorAt = function(b) {
        var c = b * 2;
        if (c < 0 || c >= this.elements.length) throw a.Errors.argumentOutOfRange("index");
        return this.elements[c];
      };

      b.prototype.separatorAt = function(b) {
        var c = b * 2 + 1;
        if (c < 0 || c >= this.elements.length) throw a.Errors.argumentOutOfRange("index");
        return this.elements[c];
      };

      b.prototype.firstToken = function() {
        var a;
        for (var b = 0, c = this.elements.length; b < c; b++)
          if (b % 2 === 0) {
            var d = this.elements[b];
            a = d.firstToken();
            if (a !== null) {
              return a;
            }
          } else {
            a = this.elements[b];
            if (a.width() > 0) {
              return a;
            }
          }
        return null;
      };

      b.prototype.lastToken = function() {
        var a;
        for (var b = this.elements.length - 1; b >= 0; b--)
          if (b % 2 === 0) {
            var c = this.elements[b];
            a = c.lastToken();
            if (a !== null) {
              return a;
            }
          } else {
            a = this.elements[b];
            if (a.width() > 0) {
              return a;
            }
          }
        return null;
      };

      b.prototype.fullText = function() {
        var a = [];
        this.collectTextElements(a);

        return a.join("");
      };

      b.prototype.isTypeScriptSpecific = function() {
        for (var a = 0, b = this.nonSeparatorCount(); a < b; a++)
          if (this.nonSeparatorAt(a).isTypeScriptSpecific()) {
            return !0;
          }
        return !1;
      };

      b.prototype.isIncrementallyUnusable = function() {
        return (this.data() & 2) !== 0;
      };

      b.prototype.fullWidth = function() {
        return this.data() >>> 3;
      };

      b.prototype.width = function() {
        var a = this.fullWidth();
        return a - this.leadingTriviaWidth() - this.trailingTriviaWidth();
      };

      b.prototype.leadingTrivia = function() {
        return this.firstToken().leadingTrivia();
      };

      b.prototype.trailingTrivia = function() {
        return this.lastToken().trailingTrivia();
      };

      b.prototype.leadingTriviaWidth = function() {
        return this.firstToken().leadingTriviaWidth();
      };

      b.prototype.trailingTriviaWidth = function() {
        return this.lastToken().trailingTriviaWidth();
      };

      b.prototype.computeData = function() {
        var a = 0;

        var b = !1;
        for (var c = 0, d = this.elements.length; c < d; c++) {
          var e = this.elements[c];

          var f = e.fullWidth();
          a += f;

          b = b || e.isIncrementallyUnusable();
        }
        return a << 3 | (b ? 2 : 0) | 1;
      };

      b.prototype.data = function() {
        (this._data & 1) === 0 && (this._data = this.computeData());

        return this._data;
      };

      b.prototype.findTokenInternal = function(b, c, d) {
        b = new a.PositionedSeparatedList(b, this, d);
        for (var e = 0, f = this.elements.length; e < f; e++) {
          var g = this.elements[e];

          var h = g.fullWidth();
          if (c < h) {
            return g.findTokenInternal(b, c, d);
          }
          c -= h;

          d += h;
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.collectTextElements = function(a) {
        for (var b = 0, c = this.elements.length; b < c; b++) {
          var d = this.elements[b];
          d.collectTextElements(a);
        }
      };

      b.prototype.insertChildrenInto = function(a, b) {
        if (b === 0) {
          a.unshift.apply(a, this.elements);
        } else {
          a.splice.apply(a, [b, 0].concat(this.elements));
        }
      };

      return b;
    }();
    b.separatedList = f;
  })(a.Syntax || (a.Syntax = {}));
  var b = a.Syntax;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a, b, c, d) {
      if (typeof d == "undefined") {
        d = -1;
      }

      this.source = a;

      this.window = b;

      this.defaultValue = c;

      this.sourceLength = d;

      this.windowCount = 0;

      this.windowAbsoluteStartIndex = 0;

      this.currentRelativeItemIndex = 0;

      this._pinCount = 0;

      this.firstPinnedAbsoluteIndex = -1;
    }
    b.prototype.windowAbsoluteEndIndex = function() {
      return this.windowAbsoluteStartIndex + this.windowCount;
    };

    b.prototype.addMoreItemsToWindow = function(a) {
      if (this.sourceLength >= 0 && this.absoluteIndex() >= this.sourceLength) {
        return !1;
      }
      if (this.windowCount >= this.window.length) {
        this.tryShiftOrGrowWindow();
      }
      var b = this.window.length - this.windowCount;

      var c = this.source.fetchMoreItems(a, this.windowAbsoluteEndIndex(), this.window, this.windowCount, b);
      this.windowCount += c;

      return c > 0;
    };

    b.prototype.tryShiftOrGrowWindow = function() {
      var b = this.currentRelativeItemIndex > this.window.length >>> 1;

      var c = this.firstPinnedAbsoluteIndex === -1 || this.firstPinnedAbsoluteIndex > this.windowAbsoluteStartIndex;
      if (b && c) {
        var d = this.firstPinnedAbsoluteIndex === -1 ? this.currentRelativeItemIndex : this.firstPinnedAbsoluteIndex -
          this.windowAbsoluteStartIndex;

        var e = this.windowCount - d;
        if (e > 0) {
          a.ArrayUtilities.copy(this.window, d, this.window, 0, e);
        }

        this.windowAbsoluteStartIndex += d;

        this.windowCount -= d;

        this.currentRelativeItemIndex -= d;
      } else {
        a.ArrayUtilities.grow(this.window, this.window.length * 2, this.defaultValue);
      }
    };

    b.prototype.absoluteIndex = function() {
      return this.windowAbsoluteStartIndex + this.currentRelativeItemIndex;
    };

    b.prototype.isAtEndOfSource = function() {
      return this.absoluteIndex() >= this.sourceLength;
    };

    b.prototype.getAndPinAbsoluteIndex = function() {
      var a = this.absoluteIndex();

      var b = this._pinCount++;
      b === 0 && (this.firstPinnedAbsoluteIndex = a);

      return a;
    };

    b.prototype.releaseAndUnpinAbsoluteIndex = function(a) {
      this._pinCount--;

      if (this._pinCount === 0) {
        this.firstPinnedAbsoluteIndex = -1;
      }
    };

    b.prototype.rewindToPinnedIndex = function(a) {
      var b = a - this.windowAbsoluteStartIndex;
      this.currentRelativeItemIndex = b;
    };

    b.prototype.currentItem = function(a) {
      return this.currentRelativeItemIndex >= this.windowCount && !this.addMoreItemsToWindow(a) ? this.defaultValue :
        this.window[this.currentRelativeItemIndex];
    };

    b.prototype.peekItemN = function(a) {
      while (this.currentRelativeItemIndex + a >= this.windowCount)
        if (!this.addMoreItemsToWindow(null)) {
          return this.defaultValue;
        }
      return this.window[this.currentRelativeItemIndex + a];
    };

    b.prototype.moveToNextItem = function() {
      this.currentRelativeItemIndex++;
    };

    b.prototype.disgardAllItemsFromCurrentIndexOnwards = function() {
      this.windowCount = this.currentRelativeItemIndex;
    };

    b.prototype.setAbsoluteIndex = function(a) {
      if (this.absoluteIndex() === a) return;
      !(this._pinCount > 0);

      if (a >= this.windowAbsoluteStartIndex && a < this.windowAbsoluteEndIndex()) {
        this.currentRelativeItemIndex = a - this.windowAbsoluteStartIndex;
      } else {
        this.windowAbsoluteStartIndex = a;
        this.windowCount = 0;
        this.currentRelativeItemIndex = 0;
      }
    };

    b.prototype.pinCount = function() {
      return this._pinCount;
    };

    return b;
  }();
  a.SlidingWindow = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.module__class__interface__enum__import_or_statement = "module, class, interface, enum, import or statement";

    a.constructor__function__accessor_or_variable = "constructor, function, accessor or variable";

    a.statement = "statement";

    a.case_or_default_clause = "case or default clause";

    a.identifier = "identifier";

    a.call__construct__index__property_or_function_signature =
      "call, construct, index, property or function signature";

    a.expression = "expression";

    a.type_name = "type name";

    a.property_or_accessor = "property or accessor";

    a.parameter = "parameter";

    a.type = "type";

    a.type_parameter = "type parameter";

    return a;
  }();
  a.Strings = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function c() {
      return a.Syntax.normalModeFactory.sourceUnit(a.Syntax.emptyList, a.Syntax.token(10, {
        text: ""
      }));
    }

    function d(a) {
      var b = a.token();
      if (a !== null && a.kind() === 11) {
        var c = a.containingNode();

        var d = c.node();
        if (d.kind() === 122 && d.right === b) {
          return c;
        }
        if (d.kind() === 211 && d.name === b) {
          return c;
        }
      }
      return a;
    }

    function e(b) {
      if (b !== null) {
        var c = a.Syntax.getStandaloneExpression(b);

        var d = c.containingNode();
        if (d !== null) switch (d.kind()) {
          case 246:
            return !0;
          case 122:
            return !0;
          default:
            return f(b);
        }
      }
      return !1;
    }

    function f(b) {
      var c = a.Syntax.getStandaloneExpression(b);

      var d = c.containingNode();

      var e = d.node();

      var f = c.nodeOrToken();
      if (e !== null) switch (e.kind()) {
        case 125:
          return e.type === f;
        case 219:
          return e.type === f;
        case 244:
        case 229:
        case 227:
          return !0;
      }
      return !1;
    }

    function g(b, c) {
      var d = 0;
      for (var e = 0, f = b.childCount(); e < f; e++) {
        var g = b.childAt(e);
        if (g === c) {
          return d;
        }
        if (g !== null) {
          d += g.fullWidth();
        }
      }
      throw a.Errors.invalidOperation();
    }

    function h(a, b) {
      var c = 0;
      for (var d = 0; d < b; d++) {
        var e = a.childAt(d);
        if (e !== null) {
          c += e.fullWidth();
        }
      }
      return c;
    }

    function i(b, c) {
      for (var d = 0, e = b.childCount(); d < e; d++) {
        var f = b.childAt(d);
        if (f === c) {
          return d;
        }
      }
      throw a.Errors.invalidOperation();
    }

    function j(a, b) {
      return a === null ? b === null : a.structuralEquals(b);
    }

    function k(a, b) {
      return a === b ? !0 : a === null || b === null ? !1 : a.isToken() ? b.isToken() ? l(a, b) : !1 : b.isNode() ?
        j(a, b) : !1;
    }

    function l(b, c) {
      return b === c ? !0 : b === null || c === null ? !1 : b.kind() === c.kind() && b.width() === c.width() && b.fullWidth() ===
        c.fullWidth() && b.text() === c.text() && a.Syntax.triviaListStructuralEquals(b.leadingTrivia(), c.leadingTrivia()) &&
        a.Syntax.triviaListStructuralEquals(b.trailingTrivia(), c.trailingTrivia());
    }

    function m(b, c) {
      if (b.count() !== c.count()) {
        return !1;
      }
      for (var d = 0, e = b.count(); d < e; d++)
        if (!a.Syntax.triviaStructuralEquals(b.syntaxTriviaAt(d), c.syntaxTriviaAt(d))) {
          return !1;
        }
      return !0;
    }

    function n(a, b) {
      return a.kind() === b.kind() && a.fullWidth() === b.fullWidth() && a.fullText() === b.fullText();
    }

    function o(b, c) {
      if (b.childCount() !== c.childCount()) {
        return !1;
      }
      for (var d = 0, e = b.childCount(); d < e; d++) {
        var f = b.childAt(d);

        var g = c.childAt(d);
        if (!a.Syntax.nodeOrTokenStructuralEquals(f, g)) {
          return !1;
        }
      }
      return !0;
    }

    function p(b, c) {
      if (b.childCount() !== c.childCount()) {
        return !1;
      }
      for (var d = 0, e = b.childCount(); d < e; d++) {
        var f = b.childAt(d);

        var g = c.childAt(d);
        if (!a.Syntax.nodeOrTokenStructuralEquals(f, g)) {
          return !1;
        }
      }
      return !0;
    }

    function q(b, c) {
      if (b === c) {
        return !0;
      }
      if (b === null || c === null) {
        return !1;
      }
      if (c.kind() !== c.kind()) {
        return !1;
      }
      if (b.isToken()) {
        return l(b, c);
      }
      if (b.isNode()) {
        return j(b, c);
      }
      if (b.isList()) {
        return o(b, c);
      }
      if (b.isSeparatedList()) {
        return p(b, c);
      }
      throw a.Errors.invalidOperation();
    }

    function r(a, c) {
      typeof c == "undefined" && (c = null);

      return b.identifier(a);
    }

    function s() {
      return a.Syntax.token(37);
    }

    function t() {
      return a.Syntax.token(24);
    }

    function u(b) {
      return a.Syntax.token(13, {
        text: b
      });
    }

    function v(b) {
      return a.Syntax.token(14, {
        text: b
      });
    }

    function w(a) {
      return a.kind() === 212 && a.expression.kind() === 50;
    }

    function x(a) {
      return a.kind() === 148 && w(a.expression);
    }

    function y(a) {
      return a.kind() === 211 && a.expression.kind() === 50;
    }

    function z(a) {
      return a.kind() === 212 && y(a.expression);
    }

    function A(b, c, d) {
      return a.Syntax.normalModeFactory.binaryExpression(173, b, c, d);
    }

    function B(a) {
      for (var b = 0; b < a.childCount(); b++) {
        var c = a.childAt(b);
        if (c !== null && c.isToken()) {
          var d = c;
          if (d.hasSkippedToken() || d.width() === 0 && d.kind() !== 10) {
            return !0;
          }
        }
      }
      return !1;
    }

    function C(a) {
      if (a && a.kind() === 14) {
        var b = a.text();
        return b.length < 2 || b.charCodeAt(b.length - 1) !== b.charCodeAt(0);
      }
      return !1;
    }

    function D(a) {
      if (a && a.kind() === 6) {
        var b = a.fullText();
        return b.length < 4 || b.substring(b.length - 2) !== "*/";
      }
      return !1;
    }

    function E(a, b, c) {
      if (a && a.isComment() && c > b) {
        var d = b + a.fullWidth();
        if (c < d) {
          return !0;
        }
        if (c === d) {
          return a.kind() === 7 || D(a);
        }
      }
      return !1;
    }

    function F(a, b) {
      var c = a.findToken(b);

      var d = c.fullStart();

      var e = null;

      var f = null;
      if (c.kind() === 10) {
        if (c.token().hasLeadingTrivia()) {
          e = c.token().leadingTrivia();
        } else {
          c = c.previousToken();
          if (c && c && c.token().hasTrailingTrivia()) {
            e = c.token().trailingTrivia();
            d = c.end();
          }
        }
      } else {
        if (b <= d + c.token().leadingTriviaWidth()) {
          e = c.token().leadingTrivia();
        } else {
          if (b >= d + c.token().width()) {
            e = c.token().trailingTrivia();
            d = c.end();
          }
        }
      }
      if (e)
        for (var g = 0, h = e.count(); g < h; g++) {
          var i = e.syntaxTriviaAt(g);
          if (b <= d) break;
          if (b <= d + i.fullWidth() && i.isComment()) {
            f = i;
            break;
          }
          d += i.fullWidth();
        }
      return f && E(f, d, b);
    }

    function G(a, b) {
      var c = a.findToken(b);
      if (c) {
        if (c.kind() === 10) {
          c = c.previousToken();
          return c && c.token().trailingTriviaWidth() === 0 && C(c.token());
        }
        if (b > c.start()) {
          return b < c.end() && (c.kind() === 14 || c.kind() === 12) || b <= c.end() && C(c.token());
        }
      }
      return !1;
    }

    function H(b, c, d) {
      var e = null;

      var f;
      if (d) {
        e = b.token().leadingTrivia();
        f = b.fullStart();
      } else {
        e = b.token().trailingTrivia();
        f = b.end();
      }
      if (e && e.hasSkippedToken())
        for (var g = 0, h = e.count(); g < h; g++) {
          var i = e.syntaxTriviaAt(g);

          var j = i.fullWidth();
          if (i.isSkippedToken() && c >= f && c <= f + j) {
            return new a.PositionedSkippedToken(b, i.skippedToken(), f);
          }
          f += j;
        }
      return null;
    }

    function I(a, b) {
      return H(a, b, !0);
    }

    function J(a, b) {
      return H(a, b, !1);
    }

    function K(a, b) {
      var c = b < a.start();
      return H(a, b, c);
    }

    function L(a, b) {
      while (a && a.parent()) {
        if (a.parent().kind() === b) {
          return a.parent();
        }
        a = a.parent();
      }
      return null;
    }

    function M(b, c) {
      return a.Syntax.getAncestorOfKind(b, c) !== null;
    }
    b.emptySourceUnit = c;

    b.getStandaloneExpression = d;

    b.isInModuleOrTypeContext = e;

    b.isInTypeOnlyContext = f;

    b.childOffset = g;

    b.childOffsetAt = h;

    b.childIndex = i;

    b.nodeStructuralEquals = j;

    b.nodeOrTokenStructuralEquals = k;

    b.tokenStructuralEquals = l;

    b.triviaListStructuralEquals = m;

    b.triviaStructuralEquals = n;

    b.listStructuralEquals = o;

    b.separatedListStructuralEquals = p;

    b.elementStructuralEquals = q;

    b.identifierName = r;

    b.trueExpression = s;

    b.falseExpression = t;

    b.numericLiteralExpression = u;

    b.stringLiteralExpression = v;

    b.isSuperInvocationExpression = w;

    b.isSuperInvocationExpressionStatement = x;

    b.isSuperMemberAccessExpression = y;

    b.isSuperMemberAccessInvocationExpression = z;

    b.assignmentExpression = A;

    b.nodeHasSkippedOrMissingTokens = B;

    b.isUnterminatedStringLiteral = C;

    b.isUnterminatedMultilineCommentTrivia = D;

    b.isEntirelyInsideCommentTrivia = E;

    b.isEntirelyInsideComment = F;

    b.isEntirelyInStringOrRegularExpressionLiteral = G;

    b.findSkippedTokenInLeadingTriviaList = I;

    b.findSkippedTokenInTrailingTriviaList = J;

    b.findSkippedTokenInPositionedToken = K;

    b.getAncestorOfKind = L;

    b.hasAncestorOfKind = M;
  })(a.Syntax || (a.Syntax = {}));
  var b = a.Syntax;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(b) {
    function c() {
      b.apply(this, arguments);
    }
    __extends(c, b);

    c.equals = function(b, c) {
      return a.Diagnostic.equals(b, c);
    };

    return c;
  }(a.Diagnostic);
  a.SyntaxDiagnostic = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function() {
      function b() {}
      b.prototype.sourceUnit = function(b, c) {
        return new a.SourceUnitSyntax(b, c, !1);
      };

      b.prototype.externalModuleReference = function(b, c, d, e) {
        return new a.ExternalModuleReferenceSyntax(b, c, d, e, !1);
      };

      b.prototype.moduleNameModuleReference = function(b) {
        return new a.ModuleNameModuleReferenceSyntax(b, !1);
      };

      b.prototype.importDeclaration = function(b, c, d, e, f) {
        return new a.ImportDeclarationSyntax(b, c, d, e, f, !1);
      };

      b.prototype.exportAssignment = function(b, c, d, e) {
        return new a.ExportAssignmentSyntax(b, c, d, e, !1);
      };

      b.prototype.classDeclaration = function(b, c, d, e, f, g, h, i) {
        return new a.ClassDeclarationSyntax(b, c, d, e, f, g, h, i, !1);
      };

      b.prototype.interfaceDeclaration = function(b, c, d, e, f, g) {
        return new a.InterfaceDeclarationSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.heritageClause = function(b, c) {
        return new a.HeritageClauseSyntax(b, c, !1);
      };

      b.prototype.moduleDeclaration = function(b, c, d, e, f, g, h) {
        return new a.ModuleDeclarationSyntax(b, c, d, e, f, g, h, !1);
      };

      b.prototype.functionDeclaration = function(b, c, d, e, f, g) {
        return new a.FunctionDeclarationSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.variableStatement = function(b, c, d) {
        return new a.VariableStatementSyntax(b, c, d, !1);
      };

      b.prototype.variableDeclaration = function(b, c) {
        return new a.VariableDeclarationSyntax(b, c, !1);
      };

      b.prototype.variableDeclarator = function(b, c, d) {
        return new a.VariableDeclaratorSyntax(b, c, d, !1);
      };

      b.prototype.equalsValueClause = function(b, c) {
        return new a.EqualsValueClauseSyntax(b, c, !1);
      };

      b.prototype.prefixUnaryExpression = function(b, c, d) {
        return new a.PrefixUnaryExpressionSyntax(b, c, d, !1);
      };

      b.prototype.arrayLiteralExpression = function(b, c, d) {
        return new a.ArrayLiteralExpressionSyntax(b, c, d, !1);
      };

      b.prototype.omittedExpression = function() {
        return new a.OmittedExpressionSyntax(!1);
      };

      b.prototype.parenthesizedExpression = function(b, c, d) {
        return new a.ParenthesizedExpressionSyntax(b, c, d, !1);
      };

      b.prototype.simpleArrowFunctionExpression = function(b, c, d) {
        return new a.SimpleArrowFunctionExpressionSyntax(b, c, d, !1);
      };

      b.prototype.parenthesizedArrowFunctionExpression = function(b, c, d) {
        return new a.ParenthesizedArrowFunctionExpressionSyntax(b, c, d, !1);
      };

      b.prototype.qualifiedName = function(b, c, d) {
        return new a.QualifiedNameSyntax(b, c, d, !1);
      };

      b.prototype.typeArgumentList = function(b, c, d) {
        return new a.TypeArgumentListSyntax(b, c, d, !1);
      };

      b.prototype.constructorType = function(b, c, d, e, f) {
        return new a.ConstructorTypeSyntax(b, c, d, e, f, !1);
      };

      b.prototype.functionType = function(b, c, d, e) {
        return new a.FunctionTypeSyntax(b, c, d, e, !1);
      };

      b.prototype.objectType = function(b, c, d) {
        return new a.ObjectTypeSyntax(b, c, d, !1);
      };

      b.prototype.arrayType = function(b, c, d) {
        return new a.ArrayTypeSyntax(b, c, d, !1);
      };

      b.prototype.genericType = function(b, c) {
        return new a.GenericTypeSyntax(b, c, !1);
      };

      b.prototype.typeAnnotation = function(b, c) {
        return new a.TypeAnnotationSyntax(b, c, !1);
      };

      b.prototype.block = function(b, c, d) {
        return new a.BlockSyntax(b, c, d, !1);
      };

      b.prototype.parameter = function(b, c, d, e, f, g) {
        return new a.ParameterSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.memberAccessExpression = function(b, c, d) {
        return new a.MemberAccessExpressionSyntax(b, c, d, !1);
      };

      b.prototype.postfixUnaryExpression = function(b, c, d) {
        return new a.PostfixUnaryExpressionSyntax(b, c, d, !1);
      };

      b.prototype.elementAccessExpression = function(b, c, d, e) {
        return new a.ElementAccessExpressionSyntax(b, c, d, e, !1);
      };

      b.prototype.invocationExpression = function(b, c) {
        return new a.InvocationExpressionSyntax(b, c, !1);
      };

      b.prototype.argumentList = function(b, c, d, e) {
        return new a.ArgumentListSyntax(b, c, d, e, !1);
      };

      b.prototype.binaryExpression = function(b, c, d, e) {
        return new a.BinaryExpressionSyntax(b, c, d, e, !1);
      };

      b.prototype.conditionalExpression = function(b, c, d, e, f) {
        return new a.ConditionalExpressionSyntax(b, c, d, e, f, !1);
      };

      b.prototype.constructSignature = function(b, c) {
        return new a.ConstructSignatureSyntax(b, c, !1);
      };

      b.prototype.methodSignature = function(b, c, d) {
        return new a.MethodSignatureSyntax(b, c, d, !1);
      };

      b.prototype.indexSignature = function(b, c, d, e) {
        return new a.IndexSignatureSyntax(b, c, d, e, !1);
      };

      b.prototype.propertySignature = function(b, c, d) {
        return new a.PropertySignatureSyntax(b, c, d, !1);
      };

      b.prototype.callSignature = function(b, c, d) {
        return new a.CallSignatureSyntax(b, c, d, !1);
      };

      b.prototype.parameterList = function(b, c, d) {
        return new a.ParameterListSyntax(b, c, d, !1);
      };

      b.prototype.typeParameterList = function(b, c, d) {
        return new a.TypeParameterListSyntax(b, c, d, !1);
      };

      b.prototype.typeParameter = function(b, c) {
        return new a.TypeParameterSyntax(b, c, !1);
      };

      b.prototype.constraint = function(b, c) {
        return new a.ConstraintSyntax(b, c, !1);
      };

      b.prototype.elseClause = function(b, c) {
        return new a.ElseClauseSyntax(b, c, !1);
      };

      b.prototype.ifStatement = function(b, c, d, e, f, g) {
        return new a.IfStatementSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.expressionStatement = function(b, c) {
        return new a.ExpressionStatementSyntax(b, c, !1);
      };

      b.prototype.constructorDeclaration = function(b, c, d, e) {
        return new a.ConstructorDeclarationSyntax(b, c, d, e, !1);
      };

      b.prototype.memberFunctionDeclaration = function(b, c, d, e, f) {
        return new a.MemberFunctionDeclarationSyntax(b, c, d, e, f, !1);
      };

      b.prototype.getMemberAccessorDeclaration = function(b, c, d, e, f, g) {
        return new a.GetMemberAccessorDeclarationSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.setMemberAccessorDeclaration = function(b, c, d, e, f) {
        return new a.SetMemberAccessorDeclarationSyntax(b, c, d, e, f, !1);
      };

      b.prototype.memberVariableDeclaration = function(b, c, d) {
        return new a.MemberVariableDeclarationSyntax(b, c, d, !1);
      };

      b.prototype.throwStatement = function(b, c, d) {
        return new a.ThrowStatementSyntax(b, c, d, !1);
      };

      b.prototype.returnStatement = function(b, c, d) {
        return new a.ReturnStatementSyntax(b, c, d, !1);
      };

      b.prototype.objectCreationExpression = function(b, c, d) {
        return new a.ObjectCreationExpressionSyntax(b, c, d, !1);
      };

      b.prototype.switchStatement = function(b, c, d, e, f, g, h) {
        return new a.SwitchStatementSyntax(b, c, d, e, f, g, h, !1);
      };

      b.prototype.caseSwitchClause = function(b, c, d, e) {
        return new a.CaseSwitchClauseSyntax(b, c, d, e, !1);
      };

      b.prototype.defaultSwitchClause = function(b, c, d) {
        return new a.DefaultSwitchClauseSyntax(b, c, d, !1);
      };

      b.prototype.breakStatement = function(b, c, d) {
        return new a.BreakStatementSyntax(b, c, d, !1);
      };

      b.prototype.continueStatement = function(b, c, d) {
        return new a.ContinueStatementSyntax(b, c, d, !1);
      };

      b.prototype.forStatement = function(b, c, d, e, f, g, h, i, j, k) {
        return new a.ForStatementSyntax(b, c, d, e, f, g, h, i, j, k, !1);
      };

      b.prototype.forInStatement = function(b, c, d, e, f, g, h, i) {
        return new a.ForInStatementSyntax(b, c, d, e, f, g, h, i, !1);
      };

      b.prototype.whileStatement = function(b, c, d, e, f) {
        return new a.WhileStatementSyntax(b, c, d, e, f, !1);
      };

      b.prototype.withStatement = function(b, c, d, e, f) {
        return new a.WithStatementSyntax(b, c, d, e, f, !1);
      };

      b.prototype.enumDeclaration = function(b, c, d, e, f, g) {
        return new a.EnumDeclarationSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.enumElement = function(b, c) {
        return new a.EnumElementSyntax(b, c, !1);
      };

      b.prototype.castExpression = function(b, c, d, e) {
        return new a.CastExpressionSyntax(b, c, d, e, !1);
      };

      b.prototype.objectLiteralExpression = function(b, c, d) {
        return new a.ObjectLiteralExpressionSyntax(b, c, d, !1);
      };

      b.prototype.simplePropertyAssignment = function(b, c, d) {
        return new a.SimplePropertyAssignmentSyntax(b, c, d, !1);
      };

      b.prototype.functionPropertyAssignment = function(b, c, d) {
        return new a.FunctionPropertyAssignmentSyntax(b, c, d, !1);
      };

      b.prototype.getAccessorPropertyAssignment = function(b, c, d, e, f, g) {
        return new a.GetAccessorPropertyAssignmentSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.setAccessorPropertyAssignment = function(b, c, d, e, f, g) {
        return new a.SetAccessorPropertyAssignmentSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.functionExpression = function(b, c, d, e) {
        return new a.FunctionExpressionSyntax(b, c, d, e, !1);
      };

      b.prototype.emptyStatement = function(b) {
        return new a.EmptyStatementSyntax(b, !1);
      };

      b.prototype.tryStatement = function(b, c, d, e) {
        return new a.TryStatementSyntax(b, c, d, e, !1);
      };

      b.prototype.catchClause = function(b, c, d, e, f, g) {
        return new a.CatchClauseSyntax(b, c, d, e, f, g, !1);
      };

      b.prototype.finallyClause = function(b, c) {
        return new a.FinallyClauseSyntax(b, c, !1);
      };

      b.prototype.labeledStatement = function(b, c, d) {
        return new a.LabeledStatementSyntax(b, c, d, !1);
      };

      b.prototype.doStatement = function(b, c, d, e, f, g, h) {
        return new a.DoStatementSyntax(b, c, d, e, f, g, h, !1);
      };

      b.prototype.typeOfExpression = function(b, c) {
        return new a.TypeOfExpressionSyntax(b, c, !1);
      };

      b.prototype.deleteExpression = function(b, c) {
        return new a.DeleteExpressionSyntax(b, c, !1);
      };

      b.prototype.voidExpression = function(b, c) {
        return new a.VoidExpressionSyntax(b, c, !1);
      };

      b.prototype.debuggerStatement = function(b, c) {
        return new a.DebuggerStatementSyntax(b, c, !1);
      };

      return b;
    }();
    b.NormalModeFactory = c;
    var d = function() {
      function b() {}
      b.prototype.sourceUnit = function(b, c) {
        return new a.SourceUnitSyntax(b, c, !0);
      };

      b.prototype.externalModuleReference = function(b, c, d, e) {
        return new a.ExternalModuleReferenceSyntax(b, c, d, e, !0);
      };

      b.prototype.moduleNameModuleReference = function(b) {
        return new a.ModuleNameModuleReferenceSyntax(b, !0);
      };

      b.prototype.importDeclaration = function(b, c, d, e, f) {
        return new a.ImportDeclarationSyntax(b, c, d, e, f, !0);
      };

      b.prototype.exportAssignment = function(b, c, d, e) {
        return new a.ExportAssignmentSyntax(b, c, d, e, !0);
      };

      b.prototype.classDeclaration = function(b, c, d, e, f, g, h, i) {
        return new a.ClassDeclarationSyntax(b, c, d, e, f, g, h, i, !0);
      };

      b.prototype.interfaceDeclaration = function(b, c, d, e, f, g) {
        return new a.InterfaceDeclarationSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.heritageClause = function(b, c) {
        return new a.HeritageClauseSyntax(b, c, !0);
      };

      b.prototype.moduleDeclaration = function(b, c, d, e, f, g, h) {
        return new a.ModuleDeclarationSyntax(b, c, d, e, f, g, h, !0);
      };

      b.prototype.functionDeclaration = function(b, c, d, e, f, g) {
        return new a.FunctionDeclarationSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.variableStatement = function(b, c, d) {
        return new a.VariableStatementSyntax(b, c, d, !0);
      };

      b.prototype.variableDeclaration = function(b, c) {
        return new a.VariableDeclarationSyntax(b, c, !0);
      };

      b.prototype.variableDeclarator = function(b, c, d) {
        return new a.VariableDeclaratorSyntax(b, c, d, !0);
      };

      b.prototype.equalsValueClause = function(b, c) {
        return new a.EqualsValueClauseSyntax(b, c, !0);
      };

      b.prototype.prefixUnaryExpression = function(b, c, d) {
        return new a.PrefixUnaryExpressionSyntax(b, c, d, !0);
      };

      b.prototype.arrayLiteralExpression = function(b, c, d) {
        return new a.ArrayLiteralExpressionSyntax(b, c, d, !0);
      };

      b.prototype.omittedExpression = function() {
        return new a.OmittedExpressionSyntax(!0);
      };

      b.prototype.parenthesizedExpression = function(b, c, d) {
        return new a.ParenthesizedExpressionSyntax(b, c, d, !0);
      };

      b.prototype.simpleArrowFunctionExpression = function(b, c, d) {
        return new a.SimpleArrowFunctionExpressionSyntax(b, c, d, !0);
      };

      b.prototype.parenthesizedArrowFunctionExpression = function(b, c, d) {
        return new a.ParenthesizedArrowFunctionExpressionSyntax(b, c, d, !0);
      };

      b.prototype.qualifiedName = function(b, c, d) {
        return new a.QualifiedNameSyntax(b, c, d, !0);
      };

      b.prototype.typeArgumentList = function(b, c, d) {
        return new a.TypeArgumentListSyntax(b, c, d, !0);
      };

      b.prototype.constructorType = function(b, c, d, e, f) {
        return new a.ConstructorTypeSyntax(b, c, d, e, f, !0);
      };

      b.prototype.functionType = function(b, c, d, e) {
        return new a.FunctionTypeSyntax(b, c, d, e, !0);
      };

      b.prototype.objectType = function(b, c, d) {
        return new a.ObjectTypeSyntax(b, c, d, !0);
      };

      b.prototype.arrayType = function(b, c, d) {
        return new a.ArrayTypeSyntax(b, c, d, !0);
      };

      b.prototype.genericType = function(b, c) {
        return new a.GenericTypeSyntax(b, c, !0);
      };

      b.prototype.typeAnnotation = function(b, c) {
        return new a.TypeAnnotationSyntax(b, c, !0);
      };

      b.prototype.block = function(b, c, d) {
        return new a.BlockSyntax(b, c, d, !0);
      };

      b.prototype.parameter = function(b, c, d, e, f, g) {
        return new a.ParameterSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.memberAccessExpression = function(b, c, d) {
        return new a.MemberAccessExpressionSyntax(b, c, d, !0);
      };

      b.prototype.postfixUnaryExpression = function(b, c, d) {
        return new a.PostfixUnaryExpressionSyntax(b, c, d, !0);
      };

      b.prototype.elementAccessExpression = function(b, c, d, e) {
        return new a.ElementAccessExpressionSyntax(b, c, d, e, !0);
      };

      b.prototype.invocationExpression = function(b, c) {
        return new a.InvocationExpressionSyntax(b, c, !0);
      };

      b.prototype.argumentList = function(b, c, d, e) {
        return new a.ArgumentListSyntax(b, c, d, e, !0);
      };

      b.prototype.binaryExpression = function(b, c, d, e) {
        return new a.BinaryExpressionSyntax(b, c, d, e, !0);
      };

      b.prototype.conditionalExpression = function(b, c, d, e, f) {
        return new a.ConditionalExpressionSyntax(b, c, d, e, f, !0);
      };

      b.prototype.constructSignature = function(b, c) {
        return new a.ConstructSignatureSyntax(b, c, !0);
      };

      b.prototype.methodSignature = function(b, c, d) {
        return new a.MethodSignatureSyntax(b, c, d, !0);
      };

      b.prototype.indexSignature = function(b, c, d, e) {
        return new a.IndexSignatureSyntax(b, c, d, e, !0);
      };

      b.prototype.propertySignature = function(b, c, d) {
        return new a.PropertySignatureSyntax(b, c, d, !0);
      };

      b.prototype.callSignature = function(b, c, d) {
        return new a.CallSignatureSyntax(b, c, d, !0);
      };

      b.prototype.parameterList = function(b, c, d) {
        return new a.ParameterListSyntax(b, c, d, !0);
      };

      b.prototype.typeParameterList = function(b, c, d) {
        return new a.TypeParameterListSyntax(b, c, d, !0);
      };

      b.prototype.typeParameter = function(b, c) {
        return new a.TypeParameterSyntax(b, c, !0);
      };

      b.prototype.constraint = function(b, c) {
        return new a.ConstraintSyntax(b, c, !0);
      };

      b.prototype.elseClause = function(b, c) {
        return new a.ElseClauseSyntax(b, c, !0);
      };

      b.prototype.ifStatement = function(b, c, d, e, f, g) {
        return new a.IfStatementSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.expressionStatement = function(b, c) {
        return new a.ExpressionStatementSyntax(b, c, !0);
      };

      b.prototype.constructorDeclaration = function(b, c, d, e) {
        return new a.ConstructorDeclarationSyntax(b, c, d, e, !0);
      };

      b.prototype.memberFunctionDeclaration = function(b, c, d, e, f) {
        return new a.MemberFunctionDeclarationSyntax(b, c, d, e, f, !0);
      };

      b.prototype.getMemberAccessorDeclaration = function(b, c, d, e, f, g) {
        return new a.GetMemberAccessorDeclarationSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.setMemberAccessorDeclaration = function(b, c, d, e, f) {
        return new a.SetMemberAccessorDeclarationSyntax(b, c, d, e, f, !0);
      };

      b.prototype.memberVariableDeclaration = function(b, c, d) {
        return new a.MemberVariableDeclarationSyntax(b, c, d, !0);
      };

      b.prototype.throwStatement = function(b, c, d) {
        return new a.ThrowStatementSyntax(b, c, d, !0);
      };

      b.prototype.returnStatement = function(b, c, d) {
        return new a.ReturnStatementSyntax(b, c, d, !0);
      };

      b.prototype.objectCreationExpression = function(b, c, d) {
        return new a.ObjectCreationExpressionSyntax(b, c, d, !0);
      };

      b.prototype.switchStatement = function(b, c, d, e, f, g, h) {
        return new a.SwitchStatementSyntax(b, c, d, e, f, g, h, !0);
      };

      b.prototype.caseSwitchClause = function(b, c, d, e) {
        return new a.CaseSwitchClauseSyntax(b, c, d, e, !0);
      };

      b.prototype.defaultSwitchClause = function(b, c, d) {
        return new a.DefaultSwitchClauseSyntax(b, c, d, !0);
      };

      b.prototype.breakStatement = function(b, c, d) {
        return new a.BreakStatementSyntax(b, c, d, !0);
      };

      b.prototype.continueStatement = function(b, c, d) {
        return new a.ContinueStatementSyntax(b, c, d, !0);
      };

      b.prototype.forStatement = function(b, c, d, e, f, g, h, i, j, k) {
        return new a.ForStatementSyntax(b, c, d, e, f, g, h, i, j, k, !0);
      };

      b.prototype.forInStatement = function(b, c, d, e, f, g, h, i) {
        return new a.ForInStatementSyntax(b, c, d, e, f, g, h, i, !0);
      };

      b.prototype.whileStatement = function(b, c, d, e, f) {
        return new a.WhileStatementSyntax(b, c, d, e, f, !0);
      };

      b.prototype.withStatement = function(b, c, d, e, f) {
        return new a.WithStatementSyntax(b, c, d, e, f, !0);
      };

      b.prototype.enumDeclaration = function(b, c, d, e, f, g) {
        return new a.EnumDeclarationSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.enumElement = function(b, c) {
        return new a.EnumElementSyntax(b, c, !0);
      };

      b.prototype.castExpression = function(b, c, d, e) {
        return new a.CastExpressionSyntax(b, c, d, e, !0);
      };

      b.prototype.objectLiteralExpression = function(b, c, d) {
        return new a.ObjectLiteralExpressionSyntax(b, c, d, !0);
      };

      b.prototype.simplePropertyAssignment = function(b, c, d) {
        return new a.SimplePropertyAssignmentSyntax(b, c, d, !0);
      };

      b.prototype.functionPropertyAssignment = function(b, c, d) {
        return new a.FunctionPropertyAssignmentSyntax(b, c, d, !0);
      };

      b.prototype.getAccessorPropertyAssignment = function(b, c, d, e, f, g) {
        return new a.GetAccessorPropertyAssignmentSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.setAccessorPropertyAssignment = function(b, c, d, e, f, g) {
        return new a.SetAccessorPropertyAssignmentSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.functionExpression = function(b, c, d, e) {
        return new a.FunctionExpressionSyntax(b, c, d, e, !0);
      };

      b.prototype.emptyStatement = function(b) {
        return new a.EmptyStatementSyntax(b, !0);
      };

      b.prototype.tryStatement = function(b, c, d, e) {
        return new a.TryStatementSyntax(b, c, d, e, !0);
      };

      b.prototype.catchClause = function(b, c, d, e, f, g) {
        return new a.CatchClauseSyntax(b, c, d, e, f, g, !0);
      };

      b.prototype.finallyClause = function(b, c) {
        return new a.FinallyClauseSyntax(b, c, !0);
      };

      b.prototype.labeledStatement = function(b, c, d) {
        return new a.LabeledStatementSyntax(b, c, d, !0);
      };

      b.prototype.doStatement = function(b, c, d, e, f, g, h) {
        return new a.DoStatementSyntax(b, c, d, e, f, g, h, !0);
      };

      b.prototype.typeOfExpression = function(b, c) {
        return new a.TypeOfExpressionSyntax(b, c, !0);
      };

      b.prototype.deleteExpression = function(b, c) {
        return new a.DeleteExpressionSyntax(b, c, !0);
      };

      b.prototype.voidExpression = function(b, c) {
        return new a.VoidExpressionSyntax(b, c, !0);
      };

      b.prototype.debuggerStatement = function(b, c) {
        return new a.DebuggerStatementSyntax(b, c, !0);
      };

      return b;
    }();
    b.StrictModeFactory = d;

    b.normalModeFactory = new c;

    b.strictModeFactory = new d;
  })(a.Syntax || (a.Syntax = {}));
  var b = a.Syntax;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.None = 0] = "None";

    a[a.List = 1] = "List";

    a[a.SeparatedList = 2] = "SeparatedList";

    a[a.TriviaList = 3] = "TriviaList";

    a[a.WhitespaceTrivia = 4] = "WhitespaceTrivia";

    a[a.NewLineTrivia = 5] = "NewLineTrivia";

    a[a.MultiLineCommentTrivia = 6] = "MultiLineCommentTrivia";

    a[a.SingleLineCommentTrivia = 7] = "SingleLineCommentTrivia";

    a[a.SkippedTokenTrivia = 8] = "SkippedTokenTrivia";

    a[a.ErrorToken = 9] = "ErrorToken";

    a[a.EndOfFileToken = 10] = "EndOfFileToken";

    a[a.IdentifierName = 11] = "IdentifierName";

    a[a.RegularExpressionLiteral = 12] = "RegularExpressionLiteral";

    a[a.NumericLiteral = 13] = "NumericLiteral";

    a[a.StringLiteral = 14] = "StringLiteral";

    a[a.BreakKeyword = 15] = "BreakKeyword";

    a[a.CaseKeyword = 16] = "CaseKeyword";

    a[a.CatchKeyword = 17] = "CatchKeyword";

    a[a.ContinueKeyword = 18] = "ContinueKeyword";

    a[a.DebuggerKeyword = 19] = "DebuggerKeyword";

    a[a.DefaultKeyword = 20] = "DefaultKeyword";

    a[a.DeleteKeyword = 21] = "DeleteKeyword";

    a[a.DoKeyword = 22] = "DoKeyword";

    a[a.ElseKeyword = 23] = "ElseKeyword";

    a[a.FalseKeyword = 24] = "FalseKeyword";

    a[a.FinallyKeyword = 25] = "FinallyKeyword";

    a[a.ForKeyword = 26] = "ForKeyword";

    a[a.FunctionKeyword = 27] = "FunctionKeyword";

    a[a.IfKeyword = 28] = "IfKeyword";

    a[a.InKeyword = 29] = "InKeyword";

    a[a.InstanceOfKeyword = 30] = "InstanceOfKeyword";

    a[a.NewKeyword = 31] = "NewKeyword";

    a[a.NullKeyword = 32] = "NullKeyword";

    a[a.ReturnKeyword = 33] = "ReturnKeyword";

    a[a.SwitchKeyword = 34] = "SwitchKeyword";

    a[a.ThisKeyword = 35] = "ThisKeyword";

    a[a.ThrowKeyword = 36] = "ThrowKeyword";

    a[a.TrueKeyword = 37] = "TrueKeyword";

    a[a.TryKeyword = 38] = "TryKeyword";

    a[a.TypeOfKeyword = 39] = "TypeOfKeyword";

    a[a.VarKeyword = 40] = "VarKeyword";

    a[a.VoidKeyword = 41] = "VoidKeyword";

    a[a.WhileKeyword = 42] = "WhileKeyword";

    a[a.WithKeyword = 43] = "WithKeyword";

    a[a.ClassKeyword = 44] = "ClassKeyword";

    a[a.ConstKeyword = 45] = "ConstKeyword";

    a[a.EnumKeyword = 46] = "EnumKeyword";

    a[a.ExportKeyword = 47] = "ExportKeyword";

    a[a.ExtendsKeyword = 48] = "ExtendsKeyword";

    a[a.ImportKeyword = 49] = "ImportKeyword";

    a[a.SuperKeyword = 50] = "SuperKeyword";

    a[a.ImplementsKeyword = 51] = "ImplementsKeyword";

    a[a.InterfaceKeyword = 52] = "InterfaceKeyword";

    a[a.LetKeyword = 53] = "LetKeyword";

    a[a.PackageKeyword = 54] = "PackageKeyword";

    a[a.PrivateKeyword = 55] = "PrivateKeyword";

    a[a.ProtectedKeyword = 56] = "ProtectedKeyword";

    a[a.PublicKeyword = 57] = "PublicKeyword";

    a[a.StaticKeyword = 58] = "StaticKeyword";

    a[a.YieldKeyword = 59] = "YieldKeyword";

    a[a.AnyKeyword = 60] = "AnyKeyword";

    a[a.BooleanKeyword = 61] = "BooleanKeyword";

    a[a.BoolKeyword = 62] = "BoolKeyword";

    a[a.ConstructorKeyword = 63] = "ConstructorKeyword";

    a[a.DeclareKeyword = 64] = "DeclareKeyword";

    a[a.GetKeyword = 65] = "GetKeyword";

    a[a.ModuleKeyword = 66] = "ModuleKeyword";

    a[a.RequireKeyword = 67] = "RequireKeyword";

    a[a.NumberKeyword = 68] = "NumberKeyword";

    a[a.SetKeyword = 69] = "SetKeyword";

    a[a.StringKeyword = 70] = "StringKeyword";

    a[a.OpenBraceToken = 71] = "OpenBraceToken";

    a[a.CloseBraceToken = 72] = "CloseBraceToken";

    a[a.OpenParenToken = 73] = "OpenParenToken";

    a[a.CloseParenToken = 74] = "CloseParenToken";

    a[a.OpenBracketToken = 75] = "OpenBracketToken";

    a[a.CloseBracketToken = 76] = "CloseBracketToken";

    a[a.DotToken = 77] = "DotToken";

    a[a.DotDotDotToken = 78] = "DotDotDotToken";

    a[a.SemicolonToken = 79] = "SemicolonToken";

    a[a.CommaToken = 80] = "CommaToken";

    a[a.LessThanToken = 81] = "LessThanToken";

    a[a.GreaterThanToken = 82] = "GreaterThanToken";

    a[a.LessThanEqualsToken = 83] = "LessThanEqualsToken";

    a[a.GreaterThanEqualsToken = 84] = "GreaterThanEqualsToken";

    a[a.EqualsEqualsToken = 85] = "EqualsEqualsToken";

    a[a.EqualsGreaterThanToken = 86] = "EqualsGreaterThanToken";

    a[a.ExclamationEqualsToken = 87] = "ExclamationEqualsToken";

    a[a.EqualsEqualsEqualsToken = 88] = "EqualsEqualsEqualsToken";

    a[a.ExclamationEqualsEqualsToken = 89] = "ExclamationEqualsEqualsToken";

    a[a.PlusToken = 90] = "PlusToken";

    a[a.MinusToken = 91] = "MinusToken";

    a[a.AsteriskToken = 92] = "AsteriskToken";

    a[a.PercentToken = 93] = "PercentToken";

    a[a.PlusPlusToken = 94] = "PlusPlusToken";

    a[a.MinusMinusToken = 95] = "MinusMinusToken";

    a[a.LessThanLessThanToken = 96] = "LessThanLessThanToken";

    a[a.GreaterThanGreaterThanToken = 97] = "GreaterThanGreaterThanToken";

    a[a.GreaterThanGreaterThanGreaterThanToken = 98] = "GreaterThanGreaterThanGreaterThanToken";

    a[a.AmpersandToken = 99] = "AmpersandToken";

    a[a.BarToken = 100] = "BarToken";

    a[a.CaretToken = 101] = "CaretToken";

    a[a.ExclamationToken = 102] = "ExclamationToken";

    a[a.TildeToken = 103] = "TildeToken";

    a[a.AmpersandAmpersandToken = 104] = "AmpersandAmpersandToken";

    a[a.BarBarToken = 105] = "BarBarToken";

    a[a.QuestionToken = 106] = "QuestionToken";

    a[a.ColonToken = 107] = "ColonToken";

    a[a.EqualsToken = 108] = "EqualsToken";

    a[a.PlusEqualsToken = 109] = "PlusEqualsToken";

    a[a.MinusEqualsToken = 110] = "MinusEqualsToken";

    a[a.AsteriskEqualsToken = 111] = "AsteriskEqualsToken";

    a[a.PercentEqualsToken = 112] = "PercentEqualsToken";

    a[a.LessThanLessThanEqualsToken = 113] = "LessThanLessThanEqualsToken";

    a[a.GreaterThanGreaterThanEqualsToken = 114] = "GreaterThanGreaterThanEqualsToken";

    a[a.GreaterThanGreaterThanGreaterThanEqualsToken = 115] = "GreaterThanGreaterThanGreaterThanEqualsToken";

    a[a.AmpersandEqualsToken = 116] = "AmpersandEqualsToken";

    a[a.BarEqualsToken = 117] = "BarEqualsToken";

    a[a.CaretEqualsToken = 118] = "CaretEqualsToken";

    a[a.SlashToken = 119] = "SlashToken";

    a[a.SlashEqualsToken = 120] = "SlashEqualsToken";

    a[a.SourceUnit = 121] = "SourceUnit";

    a[a.QualifiedName = 122] = "QualifiedName";

    a[a.ObjectType = 123] = "ObjectType";

    a[a.FunctionType = 124] = "FunctionType";

    a[a.ArrayType = 125] = "ArrayType";

    a[a.ConstructorType = 126] = "ConstructorType";

    a[a.GenericType = 127] = "GenericType";

    a[a.InterfaceDeclaration = 128] = "InterfaceDeclaration";

    a[a.FunctionDeclaration = 129] = "FunctionDeclaration";

    a[a.ModuleDeclaration = 130] = "ModuleDeclaration";

    a[a.ClassDeclaration = 131] = "ClassDeclaration";

    a[a.EnumDeclaration = 132] = "EnumDeclaration";

    a[a.ImportDeclaration = 133] = "ImportDeclaration";

    a[a.ExportAssignment = 134] = "ExportAssignment";

    a[a.MemberFunctionDeclaration = 135] = "MemberFunctionDeclaration";

    a[a.MemberVariableDeclaration = 136] = "MemberVariableDeclaration";

    a[a.ConstructorDeclaration = 137] = "ConstructorDeclaration";

    a[a.GetMemberAccessorDeclaration = 138] = "GetMemberAccessorDeclaration";

    a[a.SetMemberAccessorDeclaration = 139] = "SetMemberAccessorDeclaration";

    a[a.PropertySignature = 140] = "PropertySignature";

    a[a.CallSignature = 141] = "CallSignature";

    a[a.ConstructSignature = 142] = "ConstructSignature";

    a[a.IndexSignature = 143] = "IndexSignature";

    a[a.MethodSignature = 144] = "MethodSignature";

    a[a.Block = 145] = "Block";

    a[a.IfStatement = 146] = "IfStatement";

    a[a.VariableStatement = 147] = "VariableStatement";

    a[a.ExpressionStatement = 148] = "ExpressionStatement";

    a[a.ReturnStatement = 149] = "ReturnStatement";

    a[a.SwitchStatement = 150] = "SwitchStatement";

    a[a.BreakStatement = 151] = "BreakStatement";

    a[a.ContinueStatement = 152] = "ContinueStatement";

    a[a.ForStatement = 153] = "ForStatement";

    a[a.ForInStatement = 154] = "ForInStatement";

    a[a.EmptyStatement = 155] = "EmptyStatement";

    a[a.ThrowStatement = 156] = "ThrowStatement";

    a[a.WhileStatement = 157] = "WhileStatement";

    a[a.TryStatement = 158] = "TryStatement";

    a[a.LabeledStatement = 159] = "LabeledStatement";

    a[a.DoStatement = 160] = "DoStatement";

    a[a.DebuggerStatement = 161] = "DebuggerStatement";

    a[a.WithStatement = 162] = "WithStatement";

    a[a.PlusExpression = 163] = "PlusExpression";

    a[a.NegateExpression = 164] = "NegateExpression";

    a[a.BitwiseNotExpression = 165] = "BitwiseNotExpression";

    a[a.LogicalNotExpression = 166] = "LogicalNotExpression";

    a[a.PreIncrementExpression = 167] = "PreIncrementExpression";

    a[a.PreDecrementExpression = 168] = "PreDecrementExpression";

    a[a.DeleteExpression = 169] = "DeleteExpression";

    a[a.TypeOfExpression = 170] = "TypeOfExpression";

    a[a.VoidExpression = 171] = "VoidExpression";

    a[a.CommaExpression = 172] = "CommaExpression";

    a[a.AssignmentExpression = 173] = "AssignmentExpression";

    a[a.AddAssignmentExpression = 174] = "AddAssignmentExpression";

    a[a.SubtractAssignmentExpression = 175] = "SubtractAssignmentExpression";

    a[a.MultiplyAssignmentExpression = 176] = "MultiplyAssignmentExpression";

    a[a.DivideAssignmentExpression = 177] = "DivideAssignmentExpression";

    a[a.ModuloAssignmentExpression = 178] = "ModuloAssignmentExpression";

    a[a.AndAssignmentExpression = 179] = "AndAssignmentExpression";

    a[a.ExclusiveOrAssignmentExpression = 180] = "ExclusiveOrAssignmentExpression";

    a[a.OrAssignmentExpression = 181] = "OrAssignmentExpression";

    a[a.LeftShiftAssignmentExpression = 182] = "LeftShiftAssignmentExpression";

    a[a.SignedRightShiftAssignmentExpression = 183] = "SignedRightShiftAssignmentExpression";

    a[a.UnsignedRightShiftAssignmentExpression = 184] = "UnsignedRightShiftAssignmentExpression";

    a[a.ConditionalExpression = 185] = "ConditionalExpression";

    a[a.LogicalOrExpression = 186] = "LogicalOrExpression";

    a[a.LogicalAndExpression = 187] = "LogicalAndExpression";

    a[a.BitwiseOrExpression = 188] = "BitwiseOrExpression";

    a[a.BitwiseExclusiveOrExpression = 189] = "BitwiseExclusiveOrExpression";

    a[a.BitwiseAndExpression = 190] = "BitwiseAndExpression";

    a[a.EqualsWithTypeConversionExpression = 191] = "EqualsWithTypeConversionExpression";

    a[a.NotEqualsWithTypeConversionExpression = 192] = "NotEqualsWithTypeConversionExpression";

    a[a.EqualsExpression = 193] = "EqualsExpression";

    a[a.NotEqualsExpression = 194] = "NotEqualsExpression";

    a[a.LessThanExpression = 195] = "LessThanExpression";

    a[a.GreaterThanExpression = 196] = "GreaterThanExpression";

    a[a.LessThanOrEqualExpression = 197] = "LessThanOrEqualExpression";

    a[a.GreaterThanOrEqualExpression = 198] = "GreaterThanOrEqualExpression";

    a[a.InstanceOfExpression = 199] = "InstanceOfExpression";

    a[a.InExpression = 200] = "InExpression";

    a[a.LeftShiftExpression = 201] = "LeftShiftExpression";

    a[a.SignedRightShiftExpression = 202] = "SignedRightShiftExpression";

    a[a.UnsignedRightShiftExpression = 203] = "UnsignedRightShiftExpression";

    a[a.MultiplyExpression = 204] = "MultiplyExpression";

    a[a.DivideExpression = 205] = "DivideExpression";

    a[a.ModuloExpression = 206] = "ModuloExpression";

    a[a.AddExpression = 207] = "AddExpression";

    a[a.SubtractExpression = 208] = "SubtractExpression";

    a[a.PostIncrementExpression = 209] = "PostIncrementExpression";

    a[a.PostDecrementExpression = 210] = "PostDecrementExpression";

    a[a.MemberAccessExpression = 211] = "MemberAccessExpression";

    a[a.InvocationExpression = 212] = "InvocationExpression";

    a[a.ArrayLiteralExpression = 213] = "ArrayLiteralExpression";

    a[a.ObjectLiteralExpression = 214] = "ObjectLiteralExpression";

    a[a.ObjectCreationExpression = 215] = "ObjectCreationExpression";

    a[a.ParenthesizedExpression = 216] = "ParenthesizedExpression";

    a[a.ParenthesizedArrowFunctionExpression = 217] = "ParenthesizedArrowFunctionExpression";

    a[a.SimpleArrowFunctionExpression = 218] = "SimpleArrowFunctionExpression";

    a[a.CastExpression = 219] = "CastExpression";

    a[a.ElementAccessExpression = 220] = "ElementAccessExpression";

    a[a.FunctionExpression = 221] = "FunctionExpression";

    a[a.OmittedExpression = 222] = "OmittedExpression";

    a[a.VariableDeclaration = 223] = "VariableDeclaration";

    a[a.VariableDeclarator = 224] = "VariableDeclarator";

    a[a.ArgumentList = 225] = "ArgumentList";

    a[a.ParameterList = 226] = "ParameterList";

    a[a.TypeArgumentList = 227] = "TypeArgumentList";

    a[a.TypeParameterList = 228] = "TypeParameterList";

    a[a.HeritageClause = 229] = "HeritageClause";

    a[a.EqualsValueClause = 230] = "EqualsValueClause";

    a[a.CaseSwitchClause = 231] = "CaseSwitchClause";

    a[a.DefaultSwitchClause = 232] = "DefaultSwitchClause";

    a[a.ElseClause = 233] = "ElseClause";

    a[a.CatchClause = 234] = "CatchClause";

    a[a.FinallyClause = 235] = "FinallyClause";

    a[a.TypeParameter = 236] = "TypeParameter";

    a[a.Constraint = 237] = "Constraint";

    a[a.SimplePropertyAssignment = 238] = "SimplePropertyAssignment";

    a[a.GetAccessorPropertyAssignment = 239] = "GetAccessorPropertyAssignment";

    a[a.SetAccessorPropertyAssignment = 240] = "SetAccessorPropertyAssignment";

    a[a.FunctionPropertyAssignment = 241] = "FunctionPropertyAssignment";

    a[a.Parameter = 242] = "Parameter";

    a[a.EnumElement = 243] = "EnumElement";

    a[a.TypeAnnotation = 244] = "TypeAnnotation";

    a[a.ExternalModuleReference = 245] = "ExternalModuleReference";

    a[a.ModuleNameModuleReference = 246] = "ModuleNameModuleReference";

    a[a.FirstStandardKeyword = a.BreakKeyword] = "FirstStandardKeyword";

    a[a.LastStandardKeyword = a.WithKeyword] = "LastStandardKeyword";

    a[a.FirstFutureReservedKeyword = a.ClassKeyword] = "FirstFutureReservedKeyword";

    a[a.LastFutureReservedKeyword = a.SuperKeyword] = "LastFutureReservedKeyword";

    a[a.FirstFutureReservedStrictKeyword = a.ImplementsKeyword] = "FirstFutureReservedStrictKeyword";

    a[a.LastFutureReservedStrictKeyword = a.YieldKeyword] = "LastFutureReservedStrictKeyword";

    a[a.FirstTypeScriptKeyword = a.AnyKeyword] = "FirstTypeScriptKeyword";

    a[a.LastTypeScriptKeyword = a.StringKeyword] = "LastTypeScriptKeyword";

    a[a.FirstKeyword = a.FirstStandardKeyword] = "FirstKeyword";

    a[a.LastKeyword = a.LastTypeScriptKeyword] = "LastKeyword";

    a[a.FirstToken = a.ErrorToken] = "FirstToken";

    a[a.LastToken = a.SlashEqualsToken] = "LastToken";

    a[a.FirstPunctuation = a.OpenBraceToken] = "FirstPunctuation";

    a[a.LastPunctuation = a.SlashEqualsToken] = "LastPunctuation";

    a[a.FirstFixedWidth = a.FirstKeyword] = "FirstFixedWidth";

    a[a.LastFixedWidth = a.LastPunctuation] = "LastFixedWidth";
  })(a.SyntaxKind || (a.SyntaxKind = {}));
  var b = a.SyntaxKind;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function f(a) {
      return c.hasOwnProperty(a) ? c[a] : 0;
    }

    function g(a) {
      var b = d[a];
      return b !== undefined ? b : null;
    }

    function h(a) {
      return a >= 9 && a <= 120;
    }

    function i(b) {
      return b >= a.SyntaxKind.FirstKeyword && b <= a.SyntaxKind.LastKeyword;
    }

    function j(a) {
      return a >= 15 && a <= 43;
    }

    function k(a) {
      return a >= 44 && a <= 50;
    }

    function l(a) {
      return a >= 51 && a <= 59;
    }

    function m(a) {
      return a >= 71 && a <= 120;
    }

    function n(a) {
      return p(a) !== 0;
    }

    function o(a) {
      return r(a) !== 0;
    }

    function p(a) {
      switch (a) {
        case 90:
          return 163;
        case 91:
          return 164;
        case 103:
          return 165;
        case 102:
          return 166;
        case 94:
          return 167;
        case 95:
          return 168;
        default:
          return 0;
      }
    }

    function q(a) {
      switch (a) {
        case 94:
          return 209;
        case 95:
          return 210;
        default:
          return 0;
      }
    }

    function r(a) {
      switch (a) {
        case 92:
          return 204;
        case 119:
          return 205;
        case 93:
          return 206;
        case 90:
          return 207;
        case 91:
          return 208;
        case 96:
          return 201;
        case 97:
          return 202;
        case 98:
          return 203;
        case 81:
          return 195;
        case 82:
          return 196;
        case 83:
          return 197;
        case 84:
          return 198;
        case 30:
          return 199;
        case 29:
          return 200;
        case 85:
          return 191;
        case 87:
          return 192;
        case 88:
          return 193;
        case 89:
          return 194;
        case 99:
          return 190;
        case 101:
          return 189;
        case 100:
          return 188;
        case 104:
          return 187;
        case 105:
          return 186;
        case 117:
          return 181;
        case 116:
          return 179;
        case 118:
          return 180;
        case 113:
          return 182;
        case 114:
          return 183;
        case 115:
          return 184;
        case 109:
          return 174;
        case 110:
          return 175;
        case 111:
          return 176;
        case 120:
          return 177;
        case 112:
          return 178;
        case 108:
          return 173;
        case 80:
          return 172;
        default:
          return 0;
      }
    }

    function s(a) {
      switch (a) {
        case 119:
        case 120:
          return !0;
        default:
          return !1;
      }
    }

    function t(a) {
      switch (a) {
        case 119:
        case 120:
        case 12:
          return !0;
        default:
          return !1;
      }
    }

    function u(a) {
      switch (a) {
        case 97:
        case 98:
        case 84:
        case 114:
        case 115:
          return !0;
        default:
          return !1;
      }
    }

    function v(a) {
      switch (a) {
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 177:
        case 178:
        case 179:
        case 180:
        case 181:
        case 182:
        case 183:
        case 184:
        case 186:
        case 187:
        case 188:
        case 189:
        case 190:
        case 191:
        case 192:
        case 193:
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
          return !0;
      }
      return !1;
    }
    var c = {
      any: 60,
      bool: 62,
      "boolean": 61,
      "break": 15,
      "case": 16,
      "catch": 17,
      "class": 44,
      "continue": 18,
      "const": 45,
      constructor: 63,
      "debugger": 19,
      declare: 64,
      "default": 20,
      "delete": 21,
      "do": 22,
      "else": 23,
      "enum": 46,
      "export": 47,
      "extends": 48,
      "false": 24,
      "finally": 25,
      "for": 26,
      "function": 27,
      get: 65,
      "if": 28,
      "implements": 51,
      "import": 49,
      "in": 29,
      "instanceof": 30,
      "interface": 52,
      let: 53,
      module: 66,
      "new": 31,
      "null": 32,
      number: 68,
      "package": 54,
      "private": 55,
      "protected": 56,
      "public": 57,
      require: 67,
      "return": 33,
      set: 69,
      "static": 58,
      string: 70,
      "super": 50,
      "switch": 34,
      "this": 35,
      "throw": 36,
      "true": 37,
      "try": 38,
      "typeof": 39,
      "var": 40,
      "void": 41,
      "while": 42,
      "with": 43,
      yield: 59,
      "{": 71,
      "}": 72,
      "(": 73,
      ")": 74,
      "[": 75,
      "]": 76,
      ".": 77,
      "...": 78,
      ";": 79,
      ",": 80,
      "<": 81,
      ">": 82,
      "<=": 83,
      ">=": 84,
      "==": 85,
      "=>": 86,
      "!=": 87,
      "===": 88,
      "!==": 89,
      "+": 90,
      "-": 91,
      "*": 92,
      "%": 93,
      "++": 94,
      "--": 95,
      "<<": 96,
      ">>": 97,
      ">>>": 98,
      "&": 99,
      "|": 100,
      "^": 101,
      "!": 102,
      "~": 103,
      "&&": 104,
      "||": 105,
      "?": 106,
      ":": 107,
      "=": 108,
      "+=": 109,
      "-=": 110,
      "*=": 111,
      "%=": 112,
      "<<=": 113,
      ">>=": 114,
      ">>>=": 115,
      "&=": 116,
      "|=": 117,
      "^=": 118,
      "/": 119,
      "/=": 120
    };

    var d = [];
    for (var e in c) {
      if (c.hasOwnProperty(e)) {
        d[c[e]] = e;
      }
    }
    d[63] = "constructor";

    b.getTokenKind = f;

    b.getText = g;

    b.isTokenKind = h;

    b.isAnyKeyword = i;

    b.isStandardKeyword = j;

    b.isFutureReservedKeyword = k;

    b.isFutureReservedStrictKeyword = l;

    b.isAnyPunctuation = m;

    b.isPrefixUnaryExpressionOperatorToken = n;

    b.isBinaryExpressionOperatorToken = o;

    b.getPrefixUnaryExpressionFromOperatorToken = p;

    b.getPostfixUnaryExpressionFromOperatorToken = q;

    b.getBinaryExpressionFromOperatorToken = r;

    b.isAnyDivideToken = s;

    b.isAnyDivideOrRegularExpressionToken = t;

    b.isParserGenerated = u;

    b.isAnyBinaryExpression = v;
  })(a.SyntaxFacts || (a.SyntaxFacts = {}));
  var b = a.SyntaxFacts;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function c(a) {
      if (a.kind() === 148) {
        var b = a;

        var c = b.expression;
        if (c.kind() === 14) {
          return !0;
        }
      }
      return !1;
    }

    function d(a) {
      var b = a;

      var c = b.expression;

      var d = c.text();
      return d === '"use strict"' || d === "'use strict'";
    }

    function e(b) {
      var c = b.tokenKind;
      return c === 11 || a.SyntaxFacts.isAnyKeyword(c);
    }
    b.isDirectivePrologueElement = c;

    b.isUseStrictDirective = d;

    b.isIdentifierNameOrAnyKeyword = e;
  })(a.SyntaxFacts || (a.SyntaxFacts = {}));
  var b = a.SyntaxFacts;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function f(a) {
      if (a === undefined || a === null || a.length === 0) {
        return b.emptyList;
      }
      if (a.length === 1) {
        var c = a[0];
        return new d(c);
      }
      return new e(a);
    }
    var c = function() {
      function b() {}
      b.prototype.kind = function() {
        return 1;
      };

      b.prototype.isNode = function() {
        return !1;
      };

      b.prototype.isToken = function() {
        return !1;
      };

      b.prototype.isList = function() {
        return !0;
      };

      b.prototype.isSeparatedList = function() {
        return !1;
      };

      b.prototype.toJSON = function(a) {
        return [];
      };

      b.prototype.childCount = function() {
        return 0;
      };

      b.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      b.prototype.toArray = function() {
        return [];
      };

      b.prototype.collectTextElements = function(a) {};

      b.prototype.firstToken = function() {
        return null;
      };

      b.prototype.lastToken = function() {
        return null;
      };

      b.prototype.fullWidth = function() {
        return 0;
      };

      b.prototype.width = function() {
        return 0;
      };

      b.prototype.leadingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      b.prototype.trailingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      b.prototype.leadingTriviaWidth = function() {
        return 0;
      };

      b.prototype.trailingTriviaWidth = function() {
        return 0;
      };

      b.prototype.fullText = function() {
        return "";
      };

      b.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      b.prototype.isIncrementallyUnusable = function() {
        return !1;
      };

      b.prototype.findTokenInternal = function(b, c, d) {
        throw a.Errors.invalidOperation();
      };

      b.prototype.insertChildrenInto = function(a, b) {};

      return b;
    }();
    b.EmptySyntaxList = c;

    b.emptyList = new c;
    var d = function() {
      function b(a) {
        this.item = a;
      }
      b.prototype.kind = function() {
        return 1;
      };

      b.prototype.isToken = function() {
        return !1;
      };

      b.prototype.isNode = function() {
        return !1;
      };

      b.prototype.isList = function() {
        return !0;
      };

      b.prototype.isSeparatedList = function() {
        return !1;
      };

      b.prototype.toJSON = function(a) {
        return [this.item];
      };

      b.prototype.childCount = function() {
        return 1;
      };

      b.prototype.childAt = function(b) {
        if (b !== 0) throw a.Errors.argumentOutOfRange("index");
        return this.item;
      };

      b.prototype.toArray = function() {
        return [this.item];
      };

      b.prototype.collectTextElements = function(a) {
        this.item.collectTextElements(a);
      };

      b.prototype.firstToken = function() {
        return this.item.firstToken();
      };

      b.prototype.lastToken = function() {
        return this.item.lastToken();
      };

      b.prototype.fullWidth = function() {
        return this.item.fullWidth();
      };

      b.prototype.width = function() {
        return this.item.width();
      };

      b.prototype.leadingTrivia = function() {
        return this.item.leadingTrivia();
      };

      b.prototype.trailingTrivia = function() {
        return this.item.trailingTrivia();
      };

      b.prototype.leadingTriviaWidth = function() {
        return this.item.leadingTriviaWidth();
      };

      b.prototype.trailingTriviaWidth = function() {
        return this.item.trailingTriviaWidth();
      };

      b.prototype.fullText = function() {
        return this.item.fullText();
      };

      b.prototype.isTypeScriptSpecific = function() {
        return this.item.isTypeScriptSpecific();
      };

      b.prototype.isIncrementallyUnusable = function() {
        return this.item.isIncrementallyUnusable();
      };

      b.prototype.findTokenInternal = function(b, c, d) {
        return this.item.findTokenInternal(new a.PositionedList(b, this, d), c, d);
      };

      b.prototype.insertChildrenInto = function(a, b) {
        a.splice(b, 0, this.item);
      };

      return b;
    }();

    var e = function() {
      function b(a) {
        this._data = 0;

        this.nodeOrTokens = a;
      }
      b.prototype.kind = function() {
        return 1;
      };

      b.prototype.isNode = function() {
        return !1;
      };

      b.prototype.isToken = function() {
        return !1;
      };

      b.prototype.isList = function() {
        return !0;
      };

      b.prototype.isSeparatedList = function() {
        return !1;
      };

      b.prototype.toJSON = function(a) {
        return this.nodeOrTokens;
      };

      b.prototype.childCount = function() {
        return this.nodeOrTokens.length;
      };

      b.prototype.childAt = function(b) {
        if (b < 0 || b >= this.nodeOrTokens.length) throw a.Errors.argumentOutOfRange("index");
        return this.nodeOrTokens[b];
      };

      b.prototype.toArray = function() {
        return this.nodeOrTokens.slice(0);
      };

      b.prototype.collectTextElements = function(a) {
        for (var b = 0, c = this.nodeOrTokens.length; b < c; b++) {
          var d = this.nodeOrTokens[b];
          d.collectTextElements(a);
        }
      };

      b.prototype.firstToken = function() {
        for (var a = 0, b = this.nodeOrTokens.length; a < b; a++) {
          var c = this.nodeOrTokens[a].firstToken();
          if (c !== null) {
            return c;
          }
        }
        return null;
      };

      b.prototype.lastToken = function() {
        for (var a = this.nodeOrTokens.length - 1; a >= 0; a--) {
          var b = this.nodeOrTokens[a].lastToken();
          if (b !== null) {
            return b;
          }
        }
        return null;
      };

      b.prototype.fullText = function() {
        var a = [];
        this.collectTextElements(a);

        return a.join("");
      };

      b.prototype.isTypeScriptSpecific = function() {
        for (var a = 0, b = this.nodeOrTokens.length; a < b; a++)
          if (this.nodeOrTokens[a].isTypeScriptSpecific()) {
            return !0;
          }
        return !1;
      };

      b.prototype.isIncrementallyUnusable = function() {
        return (this.data() & 2) !== 0;
      };

      b.prototype.fullWidth = function() {
        return this.data() >>> 3;
      };

      b.prototype.width = function() {
        var a = this.fullWidth();
        return a - this.leadingTriviaWidth() - this.trailingTriviaWidth();
      };

      b.prototype.leadingTrivia = function() {
        return this.firstToken().leadingTrivia();
      };

      b.prototype.trailingTrivia = function() {
        return this.lastToken().trailingTrivia();
      };

      b.prototype.leadingTriviaWidth = function() {
        return this.firstToken().leadingTriviaWidth();
      };

      b.prototype.trailingTriviaWidth = function() {
        return this.lastToken().trailingTriviaWidth();
      };

      b.prototype.computeData = function() {
        var a = 0;

        var b = !1;
        for (var c = 0, d = this.nodeOrTokens.length; c < d; c++) {
          var e = this.nodeOrTokens[c];
          a += e.fullWidth();

          b = b || e.isIncrementallyUnusable();
        }
        return a << 3 | (b ? 2 : 0) | 1;
      };

      b.prototype.data = function() {
        (this._data & 1) === 0 && (this._data = this.computeData());

        return this._data;
      };

      b.prototype.findTokenInternal = function(b, c, d) {
        b = new a.PositionedList(b, this, d);
        for (var e = 0, f = this.nodeOrTokens.length; e < f; e++) {
          var g = this.nodeOrTokens[e];

          var h = g.fullWidth();
          if (c < h) {
            return g.findTokenInternal(b, c, d);
          }
          c -= h;

          d += h;
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.insertChildrenInto = function(a, b) {
        if (b === 0) {
          a.unshift.apply(a, this.nodeOrTokens);
        } else {
          a.splice.apply(a, [b, 0].concat(this.nodeOrTokens));
        }
      };

      return b;
    }();
    b.list = f;
  })(a.Syntax || (a.Syntax = {}));
  var b = a.Syntax;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a) {
      this._data = a ? 4 : 0;
    }
    b.prototype.isNode = function() {
      return !0;
    };

    b.prototype.isToken = function() {
      return !1;
    };

    b.prototype.isList = function() {
      return !1;
    };

    b.prototype.isSeparatedList = function() {
      return !1;
    };

    b.prototype.kind = function() {
      throw a.Errors.abstract();
    };

    b.prototype.childCount = function() {
      throw a.Errors.abstract();
    };

    b.prototype.childAt = function(b) {
      throw a.Errors.abstract();
    };

    b.prototype.firstToken = function() {
      for (var a = 0, b = this.childCount(); a < b; a++) {
        var c = this.childAt(a);
        if (c !== null)
          if (c.fullWidth() > 0 || c.kind() === 10) {
            return c.firstToken();
          }
      }
      return null;
    };

    b.prototype.lastToken = function() {
      for (var a = this.childCount() - 1; a >= 0; a--) {
        var b = this.childAt(a);
        if (b !== null)
          if (b.fullWidth() > 0 || b.kind() === 10) {
            return b.lastToken();
          }
      }
      return null;
    };

    b.prototype.insertChildrenInto = function(b, c) {
      for (var d = this.childCount() - 1; d >= 0; d--) {
        var e = this.childAt(d);
        if (e !== null)
          if (e.isNode() || e.isToken()) {
            b.splice(c, 0, e);
          } else if (e.isList()) {
          e.insertChildrenInto(b, c);
        } else {
          if (!e.isSeparatedList()) throw a.Errors.invalidOperation();
          e.insertChildrenInto(b, c);
        }
      }
    };

    b.prototype.leadingTrivia = function() {
      return this.firstToken().leadingTrivia();
    };

    b.prototype.trailingTrivia = function() {
      return this.lastToken().trailingTrivia();
    };

    b.prototype.toJSON = function(b) {
      var c = {
        kind: a.SyntaxKind[this.kind()],
        fullWidth: this.fullWidth()
      };
      if (this.isIncrementallyUnusable()) {
        c.isIncrementallyUnusable = !0;
      }

      if (this.parsedInStrictMode()) {
        c.parsedInStrictMode = !0;
      }
      for (var d = 0, e = this.childCount(); d < e; d++) {
        var f = this.childAt(d);
        if (f)
          for (var g in this)
            if (f === this[g]) {
              c[g] = f;
              break;
            }
      }
      return c;
    };

    b.prototype.accept = function(b) {
      throw a.Errors.abstract();
    };

    b.prototype.fullText = function() {
      var a = [];
      this.collectTextElements(a);

      return a.join("");
    };

    b.prototype.collectTextElements = function(a) {
      for (var b = 0, c = this.childCount(); b < c; b++) {
        var d = this.childAt(b);
        if (d !== null) {
          d.collectTextElements(a);
        }
      }
    };

    b.prototype.replaceToken = function(b, c) {
      return b === c ? this : this.accept(new a.SyntaxTokenReplacer(b, c));
    };

    b.prototype.withLeadingTrivia = function(a) {
      return this.replaceToken(this.firstToken(), this.firstToken().withLeadingTrivia(a));
    };

    b.prototype.withTrailingTrivia = function(a) {
      return this.replaceToken(this.lastToken(), this.lastToken().withTrailingTrivia(a));
    };

    b.prototype.hasLeadingTrivia = function() {
      return this.lastToken().hasLeadingTrivia();
    };

    b.prototype.hasTrailingTrivia = function() {
      return this.lastToken().hasTrailingTrivia();
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    b.prototype.isIncrementallyUnusable = function() {
      return (this.data() & 2) !== 0;
    };

    b.prototype.parsedInStrictMode = function() {
      return (this.data() & 4) !== 0;
    };

    b.prototype.fullWidth = function() {
      return this.data() >>> 3;
    };

    b.prototype.computeData = function() {
      var a = this.childCount();

      var b = 0;

      var c = 0;

      var d = (this._data & 2) !== 0 || a === 0;
      for (var e = 0, f = a; e < f; e++) {
        var g = this.childAt(e);
        if (g !== null) {
          c = g.fullWidth();
          b += c;
          if (!d) {
            d = g.isIncrementallyUnusable();
          }
        }
      }
      return b << 3 | (d ? 2 : 0) | 1;
    };

    b.prototype.data = function() {
      (this._data & 1) === 0 && (this._data |= this.computeData());

      return this._data;
    };

    b.prototype.findToken = function(b, c) {
      if (typeof c == "undefined") {
        c = !1;
      }
      var d = this.tryGetEndOfFileAt(b);
      if (d !== null) {
        return d;
      }
      if (b < 0 || b >= this.fullWidth()) throw a.Errors.argumentOutOfRange("position");
      var e = this.findTokenInternal(null, b, 0);
      return c ? a.Syntax.findSkippedTokenInPositionedToken(e, b) || e : e;
    };

    b.prototype.tryGetEndOfFileAt = function(b) {
      if (this.kind() === 121 && b === this.fullWidth()) {
        var c = this;
        return new a.PositionedToken(new a.PositionedNode(null, c, 0), c.endOfFileToken, c.moduleElements.fullWidth());
      }
      return null;
    };

    b.prototype.findTokenInternal = function(b, c, d) {
      b = new a.PositionedNode(b, this, d);
      for (var e = 0, f = this.childCount(); e < f; e++) {
        var g = this.childAt(e);
        if (g !== null) {
          var h = g.fullWidth();
          if (c < h) {
            return g.findTokenInternal(b, c, d);
          }
          c -= h;

          d += h;
        }
      }
      throw a.Errors.invalidOperation();
    };

    b.prototype.findTokenOnLeft = function(a, b) {
      if (typeof b == "undefined") {
        b = !1;
      }
      var c = this.findToken(a, b);

      var d = c.start();
      return a > d ? c : c.fullStart() === 0 ? null : c.previousToken(b);
    };

    b.prototype.findCompleteTokenOnLeft = function(a, b) {
      if (typeof b == "undefined") {
        b = !1;
      }
      var c = this.findToken(a, b);
      return c.token().width() > 0 && a >= c.end() ? c : c.previousToken(b);
    };

    b.prototype.isModuleElement = function() {
      return !1;
    };

    b.prototype.isClassElement = function() {
      return !1;
    };

    b.prototype.isTypeMember = function() {
      return !1;
    };

    b.prototype.isStatement = function() {
      return !1;
    };

    b.prototype.isSwitchClause = function() {
      return !1;
    };

    b.prototype.structuralEquals = function(b) {
      if (this === b) {
        return !0;
      }
      if (b === null) {
        return !1;
      }
      if (this.kind() !== b.kind()) {
        return !1;
      }
      for (var c = 0, d = this.childCount(); c < d; c++) {
        var e = this.childAt(c);

        var f = b.childAt(c);
        if (!a.Syntax.elementStructuralEquals(e, f)) {
          return !1;
        }
      }
      return !0;
    };

    b.prototype.width = function() {
      return this.fullWidth() - this.leadingTriviaWidth() - this.trailingTriviaWidth();
    };

    b.prototype.leadingTriviaWidth = function() {
      var a = this.firstToken();
      return a === null ? 0 : a.leadingTriviaWidth();
    };

    b.prototype.trailingTriviaWidth = function() {
      var a = this.lastToken();
      return a === null ? 0 : a.trailingTriviaWidth();
    };

    return b;
  }();
  a.SyntaxNode = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.moduleElements = a;

      this.endOfFileToken = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitSourceUnit(this);
    };

    c.prototype.kind = function() {
      return 121;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.moduleElements;
        case 1:
          return this.endOfFileToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.moduleElements === a && this.endOfFileToken === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create = function(b) {
      return new c(a.Syntax.emptyList, b, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModuleElements = function(a) {
      return this.update(a, this.endOfFileToken);
    };

    c.prototype.withModuleElement = function(b) {
      return this.withModuleElements(a.Syntax.list([b]));
    };

    c.prototype.withEndOfFileToken = function(a) {
      return this.update(this.moduleElements, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.moduleElements.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.SourceUnitSyntax = b;
  var c = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);

    b.prototype.isModuleReference = function() {
      return !0;
    };

    b.prototype.withLeadingTrivia = function(b) {
      return a.prototype.withLeadingTrivia.call(this, b);
    };

    b.prototype.withTrailingTrivia = function(b) {
      return a.prototype.withTrailingTrivia.call(this, b);
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return b;
  }(a.SyntaxNode);
  a.ModuleReferenceSyntax = c;
  var d = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.moduleOrRequireKeyword = a;

      this.openParenToken = c;

      this.stringLiteral = d;

      this.closeParenToken = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitExternalModuleReference(this);
    };

    c.prototype.kind = function() {
      return 245;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.moduleOrRequireKeyword;
        case 1:
          return this.openParenToken;
        case 2:
          return this.stringLiteral;
        case 3:
          return this.closeParenToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e) {
      return this.moduleOrRequireKeyword === a && this.openParenToken === b && this.stringLiteral === d && this.closeParenToken ===
        e ? this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(b, a.Syntax.token(73), d, a.Syntax.token(74), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModuleOrRequireKeyword = function(a) {
      return this.update(a, this.openParenToken, this.stringLiteral, this.closeParenToken);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.moduleOrRequireKeyword, a, this.stringLiteral, this.closeParenToken);
    };

    c.prototype.withStringLiteral = function(a) {
      return this.update(this.moduleOrRequireKeyword, this.openParenToken, a, this.closeParenToken);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.moduleOrRequireKeyword, this.openParenToken, this.stringLiteral, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(c);
  a.ExternalModuleReferenceSyntax = d;
  var e = function(b) {
    function c(a, c) {
      b.call(this, c);

      this.moduleName = a;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitModuleNameModuleReference(this);
    };

    c.prototype.kind = function() {
      return 246;
    };

    c.prototype.childCount = function() {
      return 1;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.moduleName;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a) {
      return this.moduleName === a ? this : new c(a, this.parsedInStrictMode());
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModuleName = function(a) {
      return this.update(a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(c);
  a.ModuleNameModuleReferenceSyntax = e;
  var f = function(b) {
    function c(a, c, d, e, f, g) {
      b.call(this, g);

      this.importKeyword = a;

      this.identifier = c;

      this.equalsToken = d;

      this.moduleReference = e;

      this.semicolonToken = f;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitImportDeclaration(this);
    };

    c.prototype.kind = function() {
      return 133;
    };

    c.prototype.childCount = function() {
      return 5;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.importKeyword;
        case 1:
          return this.identifier;
        case 2:
          return this.equalsToken;
        case 3:
          return this.moduleReference;
        case 4:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f) {
      return this.importKeyword === a && this.identifier === b && this.equalsToken === d && this.moduleReference ===
        e && this.semicolonToken === f ? this : new c(a, b, d, e, f, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(a.Syntax.token(49), b, a.Syntax.token(108), d, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withImportKeyword = function(a) {
      return this.update(a, this.identifier, this.equalsToken, this.moduleReference, this.semicolonToken);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.importKeyword, a, this.equalsToken, this.moduleReference, this.semicolonToken);
    };

    c.prototype.withEqualsToken = function(a) {
      return this.update(this.importKeyword, this.identifier, a, this.moduleReference, this.semicolonToken);
    };

    c.prototype.withModuleReference = function(a) {
      return this.update(this.importKeyword, this.identifier, this.equalsToken, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.importKeyword, this.identifier, this.equalsToken, this.moduleReference, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ImportDeclarationSyntax = f;
  var g = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.exportKeyword = a;

      this.equalsToken = c;

      this.identifier = d;

      this.semicolonToken = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitExportAssignment(this);
    };

    c.prototype.kind = function() {
      return 134;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.exportKeyword;
        case 1:
          return this.equalsToken;
        case 2:
          return this.identifier;
        case 3:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e) {
      return this.exportKeyword === a && this.equalsToken === b && this.identifier === d && this.semicolonToken === e ?
        this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(47), a.Syntax.token(108), b, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withExportKeyword = function(a) {
      return this.update(a, this.equalsToken, this.identifier, this.semicolonToken);
    };

    c.prototype.withEqualsToken = function(a) {
      return this.update(this.exportKeyword, a, this.identifier, this.semicolonToken);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.exportKeyword, this.equalsToken, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.exportKeyword, this.equalsToken, this.identifier, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ExportAssignmentSyntax = g;
  var h = function(b) {
    function c(a, c, d, e, f, g, h, i, j) {
      b.call(this, j);

      this.modifiers = a;

      this.classKeyword = c;

      this.identifier = d;

      this.typeParameterList = e;

      this.heritageClauses = f;

      this.openBraceToken = g;

      this.classElements = h;

      this.closeBraceToken = i;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitClassDeclaration(this);
    };

    c.prototype.kind = function() {
      return 131;
    };

    c.prototype.childCount = function() {
      return 8;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.classKeyword;
        case 2:
          return this.identifier;
        case 3:
          return this.typeParameterList;
        case 4:
          return this.heritageClauses;
        case 5:
          return this.openBraceToken;
        case 6:
          return this.classElements;
        case 7:
          return this.closeBraceToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f, g, h, i) {
      return this.modifiers === a && this.classKeyword === b && this.identifier === d && this.typeParameterList === e &&
        this.heritageClauses === f && this.openBraceToken === g && this.classElements === h && this.closeBraceToken ===
        i ? this : new c(a, b, d, e, f, g, h, i, this.parsedInStrictMode());
    };

    c.create = function(b, d, e, f) {
      return new c(a.Syntax.emptyList, b, d, null, a.Syntax.emptyList, e, a.Syntax.emptyList, f, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, a.Syntax.token(44), b, null, a.Syntax.emptyList, a.Syntax.token(71), a.Syntax.emptyList,
        a.Syntax.token(72), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken,
        this.classElements, this.closeBraceToken);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withClassKeyword = function(a) {
      return this.update(this.modifiers, a, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken,
        this.classElements, this.closeBraceToken);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.modifiers, this.classKeyword, a, this.typeParameterList, this.heritageClauses, this.openBraceToken,
        this.classElements, this.closeBraceToken);
    };

    c.prototype.withTypeParameterList = function(a) {
      return this.update(this.modifiers, this.classKeyword, this.identifier, a, this.heritageClauses, this.openBraceToken,
        this.classElements, this.closeBraceToken);
    };

    c.prototype.withHeritageClauses = function(a) {
      return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, a, this.openBraceToken,
        this.classElements, this.closeBraceToken);
    };

    c.prototype.withHeritageClause = function(b) {
      return this.withHeritageClauses(a.Syntax.list([b]));
    };

    c.prototype.withOpenBraceToken = function(a) {
      return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses,
        a, this.classElements, this.closeBraceToken);
    };

    c.prototype.withClassElements = function(a) {
      return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses,
        this.openBraceToken, a, this.closeBraceToken);
    };

    c.prototype.withClassElement = function(b) {
      return this.withClassElements(a.Syntax.list([b]));
    };

    c.prototype.withCloseBraceToken = function(a) {
      return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses,
        this.openBraceToken, this.classElements, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ClassDeclarationSyntax = h;
  var i = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, h);

      this.modifiers = a;

      this.interfaceKeyword = c;

      this.identifier = d;

      this.typeParameterList = e;

      this.heritageClauses = f;

      this.body = g;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitInterfaceDeclaration(this);
    };

    c.prototype.kind = function() {
      return 128;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.interfaceKeyword;
        case 2:
          return this.identifier;
        case 3:
          return this.typeParameterList;
        case 4:
          return this.heritageClauses;
        case 5:
          return this.body;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.modifiers === a && this.interfaceKeyword === b && this.identifier === d && this.typeParameterList ===
        e && this.heritageClauses === f && this.body === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create = function(b, d, e) {
      return new c(a.Syntax.emptyList, b, d, null, a.Syntax.emptyList, e, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, a.Syntax.token(52), b, null, a.Syntax.emptyList, B.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.interfaceKeyword, this.identifier, this.typeParameterList, this.heritageClauses,
        this.body);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withInterfaceKeyword = function(a) {
      return this.update(this.modifiers, a, this.identifier, this.typeParameterList, this.heritageClauses, this.body);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.modifiers, this.interfaceKeyword, a, this.typeParameterList, this.heritageClauses, this
        .body);
    };

    c.prototype.withTypeParameterList = function(a) {
      return this.update(this.modifiers, this.interfaceKeyword, this.identifier, a, this.heritageClauses, this.body);
    };

    c.prototype.withHeritageClauses = function(a) {
      return this.update(this.modifiers, this.interfaceKeyword, this.identifier, this.typeParameterList, a, this.body);
    };

    c.prototype.withHeritageClause = function(b) {
      return this.withHeritageClauses(a.Syntax.list([b]));
    };

    c.prototype.withBody = function(a) {
      return this.update(this.modifiers, this.interfaceKeyword, this.identifier, this.typeParameterList, this.heritageClauses,
        a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.InterfaceDeclarationSyntax = i;
  var j = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.extendsOrImplementsKeyword = a;

      this.typeNames = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitHeritageClause(this);
    };

    c.prototype.kind = function() {
      return 229;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.extendsOrImplementsKeyword;
        case 1:
          return this.typeNames;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.extendsOrImplementsKeyword === a && this.typeNames === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withExtendsOrImplementsKeyword = function(a) {
      return this.update(a, this.typeNames);
    };

    c.prototype.withTypeNames = function(a) {
      return this.update(this.extendsOrImplementsKeyword, a);
    };

    c.prototype.withTypeName = function(b) {
      return this.withTypeNames(a.Syntax.separatedList([b]));
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.HeritageClauseSyntax = j;
  var k = function(b) {
    function c(a, c, d, e, f, g, h, i) {
      b.call(this, i);

      this.modifiers = a;

      this.moduleKeyword = c;

      this.moduleName = d;

      this.stringLiteral = e;

      this.openBraceToken = f;

      this.moduleElements = g;

      this.closeBraceToken = h;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitModuleDeclaration(this);
    };

    c.prototype.kind = function() {
      return 130;
    };

    c.prototype.childCount = function() {
      return 7;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.moduleKeyword;
        case 2:
          return this.moduleName;
        case 3:
          return this.stringLiteral;
        case 4:
          return this.openBraceToken;
        case 5:
          return this.moduleElements;
        case 6:
          return this.closeBraceToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f, g, h) {
      return this.modifiers === a && this.moduleKeyword === b && this.moduleName === d && this.stringLiteral === e &&
        this.openBraceToken === f && this.moduleElements === g && this.closeBraceToken === h ? this : new c(a, b, d,
          e, f, g, h, this.parsedInStrictMode());
    };

    c.create = function(b, d, e) {
      return new c(a.Syntax.emptyList, b, null, null, d, a.Syntax.emptyList, e, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.emptyList, a.Syntax.token(66), null, null, a.Syntax.token(71), a.Syntax.emptyList, a.Syntax
        .token(72), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements,
        this.closeBraceToken);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withModuleKeyword = function(a) {
      return this.update(this.modifiers, a, this.moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements,
        this.closeBraceToken);
    };

    c.prototype.withModuleName = function(a) {
      return this.update(this.modifiers, this.moduleKeyword, a, this.stringLiteral, this.openBraceToken, this.moduleElements,
        this.closeBraceToken);
    };

    c.prototype.withStringLiteral = function(a) {
      return this.update(this.modifiers, this.moduleKeyword, this.moduleName, a, this.openBraceToken, this.moduleElements,
        this.closeBraceToken);
    };

    c.prototype.withOpenBraceToken = function(a) {
      return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, a, this.moduleElements,
        this.closeBraceToken);
    };

    c.prototype.withModuleElements = function(a) {
      return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken,
        a, this.closeBraceToken);
    };

    c.prototype.withModuleElement = function(b) {
      return this.withModuleElements(a.Syntax.list([b]));
    };

    c.prototype.withCloseBraceToken = function(a) {
      return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken,
        this.moduleElements, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ModuleDeclarationSyntax = k;
  var l = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, h);

      this.modifiers = a;

      this.functionKeyword = c;

      this.identifier = d;

      this.callSignature = e;

      this.block = f;

      this.semicolonToken = g;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitFunctionDeclaration(this);
    };

    c.prototype.kind = function() {
      return 129;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.functionKeyword;
        case 2:
          return this.identifier;
        case 3:
          return this.callSignature;
        case 4:
          return this.block;
        case 5:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.modifiers === a && this.functionKeyword === b && this.identifier === d && this.callSignature === e &&
        this.block === f && this.semicolonToken === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create = function(b, d, e) {
      return new c(a.Syntax.emptyList, b, d, e, null, null, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, a.Syntax.token(27), b, S.create1(), null, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.functionKeyword, this.identifier, this.callSignature, this.block, this.semicolonToken);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withFunctionKeyword = function(a) {
      return this.update(this.modifiers, a, this.identifier, this.callSignature, this.block, this.semicolonToken);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.modifiers, this.functionKeyword, a, this.callSignature, this.block, this.semicolonToken);
    };

    c.prototype.withCallSignature = function(a) {
      return this.update(this.modifiers, this.functionKeyword, this.identifier, a, this.block, this.semicolonToken);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.modifiers, this.functionKeyword, this.identifier, this.callSignature, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.modifiers, this.functionKeyword, this.identifier, this.callSignature, this.block, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.modifiers.isTypeScriptSpecific() ? !0 : this.callSignature.isTypeScriptSpecific() ? !0 : this.block !==
        null && this.block.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.FunctionDeclarationSyntax = l;
  var m = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.modifiers = a;

      this.variableDeclaration = c;

      this.semicolonToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitVariableStatement(this);
    };

    c.prototype.kind = function() {
      return 147;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.variableDeclaration;
        case 2:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.modifiers === a && this.variableDeclaration === b && this.semicolonToken === d ? this : new c(a, b,
        d, this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(a.Syntax.emptyList, b, d, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, b, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.variableDeclaration, this.semicolonToken);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withVariableDeclaration = function(a) {
      return this.update(this.modifiers, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.modifiers, this.variableDeclaration, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.modifiers.isTypeScriptSpecific() ? !0 : this.variableDeclaration.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.VariableStatementSyntax = m;
  var n = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.varKeyword = a;

      this.variableDeclarators = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitVariableDeclaration(this);
    };

    c.prototype.kind = function() {
      return 223;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.varKeyword;
        case 1:
          return this.variableDeclarators;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.varKeyword === a && this.variableDeclarators === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(40), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withVarKeyword = function(a) {
      return this.update(a, this.variableDeclarators);
    };

    c.prototype.withVariableDeclarators = function(a) {
      return this.update(this.varKeyword, a);
    };

    c.prototype.withVariableDeclarator = function(b) {
      return this.withVariableDeclarators(a.Syntax.separatedList([b]));
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.variableDeclarators.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.VariableDeclarationSyntax = n;
  var o = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.identifier = a;

      this.typeAnnotation = c;

      this.equalsValueClause = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitVariableDeclarator(this);
    };

    c.prototype.kind = function() {
      return 224;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.identifier;
        case 1:
          return this.typeAnnotation;
        case 2:
          return this.equalsValueClause;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.identifier === a && this.typeAnnotation === b && this.equalsValueClause === d ? this : new c(a, b,
        d, this.parsedInStrictMode());
    };

    c.create = function(a) {
      return new c(a, null, null, !1);
    };

    c.create1 = function(a) {
      return new c(a, null, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(a, this.typeAnnotation, this.equalsValueClause);
    };

    c.prototype.withTypeAnnotation = function(a) {
      return this.update(this.identifier, a, this.equalsValueClause);
    };

    c.prototype.withEqualsValueClause = function(a) {
      return this.update(this.identifier, this.typeAnnotation, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.typeAnnotation !== null ? !0 : this.equalsValueClause !== null && this.equalsValueClause.isTypeScriptSpecific() ? !
        0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.VariableDeclaratorSyntax = o;
  var p = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.equalsToken = a;

      this.value = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitEqualsValueClause(this);
    };

    c.prototype.kind = function() {
      return 230;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.equalsToken;
        case 1:
          return this.value;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.equalsToken === a && this.value === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(108), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withEqualsToken = function(a) {
      return this.update(a, this.value);
    };

    c.prototype.withValue = function(a) {
      return this.update(this.equalsToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.value.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.EqualsValueClauseSyntax = p;
  var q = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.operatorToken = c;

      this.operand = d;

      this._kind = a;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitPrefixUnaryExpression(this);
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.operatorToken;
        case 1:
          return this.operand;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.kind = function() {
      return this._kind;
    };

    c.prototype.update = function(a, b, d) {
      return this._kind === a && this.operatorToken === b && this.operand === d ? this : new c(a, b, d, this.parsedInStrictMode());
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withKind = function(a) {
      return this.update(a, this.operatorToken, this.operand);
    };

    c.prototype.withOperatorToken = function(a) {
      return this.update(this._kind, a, this.operand);
    };

    c.prototype.withOperand = function(a) {
      return this.update(this._kind, this.operatorToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.operand.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.PrefixUnaryExpressionSyntax = q;
  var r = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.openBracketToken = a;

      this.expressions = c;

      this.closeBracketToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitArrayLiteralExpression(this);
    };

    c.prototype.kind = function() {
      return 213;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.openBracketToken;
        case 1:
          return this.expressions;
        case 2:
          return this.closeBracketToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.openBracketToken === a && this.expressions === b && this.closeBracketToken === d ? this : new c(a,
        b, d, this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(b, a.Syntax.emptySeparatedList, d, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(75), a.Syntax.emptySeparatedList, a.Syntax.token(76), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withOpenBracketToken = function(a) {
      return this.update(a, this.expressions, this.closeBracketToken);
    };

    c.prototype.withExpressions = function(a) {
      return this.update(this.openBracketToken, a, this.closeBracketToken);
    };

    c.prototype.withExpression = function(b) {
      return this.withExpressions(a.Syntax.separatedList([b]));
    };

    c.prototype.withCloseBracketToken = function(a) {
      return this.update(this.openBracketToken, this.expressions, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expressions.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ArrayLiteralExpressionSyntax = r;
  var s = function(b) {
    function c(a) {
      b.call(this, a);
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitOmittedExpression(this);
    };

    c.prototype.kind = function() {
      return 222;
    };

    c.prototype.childCount = function() {
      return 0;
    };

    c.prototype.childAt = function(b) {
      throw a.Errors.invalidOperation();
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function() {
      return this;
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return c;
  }(a.SyntaxNode);
  a.OmittedExpressionSyntax = s;
  var t = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.openParenToken = a;

      this.expression = c;

      this.closeParenToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitParenthesizedExpression(this);
    };

    c.prototype.kind = function() {
      return 216;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.openParenToken;
        case 1:
          return this.expression;
        case 2:
          return this.closeParenToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.openParenToken === a && this.expression === b && this.closeParenToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(73), b, a.Syntax.token(74), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(a, this.expression, this.closeParenToken);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.openParenToken, a, this.closeParenToken);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.openParenToken, this.expression, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ParenthesizedExpressionSyntax = t;
  var u = function(a) {
    function b(b, c, d) {
      a.call(this, d);

      this.equalsGreaterThanToken = b;

      this.body = c;
    }
    __extends(b, a);

    b.prototype.isUnaryExpression = function() {
      return !0;
    };

    b.prototype.isExpression = function() {
      return !0;
    };

    b.prototype.withLeadingTrivia = function(b) {
      return a.prototype.withLeadingTrivia.call(this, b);
    };

    b.prototype.withTrailingTrivia = function(b) {
      return a.prototype.withTrailingTrivia.call(this, b);
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return b;
  }(a.SyntaxNode);
  a.ArrowFunctionExpressionSyntax = u;
  var v = function(b) {
    function c(a, c, d, e) {
      b.call(this, c, d, e);

      this.identifier = a;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitSimpleArrowFunctionExpression(this);
    };

    c.prototype.kind = function() {
      return 218;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.identifier;
        case 1:
          return this.equalsGreaterThanToken;
        case 2:
          return this.body;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.identifier === a && this.equalsGreaterThanToken === b && this.body === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(b, a.Syntax.token(86), d, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(a, this.equalsGreaterThanToken, this.body);
    };

    c.prototype.withEqualsGreaterThanToken = function(a) {
      return this.update(this.identifier, a, this.body);
    };

    c.prototype.withBody = function(a) {
      return this.update(this.identifier, this.equalsGreaterThanToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(u);
  a.SimpleArrowFunctionExpressionSyntax = v;
  var w = function(b) {
    function c(a, c, d, e) {
      b.call(this, c, d, e);

      this.callSignature = a;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitParenthesizedArrowFunctionExpression(this);
    };

    c.prototype.kind = function() {
      return 217;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.callSignature;
        case 1:
          return this.equalsGreaterThanToken;
        case 2:
          return this.body;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.callSignature === a && this.equalsGreaterThanToken === b && this.body === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(S.create1(), a.Syntax.token(86), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withCallSignature = function(a) {
      return this.update(a, this.equalsGreaterThanToken, this.body);
    };

    c.prototype.withEqualsGreaterThanToken = function(a) {
      return this.update(this.callSignature, a, this.body);
    };

    c.prototype.withBody = function(a) {
      return this.update(this.callSignature, this.equalsGreaterThanToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(u);
  a.ParenthesizedArrowFunctionExpressionSyntax = w;
  var x = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.left = a;

      this.dotToken = c;

      this.right = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitQualifiedName(this);
    };

    c.prototype.kind = function() {
      return 122;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.left;
        case 1:
          return this.dotToken;
        case 2:
          return this.right;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isName = function() {
      return !0;
    };

    c.prototype.isType = function() {
      return !0;
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.left === a && this.dotToken === b && this.right === d ? this : new c(a, b, d, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(b, a.Syntax.token(77), d, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withLeft = function(a) {
      return this.update(a, this.dotToken, this.right);
    };

    c.prototype.withDotToken = function(a) {
      return this.update(this.left, a, this.right);
    };

    c.prototype.withRight = function(a) {
      return this.update(this.left, this.dotToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.QualifiedNameSyntax = x;
  var y = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.lessThanToken = a;

      this.typeArguments = c;

      this.greaterThanToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitTypeArgumentList(this);
    };

    c.prototype.kind = function() {
      return 227;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.lessThanToken;
        case 1:
          return this.typeArguments;
        case 2:
          return this.greaterThanToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.lessThanToken === a && this.typeArguments === b && this.greaterThanToken === d ? this : new c(a, b,
        d, this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(b, a.Syntax.emptySeparatedList, d, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(81), a.Syntax.emptySeparatedList, a.Syntax.token(82), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withLessThanToken = function(a) {
      return this.update(a, this.typeArguments, this.greaterThanToken);
    };

    c.prototype.withTypeArguments = function(a) {
      return this.update(this.lessThanToken, a, this.greaterThanToken);
    };

    c.prototype.withTypeArgument = function(b) {
      return this.withTypeArguments(a.Syntax.separatedList([b]));
    };

    c.prototype.withGreaterThanToken = function(a) {
      return this.update(this.lessThanToken, this.typeArguments, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.TypeArgumentListSyntax = y;
  var z = function(b) {
    function c(a, c, d, e, f, g) {
      b.call(this, g);

      this.newKeyword = a;

      this.typeParameterList = c;

      this.parameterList = d;

      this.equalsGreaterThanToken = e;

      this.type = f;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitConstructorType(this);
    };

    c.prototype.kind = function() {
      return 126;
    };

    c.prototype.childCount = function() {
      return 5;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.newKeyword;
        case 1:
          return this.typeParameterList;
        case 2:
          return this.parameterList;
        case 3:
          return this.equalsGreaterThanToken;
        case 4:
          return this.type;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isType = function() {
      return !0;
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f) {
      return this.newKeyword === a && this.typeParameterList === b && this.parameterList === d && this.equalsGreaterThanToken ===
        e && this.type === f ? this : new c(a, b, d, e, f, this.parsedInStrictMode());
    };

    c.create = function(a, b, d, e) {
      return new c(a, null, b, d, e, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(31), null, T.create1(), a.Syntax.token(86), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withNewKeyword = function(a) {
      return this.update(a, this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, this.type);
    };

    c.prototype.withTypeParameterList = function(a) {
      return this.update(this.newKeyword, a, this.parameterList, this.equalsGreaterThanToken, this.type);
    };

    c.prototype.withParameterList = function(a) {
      return this.update(this.newKeyword, this.typeParameterList, a, this.equalsGreaterThanToken, this.type);
    };

    c.prototype.withEqualsGreaterThanToken = function(a) {
      return this.update(this.newKeyword, this.typeParameterList, this.parameterList, a, this.type);
    };

    c.prototype.withType = function(a) {
      return this.update(this.newKeyword, this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ConstructorTypeSyntax = z;
  var A = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.typeParameterList = a;

      this.parameterList = c;

      this.equalsGreaterThanToken = d;

      this.type = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitFunctionType(this);
    };

    c.prototype.kind = function() {
      return 124;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.typeParameterList;
        case 1:
          return this.parameterList;
        case 2:
          return this.equalsGreaterThanToken;
        case 3:
          return this.type;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isType = function() {
      return !0;
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e) {
      return this.typeParameterList === a && this.parameterList === b && this.equalsGreaterThanToken === d && this.type ===
        e ? this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create = function(a, b, d) {
      return new c(null, a, b, d, !1);
    };

    c.create1 = function(b) {
      return new c(null, T.create1(), a.Syntax.token(86), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withTypeParameterList = function(a) {
      return this.update(a, this.parameterList, this.equalsGreaterThanToken, this.type);
    };

    c.prototype.withParameterList = function(a) {
      return this.update(this.typeParameterList, a, this.equalsGreaterThanToken, this.type);
    };

    c.prototype.withEqualsGreaterThanToken = function(a) {
      return this.update(this.typeParameterList, this.parameterList, a, this.type);
    };

    c.prototype.withType = function(a) {
      return this.update(this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.FunctionTypeSyntax = A;
  var B = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.openBraceToken = a;

      this.typeMembers = c;

      this.closeBraceToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitObjectType(this);
    };

    c.prototype.kind = function() {
      return 123;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.openBraceToken;
        case 1:
          return this.typeMembers;
        case 2:
          return this.closeBraceToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isType = function() {
      return !0;
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.openBraceToken === a && this.typeMembers === b && this.closeBraceToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(b, a.Syntax.emptySeparatedList, d, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(71), a.Syntax.emptySeparatedList, a.Syntax.token(72), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withOpenBraceToken = function(a) {
      return this.update(a, this.typeMembers, this.closeBraceToken);
    };

    c.prototype.withTypeMembers = function(a) {
      return this.update(this.openBraceToken, a, this.closeBraceToken);
    };

    c.prototype.withTypeMember = function(b) {
      return this.withTypeMembers(a.Syntax.separatedList([b]));
    };

    c.prototype.withCloseBraceToken = function(a) {
      return this.update(this.openBraceToken, this.typeMembers, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ObjectTypeSyntax = B;
  var C = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.type = a;

      this.openBracketToken = c;

      this.closeBracketToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitArrayType(this);
    };

    c.prototype.kind = function() {
      return 125;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.type;
        case 1:
          return this.openBracketToken;
        case 2:
          return this.closeBracketToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isType = function() {
      return !0;
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.type === a && this.openBracketToken === b && this.closeBracketToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(b, a.Syntax.token(75), a.Syntax.token(76), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withType = function(a) {
      return this.update(a, this.openBracketToken, this.closeBracketToken);
    };

    c.prototype.withOpenBracketToken = function(a) {
      return this.update(this.type, a, this.closeBracketToken);
    };

    c.prototype.withCloseBracketToken = function(a) {
      return this.update(this.type, this.openBracketToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ArrayTypeSyntax = C;
  var D = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.name = a;

      this.typeArgumentList = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitGenericType(this);
    };

    c.prototype.kind = function() {
      return 127;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.name;
        case 1:
          return this.typeArgumentList;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isType = function() {
      return !0;
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b) {
      return this.name === a && this.typeArgumentList === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(a) {
      return new c(a, y.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withName = function(a) {
      return this.update(a, this.typeArgumentList);
    };

    c.prototype.withTypeArgumentList = function(a) {
      return this.update(this.name, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.GenericTypeSyntax = D;
  var E = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.colonToken = a;

      this.type = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitTypeAnnotation(this);
    };

    c.prototype.kind = function() {
      return 244;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.colonToken;
        case 1:
          return this.type;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.colonToken === a && this.type === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(107), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withColonToken = function(a) {
      return this.update(a, this.type);
    };

    c.prototype.withType = function(a) {
      return this.update(this.colonToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.TypeAnnotationSyntax = E;
  var F = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.openBraceToken = a;

      this.statements = c;

      this.closeBraceToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitBlock(this);
    };

    c.prototype.kind = function() {
      return 145;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.openBraceToken;
        case 1:
          return this.statements;
        case 2:
          return this.closeBraceToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.openBraceToken === a && this.statements === b && this.closeBraceToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(b, a.Syntax.emptyList, d, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(71), a.Syntax.emptyList, a.Syntax.token(72), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withOpenBraceToken = function(a) {
      return this.update(a, this.statements, this.closeBraceToken);
    };

    c.prototype.withStatements = function(a) {
      return this.update(this.openBraceToken, a, this.closeBraceToken);
    };

    c.prototype.withStatement = function(b) {
      return this.withStatements(a.Syntax.list([b]));
    };

    c.prototype.withCloseBraceToken = function(a) {
      return this.update(this.openBraceToken, this.statements, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.statements.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.BlockSyntax = F;
  var G = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, h);

      this.dotDotDotToken = a;

      this.publicOrPrivateKeyword = c;

      this.identifier = d;

      this.questionToken = e;

      this.typeAnnotation = f;

      this.equalsValueClause = g;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitParameter(this);
    };

    c.prototype.kind = function() {
      return 242;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.dotDotDotToken;
        case 1:
          return this.publicOrPrivateKeyword;
        case 2:
          return this.identifier;
        case 3:
          return this.questionToken;
        case 4:
          return this.typeAnnotation;
        case 5:
          return this.equalsValueClause;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.dotDotDotToken === a && this.publicOrPrivateKeyword === b && this.identifier === d && this.questionToken ===
        e && this.typeAnnotation === f && this.equalsValueClause === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create = function(a) {
      return new c(null, null, a, null, null, null, !1);
    };

    c.create1 = function(a) {
      return new c(null, null, a, null, null, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withDotDotDotToken = function(a) {
      return this.update(a, this.publicOrPrivateKeyword, this.identifier, this.questionToken, this.typeAnnotation,
        this.equalsValueClause);
    };

    c.prototype.withPublicOrPrivateKeyword = function(a) {
      return this.update(this.dotDotDotToken, a, this.identifier, this.questionToken, this.typeAnnotation, this.equalsValueClause);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, a, this.questionToken, this.typeAnnotation,
        this.equalsValueClause);
    };

    c.prototype.withQuestionToken = function(a) {
      return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, a, this.typeAnnotation,
        this.equalsValueClause);
    };

    c.prototype.withTypeAnnotation = function(a) {
      return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, this.questionToken, a,
        this.equalsValueClause);
    };

    c.prototype.withEqualsValueClause = function(a) {
      return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, this.questionToken, this.typeAnnotation,
        a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.dotDotDotToken !== null ? !0 : this.publicOrPrivateKeyword !== null ? !0 : this.questionToken !==
        null ? !0 : this.typeAnnotation !== null ? !0 : this.equalsValueClause !== null ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ParameterSyntax = G;
  var H = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.expression = a;

      this.dotToken = c;

      this.name = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitMemberAccessExpression(this);
    };

    c.prototype.kind = function() {
      return 211;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.expression;
        case 1:
          return this.dotToken;
        case 2:
          return this.name;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.expression === a && this.dotToken === b && this.name === d ? this : new c(a, b, d, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(b, a.Syntax.token(77), d, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withExpression = function(a) {
      return this.update(a, this.dotToken, this.name);
    };

    c.prototype.withDotToken = function(a) {
      return this.update(this.expression, a, this.name);
    };

    c.prototype.withName = function(a) {
      return this.update(this.expression, this.dotToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.MemberAccessExpressionSyntax = H;
  var I = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.operand = c;

      this.operatorToken = d;

      this._kind = a;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitPostfixUnaryExpression(this);
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.operand;
        case 1:
          return this.operatorToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.kind = function() {
      return this._kind;
    };

    c.prototype.update = function(a, b, d) {
      return this._kind === a && this.operand === b && this.operatorToken === d ? this : new c(a, b, d, this.parsedInStrictMode());
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withKind = function(a) {
      return this.update(a, this.operand, this.operatorToken);
    };

    c.prototype.withOperand = function(a) {
      return this.update(this._kind, a, this.operatorToken);
    };

    c.prototype.withOperatorToken = function(a) {
      return this.update(this._kind, this.operand, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.operand.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.PostfixUnaryExpressionSyntax = I;
  var J = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.expression = a;

      this.openBracketToken = c;

      this.argumentExpression = d;

      this.closeBracketToken = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitElementAccessExpression(this);
    };

    c.prototype.kind = function() {
      return 220;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.expression;
        case 1:
          return this.openBracketToken;
        case 2:
          return this.argumentExpression;
        case 3:
          return this.closeBracketToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e) {
      return this.expression === a && this.openBracketToken === b && this.argumentExpression === d && this.closeBracketToken ===
        e ? this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(b, a.Syntax.token(75), d, a.Syntax.token(76), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withExpression = function(a) {
      return this.update(a, this.openBracketToken, this.argumentExpression, this.closeBracketToken);
    };

    c.prototype.withOpenBracketToken = function(a) {
      return this.update(this.expression, a, this.argumentExpression, this.closeBracketToken);
    };

    c.prototype.withArgumentExpression = function(a) {
      return this.update(this.expression, this.openBracketToken, a, this.closeBracketToken);
    };

    c.prototype.withCloseBracketToken = function(a) {
      return this.update(this.expression, this.openBracketToken, this.argumentExpression, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : this.argumentExpression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ElementAccessExpressionSyntax = J;
  var K = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.expression = a;

      this.argumentList = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitInvocationExpression(this);
    };

    c.prototype.kind = function() {
      return 212;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.expression;
        case 1:
          return this.argumentList;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b) {
      return this.expression === a && this.argumentList === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(a) {
      return new c(a, L.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withExpression = function(a) {
      return this.update(a, this.argumentList);
    };

    c.prototype.withArgumentList = function(a) {
      return this.update(this.expression, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : this.argumentList.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.InvocationExpressionSyntax = K;
  var L = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.typeArgumentList = a;

      this.openParenToken = c;

      this.arguments = d;

      this.closeParenToken = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitArgumentList(this);
    };

    c.prototype.kind = function() {
      return 225;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.typeArgumentList;
        case 1:
          return this.openParenToken;
        case 2:
          return this.arguments;
        case 3:
          return this.closeParenToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e) {
      return this.typeArgumentList === a && this.openParenToken === b && this.arguments === d && this.closeParenToken ===
        e ? this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(null, b, a.Syntax.emptySeparatedList, d, !1);
    };

    c.create1 = function() {
      return new c(null, a.Syntax.token(73), a.Syntax.emptySeparatedList, a.Syntax.token(74), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withTypeArgumentList = function(a) {
      return this.update(a, this.openParenToken, this.arguments, this.closeParenToken);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.typeArgumentList, a, this.arguments, this.closeParenToken);
    };

    c.prototype.withArguments = function(a) {
      return this.update(this.typeArgumentList, this.openParenToken, a, this.closeParenToken);
    };

    c.prototype.withArgument = function(b) {
      return this.withArguments(a.Syntax.separatedList([b]));
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.typeArgumentList, this.openParenToken, this.arguments, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.typeArgumentList !== null && this.typeArgumentList.isTypeScriptSpecific() ? !0 : this.arguments.isTypeScriptSpecific() ? !
        0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ArgumentListSyntax = L;
  var M = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.left = c;

      this.operatorToken = d;

      this.right = e;

      this._kind = a;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitBinaryExpression(this);
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.left;
        case 1:
          return this.operatorToken;
        case 2:
          return this.right;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.kind = function() {
      return this._kind;
    };

    c.prototype.update = function(a, b, d, e) {
      return this._kind === a && this.left === b && this.operatorToken === d && this.right === e ? this : new c(a, b,
        d, e, this.parsedInStrictMode());
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withKind = function(a) {
      return this.update(a, this.left, this.operatorToken, this.right);
    };

    c.prototype.withLeft = function(a) {
      return this.update(this._kind, a, this.operatorToken, this.right);
    };

    c.prototype.withOperatorToken = function(a) {
      return this.update(this._kind, this.left, a, this.right);
    };

    c.prototype.withRight = function(a) {
      return this.update(this._kind, this.left, this.operatorToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.left.isTypeScriptSpecific() ? !0 : this.right.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.BinaryExpressionSyntax = M;
  var N = function(b) {
    function c(a, c, d, e, f, g) {
      b.call(this, g);

      this.condition = a;

      this.questionToken = c;

      this.whenTrue = d;

      this.colonToken = e;

      this.whenFalse = f;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitConditionalExpression(this);
    };

    c.prototype.kind = function() {
      return 185;
    };

    c.prototype.childCount = function() {
      return 5;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.condition;
        case 1:
          return this.questionToken;
        case 2:
          return this.whenTrue;
        case 3:
          return this.colonToken;
        case 4:
          return this.whenFalse;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f) {
      return this.condition === a && this.questionToken === b && this.whenTrue === d && this.colonToken === e && this
        .whenFalse === f ? this : new c(a, b, d, e, f, this.parsedInStrictMode());
    };

    c.create1 = function(b, d, e) {
      return new c(b, a.Syntax.token(106), d, a.Syntax.token(107), e, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withCondition = function(a) {
      return this.update(a, this.questionToken, this.whenTrue, this.colonToken, this.whenFalse);
    };

    c.prototype.withQuestionToken = function(a) {
      return this.update(this.condition, a, this.whenTrue, this.colonToken, this.whenFalse);
    };

    c.prototype.withWhenTrue = function(a) {
      return this.update(this.condition, this.questionToken, a, this.colonToken, this.whenFalse);
    };

    c.prototype.withColonToken = function(a) {
      return this.update(this.condition, this.questionToken, this.whenTrue, a, this.whenFalse);
    };

    c.prototype.withWhenFalse = function(a) {
      return this.update(this.condition, this.questionToken, this.whenTrue, this.colonToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.condition.isTypeScriptSpecific() ? !0 : this.whenTrue.isTypeScriptSpecific() ? !0 : this.whenFalse.isTypeScriptSpecific() ? !
        0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ConditionalExpressionSyntax = N;
  var O = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.newKeyword = a;

      this.callSignature = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitConstructSignature(this);
    };

    c.prototype.kind = function() {
      return 142;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.newKeyword;
        case 1:
          return this.callSignature;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isTypeMember = function() {
      return !0;
    };

    c.prototype.update = function(a, b) {
      return this.newKeyword === a && this.callSignature === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function() {
      return new c(a.Syntax.token(31), S.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withNewKeyword = function(a) {
      return this.update(a, this.callSignature);
    };

    c.prototype.withCallSignature = function(a) {
      return this.update(this.newKeyword, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ConstructSignatureSyntax = O;
  var P = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.propertyName = a;

      this.questionToken = c;

      this.callSignature = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitMethodSignature(this);
    };

    c.prototype.kind = function() {
      return 144;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.propertyName;
        case 1:
          return this.questionToken;
        case 2:
          return this.callSignature;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isTypeMember = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.propertyName === a && this.questionToken === b && this.callSignature === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create = function(a, b) {
      return new c(a, null, b, !1);
    };

    c.create1 = function(a) {
      return new c(a, null, S.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(a, this.questionToken, this.callSignature);
    };

    c.prototype.withQuestionToken = function(a) {
      return this.update(this.propertyName, a, this.callSignature);
    };

    c.prototype.withCallSignature = function(a) {
      return this.update(this.propertyName, this.questionToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.callSignature.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.MethodSignatureSyntax = P;
  var Q = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.openBracketToken = a;

      this.parameter = c;

      this.closeBracketToken = d;

      this.typeAnnotation = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitIndexSignature(this);
    };

    c.prototype.kind = function() {
      return 143;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.openBracketToken;
        case 1:
          return this.parameter;
        case 2:
          return this.closeBracketToken;
        case 3:
          return this.typeAnnotation;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isTypeMember = function() {
      return !0;
    };

    c.prototype.isClassElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e) {
      return this.openBracketToken === a && this.parameter === b && this.closeBracketToken === d && this.typeAnnotation ===
        e ? this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create = function(a, b, d) {
      return new c(a, b, d, null, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(75), b, a.Syntax.token(76), null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withOpenBracketToken = function(a) {
      return this.update(a, this.parameter, this.closeBracketToken, this.typeAnnotation);
    };

    c.prototype.withParameter = function(a) {
      return this.update(this.openBracketToken, a, this.closeBracketToken, this.typeAnnotation);
    };

    c.prototype.withCloseBracketToken = function(a) {
      return this.update(this.openBracketToken, this.parameter, a, this.typeAnnotation);
    };

    c.prototype.withTypeAnnotation = function(a) {
      return this.update(this.openBracketToken, this.parameter, this.closeBracketToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.IndexSignatureSyntax = Q;
  var R = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.propertyName = a;

      this.questionToken = c;

      this.typeAnnotation = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitPropertySignature(this);
    };

    c.prototype.kind = function() {
      return 140;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.propertyName;
        case 1:
          return this.questionToken;
        case 2:
          return this.typeAnnotation;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isTypeMember = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.propertyName === a && this.questionToken === b && this.typeAnnotation === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create = function(a) {
      return new c(a, null, null, !1);
    };

    c.create1 = function(a) {
      return new c(a, null, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(a, this.questionToken, this.typeAnnotation);
    };

    c.prototype.withQuestionToken = function(a) {
      return this.update(this.propertyName, a, this.typeAnnotation);
    };

    c.prototype.withTypeAnnotation = function(a) {
      return this.update(this.propertyName, this.questionToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.PropertySignatureSyntax = R;
  var S = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.typeParameterList = a;

      this.parameterList = c;

      this.typeAnnotation = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitCallSignature(this);
    };

    c.prototype.kind = function() {
      return 141;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.typeParameterList;
        case 1:
          return this.parameterList;
        case 2:
          return this.typeAnnotation;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isTypeMember = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.typeParameterList === a && this.parameterList === b && this.typeAnnotation === d ? this : new c(a,
        b, d, this.parsedInStrictMode());
    };

    c.create = function(a) {
      return new c(null, a, null, !1);
    };

    c.create1 = function() {
      return new c(null, T.create1(), null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withTypeParameterList = function(a) {
      return this.update(a, this.parameterList, this.typeAnnotation);
    };

    c.prototype.withParameterList = function(a) {
      return this.update(this.typeParameterList, a, this.typeAnnotation);
    };

    c.prototype.withTypeAnnotation = function(a) {
      return this.update(this.typeParameterList, this.parameterList, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.typeParameterList !== null ? !0 : this.parameterList.isTypeScriptSpecific() ? !0 : this.typeAnnotation !==
        null ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.CallSignatureSyntax = S;
  var T = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.openParenToken = a;

      this.parameters = c;

      this.closeParenToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitParameterList(this);
    };

    c.prototype.kind = function() {
      return 226;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.openParenToken;
        case 1:
          return this.parameters;
        case 2:
          return this.closeParenToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.openParenToken === a && this.parameters === b && this.closeParenToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(b, a.Syntax.emptySeparatedList, d, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(73), a.Syntax.emptySeparatedList, a.Syntax.token(74), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(a, this.parameters, this.closeParenToken);
    };

    c.prototype.withParameters = function(a) {
      return this.update(this.openParenToken, a, this.closeParenToken);
    };

    c.prototype.withParameter = function(b) {
      return this.withParameters(a.Syntax.separatedList([b]));
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.openParenToken, this.parameters, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.parameters.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ParameterListSyntax = T;
  var U = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.lessThanToken = a;

      this.typeParameters = c;

      this.greaterThanToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitTypeParameterList(this);
    };

    c.prototype.kind = function() {
      return 228;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.lessThanToken;
        case 1:
          return this.typeParameters;
        case 2:
          return this.greaterThanToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.lessThanToken === a && this.typeParameters === b && this.greaterThanToken === d ? this : new c(a, b,
        d, this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(b, a.Syntax.emptySeparatedList, d, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(81), a.Syntax.emptySeparatedList, a.Syntax.token(82), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withLessThanToken = function(a) {
      return this.update(a, this.typeParameters, this.greaterThanToken);
    };

    c.prototype.withTypeParameters = function(a) {
      return this.update(this.lessThanToken, a, this.greaterThanToken);
    };

    c.prototype.withTypeParameter = function(b) {
      return this.withTypeParameters(a.Syntax.separatedList([b]));
    };

    c.prototype.withGreaterThanToken = function(a) {
      return this.update(this.lessThanToken, this.typeParameters, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.TypeParameterListSyntax = U;
  var V = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.identifier = a;

      this.constraint = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitTypeParameter(this);
    };

    c.prototype.kind = function() {
      return 236;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.identifier;
        case 1:
          return this.constraint;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.identifier === a && this.constraint === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create = function(a) {
      return new c(a, null, !1);
    };

    c.create1 = function(a) {
      return new c(a, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(a, this.constraint);
    };

    c.prototype.withConstraint = function(a) {
      return this.update(this.identifier, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.TypeParameterSyntax = V;
  var W = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.extendsKeyword = a;

      this.type = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitConstraint(this);
    };

    c.prototype.kind = function() {
      return 237;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.extendsKeyword;
        case 1:
          return this.type;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.extendsKeyword === a && this.type === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(48), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withExtendsKeyword = function(a) {
      return this.update(a, this.type);
    };

    c.prototype.withType = function(a) {
      return this.update(this.extendsKeyword, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ConstraintSyntax = W;
  var X = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.elseKeyword = a;

      this.statement = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitElseClause(this);
    };

    c.prototype.kind = function() {
      return 233;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.elseKeyword;
        case 1:
          return this.statement;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.elseKeyword === a && this.statement === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(23), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withElseKeyword = function(a) {
      return this.update(a, this.statement);
    };

    c.prototype.withStatement = function(a) {
      return this.update(this.elseKeyword, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.statement.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ElseClauseSyntax = X;
  var Y = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, h);

      this.ifKeyword = a;

      this.openParenToken = c;

      this.condition = d;

      this.closeParenToken = e;

      this.statement = f;

      this.elseClause = g;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitIfStatement(this);
    };

    c.prototype.kind = function() {
      return 146;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.ifKeyword;
        case 1:
          return this.openParenToken;
        case 2:
          return this.condition;
        case 3:
          return this.closeParenToken;
        case 4:
          return this.statement;
        case 5:
          return this.elseClause;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.ifKeyword === a && this.openParenToken === b && this.condition === d && this.closeParenToken === e &&
        this.statement === f && this.elseClause === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create = function(a, b, d, e, f) {
      return new c(a, b, d, e, f, null, !1);
    };

    c.create1 = function(b, d) {
      return new c(a.Syntax.token(28), a.Syntax.token(73), b, a.Syntax.token(74), d, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withIfKeyword = function(a) {
      return this.update(a, this.openParenToken, this.condition, this.closeParenToken, this.statement, this.elseClause);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.ifKeyword, a, this.condition, this.closeParenToken, this.statement, this.elseClause);
    };

    c.prototype.withCondition = function(a) {
      return this.update(this.ifKeyword, this.openParenToken, a, this.closeParenToken, this.statement, this.elseClause);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.ifKeyword, this.openParenToken, this.condition, a, this.statement, this.elseClause);
    };

    c.prototype.withStatement = function(a) {
      return this.update(this.ifKeyword, this.openParenToken, this.condition, this.closeParenToken, a, this.elseClause);
    };

    c.prototype.withElseClause = function(a) {
      return this.update(this.ifKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.condition.isTypeScriptSpecific() ? !0 : this.statement.isTypeScriptSpecific() ? !0 : this.elseClause !==
        null && this.elseClause.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.IfStatementSyntax = Y;
  var Z = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.expression = a;

      this.semicolonToken = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitExpressionStatement(this);
    };

    c.prototype.kind = function() {
      return 148;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.expression;
        case 1:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b) {
      return this.expression === a && this.semicolonToken === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(b, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withExpression = function(a) {
      return this.update(a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.expression, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ExpressionStatementSyntax = Z;
  var $ = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.constructorKeyword = a;

      this.parameterList = c;

      this.block = d;

      this.semicolonToken = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitConstructorDeclaration(this);
    };

    c.prototype.kind = function() {
      return 137;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.constructorKeyword;
        case 1:
          return this.parameterList;
        case 2:
          return this.block;
        case 3:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isClassElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e) {
      return this.constructorKeyword === a && this.parameterList === b && this.block === d && this.semicolonToken ===
        e ? this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create = function(a, b) {
      return new c(a, b, null, null, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(63), T.create1(), null, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withConstructorKeyword = function(a) {
      return this.update(a, this.parameterList, this.block, this.semicolonToken);
    };

    c.prototype.withParameterList = function(a) {
      return this.update(this.constructorKeyword, a, this.block, this.semicolonToken);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.constructorKeyword, this.parameterList, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.constructorKeyword, this.parameterList, this.block, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.ConstructorDeclarationSyntax = $;
  var _ = function(b) {
    function c(a, c, d, e, f, g) {
      b.call(this, g);

      this.modifiers = a;

      this.propertyName = c;

      this.callSignature = d;

      this.block = e;

      this.semicolonToken = f;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitMemberFunctionDeclaration(this);
    };

    c.prototype.kind = function() {
      return 135;
    };

    c.prototype.childCount = function() {
      return 5;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.propertyName;
        case 2:
          return this.callSignature;
        case 3:
          return this.block;
        case 4:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isMemberDeclaration = function() {
      return !0;
    };

    c.prototype.isClassElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f) {
      return this.modifiers === a && this.propertyName === b && this.callSignature === d && this.block === e && this.semicolonToken ===
        f ? this : new c(a, b, d, e, f, this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(a.Syntax.emptyList, b, d, null, null, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, b, S.create1(), null, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.propertyName, this.callSignature, this.block, this.semicolonToken);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(this.modifiers, a, this.callSignature, this.block, this.semicolonToken);
    };

    c.prototype.withCallSignature = function(a) {
      return this.update(this.modifiers, this.propertyName, a, this.block, this.semicolonToken);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.modifiers, this.propertyName, this.callSignature, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.modifiers, this.propertyName, this.callSignature, this.block, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.MemberFunctionDeclarationSyntax = _;
  var ab = function(a) {
    function b(b, c, d, e, f) {
      a.call(this, f);

      this.modifiers = b;

      this.propertyName = c;

      this.parameterList = d;

      this.block = e;
    }
    __extends(b, a);

    b.prototype.isMemberDeclaration = function() {
      return !0;
    };

    b.prototype.isClassElement = function() {
      return !0;
    };

    b.prototype.withLeadingTrivia = function(b) {
      return a.prototype.withLeadingTrivia.call(this, b);
    };

    b.prototype.withTrailingTrivia = function(b) {
      return a.prototype.withTrailingTrivia.call(this, b);
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return b;
  }(a.SyntaxNode);
  a.MemberAccessorDeclarationSyntax = ab;
  var bb = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, a, d, e, g, h);

      this.getKeyword = c;

      this.typeAnnotation = f;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitGetMemberAccessorDeclaration(this);
    };

    c.prototype.kind = function() {
      return 138;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.getKeyword;
        case 2:
          return this.propertyName;
        case 3:
          return this.parameterList;
        case 4:
          return this.typeAnnotation;
        case 5:
          return this.block;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.modifiers === a && this.getKeyword === b && this.propertyName === d && this.parameterList === e &&
        this.typeAnnotation === f && this.block === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create = function(b, d, e, f) {
      return new c(a.Syntax.emptyList, b, d, e, null, f, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, a.Syntax.token(65), b, T.create1(), null, F.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.getKeyword, this.propertyName, this.parameterList, this.typeAnnotation, this.block);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withGetKeyword = function(a) {
      return this.update(this.modifiers, a, this.propertyName, this.parameterList, this.typeAnnotation, this.block);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(this.modifiers, this.getKeyword, a, this.parameterList, this.typeAnnotation, this.block);
    };

    c.prototype.withParameterList = function(a) {
      return this.update(this.modifiers, this.getKeyword, this.propertyName, a, this.typeAnnotation, this.block);
    };

    c.prototype.withTypeAnnotation = function(a) {
      return this.update(this.modifiers, this.getKeyword, this.propertyName, this.parameterList, a, this.block);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.modifiers, this.getKeyword, this.propertyName, this.parameterList, this.typeAnnotation,
        a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(ab);
  a.GetMemberAccessorDeclarationSyntax = bb;
  var cb = function(b) {
    function c(a, c, d, e, f, g) {
      b.call(this, a, d, e, f, g);

      this.setKeyword = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitSetMemberAccessorDeclaration(this);
    };

    c.prototype.kind = function() {
      return 139;
    };

    c.prototype.childCount = function() {
      return 5;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.setKeyword;
        case 2:
          return this.propertyName;
        case 3:
          return this.parameterList;
        case 4:
          return this.block;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f) {
      return this.modifiers === a && this.setKeyword === b && this.propertyName === d && this.parameterList === e &&
        this.block === f ? this : new c(a, b, d, e, f, this.parsedInStrictMode());
    };

    c.create = function(b, d, e, f) {
      return new c(a.Syntax.emptyList, b, d, e, f, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, a.Syntax.token(69), b, T.create1(), F.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.setKeyword, this.propertyName, this.parameterList, this.block);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withSetKeyword = function(a) {
      return this.update(this.modifiers, a, this.propertyName, this.parameterList, this.block);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(this.modifiers, this.setKeyword, a, this.parameterList, this.block);
    };

    c.prototype.withParameterList = function(a) {
      return this.update(this.modifiers, this.setKeyword, this.propertyName, a, this.block);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.modifiers, this.setKeyword, this.propertyName, this.parameterList, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(ab);
  a.SetMemberAccessorDeclarationSyntax = cb;
  var db = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.modifiers = a;

      this.variableDeclarator = c;

      this.semicolonToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitMemberVariableDeclaration(this);
    };

    c.prototype.kind = function() {
      return 136;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.variableDeclarator;
        case 2:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isMemberDeclaration = function() {
      return !0;
    };

    c.prototype.isClassElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.modifiers === a && this.variableDeclarator === b && this.semicolonToken === d ? this : new c(a, b,
        d, this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(a.Syntax.emptyList, b, d, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, b, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.variableDeclarator, this.semicolonToken);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withVariableDeclarator = function(a) {
      return this.update(this.modifiers, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.modifiers, this.variableDeclarator, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.MemberVariableDeclarationSyntax = db;
  var eb = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.throwKeyword = a;

      this.expression = c;

      this.semicolonToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitThrowStatement(this);
    };

    c.prototype.kind = function() {
      return 156;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.throwKeyword;
        case 1:
          return this.expression;
        case 2:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.throwKeyword === a && this.expression === b && this.semicolonToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(36), b, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withThrowKeyword = function(a) {
      return this.update(a, this.expression, this.semicolonToken);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.throwKeyword, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.throwKeyword, this.expression, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ThrowStatementSyntax = eb;
  var fb = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.returnKeyword = a;

      this.expression = c;

      this.semicolonToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitReturnStatement(this);
    };

    c.prototype.kind = function() {
      return 149;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.returnKeyword;
        case 1:
          return this.expression;
        case 2:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.returnKeyword === a && this.expression === b && this.semicolonToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create = function(a, b) {
      return new c(a, null, b, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(33), null, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withReturnKeyword = function(a) {
      return this.update(a, this.expression, this.semicolonToken);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.returnKeyword, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.returnKeyword, this.expression, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression !== null && this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ReturnStatementSyntax = fb;
  var gb = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.newKeyword = a;

      this.expression = c;

      this.argumentList = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitObjectCreationExpression(this);
    };

    c.prototype.kind = function() {
      return 215;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.newKeyword;
        case 1:
          return this.expression;
        case 2:
          return this.argumentList;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.newKeyword === a && this.expression === b && this.argumentList === d ? this : new c(a, b, d, this.parsedInStrictMode());
    };

    c.create = function(a, b) {
      return new c(a, b, null, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(31), b, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withNewKeyword = function(a) {
      return this.update(a, this.expression, this.argumentList);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.newKeyword, a, this.argumentList);
    };

    c.prototype.withArgumentList = function(a) {
      return this.update(this.newKeyword, this.expression, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : this.argumentList !== null && this.argumentList.isTypeScriptSpecific() ? !
        0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ObjectCreationExpressionSyntax = gb;
  var hb = function(b) {
    function c(a, c, d, e, f, g, h, i) {
      b.call(this, i);

      this.switchKeyword = a;

      this.openParenToken = c;

      this.expression = d;

      this.closeParenToken = e;

      this.openBraceToken = f;

      this.switchClauses = g;

      this.closeBraceToken = h;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitSwitchStatement(this);
    };

    c.prototype.kind = function() {
      return 150;
    };

    c.prototype.childCount = function() {
      return 7;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.switchKeyword;
        case 1:
          return this.openParenToken;
        case 2:
          return this.expression;
        case 3:
          return this.closeParenToken;
        case 4:
          return this.openBraceToken;
        case 5:
          return this.switchClauses;
        case 6:
          return this.closeBraceToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f, g, h) {
      return this.switchKeyword === a && this.openParenToken === b && this.expression === d && this.closeParenToken ===
        e && this.openBraceToken === f && this.switchClauses === g && this.closeBraceToken === h ? this : new c(a, b,
          d, e, f, g, h, this.parsedInStrictMode());
    };

    c.create = function(b, d, e, f, g, h) {
      return new c(b, d, e, f, g, a.Syntax.emptyList, h, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(34), a.Syntax.token(73), b, a.Syntax.token(74), a.Syntax.token(71), a.Syntax.emptyList,
        a.Syntax.token(72), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withSwitchKeyword = function(a) {
      return this.update(a, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken, this.switchClauses,
        this.closeBraceToken);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.switchKeyword, a, this.expression, this.closeParenToken, this.openBraceToken, this.switchClauses,
        this.closeBraceToken);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.switchKeyword, this.openParenToken, a, this.closeParenToken, this.openBraceToken, this.switchClauses,
        this.closeBraceToken);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.switchKeyword, this.openParenToken, this.expression, a, this.openBraceToken, this.switchClauses,
        this.closeBraceToken);
    };

    c.prototype.withOpenBraceToken = function(a) {
      return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, a, this.switchClauses,
        this.closeBraceToken);
    };

    c.prototype.withSwitchClauses = function(a) {
      return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken,
        a, this.closeBraceToken);
    };

    c.prototype.withSwitchClause = function(b) {
      return this.withSwitchClauses(a.Syntax.list([b]));
    };

    c.prototype.withCloseBraceToken = function(a) {
      return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken,
        this.switchClauses, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : this.switchClauses.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.SwitchStatementSyntax = hb;
  var ib = function(a) {
    function b(b, c, d) {
      a.call(this, d);

      this.colonToken = b;

      this.statements = c;
    }
    __extends(b, a);

    b.prototype.isSwitchClause = function() {
      return !0;
    };

    b.prototype.withLeadingTrivia = function(b) {
      return a.prototype.withLeadingTrivia.call(this, b);
    };

    b.prototype.withTrailingTrivia = function(b) {
      return a.prototype.withTrailingTrivia.call(this, b);
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return b;
  }(a.SyntaxNode);
  a.SwitchClauseSyntax = ib;
  var jb = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, d, e, f);

      this.caseKeyword = a;

      this.expression = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitCaseSwitchClause(this);
    };

    c.prototype.kind = function() {
      return 231;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.caseKeyword;
        case 1:
          return this.expression;
        case 2:
          return this.colonToken;
        case 3:
          return this.statements;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e) {
      return this.caseKeyword === a && this.expression === b && this.colonToken === d && this.statements === e ? this :
        new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create = function(b, d, e) {
      return new c(b, d, e, a.Syntax.emptyList, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(16), b, a.Syntax.token(107), a.Syntax.emptyList, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withCaseKeyword = function(a) {
      return this.update(a, this.expression, this.colonToken, this.statements);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.caseKeyword, a, this.colonToken, this.statements);
    };

    c.prototype.withColonToken = function(a) {
      return this.update(this.caseKeyword, this.expression, a, this.statements);
    };

    c.prototype.withStatements = function(a) {
      return this.update(this.caseKeyword, this.expression, this.colonToken, a);
    };

    c.prototype.withStatement = function(b) {
      return this.withStatements(a.Syntax.list([b]));
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : this.statements.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(ib);
  a.CaseSwitchClauseSyntax = jb;
  var kb = function(b) {
    function c(a, c, d, e) {
      b.call(this, c, d, e);

      this.defaultKeyword = a;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitDefaultSwitchClause(this);
    };

    c.prototype.kind = function() {
      return 232;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.defaultKeyword;
        case 1:
          return this.colonToken;
        case 2:
          return this.statements;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.defaultKeyword === a && this.colonToken === b && this.statements === d ? this : new c(a, b, d, this
        .parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(b, d, a.Syntax.emptyList, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(20), a.Syntax.token(107), a.Syntax.emptyList, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withDefaultKeyword = function(a) {
      return this.update(a, this.colonToken, this.statements);
    };

    c.prototype.withColonToken = function(a) {
      return this.update(this.defaultKeyword, a, this.statements);
    };

    c.prototype.withStatements = function(a) {
      return this.update(this.defaultKeyword, this.colonToken, a);
    };

    c.prototype.withStatement = function(b) {
      return this.withStatements(a.Syntax.list([b]));
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.statements.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(ib);
  a.DefaultSwitchClauseSyntax = kb;
  var lb = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.breakKeyword = a;

      this.identifier = c;

      this.semicolonToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitBreakStatement(this);
    };

    c.prototype.kind = function() {
      return 151;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.breakKeyword;
        case 1:
          return this.identifier;
        case 2:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.breakKeyword === a && this.identifier === b && this.semicolonToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create = function(a, b) {
      return new c(a, null, b, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(15), null, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withBreakKeyword = function(a) {
      return this.update(a, this.identifier, this.semicolonToken);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.breakKeyword, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.breakKeyword, this.identifier, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return c;
  }(a.SyntaxNode);
  a.BreakStatementSyntax = lb;
  var mb = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.continueKeyword = a;

      this.identifier = c;

      this.semicolonToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitContinueStatement(this);
    };

    c.prototype.kind = function() {
      return 152;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.continueKeyword;
        case 1:
          return this.identifier;
        case 2:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.continueKeyword === a && this.identifier === b && this.semicolonToken === d ? this : new c(a, b, d,
        this.parsedInStrictMode());
    };

    c.create = function(a, b) {
      return new c(a, null, b, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(18), null, a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withContinueKeyword = function(a) {
      return this.update(a, this.identifier, this.semicolonToken);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.continueKeyword, a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.continueKeyword, this.identifier, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ContinueStatementSyntax = mb;
  var nb = function(a) {
    function b(b, c, d, e) {
      a.call(this, e);

      this.openParenToken = b;

      this.closeParenToken = c;

      this.statement = d;
    }
    __extends(b, a);

    b.prototype.isStatement = function() {
      return !0;
    };

    b.prototype.isModuleElement = function() {
      return !0;
    };

    b.prototype.withLeadingTrivia = function(b) {
      return a.prototype.withLeadingTrivia.call(this, b);
    };

    b.prototype.withTrailingTrivia = function(b) {
      return a.prototype.withTrailingTrivia.call(this, b);
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return b;
  }(a.SyntaxNode);
  a.IterationStatementSyntax = nb;
  var ob = function(a) {
    function b(b, c, d, e, f, g) {
      a.call(this, c, e, f, g);

      this.forKeyword = b;

      this.variableDeclaration = d;
    }
    __extends(b, a);

    b.prototype.withLeadingTrivia = function(b) {
      return a.prototype.withLeadingTrivia.call(this, b);
    };

    b.prototype.withTrailingTrivia = function(b) {
      return a.prototype.withTrailingTrivia.call(this, b);
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return b;
  }(nb);
  a.BaseForStatementSyntax = ob;
  var pb = function(b) {
    function c(a, c, d, e, f, g, h, i, j, k, l) {
      b.call(this, a, c, d, j, k, l);

      this.initializer = e;

      this.firstSemicolonToken = f;

      this.condition = g;

      this.secondSemicolonToken = h;

      this.incrementor = i;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitForStatement(this);
    };

    c.prototype.kind = function() {
      return 153;
    };

    c.prototype.childCount = function() {
      return 10;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.forKeyword;
        case 1:
          return this.openParenToken;
        case 2:
          return this.variableDeclaration;
        case 3:
          return this.initializer;
        case 4:
          return this.firstSemicolonToken;
        case 5:
          return this.condition;
        case 6:
          return this.secondSemicolonToken;
        case 7:
          return this.incrementor;
        case 8:
          return this.closeParenToken;
        case 9:
          return this.statement;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f, g, h, i, j, k) {
      return this.forKeyword === a && this.openParenToken === b && this.variableDeclaration === d && this.initializer ===
        e && this.firstSemicolonToken === f && this.condition === g && this.secondSemicolonToken === h && this.incrementor ===
        i && this.closeParenToken === j && this.statement === k ? this : new c(a, b, d, e, f, g, h, i, j, k, this.parsedInStrictMode());
    };

    c.create = function(a, b, d, e, f, g) {
      return new c(a, b, null, null, d, null, e, null, f, g, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(26), a.Syntax.token(73), null, null, a.Syntax.token(79), null, a.Syntax.token(79),
        null, a.Syntax.token(74), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withForKeyword = function(a) {
      return this.update(a, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken,
        this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.forKeyword, a, this.variableDeclaration, this.initializer, this.firstSemicolonToken,
        this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);
    };

    c.prototype.withVariableDeclaration = function(a) {
      return this.update(this.forKeyword, this.openParenToken, a, this.initializer, this.firstSemicolonToken, this.condition,
        this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);
    };

    c.prototype.withInitializer = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, a, this.firstSemicolonToken,
        this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);
    };

    c.prototype.withFirstSemicolonToken = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, a, this.condition,
        this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);
    };

    c.prototype.withCondition = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken,
        a, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);
    };

    c.prototype.withSecondSemicolonToken = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken,
        this.condition, a, this.incrementor, this.closeParenToken, this.statement);
    };

    c.prototype.withIncrementor = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken,
        this.condition, this.secondSemicolonToken, a, this.closeParenToken, this.statement);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken,
        this.condition, this.secondSemicolonToken, this.incrementor, a, this.statement);
    };

    c.prototype.withStatement = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken,
        this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.variableDeclaration !== null && this.variableDeclaration.isTypeScriptSpecific() ? !0 : this.initializer !==
        null && this.initializer.isTypeScriptSpecific() ? !0 : this.condition !== null && this.condition.isTypeScriptSpecific() ? !
        0 : this.incrementor !== null && this.incrementor.isTypeScriptSpecific() ? !0 : this.statement.isTypeScriptSpecific() ? !
        0 : !1;
    };

    return c;
  }(ob);
  a.ForStatementSyntax = pb;
  var qb = function(b) {
    function c(a, c, d, e, f, g, h, i, j) {
      b.call(this, a, c, d, h, i, j);

      this.left = e;

      this.inKeyword = f;

      this.expression = g;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitForInStatement(this);
    };

    c.prototype.kind = function() {
      return 154;
    };

    c.prototype.childCount = function() {
      return 8;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.forKeyword;
        case 1:
          return this.openParenToken;
        case 2:
          return this.variableDeclaration;
        case 3:
          return this.left;
        case 4:
          return this.inKeyword;
        case 5:
          return this.expression;
        case 6:
          return this.closeParenToken;
        case 7:
          return this.statement;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f, g, h, i) {
      return this.forKeyword === a && this.openParenToken === b && this.variableDeclaration === d && this.left === e &&
        this.inKeyword === f && this.expression === g && this.closeParenToken === h && this.statement === i ? this :
        new c(a, b, d, e, f, g, h, i, this.parsedInStrictMode());
    };

    c.create = function(a, b, d, e, f, g) {
      return new c(a, b, null, null, d, e, f, g, !1);
    };

    c.create1 = function(b, d) {
      return new c(a.Syntax.token(26), a.Syntax.token(73), null, null, a.Syntax.token(29), b, a.Syntax.token(74), d, !
        1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withForKeyword = function(a) {
      return this.update(a, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression,
        this.closeParenToken, this.statement);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.forKeyword, a, this.variableDeclaration, this.left, this.inKeyword, this.expression,
        this.closeParenToken, this.statement);
    };

    c.prototype.withVariableDeclaration = function(a) {
      return this.update(this.forKeyword, this.openParenToken, a, this.left, this.inKeyword, this.expression, this.closeParenToken,
        this.statement);
    };

    c.prototype.withLeft = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, a, this.inKeyword, this.expression,
        this.closeParenToken, this.statement);
    };

    c.prototype.withInKeyword = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, a, this.expression,
        this.closeParenToken, this.statement);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, a,
        this.closeParenToken, this.statement);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword,
        this.expression, a, this.statement);
    };

    c.prototype.withStatement = function(a) {
      return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword,
        this.expression, this.closeParenToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.variableDeclaration !== null && this.variableDeclaration.isTypeScriptSpecific() ? !0 : this.left !==
        null && this.left.isTypeScriptSpecific() ? !0 : this.expression.isTypeScriptSpecific() ? !0 : this.statement.isTypeScriptSpecific() ? !
        0 : !1;
    };

    return c;
  }(ob);
  a.ForInStatementSyntax = qb;
  var rb = function(b) {
    function c(a, c, d, e, f, g) {
      b.call(this, c, e, f, g);

      this.whileKeyword = a;

      this.condition = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitWhileStatement(this);
    };

    c.prototype.kind = function() {
      return 157;
    };

    c.prototype.childCount = function() {
      return 5;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.whileKeyword;
        case 1:
          return this.openParenToken;
        case 2:
          return this.condition;
        case 3:
          return this.closeParenToken;
        case 4:
          return this.statement;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f) {
      return this.whileKeyword === a && this.openParenToken === b && this.condition === d && this.closeParenToken ===
        e && this.statement === f ? this : new c(a, b, d, e, f, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(a.Syntax.token(42), a.Syntax.token(73), b, a.Syntax.token(74), d, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withWhileKeyword = function(a) {
      return this.update(a, this.openParenToken, this.condition, this.closeParenToken, this.statement);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.whileKeyword, a, this.condition, this.closeParenToken, this.statement);
    };

    c.prototype.withCondition = function(a) {
      return this.update(this.whileKeyword, this.openParenToken, a, this.closeParenToken, this.statement);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.whileKeyword, this.openParenToken, this.condition, a, this.statement);
    };

    c.prototype.withStatement = function(a) {
      return this.update(this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.condition.isTypeScriptSpecific() ? !0 : this.statement.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(nb);
  a.WhileStatementSyntax = rb;
  var sb = function(b) {
    function c(a, c, d, e, f, g) {
      b.call(this, g);

      this.withKeyword = a;

      this.openParenToken = c;

      this.condition = d;

      this.closeParenToken = e;

      this.statement = f;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitWithStatement(this);
    };

    c.prototype.kind = function() {
      return 162;
    };

    c.prototype.childCount = function() {
      return 5;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.withKeyword;
        case 1:
          return this.openParenToken;
        case 2:
          return this.condition;
        case 3:
          return this.closeParenToken;
        case 4:
          return this.statement;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f) {
      return this.withKeyword === a && this.openParenToken === b && this.condition === d && this.closeParenToken ===
        e && this.statement === f ? this : new c(a, b, d, e, f, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(a.Syntax.token(43), a.Syntax.token(73), b, a.Syntax.token(74), d, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withWithKeyword = function(a) {
      return this.update(a, this.openParenToken, this.condition, this.closeParenToken, this.statement);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.withKeyword, a, this.condition, this.closeParenToken, this.statement);
    };

    c.prototype.withCondition = function(a) {
      return this.update(this.withKeyword, this.openParenToken, a, this.closeParenToken, this.statement);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.withKeyword, this.openParenToken, this.condition, a, this.statement);
    };

    c.prototype.withStatement = function(a) {
      return this.update(this.withKeyword, this.openParenToken, this.condition, this.closeParenToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.condition.isTypeScriptSpecific() ? !0 : this.statement.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.WithStatementSyntax = sb;
  var tb = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, h);

      this.modifiers = a;

      this.enumKeyword = c;

      this.identifier = d;

      this.openBraceToken = e;

      this.enumElements = f;

      this.closeBraceToken = g;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitEnumDeclaration(this);
    };

    c.prototype.kind = function() {
      return 132;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.modifiers;
        case 1:
          return this.enumKeyword;
        case 2:
          return this.identifier;
        case 3:
          return this.openBraceToken;
        case 4:
          return this.enumElements;
        case 5:
          return this.closeBraceToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.modifiers === a && this.enumKeyword === b && this.identifier === d && this.openBraceToken === e &&
        this.enumElements === f && this.closeBraceToken === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create = function(b, d, e, f) {
      return new c(a.Syntax.emptyList, b, d, e, a.Syntax.emptySeparatedList, f, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.emptyList, a.Syntax.token(46), b, a.Syntax.token(71), a.Syntax.emptySeparatedList, a.Syntax
        .token(72), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withModifiers = function(a) {
      return this.update(a, this.enumKeyword, this.identifier, this.openBraceToken, this.enumElements, this.closeBraceToken);
    };

    c.prototype.withModifier = function(b) {
      return this.withModifiers(a.Syntax.list([b]));
    };

    c.prototype.withEnumKeyword = function(a) {
      return this.update(this.modifiers, a, this.identifier, this.openBraceToken, this.enumElements, this.closeBraceToken);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.modifiers, this.enumKeyword, a, this.openBraceToken, this.enumElements, this.closeBraceToken);
    };

    c.prototype.withOpenBraceToken = function(a) {
      return this.update(this.modifiers, this.enumKeyword, this.identifier, a, this.enumElements, this.closeBraceToken);
    };

    c.prototype.withEnumElements = function(a) {
      return this.update(this.modifiers, this.enumKeyword, this.identifier, this.openBraceToken, a, this.closeBraceToken);
    };

    c.prototype.withEnumElement = function(b) {
      return this.withEnumElements(a.Syntax.separatedList([b]));
    };

    c.prototype.withCloseBraceToken = function(a) {
      return this.update(this.modifiers, this.enumKeyword, this.identifier, this.openBraceToken, this.enumElements, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.EnumDeclarationSyntax = tb;
  var ub = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.propertyName = a;

      this.equalsValueClause = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitEnumElement(this);
    };

    c.prototype.kind = function() {
      return 243;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.propertyName;
        case 1:
          return this.equalsValueClause;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.propertyName === a && this.equalsValueClause === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create = function(a) {
      return new c(a, null, !1);
    };

    c.create1 = function(a) {
      return new c(a, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(a, this.equalsValueClause);
    };

    c.prototype.withEqualsValueClause = function(a) {
      return this.update(this.propertyName, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.equalsValueClause !== null && this.equalsValueClause.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.EnumElementSyntax = ub;
  var vb = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.lessThanToken = a;

      this.type = c;

      this.greaterThanToken = d;

      this.expression = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitCastExpression(this);
    };

    c.prototype.kind = function() {
      return 219;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.lessThanToken;
        case 1:
          return this.type;
        case 2:
          return this.greaterThanToken;
        case 3:
          return this.expression;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e) {
      return this.lessThanToken === a && this.type === b && this.greaterThanToken === d && this.expression === e ?
        this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(a.Syntax.token(81), b, a.Syntax.token(82), d, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withLessThanToken = function(a) {
      return this.update(a, this.type, this.greaterThanToken, this.expression);
    };

    c.prototype.withType = function(a) {
      return this.update(this.lessThanToken, a, this.greaterThanToken, this.expression);
    };

    c.prototype.withGreaterThanToken = function(a) {
      return this.update(this.lessThanToken, this.type, a, this.expression);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.lessThanToken, this.type, this.greaterThanToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !0;
    };

    return c;
  }(a.SyntaxNode);
  a.CastExpressionSyntax = vb;
  var wb = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.openBraceToken = a;

      this.propertyAssignments = c;

      this.closeBraceToken = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitObjectLiteralExpression(this);
    };

    c.prototype.kind = function() {
      return 214;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.openBraceToken;
        case 1:
          return this.propertyAssignments;
        case 2:
          return this.closeBraceToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.openBraceToken === a && this.propertyAssignments === b && this.closeBraceToken === d ? this : new c(
        a, b, d, this.parsedInStrictMode());
    };

    c.create = function(b, d) {
      return new c(b, a.Syntax.emptySeparatedList, d, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(71), a.Syntax.emptySeparatedList, a.Syntax.token(72), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withOpenBraceToken = function(a) {
      return this.update(a, this.propertyAssignments, this.closeBraceToken);
    };

    c.prototype.withPropertyAssignments = function(a) {
      return this.update(this.openBraceToken, a, this.closeBraceToken);
    };

    c.prototype.withPropertyAssignment = function(b) {
      return this.withPropertyAssignments(a.Syntax.separatedList([b]));
    };

    c.prototype.withCloseBraceToken = function(a) {
      return this.update(this.openBraceToken, this.propertyAssignments, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.propertyAssignments.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.ObjectLiteralExpressionSyntax = wb;
  var xb = function(a) {
    function b(b, c) {
      a.call(this, c);

      this.propertyName = b;
    }
    __extends(b, a);

    b.prototype.withLeadingTrivia = function(b) {
      return a.prototype.withLeadingTrivia.call(this, b);
    };

    b.prototype.withTrailingTrivia = function(b) {
      return a.prototype.withTrailingTrivia.call(this, b);
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return b;
  }(a.SyntaxNode);
  a.PropertyAssignmentSyntax = xb;
  var yb = function(b) {
    function c(a, c, d, e) {
      b.call(this, a, e);

      this.colonToken = c;

      this.expression = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitSimplePropertyAssignment(this);
    };

    c.prototype.kind = function() {
      return 238;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.propertyName;
        case 1:
          return this.colonToken;
        case 2:
          return this.expression;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.propertyName === a && this.colonToken === b && this.expression === d ? this : new c(a, b, d, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(b, a.Syntax.token(107), d, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(a, this.colonToken, this.expression);
    };

    c.prototype.withColonToken = function(a) {
      return this.update(this.propertyName, a, this.expression);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.propertyName, this.colonToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(xb);
  a.SimplePropertyAssignmentSyntax = yb;
  var zb = function(b) {
    function c(a, c, d, e) {
      b.call(this, a, e);

      this.callSignature = c;

      this.block = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitFunctionPropertyAssignment(this);
    };

    c.prototype.kind = function() {
      return 241;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.propertyName;
        case 1:
          return this.callSignature;
        case 2:
          return this.block;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d) {
      return this.propertyName === a && this.callSignature === b && this.block === d ? this : new c(a, b, d, this.parsedInStrictMode());
    };

    c.create1 = function(a) {
      return new c(a, S.create1(), F.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(a, this.callSignature, this.block);
    };

    c.prototype.withCallSignature = function(a) {
      return this.update(this.propertyName, a, this.block);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.propertyName, this.callSignature, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.callSignature.isTypeScriptSpecific() ? !0 : this.block.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(xb);
  a.FunctionPropertyAssignmentSyntax = zb;
  var Ab = function(a) {
    function b(b, c, d, e, f) {
      a.call(this, b, f);

      this.openParenToken = c;

      this.closeParenToken = d;

      this.block = e;
    }
    __extends(b, a);

    b.prototype.withLeadingTrivia = function(b) {
      return a.prototype.withLeadingTrivia.call(this, b);
    };

    b.prototype.withTrailingTrivia = function(b) {
      return a.prototype.withTrailingTrivia.call(this, b);
    };

    b.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return b;
  }(xb);
  a.AccessorPropertyAssignmentSyntax = Ab;
  var Bb = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, c, d, e, g, h);

      this.getKeyword = a;

      this.typeAnnotation = f;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitGetAccessorPropertyAssignment(this);
    };

    c.prototype.kind = function() {
      return 239;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.getKeyword;
        case 1:
          return this.propertyName;
        case 2:
          return this.openParenToken;
        case 3:
          return this.closeParenToken;
        case 4:
          return this.typeAnnotation;
        case 5:
          return this.block;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.getKeyword === a && this.propertyName === b && this.openParenToken === d && this.closeParenToken ===
        e && this.typeAnnotation === f && this.block === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create = function(a, b, d, e, f) {
      return new c(a, b, d, e, null, f, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(65), b, a.Syntax.token(73), a.Syntax.token(74), null, F.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withGetKeyword = function(a) {
      return this.update(a, this.propertyName, this.openParenToken, this.closeParenToken, this.typeAnnotation, this.block);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(this.getKeyword, a, this.openParenToken, this.closeParenToken, this.typeAnnotation, this.block);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.getKeyword, this.propertyName, a, this.closeParenToken, this.typeAnnotation, this.block);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.getKeyword, this.propertyName, this.openParenToken, a, this.typeAnnotation, this.block);
    };

    c.prototype.withTypeAnnotation = function(a) {
      return this.update(this.getKeyword, this.propertyName, this.openParenToken, this.closeParenToken, a, this.block);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.getKeyword, this.propertyName, this.openParenToken, this.closeParenToken, this.typeAnnotation,
        a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.typeAnnotation !== null && this.typeAnnotation.isTypeScriptSpecific() ? !0 : this.block.isTypeScriptSpecific() ? !
        0 : !1;
    };

    return c;
  }(Ab);
  a.GetAccessorPropertyAssignmentSyntax = Bb;
  var Cb = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, c, d, f, g, h);

      this.setKeyword = a;

      this.parameter = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitSetAccessorPropertyAssignment(this);
    };

    c.prototype.kind = function() {
      return 240;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.setKeyword;
        case 1:
          return this.propertyName;
        case 2:
          return this.openParenToken;
        case 3:
          return this.parameter;
        case 4:
          return this.closeParenToken;
        case 5:
          return this.block;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.setKeyword === a && this.propertyName === b && this.openParenToken === d && this.parameter === e &&
        this.closeParenToken === f && this.block === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(a.Syntax.token(69), b, a.Syntax.token(73), d, a.Syntax.token(74), F.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withSetKeyword = function(a) {
      return this.update(a, this.propertyName, this.openParenToken, this.parameter, this.closeParenToken, this.block);
    };

    c.prototype.withPropertyName = function(a) {
      return this.update(this.setKeyword, a, this.openParenToken, this.parameter, this.closeParenToken, this.block);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.setKeyword, this.propertyName, a, this.parameter, this.closeParenToken, this.block);
    };

    c.prototype.withParameter = function(a) {
      return this.update(this.setKeyword, this.propertyName, this.openParenToken, a, this.closeParenToken, this.block);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.setKeyword, this.propertyName, this.openParenToken, this.parameter, a, this.block);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.setKeyword, this.propertyName, this.openParenToken, this.parameter, this.closeParenToken,
        a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.parameter.isTypeScriptSpecific() ? !0 : this.block.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(Ab);
  a.SetAccessorPropertyAssignmentSyntax = Cb;
  var Db = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.functionKeyword = a;

      this.identifier = c;

      this.callSignature = d;

      this.block = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitFunctionExpression(this);
    };

    c.prototype.kind = function() {
      return 221;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.functionKeyword;
        case 1:
          return this.identifier;
        case 2:
          return this.callSignature;
        case 3:
          return this.block;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e) {
      return this.functionKeyword === a && this.identifier === b && this.callSignature === d && this.block === e ?
        this : new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create = function(a, b, d) {
      return new c(a, null, b, d, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(27), null, S.create1(), F.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withFunctionKeyword = function(a) {
      return this.update(a, this.identifier, this.callSignature, this.block);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.functionKeyword, a, this.callSignature, this.block);
    };

    c.prototype.withCallSignature = function(a) {
      return this.update(this.functionKeyword, this.identifier, a, this.block);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.functionKeyword, this.identifier, this.callSignature, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.callSignature.isTypeScriptSpecific() ? !0 : this.block.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.FunctionExpressionSyntax = Db;
  var Eb = function(b) {
    function c(a, c) {
      b.call(this, c);

      this.semicolonToken = a;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitEmptyStatement(this);
    };

    c.prototype.kind = function() {
      return 155;
    };

    c.prototype.childCount = function() {
      return 1;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a) {
      return this.semicolonToken === a ? this : new c(a, this.parsedInStrictMode());
    };

    c.create1 = function() {
      return new c(a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return c;
  }(a.SyntaxNode);
  a.EmptyStatementSyntax = Eb;
  var Fb = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, f);

      this.tryKeyword = a;

      this.block = c;

      this.catchClause = d;

      this.finallyClause = e;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitTryStatement(this);
    };

    c.prototype.kind = function() {
      return 158;
    };

    c.prototype.childCount = function() {
      return 4;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.tryKeyword;
        case 1:
          return this.block;
        case 2:
          return this.catchClause;
        case 3:
          return this.finallyClause;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d, e) {
      return this.tryKeyword === a && this.block === b && this.catchClause === d && this.finallyClause === e ? this :
        new c(a, b, d, e, this.parsedInStrictMode());
    };

    c.create = function(a, b) {
      return new c(a, b, null, null, !1);
    };

    c.create1 = function() {
      return new c(a.Syntax.token(38), F.create1(), null, null, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withTryKeyword = function(a) {
      return this.update(a, this.block, this.catchClause, this.finallyClause);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.tryKeyword, a, this.catchClause, this.finallyClause);
    };

    c.prototype.withCatchClause = function(a) {
      return this.update(this.tryKeyword, this.block, a, this.finallyClause);
    };

    c.prototype.withFinallyClause = function(a) {
      return this.update(this.tryKeyword, this.block, this.catchClause, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.block.isTypeScriptSpecific() ? !0 : this.catchClause !== null && this.catchClause.isTypeScriptSpecific() ? !
        0 : this.finallyClause !== null && this.finallyClause.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.TryStatementSyntax = Fb;
  var Gb = function(b) {
    function c(a, c, d, e, f, g, h) {
      b.call(this, h);

      this.catchKeyword = a;

      this.openParenToken = c;

      this.identifier = d;

      this.typeAnnotation = e;

      this.closeParenToken = f;

      this.block = g;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitCatchClause(this);
    };

    c.prototype.kind = function() {
      return 234;
    };

    c.prototype.childCount = function() {
      return 6;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.catchKeyword;
        case 1:
          return this.openParenToken;
        case 2:
          return this.identifier;
        case 3:
          return this.typeAnnotation;
        case 4:
          return this.closeParenToken;
        case 5:
          return this.block;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f, g) {
      return this.catchKeyword === a && this.openParenToken === b && this.identifier === d && this.typeAnnotation ===
        e && this.closeParenToken === f && this.block === g ? this : new c(a, b, d, e, f, g, this.parsedInStrictMode());
    };

    c.create = function(a, b, d, e, f) {
      return new c(a, b, d, null, e, f, !1);
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(17), a.Syntax.token(73), b, null, a.Syntax.token(74), F.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withCatchKeyword = function(a) {
      return this.update(a, this.openParenToken, this.identifier, this.typeAnnotation, this.closeParenToken, this.block);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.catchKeyword, a, this.identifier, this.typeAnnotation, this.closeParenToken, this.block);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(this.catchKeyword, this.openParenToken, a, this.typeAnnotation, this.closeParenToken, this.block);
    };

    c.prototype.withTypeAnnotation = function(a) {
      return this.update(this.catchKeyword, this.openParenToken, this.identifier, a, this.closeParenToken, this.block);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.catchKeyword, this.openParenToken, this.identifier, this.typeAnnotation, a, this.block);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.catchKeyword, this.openParenToken, this.identifier, this.typeAnnotation, this.closeParenToken,
        a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.typeAnnotation !== null && this.typeAnnotation.isTypeScriptSpecific() ? !0 : this.block.isTypeScriptSpecific() ? !
        0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.CatchClauseSyntax = Gb;
  var Hb = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.finallyKeyword = a;

      this.block = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitFinallyClause(this);
    };

    c.prototype.kind = function() {
      return 235;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.finallyKeyword;
        case 1:
          return this.block;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b) {
      return this.finallyKeyword === a && this.block === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function() {
      return new c(a.Syntax.token(25), F.create1(), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withFinallyKeyword = function(a) {
      return this.update(a, this.block);
    };

    c.prototype.withBlock = function(a) {
      return this.update(this.finallyKeyword, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.block.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.FinallyClauseSyntax = Hb;
  var Ib = function(b) {
    function c(a, c, d, e) {
      b.call(this, e);

      this.identifier = a;

      this.colonToken = c;

      this.statement = d;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitLabeledStatement(this);
    };

    c.prototype.kind = function() {
      return 159;
    };

    c.prototype.childCount = function() {
      return 3;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.identifier;
        case 1:
          return this.colonToken;
        case 2:
          return this.statement;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b, d) {
      return this.identifier === a && this.colonToken === b && this.statement === d ? this : new c(a, b, d, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(b, a.Syntax.token(107), d, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withIdentifier = function(a) {
      return this.update(a, this.colonToken, this.statement);
    };

    c.prototype.withColonToken = function(a) {
      return this.update(this.identifier, a, this.statement);
    };

    c.prototype.withStatement = function(a) {
      return this.update(this.identifier, this.colonToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.statement.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.LabeledStatementSyntax = Ib;
  var Jb = function(b) {
    function c(a, c, d, e, f, g, h, i) {
      b.call(this, e, g, c, i);

      this.doKeyword = a;

      this.whileKeyword = d;

      this.condition = f;

      this.semicolonToken = h;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitDoStatement(this);
    };

    c.prototype.kind = function() {
      return 160;
    };

    c.prototype.childCount = function() {
      return 7;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.doKeyword;
        case 1:
          return this.statement;
        case 2:
          return this.whileKeyword;
        case 3:
          return this.openParenToken;
        case 4:
          return this.condition;
        case 5:
          return this.closeParenToken;
        case 6:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.update = function(a, b, d, e, f, g, h) {
      return this.doKeyword === a && this.statement === b && this.whileKeyword === d && this.openParenToken === e &&
        this.condition === f && this.closeParenToken === g && this.semicolonToken === h ? this : new c(a, b, d, e, f,
          g, h, this.parsedInStrictMode());
    };

    c.create1 = function(b, d) {
      return new c(a.Syntax.token(22), b, a.Syntax.token(42), a.Syntax.token(73), d, a.Syntax.token(74), a.Syntax.token(
        79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withDoKeyword = function(a) {
      return this.update(a, this.statement, this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken,
        this.semicolonToken);
    };

    c.prototype.withStatement = function(a) {
      return this.update(this.doKeyword, a, this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken,
        this.semicolonToken);
    };

    c.prototype.withWhileKeyword = function(a) {
      return this.update(this.doKeyword, this.statement, a, this.openParenToken, this.condition, this.closeParenToken,
        this.semicolonToken);
    };

    c.prototype.withOpenParenToken = function(a) {
      return this.update(this.doKeyword, this.statement, this.whileKeyword, a, this.condition, this.closeParenToken,
        this.semicolonToken);
    };

    c.prototype.withCondition = function(a) {
      return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, a, this.closeParenToken,
        this.semicolonToken);
    };

    c.prototype.withCloseParenToken = function(a) {
      return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, this.condition, a,
        this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, this.condition, this
        .closeParenToken, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.statement.isTypeScriptSpecific() ? !0 : this.condition.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(nb);
  a.DoStatementSyntax = Jb;
  var Kb = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.typeOfKeyword = a;

      this.expression = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitTypeOfExpression(this);
    };

    c.prototype.kind = function() {
      return 170;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.typeOfKeyword;
        case 1:
          return this.expression;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b) {
      return this.typeOfKeyword === a && this.expression === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(39), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withTypeOfKeyword = function(a) {
      return this.update(a, this.expression);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.typeOfKeyword, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.TypeOfExpressionSyntax = Kb;
  var Lb = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.deleteKeyword = a;

      this.expression = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitDeleteExpression(this);
    };

    c.prototype.kind = function() {
      return 169;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.deleteKeyword;
        case 1:
          return this.expression;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b) {
      return this.deleteKeyword === a && this.expression === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(21), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withDeleteKeyword = function(a) {
      return this.update(a, this.expression);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.deleteKeyword, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.DeleteExpressionSyntax = Lb;
  var Mb = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.voidKeyword = a;

      this.expression = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitVoidExpression(this);
    };

    c.prototype.kind = function() {
      return 171;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.voidKeyword;
        case 1:
          return this.expression;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isUnaryExpression = function() {
      return !0;
    };

    c.prototype.isExpression = function() {
      return !0;
    };

    c.prototype.update = function(a, b) {
      return this.voidKeyword === a && this.expression === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function(b) {
      return new c(a.Syntax.token(41), b, !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withVoidKeyword = function(a) {
      return this.update(a, this.expression);
    };

    c.prototype.withExpression = function(a) {
      return this.update(this.voidKeyword, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return this.expression.isTypeScriptSpecific() ? !0 : !1;
    };

    return c;
  }(a.SyntaxNode);
  a.VoidExpressionSyntax = Mb;
  var Nb = function(b) {
    function c(a, c, d) {
      b.call(this, d);

      this.debuggerKeyword = a;

      this.semicolonToken = c;
    }
    __extends(c, b);

    c.prototype.accept = function(a) {
      return a.visitDebuggerStatement(this);
    };

    c.prototype.kind = function() {
      return 161;
    };

    c.prototype.childCount = function() {
      return 2;
    };

    c.prototype.childAt = function(b) {
      switch (b) {
        case 0:
          return this.debuggerKeyword;
        case 1:
          return this.semicolonToken;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    c.prototype.isStatement = function() {
      return !0;
    };

    c.prototype.isModuleElement = function() {
      return !0;
    };

    c.prototype.update = function(a, b) {
      return this.debuggerKeyword === a && this.semicolonToken === b ? this : new c(a, b, this.parsedInStrictMode());
    };

    c.create1 = function() {
      return new c(a.Syntax.token(19), a.Syntax.token(79), !1);
    };

    c.prototype.withLeadingTrivia = function(a) {
      return b.prototype.withLeadingTrivia.call(this, a);
    };

    c.prototype.withTrailingTrivia = function(a) {
      return b.prototype.withTrailingTrivia.call(this, a);
    };

    c.prototype.withDebuggerKeyword = function(a) {
      return this.update(a, this.semicolonToken);
    };

    c.prototype.withSemicolonToken = function(a) {
      return this.update(this.debuggerKeyword, a);
    };

    c.prototype.isTypeScriptSpecific = function() {
      return !1;
    };

    return c;
  }(a.SyntaxNode);
  a.DebuggerStatementSyntax = Nb;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b() {}
    b.prototype.visitToken = function(a) {
      return a;
    };

    b.prototype.visitNode = function(a) {
      return a.accept(this);
    };

    b.prototype.visitNodeOrToken = function(a) {
      return a.isToken() ? this.visitToken(a) : this.visitNode(a);
    };

    b.prototype.visitList = function(b) {
      var c = null;
      for (var d = 0, e = b.childCount(); d < e; d++) {
        var f = b.childAt(d);

        var g = this.visitNodeOrToken(f);
        if (f !== g && c === null) {
          c = [];
          for (var h = 0; h < d; h++) {
            c.push(b.childAt(h));
          }
        }
        if (c) {
          c.push(g);
        }
      }
      return c === null ? b : a.Syntax.list(c);
    };

    b.prototype.visitSeparatedList = function(b) {
      var c = null;
      for (var d = 0, e = b.childCount(); d < e; d++) {
        var f = b.childAt(d);

        var g = f.isToken() ? this.visitToken(f) : this.visitNode(f);
        if (f !== g && c === null) {
          c = [];
          for (var h = 0; h < d; h++) {
            c.push(b.childAt(h));
          }
        }
        if (c) {
          c.push(g);
        }
      }
      return c === null ? b : a.Syntax.separatedList(c);
    };

    b.prototype.visitSourceUnit = function(a) {
      return a.update(this.visitList(a.moduleElements), this.visitToken(a.endOfFileToken));
    };

    b.prototype.visitExternalModuleReference = function(a) {
      return a.update(this.visitToken(a.moduleOrRequireKeyword), this.visitToken(a.openParenToken), this.visitToken(a
        .stringLiteral), this.visitToken(a.closeParenToken));
    };

    b.prototype.visitModuleNameModuleReference = function(a) {
      return a.update(this.visitNodeOrToken(a.moduleName));
    };

    b.prototype.visitImportDeclaration = function(a) {
      return a.update(this.visitToken(a.importKeyword), this.visitToken(a.identifier), this.visitToken(a.equalsToken),
        this.visitNode(a.moduleReference), this.visitToken(a.semicolonToken));
    };

    b.prototype.visitExportAssignment = function(a) {
      return a.update(this.visitToken(a.exportKeyword), this.visitToken(a.equalsToken), this.visitToken(a.identifier),
        this.visitToken(a.semicolonToken));
    };

    b.prototype.visitClassDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitToken(a.classKeyword), this.visitToken(a.identifier), a.typeParameterList ===
        null ? null : this.visitNode(a.typeParameterList), this.visitList(a.heritageClauses), this.visitToken(a.openBraceToken),
        this.visitList(a.classElements), this.visitToken(a.closeBraceToken));
    };

    b.prototype.visitInterfaceDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitToken(a.interfaceKeyword), this.visitToken(a.identifier),
        a.typeParameterList === null ? null : this.visitNode(a.typeParameterList), this.visitList(a.heritageClauses),
        this.visitNode(a.body));
    };

    b.prototype.visitHeritageClause = function(a) {
      return a.update(this.visitToken(a.extendsOrImplementsKeyword), this.visitSeparatedList(a.typeNames));
    };

    b.prototype.visitModuleDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitToken(a.moduleKeyword), a.moduleName === null ? null :
        this.visitNodeOrToken(a.moduleName), a.stringLiteral === null ? null : this.visitToken(a.stringLiteral), this
        .visitToken(a.openBraceToken), this.visitList(a.moduleElements), this.visitToken(a.closeBraceToken));
    };

    b.prototype.visitFunctionDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitToken(a.functionKeyword), this.visitToken(a.identifier),
        this.visitNode(a.callSignature), a.block === null ? null : this.visitNode(a.block), a.semicolonToken === null ?
        null : this.visitToken(a.semicolonToken));
    };

    b.prototype.visitVariableStatement = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitNode(a.variableDeclaration), this.visitToken(a.semicolonToken));
    };

    b.prototype.visitVariableDeclaration = function(a) {
      return a.update(this.visitToken(a.varKeyword), this.visitSeparatedList(a.variableDeclarators));
    };

    b.prototype.visitVariableDeclarator = function(a) {
      return a.update(this.visitToken(a.identifier), a.typeAnnotation === null ? null : this.visitNode(a.typeAnnotation),
        a.equalsValueClause === null ? null : this.visitNode(a.equalsValueClause));
    };

    b.prototype.visitEqualsValueClause = function(a) {
      return a.update(this.visitToken(a.equalsToken), this.visitNodeOrToken(a.value));
    };

    b.prototype.visitPrefixUnaryExpression = function(a) {
      return a.update(a.kind(), this.visitToken(a.operatorToken), this.visitNodeOrToken(a.operand));
    };

    b.prototype.visitArrayLiteralExpression = function(a) {
      return a.update(this.visitToken(a.openBracketToken), this.visitSeparatedList(a.expressions), this.visitToken(a.closeBracketToken));
    };

    b.prototype.visitOmittedExpression = function(a) {
      return a;
    };

    b.prototype.visitParenthesizedExpression = function(a) {
      return a.update(this.visitToken(a.openParenToken), this.visitNodeOrToken(a.expression), this.visitToken(a.closeParenToken));
    };

    b.prototype.visitSimpleArrowFunctionExpression = function(a) {
      return a.update(this.visitToken(a.identifier), this.visitToken(a.equalsGreaterThanToken), this.visitNodeOrToken(
        a.body));
    };

    b.prototype.visitParenthesizedArrowFunctionExpression = function(a) {
      return a.update(this.visitNode(a.callSignature), this.visitToken(a.equalsGreaterThanToken), this.visitNodeOrToken(
        a.body));
    };

    b.prototype.visitQualifiedName = function(a) {
      return a.update(this.visitNodeOrToken(a.left), this.visitToken(a.dotToken), this.visitToken(a.right));
    };

    b.prototype.visitTypeArgumentList = function(a) {
      return a.update(this.visitToken(a.lessThanToken), this.visitSeparatedList(a.typeArguments), this.visitToken(a.greaterThanToken));
    };

    b.prototype.visitConstructorType = function(a) {
      return a.update(this.visitToken(a.newKeyword), a.typeParameterList === null ? null : this.visitNode(a.typeParameterList),
        this.visitNode(a.parameterList), this.visitToken(a.equalsGreaterThanToken), this.visitNodeOrToken(a.type));
    };

    b.prototype.visitFunctionType = function(a) {
      return a.update(a.typeParameterList === null ? null : this.visitNode(a.typeParameterList), this.visitNode(a.parameterList),
        this.visitToken(a.equalsGreaterThanToken), this.visitNodeOrToken(a.type));
    };

    b.prototype.visitObjectType = function(a) {
      return a.update(this.visitToken(a.openBraceToken), this.visitSeparatedList(a.typeMembers), this.visitToken(a.closeBraceToken));
    };

    b.prototype.visitArrayType = function(a) {
      return a.update(this.visitNodeOrToken(a.type), this.visitToken(a.openBracketToken), this.visitToken(a.closeBracketToken));
    };

    b.prototype.visitGenericType = function(a) {
      return a.update(this.visitNodeOrToken(a.name), this.visitNode(a.typeArgumentList));
    };

    b.prototype.visitTypeAnnotation = function(a) {
      return a.update(this.visitToken(a.colonToken), this.visitNodeOrToken(a.type));
    };

    b.prototype.visitBlock = function(a) {
      return a.update(this.visitToken(a.openBraceToken), this.visitList(a.statements), this.visitToken(a.closeBraceToken));
    };

    b.prototype.visitParameter = function(a) {
      return a.update(a.dotDotDotToken === null ? null : this.visitToken(a.dotDotDotToken), a.publicOrPrivateKeyword ===
        null ? null : this.visitToken(a.publicOrPrivateKeyword), this.visitToken(a.identifier), a.questionToken ===
        null ? null : this.visitToken(a.questionToken), a.typeAnnotation === null ? null : this.visitNode(a.typeAnnotation),
        a.equalsValueClause === null ? null : this.visitNode(a.equalsValueClause));
    };

    b.prototype.visitMemberAccessExpression = function(a) {
      return a.update(this.visitNodeOrToken(a.expression), this.visitToken(a.dotToken), this.visitToken(a.name));
    };

    b.prototype.visitPostfixUnaryExpression = function(a) {
      return a.update(a.kind(), this.visitNodeOrToken(a.operand), this.visitToken(a.operatorToken));
    };

    b.prototype.visitElementAccessExpression = function(a) {
      return a.update(this.visitNodeOrToken(a.expression), this.visitToken(a.openBracketToken), this.visitNodeOrToken(
        a.argumentExpression), this.visitToken(a.closeBracketToken));
    };

    b.prototype.visitInvocationExpression = function(a) {
      return a.update(this.visitNodeOrToken(a.expression), this.visitNode(a.argumentList));
    };

    b.prototype.visitArgumentList = function(a) {
      return a.update(a.typeArgumentList === null ? null : this.visitNode(a.typeArgumentList), this.visitToken(a.openParenToken),
        this.visitSeparatedList(a.arguments), this.visitToken(a.closeParenToken));
    };

    b.prototype.visitBinaryExpression = function(a) {
      return a.update(a.kind(), this.visitNodeOrToken(a.left), this.visitToken(a.operatorToken), this.visitNodeOrToken(
        a.right));
    };

    b.prototype.visitConditionalExpression = function(a) {
      return a.update(this.visitNodeOrToken(a.condition), this.visitToken(a.questionToken), this.visitNodeOrToken(a.whenTrue),
        this.visitToken(a.colonToken), this.visitNodeOrToken(a.whenFalse));
    };

    b.prototype.visitConstructSignature = function(a) {
      return a.update(this.visitToken(a.newKeyword), this.visitNode(a.callSignature));
    };

    b.prototype.visitMethodSignature = function(a) {
      return a.update(this.visitToken(a.propertyName), a.questionToken === null ? null : this.visitToken(a.questionToken),
        this.visitNode(a.callSignature));
    };

    b.prototype.visitIndexSignature = function(a) {
      return a.update(this.visitToken(a.openBracketToken), this.visitNode(a.parameter), this.visitToken(a.closeBracketToken),
        a.typeAnnotation === null ? null : this.visitNode(a.typeAnnotation));
    };

    b.prototype.visitPropertySignature = function(a) {
      return a.update(this.visitToken(a.propertyName), a.questionToken === null ? null : this.visitToken(a.questionToken),
        a.typeAnnotation === null ? null : this.visitNode(a.typeAnnotation));
    };

    b.prototype.visitCallSignature = function(a) {
      return a.update(a.typeParameterList === null ? null : this.visitNode(a.typeParameterList), this.visitNode(a.parameterList),
        a.typeAnnotation === null ? null : this.visitNode(a.typeAnnotation));
    };

    b.prototype.visitParameterList = function(a) {
      return a.update(this.visitToken(a.openParenToken), this.visitSeparatedList(a.parameters), this.visitToken(a.closeParenToken));
    };

    b.prototype.visitTypeParameterList = function(a) {
      return a.update(this.visitToken(a.lessThanToken), this.visitSeparatedList(a.typeParameters), this.visitToken(a.greaterThanToken));
    };

    b.prototype.visitTypeParameter = function(a) {
      return a.update(this.visitToken(a.identifier), a.constraint === null ? null : this.visitNode(a.constraint));
    };

    b.prototype.visitConstraint = function(a) {
      return a.update(this.visitToken(a.extendsKeyword), this.visitNodeOrToken(a.type));
    };

    b.prototype.visitElseClause = function(a) {
      return a.update(this.visitToken(a.elseKeyword), this.visitNodeOrToken(a.statement));
    };

    b.prototype.visitIfStatement = function(a) {
      return a.update(this.visitToken(a.ifKeyword), this.visitToken(a.openParenToken), this.visitNodeOrToken(a.condition),
        this.visitToken(a.closeParenToken), this.visitNodeOrToken(a.statement), a.elseClause === null ? null : this.visitNode(
          a.elseClause));
    };

    b.prototype.visitExpressionStatement = function(a) {
      return a.update(this.visitNodeOrToken(a.expression), this.visitToken(a.semicolonToken));
    };

    b.prototype.visitConstructorDeclaration = function(a) {
      return a.update(this.visitToken(a.constructorKeyword), this.visitNode(a.parameterList), a.block === null ? null :
        this.visitNode(a.block), a.semicolonToken === null ? null : this.visitToken(a.semicolonToken));
    };

    b.prototype.visitMemberFunctionDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitToken(a.propertyName), this.visitNode(a.callSignature),
        a.block === null ? null : this.visitNode(a.block), a.semicolonToken === null ? null : this.visitToken(a.semicolonToken)
      );
    };

    b.prototype.visitGetMemberAccessorDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitToken(a.getKeyword), this.visitToken(a.propertyName),
        this.visitNode(a.parameterList), a.typeAnnotation === null ? null : this.visitNode(a.typeAnnotation), this.visitNode(
          a.block));
    };

    b.prototype.visitSetMemberAccessorDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitToken(a.setKeyword), this.visitToken(a.propertyName),
        this.visitNode(a.parameterList), this.visitNode(a.block));
    };

    b.prototype.visitMemberVariableDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitNode(a.variableDeclarator), this.visitToken(a.semicolonToken));
    };

    b.prototype.visitThrowStatement = function(a) {
      return a.update(this.visitToken(a.throwKeyword), this.visitNodeOrToken(a.expression), this.visitToken(a.semicolonToken));
    };

    b.prototype.visitReturnStatement = function(a) {
      return a.update(this.visitToken(a.returnKeyword), a.expression === null ? null : this.visitNodeOrToken(a.expression),
        this.visitToken(a.semicolonToken));
    };

    b.prototype.visitObjectCreationExpression = function(a) {
      return a.update(this.visitToken(a.newKeyword), this.visitNodeOrToken(a.expression), a.argumentList === null ?
        null : this.visitNode(a.argumentList));
    };

    b.prototype.visitSwitchStatement = function(a) {
      return a.update(this.visitToken(a.switchKeyword), this.visitToken(a.openParenToken), this.visitNodeOrToken(a.expression),
        this.visitToken(a.closeParenToken), this.visitToken(a.openBraceToken), this.visitList(a.switchClauses), this.visitToken(
          a.closeBraceToken));
    };

    b.prototype.visitCaseSwitchClause = function(a) {
      return a.update(this.visitToken(a.caseKeyword), this.visitNodeOrToken(a.expression), this.visitToken(a.colonToken),
        this.visitList(a.statements));
    };

    b.prototype.visitDefaultSwitchClause = function(a) {
      return a.update(this.visitToken(a.defaultKeyword), this.visitToken(a.colonToken), this.visitList(a.statements));
    };

    b.prototype.visitBreakStatement = function(a) {
      return a.update(this.visitToken(a.breakKeyword), a.identifier === null ? null : this.visitToken(a.identifier),
        this.visitToken(a.semicolonToken));
    };

    b.prototype.visitContinueStatement = function(a) {
      return a.update(this.visitToken(a.continueKeyword), a.identifier === null ? null : this.visitToken(a.identifier),
        this.visitToken(a.semicolonToken));
    };

    b.prototype.visitForStatement = function(a) {
      return a.update(this.visitToken(a.forKeyword), this.visitToken(a.openParenToken), a.variableDeclaration ===
        null ? null : this.visitNode(a.variableDeclaration), a.initializer === null ? null : this.visitNodeOrToken(a.initializer),
        this.visitToken(a.firstSemicolonToken), a.condition === null ? null : this.visitNodeOrToken(a.condition),
        this.visitToken(a.secondSemicolonToken), a.incrementor === null ? null : this.visitNodeOrToken(a.incrementor),
        this.visitToken(a.closeParenToken), this.visitNodeOrToken(a.statement));
    };

    b.prototype.visitForInStatement = function(a) {
      return a.update(this.visitToken(a.forKeyword), this.visitToken(a.openParenToken), a.variableDeclaration ===
        null ? null : this.visitNode(a.variableDeclaration), a.left === null ? null : this.visitNodeOrToken(a.left),
        this.visitToken(a.inKeyword), this.visitNodeOrToken(a.expression), this.visitToken(a.closeParenToken), this.visitNodeOrToken(
          a.statement));
    };

    b.prototype.visitWhileStatement = function(a) {
      return a.update(this.visitToken(a.whileKeyword), this.visitToken(a.openParenToken), this.visitNodeOrToken(a.condition),
        this.visitToken(a.closeParenToken), this.visitNodeOrToken(a.statement));
    };

    b.prototype.visitWithStatement = function(a) {
      return a.update(this.visitToken(a.withKeyword), this.visitToken(a.openParenToken), this.visitNodeOrToken(a.condition),
        this.visitToken(a.closeParenToken), this.visitNodeOrToken(a.statement));
    };

    b.prototype.visitEnumDeclaration = function(a) {
      return a.update(this.visitList(a.modifiers), this.visitToken(a.enumKeyword), this.visitToken(a.identifier),
        this.visitToken(a.openBraceToken), this.visitSeparatedList(a.enumElements), this.visitToken(a.closeBraceToken)
      );
    };

    b.prototype.visitEnumElement = function(a) {
      return a.update(this.visitToken(a.propertyName), a.equalsValueClause === null ? null : this.visitNode(a.equalsValueClause));
    };

    b.prototype.visitCastExpression = function(a) {
      return a.update(this.visitToken(a.lessThanToken), this.visitNodeOrToken(a.type), this.visitToken(a.greaterThanToken),
        this.visitNodeOrToken(a.expression));
    };

    b.prototype.visitObjectLiteralExpression = function(a) {
      return a.update(this.visitToken(a.openBraceToken), this.visitSeparatedList(a.propertyAssignments), this.visitToken(
        a.closeBraceToken));
    };

    b.prototype.visitSimplePropertyAssignment = function(a) {
      return a.update(this.visitToken(a.propertyName), this.visitToken(a.colonToken), this.visitNodeOrToken(a.expression));
    };

    b.prototype.visitFunctionPropertyAssignment = function(a) {
      return a.update(this.visitToken(a.propertyName), this.visitNode(a.callSignature), this.visitNode(a.block));
    };

    b.prototype.visitGetAccessorPropertyAssignment = function(a) {
      return a.update(this.visitToken(a.getKeyword), this.visitToken(a.propertyName), this.visitToken(a.openParenToken),
        this.visitToken(a.closeParenToken), a.typeAnnotation === null ? null : this.visitNode(a.typeAnnotation), this
        .visitNode(a.block));
    };

    b.prototype.visitSetAccessorPropertyAssignment = function(a) {
      return a.update(this.visitToken(a.setKeyword), this.visitToken(a.propertyName), this.visitToken(a.openParenToken),
        this.visitNode(a.parameter), this.visitToken(a.closeParenToken), this.visitNode(a.block));
    };

    b.prototype.visitFunctionExpression = function(a) {
      return a.update(this.visitToken(a.functionKeyword), a.identifier === null ? null : this.visitToken(a.identifier),
        this.visitNode(a.callSignature), this.visitNode(a.block));
    };

    b.prototype.visitEmptyStatement = function(a) {
      return a.update(this.visitToken(a.semicolonToken));
    };

    b.prototype.visitTryStatement = function(a) {
      return a.update(this.visitToken(a.tryKeyword), this.visitNode(a.block), a.catchClause === null ? null : this.visitNode(
        a.catchClause), a.finallyClause === null ? null : this.visitNode(a.finallyClause));
    };

    b.prototype.visitCatchClause = function(a) {
      return a.update(this.visitToken(a.catchKeyword), this.visitToken(a.openParenToken), this.visitToken(a.identifier),
        a.typeAnnotation === null ? null : this.visitNode(a.typeAnnotation), this.visitToken(a.closeParenToken), this
        .visitNode(a.block));
    };

    b.prototype.visitFinallyClause = function(a) {
      return a.update(this.visitToken(a.finallyKeyword), this.visitNode(a.block));
    };

    b.prototype.visitLabeledStatement = function(a) {
      return a.update(this.visitToken(a.identifier), this.visitToken(a.colonToken), this.visitNodeOrToken(a.statement));
    };

    b.prototype.visitDoStatement = function(a) {
      return a.update(this.visitToken(a.doKeyword), this.visitNodeOrToken(a.statement), this.visitToken(a.whileKeyword),
        this.visitToken(a.openParenToken), this.visitNodeOrToken(a.condition), this.visitToken(a.closeParenToken),
        this.visitToken(a.semicolonToken));
    };

    b.prototype.visitTypeOfExpression = function(a) {
      return a.update(this.visitToken(a.typeOfKeyword), this.visitNodeOrToken(a.expression));
    };

    b.prototype.visitDeleteExpression = function(a) {
      return a.update(this.visitToken(a.deleteKeyword), this.visitNodeOrToken(a.expression));
    };

    b.prototype.visitVoidExpression = function(a) {
      return a.update(this.visitToken(a.voidKeyword), this.visitNodeOrToken(a.expression));
    };

    b.prototype.visitDebuggerStatement = function(a) {
      return a.update(this.visitToken(a.debuggerKeyword), this.visitToken(a.semicolonToken));
    };

    return b;
  }();
  a.SyntaxRewriter = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(b) {
    function c(a, c, d, e) {
      b.call(this);

      this.dedentationAmount = c;

      this.minimumIndent = d;

      this.options = e;

      this.lastTriviaWasNewLine = a;
    }
    __extends(c, b);

    c.prototype.abort = function() {
      this.lastTriviaWasNewLine = !1;

      this.dedentationAmount = 0;
    };

    c.prototype.isAborted = function() {
      return this.dedentationAmount === 0;
    };

    c.prototype.visitToken = function(a) {
      if (a.width() === 0) {
        return a;
      }
      var b = a;
      this.lastTriviaWasNewLine && (b = a.withLeadingTrivia(this.dedentTriviaList(a.leadingTrivia())));

      return this.isAborted() ? a : (this.lastTriviaWasNewLine = a.hasTrailingNewLine(), b);
    };

    c.prototype.dedentTriviaList = function(b) {
      var c = [];

      var d = !0;
      for (var e = 0, f = b.count(); e < f && !this.isAborted(); e++) {
        var g = b.syntaxTriviaAt(e);

        var h = d;
        d = !1;
        if (h) {
          if (g.kind() === 4) {
            var i = e < b.count() - 1 && b.syntaxTriviaAt(e + 1).kind() === 5;
            c.push(this.dedentWhitespace(g, i));
            continue;
          }
          if (g.kind() !== 5) {
            this.abort();
            break;
          }
        }
        if (g.kind() === 6) {
          c.push(this.dedentMultiLineComment(g));
          continue;
        }
        c.push(g);

        if (g.kind() === 5) {
          d = !0;
        }
      }
      d && this.abort();

      return this.isAborted() ? b : a.Syntax.triviaList(c);
    };

    c.prototype.dedentSegment = function(b, c) {
      var d = a.Indentation.firstNonWhitespacePosition(b);
      if (d === b.length) {
        if (c) {
          return "";
        }
      } else if (a.CharacterInfo.isLineTerminator(b.charCodeAt(d))) {
        return b.substring(d);
      }
      var e = a.Indentation.columnForPositionInString(b, d, this.options);

      var f = a.MathPrototype.min(e, a.MathPrototype.max(e - this.dedentationAmount, this.minimumIndent));
      if (f === e) {
        this.abort();
        return b;
      }
      this.dedentationAmount = e - f;

      a.Debug.assert(this.dedentationAmount >= 0);
      var g = a.Indentation.indentationString(f, this.options);
      return g + b.substring(d);
    };

    c.prototype.dedentWhitespace = function(b, c) {
      var d = this.dedentSegment(b.fullText(), c);
      return a.Syntax.whitespace(d);
    };

    c.prototype.dedentMultiLineComment = function(b) {
      var c = a.Syntax.splitMultiLineCommentTriviaIntoMultipleLines(b);
      if (c.length === 1) {
        return b;
      }
      for (var d = 1; d < c.length; d++) {
        var e = c[d];
        c[d] = this.dedentSegment(e, !1);
      }
      var f = c.join("");
      return a.Syntax.multiLineComment(f);
    };

    c.dedentNode = function(a, b, d, e, f) {
      var g = new c(b, d, e, f);

      var h = a.accept(g);
      return g.isAborted() ? a : h;
    };

    return c;
  }(a.SyntaxRewriter);
  a.SyntaxDedenter = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(b) {
    function c(c, d, e) {
      b.call(this);

      this.indentationAmount = d;

      this.options = e;

      this.lastTriviaWasNewLine = c;

      this.indentationTrivia = a.Indentation.indentationTrivia(this.indentationAmount, this.options);
    }
    __extends(c, b);

    c.prototype.visitToken = function(a) {
      if (a.width() === 0) {
        return a;
      }
      var b = a;
      this.lastTriviaWasNewLine && (b = a.withLeadingTrivia(this.indentTriviaList(a.leadingTrivia())));

      this.lastTriviaWasNewLine = a.hasTrailingNewLine();

      return b;
    };

    c.prototype.indentTriviaList = function(b) {
      var c = [];

      var d = !0;
      for (var e = 0, f = b.count(); e < f; e++) {
        var g = b.syntaxTriviaAt(e);

        var h = d;
        d = !1;
        switch (g.kind()) {
          case 6:
            this.indentMultiLineComment(g, h, c);
            continue;
          case 7:
          case 8:
            this.indentSingleLineOrSkippedText(g, h, c);
            continue;
          case 4:
            this.indentWhitespace(g, h, c);
            continue;
          case 5:
            c.push(g);

            d = !0;
            continue;
          default:
            throw a.Errors.invalidOperation();
        }
      }
      d && c.push(this.indentationTrivia);

      return a.Syntax.triviaList(c);
    };

    c.prototype.indentSegment = function(b) {
      var c = a.Indentation.firstNonWhitespacePosition(b);
      if (c < b.length && a.CharacterInfo.isLineTerminator(b.charCodeAt(c))) {
        return b;
      }
      var d = a.Indentation.columnForPositionInString(b, c, this.options);

      var e = d + this.indentationAmount;

      var f = a.Indentation.indentationString(e, this.options);
      return f + b.substring(c);
    };

    c.prototype.indentWhitespace = function(b, c, d) {
      if (!c) {
        d.push(b);
        return;
      }
      var e = this.indentSegment(b.fullText());
      d.push(a.Syntax.whitespace(e));
    };

    c.prototype.indentSingleLineOrSkippedText = function(a, b, c) {
      if (b) {
        c.push(this.indentationTrivia);
      }

      c.push(a);
    };

    c.prototype.indentMultiLineComment = function(b, c, d) {
      if (c) {
        d.push(this.indentationTrivia);
      }
      var e = a.Syntax.splitMultiLineCommentTriviaIntoMultipleLines(b);
      for (var f = 1; f < e.length; f++) {
        e[f] = this.indentSegment(e[f]);
      }
      var g = e.join("");
      d.push(a.Syntax.multiLineComment(g));
    };

    c.indentNode = function(a, b, d, e) {
      var f = new c(b, d, e);
      return a.accept(f);
    };

    c.indentNodes = function(b, d, e, f) {
      var g = new c(d, e, f);

      var h = a.ArrayUtilities.select(b, function(a) {
        return a.accept(g);
      });
      return h;
    };

    return c;
  }(a.SyntaxRewriter);
  a.SyntaxIndenter = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function k(a, b) {
      a.leadingTrivia().collectTextElements(b);

      b.push(a.text());

      a.trailingTrivia().collectTextElements(b);
    }

    function l(a, b, c, d, e) {
      return d === 0 ? e === 0 ? new g(c) : new i(a, b, c, e) : e === 0 ? new h(a, b, c, d) : new j(a, b, c, d, e);
    }

    function m(a, b, g, h, i, j) {
      return h === 0 ? j === 0 ? new c(a, b, g, i) : new e(a, b, g, i, j) : j === 0 ? new d(a, b, g, h, i) : new f(
        a, b, g, h, i, j);
    }

    function n(a) {
      return a >>> 2;
    }

    function o(a) {
      return (a & 2) !== 0;
    }

    function p(a) {
      return (a & 1) !== 0;
    }
    var c = function() {
      function c(a, b, c, d) {
        this._sourceText = a;

        this._fullStart = b;

        this.tokenKind = c;

        this._textOrWidth = d;
      }
      c.prototype.clone = function() {
        return new c(this._sourceText, this._fullStart, this.tokenKind, this._textOrWidth);
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !0;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !1;
      };

      c.prototype.kind = function() {
        return this.tokenKind;
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.fullWidth = function() {
        return this.width();
      };

      c.prototype.start = function() {
        return this._fullStart;
      };

      c.prototype.end = function() {
        return this.start() + this.width();
      };

      c.prototype.width = function() {
        return typeof this._textOrWidth == "number" ? this._textOrWidth : this._textOrWidth.length;
      };

      c.prototype.text = function() {
        typeof this._textOrWidth == "number" && (this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth,
          this.tokenKind === 11));

        return this._textOrWidth;
      };

      c.prototype.fullText = function() {
        return this._sourceText.substr(this._fullStart, this.fullWidth(), !1);
      };

      c.prototype.value = function() {
        this._value === undefined && (this._value = b.value(this));

        return this._value;
      };

      c.prototype.valueText = function() {
        this._valueText === undefined && (this._valueText = b.valueText(this));

        return this._valueText;
      };

      c.prototype.hasLeadingTrivia = function() {
        return !1;
      };

      c.prototype.hasLeadingComment = function() {
        return !1;
      };

      c.prototype.hasLeadingNewLine = function() {
        return !1;
      };

      c.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      c.prototype.leadingTriviaWidth = function() {
        return 0;
      };

      c.prototype.leadingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      c.prototype.hasTrailingTrivia = function() {
        return !1;
      };

      c.prototype.hasTrailingComment = function() {
        return !1;
      };

      c.prototype.hasTrailingNewLine = function() {
        return !1;
      };

      c.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      c.prototype.trailingTriviaWidth = function() {
        return 0;
      };

      c.prototype.trailingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      c.prototype.hasSkippedToken = function() {
        return !1;
      };

      c.prototype.toJSON = function(a) {
        return b.tokenToJSON(this);
      };

      c.prototype.firstToken = function() {
        return this;
      };

      c.prototype.lastToken = function() {
        return this;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return this.fullWidth() === 0 || a.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind);
      };

      c.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      c.prototype.realize = function() {
        return b.realizeToken(this);
      };

      c.prototype.collectTextElements = function(a) {
        k(this, a);
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      c.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      c.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return c;
    }();
    b.VariableWidthTokenWithNoTrivia = c;
    var d = function() {
      function c(a, b, c, d, e) {
        this._sourceText = a;

        this._fullStart = b;

        this.tokenKind = c;

        this._leadingTriviaInfo = d;

        this._textOrWidth = e;
      }
      c.prototype.clone = function() {
        return new c(this._sourceText, this._fullStart, this.tokenKind, this._leadingTriviaInfo, this._textOrWidth);
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !0;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !1;
      };

      c.prototype.kind = function() {
        return this.tokenKind;
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.fullWidth = function() {
        return n(this._leadingTriviaInfo) + this.width();
      };

      c.prototype.start = function() {
        return this._fullStart + n(this._leadingTriviaInfo);
      };

      c.prototype.end = function() {
        return this.start() + this.width();
      };

      c.prototype.width = function() {
        return typeof this._textOrWidth == "number" ? this._textOrWidth : this._textOrWidth.length;
      };

      c.prototype.text = function() {
        typeof this._textOrWidth == "number" && (this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth,
          this.tokenKind === 11));

        return this._textOrWidth;
      };

      c.prototype.fullText = function() {
        return this._sourceText.substr(this._fullStart, this.fullWidth(), !1);
      };

      c.prototype.value = function() {
        this._value === undefined && (this._value = b.value(this));

        return this._value;
      };

      c.prototype.valueText = function() {
        this._valueText === undefined && (this._valueText = b.valueText(this));

        return this._valueText;
      };

      c.prototype.hasLeadingTrivia = function() {
        return !0;
      };

      c.prototype.hasLeadingComment = function() {
        return o(this._leadingTriviaInfo);
      };

      c.prototype.hasLeadingNewLine = function() {
        return p(this._leadingTriviaInfo);
      };

      c.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      c.prototype.leadingTriviaWidth = function() {
        return n(this._leadingTriviaInfo);
      };

      c.prototype.leadingTrivia = function() {
        return a.Scanner.scanTrivia(this._sourceText, this._fullStart, n(this._leadingTriviaInfo), !1);
      };

      c.prototype.hasTrailingTrivia = function() {
        return !1;
      };

      c.prototype.hasTrailingComment = function() {
        return !1;
      };

      c.prototype.hasTrailingNewLine = function() {
        return !1;
      };

      c.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      c.prototype.trailingTriviaWidth = function() {
        return 0;
      };

      c.prototype.trailingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      c.prototype.hasSkippedToken = function() {
        return !1;
      };

      c.prototype.toJSON = function(a) {
        return b.tokenToJSON(this);
      };

      c.prototype.firstToken = function() {
        return this;
      };

      c.prototype.lastToken = function() {
        return this;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return this.fullWidth() === 0 || a.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind);
      };

      c.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      c.prototype.realize = function() {
        return b.realizeToken(this);
      };

      c.prototype.collectTextElements = function(a) {
        k(this, a);
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      c.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      c.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return c;
    }();
    b.VariableWidthTokenWithLeadingTrivia = d;
    var e = function() {
      function c(a, b, c, d, e) {
        this._sourceText = a;

        this._fullStart = b;

        this.tokenKind = c;

        this._textOrWidth = d;

        this._trailingTriviaInfo = e;
      }
      c.prototype.clone = function() {
        return new c(this._sourceText, this._fullStart, this.tokenKind, this._textOrWidth, this._trailingTriviaInfo);
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !0;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !1;
      };

      c.prototype.kind = function() {
        return this.tokenKind;
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.fullWidth = function() {
        return this.width() + n(this._trailingTriviaInfo);
      };

      c.prototype.start = function() {
        return this._fullStart;
      };

      c.prototype.end = function() {
        return this.start() + this.width();
      };

      c.prototype.width = function() {
        return typeof this._textOrWidth == "number" ? this._textOrWidth : this._textOrWidth.length;
      };

      c.prototype.text = function() {
        typeof this._textOrWidth == "number" && (this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth,
          this.tokenKind === 11));

        return this._textOrWidth;
      };

      c.prototype.fullText = function() {
        return this._sourceText.substr(this._fullStart, this.fullWidth(), !1);
      };

      c.prototype.value = function() {
        this._value === undefined && (this._value = b.value(this));

        return this._value;
      };

      c.prototype.valueText = function() {
        this._valueText === undefined && (this._valueText = b.valueText(this));

        return this._valueText;
      };

      c.prototype.hasLeadingTrivia = function() {
        return !1;
      };

      c.prototype.hasLeadingComment = function() {
        return !1;
      };

      c.prototype.hasLeadingNewLine = function() {
        return !1;
      };

      c.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      c.prototype.leadingTriviaWidth = function() {
        return 0;
      };

      c.prototype.leadingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      c.prototype.hasTrailingTrivia = function() {
        return !0;
      };

      c.prototype.hasTrailingComment = function() {
        return o(this._trailingTriviaInfo);
      };

      c.prototype.hasTrailingNewLine = function() {
        return p(this._trailingTriviaInfo);
      };

      c.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      c.prototype.trailingTriviaWidth = function() {
        return n(this._trailingTriviaInfo);
      };

      c.prototype.trailingTrivia = function() {
        return a.Scanner.scanTrivia(this._sourceText, this.end(), n(this._trailingTriviaInfo), !0);
      };

      c.prototype.hasSkippedToken = function() {
        return !1;
      };

      c.prototype.toJSON = function(a) {
        return b.tokenToJSON(this);
      };

      c.prototype.firstToken = function() {
        return this;
      };

      c.prototype.lastToken = function() {
        return this;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return this.fullWidth() === 0 || a.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind);
      };

      c.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      c.prototype.realize = function() {
        return b.realizeToken(this);
      };

      c.prototype.collectTextElements = function(a) {
        k(this, a);
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      c.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      c.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return c;
    }();
    b.VariableWidthTokenWithTrailingTrivia = e;
    var f = function() {
      function c(a, b, c, d, e, f) {
        this._sourceText = a;

        this._fullStart = b;

        this.tokenKind = c;

        this._leadingTriviaInfo = d;

        this._textOrWidth = e;

        this._trailingTriviaInfo = f;
      }
      c.prototype.clone = function() {
        return new c(this._sourceText, this._fullStart, this.tokenKind, this._leadingTriviaInfo, this._textOrWidth,
          this._trailingTriviaInfo);
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !0;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !1;
      };

      c.prototype.kind = function() {
        return this.tokenKind;
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.fullWidth = function() {
        return n(this._leadingTriviaInfo) + this.width() + n(this._trailingTriviaInfo);
      };

      c.prototype.start = function() {
        return this._fullStart + n(this._leadingTriviaInfo);
      };

      c.prototype.end = function() {
        return this.start() + this.width();
      };

      c.prototype.width = function() {
        return typeof this._textOrWidth == "number" ? this._textOrWidth : this._textOrWidth.length;
      };

      c.prototype.text = function() {
        typeof this._textOrWidth == "number" && (this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth,
          this.tokenKind === 11));

        return this._textOrWidth;
      };

      c.prototype.fullText = function() {
        return this._sourceText.substr(this._fullStart, this.fullWidth(), !1);
      };

      c.prototype.value = function() {
        this._value === undefined && (this._value = b.value(this));

        return this._value;
      };

      c.prototype.valueText = function() {
        this._valueText === undefined && (this._valueText = b.valueText(this));

        return this._valueText;
      };

      c.prototype.hasLeadingTrivia = function() {
        return !0;
      };

      c.prototype.hasLeadingComment = function() {
        return o(this._leadingTriviaInfo);
      };

      c.prototype.hasLeadingNewLine = function() {
        return p(this._leadingTriviaInfo);
      };

      c.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      c.prototype.leadingTriviaWidth = function() {
        return n(this._leadingTriviaInfo);
      };

      c.prototype.leadingTrivia = function() {
        return a.Scanner.scanTrivia(this._sourceText, this._fullStart, n(this._leadingTriviaInfo), !1);
      };

      c.prototype.hasTrailingTrivia = function() {
        return !0;
      };

      c.prototype.hasTrailingComment = function() {
        return o(this._trailingTriviaInfo);
      };

      c.prototype.hasTrailingNewLine = function() {
        return p(this._trailingTriviaInfo);
      };

      c.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      c.prototype.trailingTriviaWidth = function() {
        return n(this._trailingTriviaInfo);
      };

      c.prototype.trailingTrivia = function() {
        return a.Scanner.scanTrivia(this._sourceText, this.end(), n(this._trailingTriviaInfo), !0);
      };

      c.prototype.hasSkippedToken = function() {
        return !1;
      };

      c.prototype.toJSON = function(a) {
        return b.tokenToJSON(this);
      };

      c.prototype.firstToken = function() {
        return this;
      };

      c.prototype.lastToken = function() {
        return this;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return this.fullWidth() === 0 || a.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind);
      };

      c.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      c.prototype.realize = function() {
        return b.realizeToken(this);
      };

      c.prototype.collectTextElements = function(a) {
        k(this, a);
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      c.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      c.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return c;
    }();
    b.VariableWidthTokenWithLeadingAndTrailingTrivia = f;
    var g = function() {
      function c(a) {
        this.tokenKind = a;
      }
      c.prototype.clone = function() {
        return new c(this.tokenKind);
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !0;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !1;
      };

      c.prototype.kind = function() {
        return this.tokenKind;
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.fullWidth = function() {
        return this.width();
      };

      c.prototype.width = function() {
        return this.text().length;
      };

      c.prototype.text = function() {
        return a.SyntaxFacts.getText(this.tokenKind);
      };

      c.prototype.fullText = function() {
        return this.text();
      };

      c.prototype.value = function() {
        return b.value(this);
      };

      c.prototype.valueText = function() {
        return b.valueText(this);
      };

      c.prototype.hasLeadingTrivia = function() {
        return !1;
      };

      c.prototype.hasLeadingComment = function() {
        return !1;
      };

      c.prototype.hasLeadingNewLine = function() {
        return !1;
      };

      c.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      c.prototype.leadingTriviaWidth = function() {
        return 0;
      };

      c.prototype.leadingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      c.prototype.hasTrailingTrivia = function() {
        return !1;
      };

      c.prototype.hasTrailingComment = function() {
        return !1;
      };

      c.prototype.hasTrailingNewLine = function() {
        return !1;
      };

      c.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      c.prototype.trailingTriviaWidth = function() {
        return 0;
      };

      c.prototype.trailingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      c.prototype.hasSkippedToken = function() {
        return !1;
      };

      c.prototype.toJSON = function(a) {
        return b.tokenToJSON(this);
      };

      c.prototype.firstToken = function() {
        return this;
      };

      c.prototype.lastToken = function() {
        return this;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return this.fullWidth() === 0 || a.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind);
      };

      c.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      c.prototype.realize = function() {
        return b.realizeToken(this);
      };

      c.prototype.collectTextElements = function(a) {
        k(this, a);
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      c.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      c.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return c;
    }();
    b.FixedWidthTokenWithNoTrivia = g;
    var h = function() {
      function c(a, b, c, d) {
        this._sourceText = a;

        this._fullStart = b;

        this.tokenKind = c;

        this._leadingTriviaInfo = d;
      }
      c.prototype.clone = function() {
        return new c(this._sourceText, this._fullStart, this.tokenKind, this._leadingTriviaInfo);
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !0;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !1;
      };

      c.prototype.kind = function() {
        return this.tokenKind;
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.fullWidth = function() {
        return n(this._leadingTriviaInfo) + this.width();
      };

      c.prototype.start = function() {
        return this._fullStart + n(this._leadingTriviaInfo);
      };

      c.prototype.end = function() {
        return this.start() + this.width();
      };

      c.prototype.width = function() {
        return this.text().length;
      };

      c.prototype.text = function() {
        return a.SyntaxFacts.getText(this.tokenKind);
      };

      c.prototype.fullText = function() {
        return this._sourceText.substr(this._fullStart, this.fullWidth(), !1);
      };

      c.prototype.value = function() {
        return b.value(this);
      };

      c.prototype.valueText = function() {
        return b.valueText(this);
      };

      c.prototype.hasLeadingTrivia = function() {
        return !0;
      };

      c.prototype.hasLeadingComment = function() {
        return o(this._leadingTriviaInfo);
      };

      c.prototype.hasLeadingNewLine = function() {
        return p(this._leadingTriviaInfo);
      };

      c.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      c.prototype.leadingTriviaWidth = function() {
        return n(this._leadingTriviaInfo);
      };

      c.prototype.leadingTrivia = function() {
        return a.Scanner.scanTrivia(this._sourceText, this._fullStart, n(this._leadingTriviaInfo), !1);
      };

      c.prototype.hasTrailingTrivia = function() {
        return !1;
      };

      c.prototype.hasTrailingComment = function() {
        return !1;
      };

      c.prototype.hasTrailingNewLine = function() {
        return !1;
      };

      c.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      c.prototype.trailingTriviaWidth = function() {
        return 0;
      };

      c.prototype.trailingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      c.prototype.hasSkippedToken = function() {
        return !1;
      };

      c.prototype.toJSON = function(a) {
        return b.tokenToJSON(this);
      };

      c.prototype.firstToken = function() {
        return this;
      };

      c.prototype.lastToken = function() {
        return this;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return this.fullWidth() === 0 || a.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind);
      };

      c.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      c.prototype.realize = function() {
        return b.realizeToken(this);
      };

      c.prototype.collectTextElements = function(a) {
        k(this, a);
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      c.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      c.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return c;
    }();
    b.FixedWidthTokenWithLeadingTrivia = h;
    var i = function() {
      function c(a, b, c, d) {
        this._sourceText = a;

        this._fullStart = b;

        this.tokenKind = c;

        this._trailingTriviaInfo = d;
      }
      c.prototype.clone = function() {
        return new c(this._sourceText, this._fullStart, this.tokenKind, this._trailingTriviaInfo);
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !0;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !1;
      };

      c.prototype.kind = function() {
        return this.tokenKind;
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.fullWidth = function() {
        return this.width() + n(this._trailingTriviaInfo);
      };

      c.prototype.start = function() {
        return this._fullStart;
      };

      c.prototype.end = function() {
        return this.start() + this.width();
      };

      c.prototype.width = function() {
        return this.text().length;
      };

      c.prototype.text = function() {
        return a.SyntaxFacts.getText(this.tokenKind);
      };

      c.prototype.fullText = function() {
        return this._sourceText.substr(this._fullStart, this.fullWidth(), !1);
      };

      c.prototype.value = function() {
        return b.value(this);
      };

      c.prototype.valueText = function() {
        return b.valueText(this);
      };

      c.prototype.hasLeadingTrivia = function() {
        return !1;
      };

      c.prototype.hasLeadingComment = function() {
        return !1;
      };

      c.prototype.hasLeadingNewLine = function() {
        return !1;
      };

      c.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      c.prototype.leadingTriviaWidth = function() {
        return 0;
      };

      c.prototype.leadingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      c.prototype.hasTrailingTrivia = function() {
        return !0;
      };

      c.prototype.hasTrailingComment = function() {
        return o(this._trailingTriviaInfo);
      };

      c.prototype.hasTrailingNewLine = function() {
        return p(this._trailingTriviaInfo);
      };

      c.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      c.prototype.trailingTriviaWidth = function() {
        return n(this._trailingTriviaInfo);
      };

      c.prototype.trailingTrivia = function() {
        return a.Scanner.scanTrivia(this._sourceText, this.end(), n(this._trailingTriviaInfo), !0);
      };

      c.prototype.hasSkippedToken = function() {
        return !1;
      };

      c.prototype.toJSON = function(a) {
        return b.tokenToJSON(this);
      };

      c.prototype.firstToken = function() {
        return this;
      };

      c.prototype.lastToken = function() {
        return this;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return this.fullWidth() === 0 || a.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind);
      };

      c.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      c.prototype.realize = function() {
        return b.realizeToken(this);
      };

      c.prototype.collectTextElements = function(a) {
        k(this, a);
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      c.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      c.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return c;
    }();
    b.FixedWidthTokenWithTrailingTrivia = i;
    var j = function() {
      function c(a, b, c, d, e) {
        this._sourceText = a;

        this._fullStart = b;

        this.tokenKind = c;

        this._leadingTriviaInfo = d;

        this._trailingTriviaInfo = e;
      }
      c.prototype.clone = function() {
        return new c(this._sourceText, this._fullStart, this.tokenKind, this._leadingTriviaInfo, this._trailingTriviaInfo);
      };

      c.prototype.isNode = function() {
        return !1;
      };

      c.prototype.isToken = function() {
        return !0;
      };

      c.prototype.isList = function() {
        return !1;
      };

      c.prototype.isSeparatedList = function() {
        return !1;
      };

      c.prototype.kind = function() {
        return this.tokenKind;
      };

      c.prototype.childCount = function() {
        return 0;
      };

      c.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      c.prototype.fullWidth = function() {
        return n(this._leadingTriviaInfo) + this.width() + n(this._trailingTriviaInfo);
      };

      c.prototype.start = function() {
        return this._fullStart + n(this._leadingTriviaInfo);
      };

      c.prototype.end = function() {
        return this.start() + this.width();
      };

      c.prototype.width = function() {
        return this.text().length;
      };

      c.prototype.text = function() {
        return a.SyntaxFacts.getText(this.tokenKind);
      };

      c.prototype.fullText = function() {
        return this._sourceText.substr(this._fullStart, this.fullWidth(), !1);
      };

      c.prototype.value = function() {
        return b.value(this);
      };

      c.prototype.valueText = function() {
        return b.valueText(this);
      };

      c.prototype.hasLeadingTrivia = function() {
        return !0;
      };

      c.prototype.hasLeadingComment = function() {
        return o(this._leadingTriviaInfo);
      };

      c.prototype.hasLeadingNewLine = function() {
        return p(this._leadingTriviaInfo);
      };

      c.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      c.prototype.leadingTriviaWidth = function() {
        return n(this._leadingTriviaInfo);
      };

      c.prototype.leadingTrivia = function() {
        return a.Scanner.scanTrivia(this._sourceText, this._fullStart, n(this._leadingTriviaInfo), !1);
      };

      c.prototype.hasTrailingTrivia = function() {
        return !0;
      };

      c.prototype.hasTrailingComment = function() {
        return o(this._trailingTriviaInfo);
      };

      c.prototype.hasTrailingNewLine = function() {
        return p(this._trailingTriviaInfo);
      };

      c.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      c.prototype.trailingTriviaWidth = function() {
        return n(this._trailingTriviaInfo);
      };

      c.prototype.trailingTrivia = function() {
        return a.Scanner.scanTrivia(this._sourceText, this.end(), n(this._trailingTriviaInfo), !0);
      };

      c.prototype.hasSkippedToken = function() {
        return !1;
      };

      c.prototype.toJSON = function(a) {
        return b.tokenToJSON(this);
      };

      c.prototype.firstToken = function() {
        return this;
      };

      c.prototype.lastToken = function() {
        return this;
      };

      c.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      c.prototype.isIncrementallyUnusable = function() {
        return this.fullWidth() === 0 || a.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind);
      };

      c.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      c.prototype.realize = function() {
        return b.realizeToken(this);
      };

      c.prototype.collectTextElements = function(a) {
        k(this, a);
      };

      c.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      c.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      c.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return c;
    }();
    b.FixedWidthTokenWithLeadingAndTrailingTrivia = j;

    b.fixedWidthToken = l;

    b.variableWidthToken = m;
  })(a.Syntax || (a.Syntax = {}));
  var b = a.Syntax;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function c(a) {
      return new p(a.tokenKind, a.leadingTrivia(), a.text(), a.value(), a.valueText(), a.trailingTrivia());
    }

    function d(b) {
      a.Debug.assert(a.SyntaxFacts.isAnyKeyword(b.tokenKind));

      return new p(11, b.leadingTrivia(), b.text(), b.text(), b.text(), b.trailingTrivia());
    }

    function e(b) {
      var c = {};
      for (var d in a.SyntaxKind)
        if (a.SyntaxKind[d] === b.kind()) {
          c.kind = d;
          break;
        }
      c.width = b.width();

      if (b.fullWidth() !== b.width()) {
        c.fullWidth = b.fullWidth();
      }

      c.text = b.text();
      var e = b.value();
      if (e !== null) {
        c.value = e;
        c.valueText = b.valueText();
      }

      if (b.hasLeadingTrivia()) {
        c.hasLeadingTrivia = !0;
      }

      if (b.hasLeadingComment()) {
        c.hasLeadingComment = !0;
      }

      if (b.hasLeadingNewLine()) {
        c.hasLeadingNewLine = !0;
      }

      if (b.hasLeadingSkippedText()) {
        c.hasLeadingSkippedText = !0;
      }

      if (b.hasTrailingTrivia()) {
        c.hasTrailingTrivia = !0;
      }

      if (b.hasTrailingComment()) {
        c.hasTrailingComment = !0;
      }

      if (b.hasTrailingNewLine()) {
        c.hasTrailingNewLine = !0;
      }

      if (b.hasTrailingSkippedText()) {
        c.hasTrailingSkippedText = !0;
      }
      var f = b.leadingTrivia();
      f.count() > 0 && (c.leadingTrivia = f);

      f = b.trailingTrivia();

      f.count() > 0 && (c.trailingTrivia = f);

      return c;
    }

    function f(a) {
      return k(a.tokenKind, a.text());
    }

    function g(b, c, d) {
      var e = 0;
      for (var f = 0; f < d; f++) {
        var g = b.charCodeAt(c + f);
        if (!a.CharacterInfo.isHexDigit(g)) break;
        e = (e << 4) + a.CharacterInfo.hexValue(g);
      }
      return e;
    }

    function i(a) {
      h.length = 0;
      var b = "";
      for (var c = 0, d = a.length; c < d; c++) {
        var e = a.charCodeAt(c);
        if (e === 92) {
          c++;
          if (c < d) {
            e = a.charCodeAt(c);
            switch (e) {
              case 48:
                h.push(0);
                continue;
              case 98:
                h.push(8);
                continue;
              case 102:
                h.push(12);
                continue;
              case 110:
                h.push(10);
                continue;
              case 114:
                h.push(13);
                continue;
              case 116:
                h.push(9);
                continue;
              case 118:
                h.push(11);
                continue;
              case 120:
                h.push(g(a, c + 1, 2));

                c += 2;
                continue;
              case 117:
                h.push(g(a, c + 1, 4));

                c += 4;
                continue;
              default:
            }
          }
        }
        h.push(e);

        if (c && !(c % 1024)) {
          b = b.concat(String.fromCharCode.apply(null, h));
          h.length = 0;
        }
      }
      h.length && (b = b.concat(String.fromCharCode.apply(null, h)));

      return b;
    }

    function j(a) {
      return a.indexOf("\\") >= 0 ? i(a) : a;
    }

    function k(b, c) {
      if (b === 11) {
        return j(c);
      }
      switch (b) {
        case 37:
          return !0;
        case 24:
          return !1;
        case 32:
          return null;
      }
      if (a.SyntaxFacts.isAnyKeyword(b) || a.SyntaxFacts.isAnyPunctuation(b)) {
        return a.SyntaxFacts.getText(b);
      }
      if (b === 13) {
        return parseFloat(c);
      }
      if (b === 14) {
        return c.length > 1 && c.charCodeAt(c.length - 1) === c.charCodeAt(0) ? j(c.substr(1, c.length - 2)) : j(c.substr(
          1));
      }
      if (b !== 12) {
        if (b === 10 || b === 9) {
          return null;
        }
        throw a.Errors.invalidOperation();
      }
      try {
        var d = c.lastIndexOf("/");

        var e = c.substring(1, d);

        var f = c.substring(d + 1);
        return new RegExp(e, f);
      } catch (g) {
        return null;
      }
    }

    function l(a, b) {
      var c = k(a, b);
      return c === null ? "" : c.toString();
    }

    function m(a) {
      var b = a.value();
      return b === null ? "" : b.toString();
    }

    function o(a) {
      return new n(a);
    }

    function q(b, c) {
      if (typeof c == "undefined") {
        c = null;
      }
      var d = c !== null && c.text !== undefined ? c.text : a.SyntaxFacts.getText(b);
      return new p(b, a.Syntax.triviaList(c === null ? null : c.leadingTrivia), d, k(b, d), l(b, d), a.Syntax.triviaList(
        c === null ? null : c.trailingTrivia));
    }

    function r(a, b) {
      typeof b == "undefined" && (b = null);

      b = b || {};

      b.text = a;

      return q(11, b);
    }
    b.realizeToken = c;

    b.convertToIdentifierName = d;

    b.tokenToJSON = e;

    b.value = f;
    var h = [];
    b.valueText = m;
    var n = function() {
      function b(a) {
        this.tokenKind = a;
      }
      b.prototype.clone = function() {
        return new b(this.tokenKind);
      };

      b.prototype.kind = function() {
        return this.tokenKind;
      };

      b.prototype.isToken = function() {
        return !0;
      };

      b.prototype.isNode = function() {
        return !1;
      };

      b.prototype.isList = function() {
        return !1;
      };

      b.prototype.isSeparatedList = function() {
        return !1;
      };

      b.prototype.childCount = function() {
        return 0;
      };

      b.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      b.prototype.toJSON = function(a) {
        return e(this);
      };

      b.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      b.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      b.prototype.firstToken = function() {
        return this;
      };

      b.prototype.lastToken = function() {
        return this;
      };

      b.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      b.prototype.isIncrementallyUnusable = function() {
        return !0;
      };

      b.prototype.fullWidth = function() {
        return 0;
      };

      b.prototype.width = function() {
        return 0;
      };

      b.prototype.text = function() {
        return "";
      };

      b.prototype.fullText = function() {
        return "";
      };

      b.prototype.value = function() {
        return null;
      };

      b.prototype.valueText = function() {
        return "";
      };

      b.prototype.hasLeadingTrivia = function() {
        return !1;
      };

      b.prototype.hasLeadingComment = function() {
        return !1;
      };

      b.prototype.hasLeadingNewLine = function() {
        return !1;
      };

      b.prototype.hasLeadingSkippedText = function() {
        return !1;
      };

      b.prototype.leadingTriviaWidth = function() {
        return 0;
      };

      b.prototype.hasTrailingTrivia = function() {
        return !1;
      };

      b.prototype.hasTrailingComment = function() {
        return !1;
      };

      b.prototype.hasTrailingNewLine = function() {
        return !1;
      };

      b.prototype.hasTrailingSkippedText = function() {
        return !1;
      };

      b.prototype.hasSkippedToken = function() {
        return !1;
      };

      b.prototype.trailingTriviaWidth = function() {
        return 0;
      };

      b.prototype.leadingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      b.prototype.trailingTrivia = function() {
        return a.Syntax.emptyTriviaList;
      };

      b.prototype.realize = function() {
        return c(this);
      };

      b.prototype.collectTextElements = function(a) {};

      b.prototype.withLeadingTrivia = function(a) {
        return this.realize().withLeadingTrivia(a);
      };

      b.prototype.withTrailingTrivia = function(a) {
        return this.realize().withTrailingTrivia(a);
      };

      return b;
    }();
    b.emptyToken = o;
    var p = function() {
      function b(a, b, c, d, e, f) {
        this.tokenKind = a;

        this._leadingTrivia = b;

        this._text = c;

        this._value = d;

        this._valueText = e;

        this._trailingTrivia = f;
      }
      b.prototype.clone = function() {
        return new b(this.tokenKind, this._leadingTrivia, this._text, this._value, this._valueText, this._trailingTrivia);
      };

      b.prototype.kind = function() {
        return this.tokenKind;
      };

      b.prototype.toJSON = function(a) {
        return e(this);
      };

      b.prototype.firstToken = function() {
        return this;
      };

      b.prototype.lastToken = function() {
        return this;
      };

      b.prototype.isTypeScriptSpecific = function() {
        return !1;
      };

      b.prototype.isIncrementallyUnusable = function() {
        return !0;
      };

      b.prototype.accept = function(a) {
        return a.visitToken(this);
      };

      b.prototype.childCount = function() {
        return 0;
      };

      b.prototype.childAt = function(b) {
        throw a.Errors.argumentOutOfRange("index");
      };

      b.prototype.isToken = function() {
        return !0;
      };

      b.prototype.isNode = function() {
        return !1;
      };

      b.prototype.isList = function() {
        return !1;
      };

      b.prototype.isSeparatedList = function() {
        return !1;
      };

      b.prototype.isTrivia = function() {
        return !1;
      };

      b.prototype.isTriviaList = function() {
        return !1;
      };

      b.prototype.fullWidth = function() {
        return this._leadingTrivia.fullWidth() + this.width() + this._trailingTrivia.fullWidth();
      };

      b.prototype.width = function() {
        return this.text().length;
      };

      b.prototype.text = function() {
        return this._text;
      };

      b.prototype.fullText = function() {
        return this._leadingTrivia.fullText() + this.text() + this._trailingTrivia.fullText();
      };

      b.prototype.value = function() {
        return this._value;
      };

      b.prototype.valueText = function() {
        return this._valueText;
      };

      b.prototype.hasLeadingTrivia = function() {
        return this._leadingTrivia.count() > 0;
      };

      b.prototype.hasLeadingComment = function() {
        return this._leadingTrivia.hasComment();
      };

      b.prototype.hasLeadingNewLine = function() {
        return this._leadingTrivia.hasNewLine();
      };

      b.prototype.hasLeadingSkippedText = function() {
        return this._leadingTrivia.hasSkippedToken();
      };

      b.prototype.leadingTriviaWidth = function() {
        return this._leadingTrivia.fullWidth();
      };

      b.prototype.hasTrailingTrivia = function() {
        return this._trailingTrivia.count() > 0;
      };

      b.prototype.hasTrailingComment = function() {
        return this._trailingTrivia.hasComment();
      };

      b.prototype.hasTrailingNewLine = function() {
        return this._trailingTrivia.hasNewLine();
      };

      b.prototype.hasTrailingSkippedText = function() {
        return this._trailingTrivia.hasSkippedToken();
      };

      b.prototype.trailingTriviaWidth = function() {
        return this._trailingTrivia.fullWidth();
      };

      b.prototype.hasSkippedToken = function() {
        return this.hasLeadingSkippedText() || this.hasTrailingSkippedText();
      };

      b.prototype.leadingTrivia = function() {
        return this._leadingTrivia;
      };

      b.prototype.trailingTrivia = function() {
        return this._trailingTrivia;
      };

      b.prototype.findTokenInternal = function(b, c, d) {
        return new a.PositionedToken(b, this, d);
      };

      b.prototype.collectTextElements = function(a) {
        this.leadingTrivia().collectTextElements(a);

        a.push(this.text());

        this.trailingTrivia().collectTextElements(a);
      };

      b.prototype.withLeadingTrivia = function(a) {
        return new b(this.tokenKind, a, this._text, this._value, this._valueText, this._trailingTrivia);
      };

      b.prototype.withTrailingTrivia = function(a) {
        return new b(this.tokenKind, this._leadingTrivia, this._text, this._value, this._valueText, a);
      };

      return b;
    }();
    b.token = q;

    b.identifier = r;
  })(a.Syntax || (a.Syntax = {}));
  var b = a.Syntax;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(a) {
    function b(b, c) {
      a.call(this);

      this.token1 = b;

      this.token2 = c;
    }
    __extends(b, a);

    b.prototype.visitToken = function(a) {
      if (a === this.token1) {
        var b = this.token2;
        this.token1 = null;

        this.token2 = null;

        return b;
      }
      return a;
    };

    b.prototype.visitNode = function(b) {
      return this.token1 === null ? b : a.prototype.visitNode.call(this, b);
    };

    b.prototype.visitList = function(b) {
      return this.token1 === null ? b : a.prototype.visitList.call(this, b);
    };

    b.prototype.visitSeparatedList = function(b) {
      return this.token1 === null ? b : a.prototype.visitSeparatedList.call(this, b);
    };

    return b;
  }(a.SyntaxRewriter);
  a.SyntaxTokenReplacer = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function d(a, b) {
      return new c(a, b);
    }

    function e(b) {
      a.Debug.assert(!b.hasLeadingTrivia());

      a.Debug.assert(!b.hasTrailingTrivia());

      a.Debug.assert(b.fullWidth() > 0);

      return new c(8, b);
    }

    function f(b) {
      return d(4, a.StringUtilities.repeat(" ", b));
    }

    function g(a) {
      return d(4, a);
    }

    function h(a) {
      return d(6, a);
    }

    function i(a) {
      return d(7, a);
    }

    function j(a) {
      var b = [];

      var c = a.fullText();

      var d = 0;
      for (var e = 0; e < c.length; e++) {
        var f = c.charCodeAt(e);

        var g = !1;
        switch (f) {
          case 13:
            if (e < c.length - 1 && c.charCodeAt(e + 1) === 10) {
              e++;
            }
          case 10:
          case 8233:
          case 8232:
            b.push(c.substring(d, e + 1));

            d = e + 1;
            continue;
        }
      }
      b.push(c.substring(d));

      return b;
    }
    var c = function() {
      function b(a, b) {
        this._kind = a;

        this._textOrToken = b;
      }
      b.prototype.toJSON = function(b) {
        var c = {};
        c.kind = a.SyntaxKind[this._kind];

        this.isSkippedToken() ? c.skippedToken = this._textOrToken : c.text = this._textOrToken;

        return c;
      };

      b.prototype.kind = function() {
        return this._kind;
      };

      b.prototype.fullWidth = function() {
        return this.fullText().length;
      };

      b.prototype.fullText = function() {
        return this.isSkippedToken() ? this.skippedToken().fullText() : this._textOrToken;
      };

      b.prototype.isWhitespace = function() {
        return this.kind() === 4;
      };

      b.prototype.isComment = function() {
        return this.kind() === 7 || this.kind() === 6;
      };

      b.prototype.isNewLine = function() {
        return this.kind() === 5;
      };

      b.prototype.isSkippedToken = function() {
        return this.kind() === 8;
      };

      b.prototype.skippedToken = function() {
        a.Debug.assert(this.isSkippedToken());

        return this._textOrToken;
      };

      b.prototype.collectTextElements = function(a) {
        a.push(this.fullText());
      };

      return b;
    }();
    b.trivia = d;

    b.skippedTokenTrivia = e;

    b.spaces = f;

    b.whitespace = g;

    b.multiLineComment = h;

    b.singleLineComment = i;

    b.spaceTrivia = f(1);

    b.lineFeedTrivia = d(5, "\n");

    b.carriageReturnTrivia = d(5, "\r");

    b.carriageReturnLineFeedTrivia = d(5, "\r\n");

    b.splitMultiLineCommentTriviaIntoMultipleLines = j;
  })(a.Syntax || (a.Syntax = {}));
  var b = a.Syntax;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function c(a, b) {
      if (a.count() === 0) {
        return b;
      }
      if (b.count() === 0) {
        return a;
      }
      var c = a.toArray();
      c.push.apply(c, b.toArray());

      return g(c);
    }

    function d(a) {
      return a.kind() === 6 || a.kind() === 7;
    }

    function g(b) {
      return b === undefined || b === null || b.length === 0 ? a.Syntax.emptyTriviaList : b.length === 1 ? new e(b[
        0]) : new f(b);
    }
    b.emptyTriviaList = {
      kind: function() {
        return 3;
      },
      count: function() {
        return 0;
      },
      syntaxTriviaAt: function(b) {
        throw a.Errors.argumentOutOfRange("index");
      },
      last: function() {
        throw a.Errors.argumentOutOfRange("index");
      },
      fullWidth: function() {
        return 0;
      },
      fullText: function() {
        return "";
      },
      hasComment: function() {
        return !1;
      },
      hasNewLine: function() {
        return !1;
      },
      hasSkippedToken: function() {
        return !1;
      },
      toJSON: function(a) {
        return [];
      },
      collectTextElements: function(a) {},
      toArray: function() {
        return [];
      },
      concat: function(a) {
        return a;
      }
    };
    var e = function() {
      function b(a) {
        this.item = a;
      }
      b.prototype.kind = function() {
        return 3;
      };

      b.prototype.count = function() {
        return 1;
      };

      b.prototype.syntaxTriviaAt = function(b) {
        if (b !== 0) throw a.Errors.argumentOutOfRange("index");
        return this.item;
      };

      b.prototype.last = function() {
        return this.item;
      };

      b.prototype.fullWidth = function() {
        return this.item.fullWidth();
      };

      b.prototype.fullText = function() {
        return this.item.fullText();
      };

      b.prototype.hasComment = function() {
        return d(this.item);
      };

      b.prototype.hasNewLine = function() {
        return this.item.kind() === 5;
      };

      b.prototype.hasSkippedToken = function() {
        return this.item.kind() === 8;
      };

      b.prototype.toJSON = function(a) {
        return [this.item];
      };

      b.prototype.collectTextElements = function(a) {
        this.item.collectTextElements(a);
      };

      b.prototype.toArray = function() {
        return [this.item];
      };

      b.prototype.concat = function(a) {
        return c(this, a);
      };

      return b;
    }();

    var f = function() {
      function b(a) {
        this.trivia = a;
      }
      b.prototype.kind = function() {
        return 3;
      };

      b.prototype.count = function() {
        return this.trivia.length;
      };

      b.prototype.syntaxTriviaAt = function(b) {
        if (b < 0 || b >= this.trivia.length) throw a.Errors.argumentOutOfRange("index");
        return this.trivia[b];
      };

      b.prototype.last = function() {
        return this.trivia[this.trivia.length - 1];
      };

      b.prototype.fullWidth = function() {
        return a.ArrayUtilities.sum(this.trivia, function(a) {
          return a.fullWidth();
        });
      };

      b.prototype.fullText = function() {
        var a = "";
        for (var b = 0, c = this.trivia.length; b < c; b++) {
          a += this.trivia[b].fullText();
        }
        return a;
      };

      b.prototype.hasComment = function() {
        for (var a = 0; a < this.trivia.length; a++)
          if (d(this.trivia[a])) {
            return !0;
          }
        return !1;
      };

      b.prototype.hasNewLine = function() {
        for (var a = 0; a < this.trivia.length; a++)
          if (this.trivia[a].kind() === 5) {
            return !0;
          }
        return !1;
      };

      b.prototype.hasSkippedToken = function() {
        for (var a = 0; a < this.trivia.length; a++)
          if (this.trivia[a].kind() === 8) {
            return !0;
          }
        return !1;
      };

      b.prototype.toJSON = function(a) {
        return this.trivia;
      };

      b.prototype.collectTextElements = function(a) {
        for (var b = 0; b < this.trivia.length; b++) {
          this.trivia[b].collectTextElements(a);
        }
      };

      b.prototype.toArray = function() {
        return this.trivia.slice(0);
      };

      b.prototype.concat = function(a) {
        return c(this, a);
      };

      return b;
    }();
    b.triviaList = g;

    b.spaceTriviaList = g([a.Syntax.spaceTrivia]);
  })(a.Syntax || (a.Syntax = {}));
  var b = a.Syntax;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.isAngleBracket = function(a) {
      var b = a.element();

      var c = a.parentElement();
      if (c !== null && (b.kind() === 81 || b.kind() === 82)) switch (c.kind()) {
        case 227:
        case 228:
        case 219:
          return !0;
      }
      return !1;
    };

    a.getToken = function(a, b) {
      for (var c = 0, d = a.childCount(); c < d; c++) {
        var e = a.childAt(c);
        if (e.tokenKind === b) {
          return e;
        }
      }
      return null;
    };

    a.containsToken = function(b, c) {
      return a.getToken(b, c) !== null;
    };

    a.hasExportKeyword = function(b) {
      switch (b.kind()) {
        case 130:
        case 131:
        case 129:
        case 147:
        case 132:
        case 128:
          return a.containsToken(b.modifiers, 47);
      }
      return !1;
    };

    a.isAmbientDeclarationSyntax = function(b) {
      if (!b) {
        return !1;
      }
      var c = b.node();
      switch (c.kind()) {
        case 130:
        case 131:
        case 129:
        case 147:
        case 132:
          if (a.containsToken(c.modifiers, 64)) {
            return !0;
          }
        case 133:
        case 137:
        case 135:
        case 138:
        case 139:
        case 136:
          if (c.isClassElement() || c.isModuleElement()) {
            return a.isAmbientDeclarationSyntax(b.containingNode());
          }
        case 243:
          return a.isAmbientDeclarationSyntax(b.containingNode().containingNode());
        default:
          return a.isAmbientDeclarationSyntax(b.containingNode());
      }
    };

    return a;
  }();
  a.SyntaxUtilities = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.prototype.defaultVisit = function(a) {
      return null;
    };

    a.prototype.visitToken = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitSourceUnit = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitExternalModuleReference = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitModuleNameModuleReference = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitImportDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitExportAssignment = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitClassDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitInterfaceDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitHeritageClause = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitModuleDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitFunctionDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitVariableStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitVariableDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitVariableDeclarator = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitEqualsValueClause = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitPrefixUnaryExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitArrayLiteralExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitOmittedExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitParenthesizedExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitSimpleArrowFunctionExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitParenthesizedArrowFunctionExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitQualifiedName = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitTypeArgumentList = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitConstructorType = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitFunctionType = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitObjectType = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitArrayType = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitGenericType = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitTypeAnnotation = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitBlock = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitParameter = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitMemberAccessExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitPostfixUnaryExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitElementAccessExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitInvocationExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitArgumentList = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitBinaryExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitConditionalExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitConstructSignature = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitMethodSignature = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitIndexSignature = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitPropertySignature = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitCallSignature = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitParameterList = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitTypeParameterList = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitTypeParameter = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitConstraint = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitElseClause = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitIfStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitExpressionStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitConstructorDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitMemberFunctionDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitGetMemberAccessorDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitSetMemberAccessorDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitMemberVariableDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitThrowStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitReturnStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitObjectCreationExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitSwitchStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitCaseSwitchClause = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitDefaultSwitchClause = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitBreakStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitContinueStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitForStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitForInStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitWhileStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitWithStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitEnumDeclaration = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitEnumElement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitCastExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitObjectLiteralExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitSimplePropertyAssignment = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitFunctionPropertyAssignment = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitGetAccessorPropertyAssignment = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitSetAccessorPropertyAssignment = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitFunctionExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitEmptyStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitTryStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitCatchClause = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitFinallyClause = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitLabeledStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitDoStatement = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitTypeOfExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitDeleteExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitVoidExpression = function(a) {
      return this.defaultVisit(a);
    };

    a.prototype.visitDebuggerStatement = function(a) {
      return this.defaultVisit(a);
    };

    return a;
  }();
  a.SyntaxVisitor = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.prototype.visitToken = function(a) {};

    a.prototype.visitNode = function(a) {
      a.accept(this);
    };

    a.prototype.visitNodeOrToken = function(a) {
      if (a.isToken()) {
        this.visitToken(a);
      } else {
        this.visitNode(a);
      }
    };

    a.prototype.visitOptionalToken = function(a) {
      if (a === null) return;
      this.visitToken(a);
    };

    a.prototype.visitOptionalNode = function(a) {
      if (a === null) return;
      this.visitNode(a);
    };

    a.prototype.visitOptionalNodeOrToken = function(a) {
      if (a === null) return;
      this.visitNodeOrToken(a);
    };

    a.prototype.visitList = function(a) {
      for (var b = 0, c = a.childCount(); b < c; b++) {
        this.visitNodeOrToken(a.childAt(b));
      }
    };

    a.prototype.visitSeparatedList = function(a) {
      for (var b = 0, c = a.childCount(); b < c; b++) {
        var d = a.childAt(b);
        this.visitNodeOrToken(d);
      }
    };

    a.prototype.visitSourceUnit = function(a) {
      this.visitList(a.moduleElements);

      this.visitToken(a.endOfFileToken);
    };

    a.prototype.visitExternalModuleReference = function(a) {
      this.visitToken(a.moduleOrRequireKeyword);

      this.visitToken(a.openParenToken);

      this.visitToken(a.stringLiteral);

      this.visitToken(a.closeParenToken);
    };

    a.prototype.visitModuleNameModuleReference = function(a) {
      this.visitNodeOrToken(a.moduleName);
    };

    a.prototype.visitImportDeclaration = function(a) {
      this.visitToken(a.importKeyword);

      this.visitToken(a.identifier);

      this.visitToken(a.equalsToken);

      this.visitNode(a.moduleReference);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitExportAssignment = function(a) {
      this.visitToken(a.exportKeyword);

      this.visitToken(a.equalsToken);

      this.visitToken(a.identifier);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitClassDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitToken(a.classKeyword);

      this.visitToken(a.identifier);

      this.visitOptionalNode(a.typeParameterList);

      this.visitList(a.heritageClauses);

      this.visitToken(a.openBraceToken);

      this.visitList(a.classElements);

      this.visitToken(a.closeBraceToken);
    };

    a.prototype.visitInterfaceDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitToken(a.interfaceKeyword);

      this.visitToken(a.identifier);

      this.visitOptionalNode(a.typeParameterList);

      this.visitList(a.heritageClauses);

      this.visitNode(a.body);
    };

    a.prototype.visitHeritageClause = function(a) {
      this.visitToken(a.extendsOrImplementsKeyword);

      this.visitSeparatedList(a.typeNames);
    };

    a.prototype.visitModuleDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitToken(a.moduleKeyword);

      this.visitOptionalNodeOrToken(a.moduleName);

      this.visitOptionalToken(a.stringLiteral);

      this.visitToken(a.openBraceToken);

      this.visitList(a.moduleElements);

      this.visitToken(a.closeBraceToken);
    };

    a.prototype.visitFunctionDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitToken(a.functionKeyword);

      this.visitToken(a.identifier);

      this.visitNode(a.callSignature);

      this.visitOptionalNode(a.block);

      this.visitOptionalToken(a.semicolonToken);
    };

    a.prototype.visitVariableStatement = function(a) {
      this.visitList(a.modifiers);

      this.visitNode(a.variableDeclaration);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitVariableDeclaration = function(a) {
      this.visitToken(a.varKeyword);

      this.visitSeparatedList(a.variableDeclarators);
    };

    a.prototype.visitVariableDeclarator = function(a) {
      this.visitToken(a.identifier);

      this.visitOptionalNode(a.typeAnnotation);

      this.visitOptionalNode(a.equalsValueClause);
    };

    a.prototype.visitEqualsValueClause = function(a) {
      this.visitToken(a.equalsToken);

      this.visitNodeOrToken(a.value);
    };

    a.prototype.visitPrefixUnaryExpression = function(a) {
      this.visitToken(a.operatorToken);

      this.visitNodeOrToken(a.operand);
    };

    a.prototype.visitArrayLiteralExpression = function(a) {
      this.visitToken(a.openBracketToken);

      this.visitSeparatedList(a.expressions);

      this.visitToken(a.closeBracketToken);
    };

    a.prototype.visitOmittedExpression = function(a) {};

    a.prototype.visitParenthesizedExpression = function(a) {
      this.visitToken(a.openParenToken);

      this.visitNodeOrToken(a.expression);

      this.visitToken(a.closeParenToken);
    };

    a.prototype.visitSimpleArrowFunctionExpression = function(a) {
      this.visitToken(a.identifier);

      this.visitToken(a.equalsGreaterThanToken);

      this.visitNodeOrToken(a.body);
    };

    a.prototype.visitParenthesizedArrowFunctionExpression = function(a) {
      this.visitNode(a.callSignature);

      this.visitToken(a.equalsGreaterThanToken);

      this.visitNodeOrToken(a.body);
    };

    a.prototype.visitQualifiedName = function(a) {
      this.visitNodeOrToken(a.left);

      this.visitToken(a.dotToken);

      this.visitToken(a.right);
    };

    a.prototype.visitTypeArgumentList = function(a) {
      this.visitToken(a.lessThanToken);

      this.visitSeparatedList(a.typeArguments);

      this.visitToken(a.greaterThanToken);
    };

    a.prototype.visitConstructorType = function(a) {
      this.visitToken(a.newKeyword);

      this.visitOptionalNode(a.typeParameterList);

      this.visitNode(a.parameterList);

      this.visitToken(a.equalsGreaterThanToken);

      this.visitNodeOrToken(a.type);
    };

    a.prototype.visitFunctionType = function(a) {
      this.visitOptionalNode(a.typeParameterList);

      this.visitNode(a.parameterList);

      this.visitToken(a.equalsGreaterThanToken);

      this.visitNodeOrToken(a.type);
    };

    a.prototype.visitObjectType = function(a) {
      this.visitToken(a.openBraceToken);

      this.visitSeparatedList(a.typeMembers);

      this.visitToken(a.closeBraceToken);
    };

    a.prototype.visitArrayType = function(a) {
      this.visitNodeOrToken(a.type);

      this.visitToken(a.openBracketToken);

      this.visitToken(a.closeBracketToken);
    };

    a.prototype.visitGenericType = function(a) {
      this.visitNodeOrToken(a.name);

      this.visitNode(a.typeArgumentList);
    };

    a.prototype.visitTypeAnnotation = function(a) {
      this.visitToken(a.colonToken);

      this.visitNodeOrToken(a.type);
    };

    a.prototype.visitBlock = function(a) {
      this.visitToken(a.openBraceToken);

      this.visitList(a.statements);

      this.visitToken(a.closeBraceToken);
    };

    a.prototype.visitParameter = function(a) {
      this.visitOptionalToken(a.dotDotDotToken);

      this.visitOptionalToken(a.publicOrPrivateKeyword);

      this.visitToken(a.identifier);

      this.visitOptionalToken(a.questionToken);

      this.visitOptionalNode(a.typeAnnotation);

      this.visitOptionalNode(a.equalsValueClause);
    };

    a.prototype.visitMemberAccessExpression = function(a) {
      this.visitNodeOrToken(a.expression);

      this.visitToken(a.dotToken);

      this.visitToken(a.name);
    };

    a.prototype.visitPostfixUnaryExpression = function(a) {
      this.visitNodeOrToken(a.operand);

      this.visitToken(a.operatorToken);
    };

    a.prototype.visitElementAccessExpression = function(a) {
      this.visitNodeOrToken(a.expression);

      this.visitToken(a.openBracketToken);

      this.visitNodeOrToken(a.argumentExpression);

      this.visitToken(a.closeBracketToken);
    };

    a.prototype.visitInvocationExpression = function(a) {
      this.visitNodeOrToken(a.expression);

      this.visitNode(a.argumentList);
    };

    a.prototype.visitArgumentList = function(a) {
      this.visitOptionalNode(a.typeArgumentList);

      this.visitToken(a.openParenToken);

      this.visitSeparatedList(a.arguments);

      this.visitToken(a.closeParenToken);
    };

    a.prototype.visitBinaryExpression = function(a) {
      this.visitNodeOrToken(a.left);

      this.visitToken(a.operatorToken);

      this.visitNodeOrToken(a.right);
    };

    a.prototype.visitConditionalExpression = function(a) {
      this.visitNodeOrToken(a.condition);

      this.visitToken(a.questionToken);

      this.visitNodeOrToken(a.whenTrue);

      this.visitToken(a.colonToken);

      this.visitNodeOrToken(a.whenFalse);
    };

    a.prototype.visitConstructSignature = function(a) {
      this.visitToken(a.newKeyword);

      this.visitNode(a.callSignature);
    };

    a.prototype.visitMethodSignature = function(a) {
      this.visitToken(a.propertyName);

      this.visitOptionalToken(a.questionToken);

      this.visitNode(a.callSignature);
    };

    a.prototype.visitIndexSignature = function(a) {
      this.visitToken(a.openBracketToken);

      this.visitNode(a.parameter);

      this.visitToken(a.closeBracketToken);

      this.visitOptionalNode(a.typeAnnotation);
    };

    a.prototype.visitPropertySignature = function(a) {
      this.visitToken(a.propertyName);

      this.visitOptionalToken(a.questionToken);

      this.visitOptionalNode(a.typeAnnotation);
    };

    a.prototype.visitCallSignature = function(a) {
      this.visitOptionalNode(a.typeParameterList);

      this.visitNode(a.parameterList);

      this.visitOptionalNode(a.typeAnnotation);
    };

    a.prototype.visitParameterList = function(a) {
      this.visitToken(a.openParenToken);

      this.visitSeparatedList(a.parameters);

      this.visitToken(a.closeParenToken);
    };

    a.prototype.visitTypeParameterList = function(a) {
      this.visitToken(a.lessThanToken);

      this.visitSeparatedList(a.typeParameters);

      this.visitToken(a.greaterThanToken);
    };

    a.prototype.visitTypeParameter = function(a) {
      this.visitToken(a.identifier);

      this.visitOptionalNode(a.constraint);
    };

    a.prototype.visitConstraint = function(a) {
      this.visitToken(a.extendsKeyword);

      this.visitNodeOrToken(a.type);
    };

    a.prototype.visitElseClause = function(a) {
      this.visitToken(a.elseKeyword);

      this.visitNodeOrToken(a.statement);
    };

    a.prototype.visitIfStatement = function(a) {
      this.visitToken(a.ifKeyword);

      this.visitToken(a.openParenToken);

      this.visitNodeOrToken(a.condition);

      this.visitToken(a.closeParenToken);

      this.visitNodeOrToken(a.statement);

      this.visitOptionalNode(a.elseClause);
    };

    a.prototype.visitExpressionStatement = function(a) {
      this.visitNodeOrToken(a.expression);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitConstructorDeclaration = function(a) {
      this.visitToken(a.constructorKeyword);

      this.visitNode(a.parameterList);

      this.visitOptionalNode(a.block);

      this.visitOptionalToken(a.semicolonToken);
    };

    a.prototype.visitMemberFunctionDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitToken(a.propertyName);

      this.visitNode(a.callSignature);

      this.visitOptionalNode(a.block);

      this.visitOptionalToken(a.semicolonToken);
    };

    a.prototype.visitGetMemberAccessorDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitToken(a.getKeyword);

      this.visitToken(a.propertyName);

      this.visitNode(a.parameterList);

      this.visitOptionalNode(a.typeAnnotation);

      this.visitNode(a.block);
    };

    a.prototype.visitSetMemberAccessorDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitToken(a.setKeyword);

      this.visitToken(a.propertyName);

      this.visitNode(a.parameterList);

      this.visitNode(a.block);
    };

    a.prototype.visitMemberVariableDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitNode(a.variableDeclarator);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitThrowStatement = function(a) {
      this.visitToken(a.throwKeyword);

      this.visitNodeOrToken(a.expression);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitReturnStatement = function(a) {
      this.visitToken(a.returnKeyword);

      this.visitOptionalNodeOrToken(a.expression);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitObjectCreationExpression = function(a) {
      this.visitToken(a.newKeyword);

      this.visitNodeOrToken(a.expression);

      this.visitOptionalNode(a.argumentList);
    };

    a.prototype.visitSwitchStatement = function(a) {
      this.visitToken(a.switchKeyword);

      this.visitToken(a.openParenToken);

      this.visitNodeOrToken(a.expression);

      this.visitToken(a.closeParenToken);

      this.visitToken(a.openBraceToken);

      this.visitList(a.switchClauses);

      this.visitToken(a.closeBraceToken);
    };

    a.prototype.visitCaseSwitchClause = function(a) {
      this.visitToken(a.caseKeyword);

      this.visitNodeOrToken(a.expression);

      this.visitToken(a.colonToken);

      this.visitList(a.statements);
    };

    a.prototype.visitDefaultSwitchClause = function(a) {
      this.visitToken(a.defaultKeyword);

      this.visitToken(a.colonToken);

      this.visitList(a.statements);
    };

    a.prototype.visitBreakStatement = function(a) {
      this.visitToken(a.breakKeyword);

      this.visitOptionalToken(a.identifier);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitContinueStatement = function(a) {
      this.visitToken(a.continueKeyword);

      this.visitOptionalToken(a.identifier);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitForStatement = function(a) {
      this.visitToken(a.forKeyword);

      this.visitToken(a.openParenToken);

      this.visitOptionalNode(a.variableDeclaration);

      this.visitOptionalNodeOrToken(a.initializer);

      this.visitToken(a.firstSemicolonToken);

      this.visitOptionalNodeOrToken(a.condition);

      this.visitToken(a.secondSemicolonToken);

      this.visitOptionalNodeOrToken(a.incrementor);

      this.visitToken(a.closeParenToken);

      this.visitNodeOrToken(a.statement);
    };

    a.prototype.visitForInStatement = function(a) {
      this.visitToken(a.forKeyword);

      this.visitToken(a.openParenToken);

      this.visitOptionalNode(a.variableDeclaration);

      this.visitOptionalNodeOrToken(a.left);

      this.visitToken(a.inKeyword);

      this.visitNodeOrToken(a.expression);

      this.visitToken(a.closeParenToken);

      this.visitNodeOrToken(a.statement);
    };

    a.prototype.visitWhileStatement = function(a) {
      this.visitToken(a.whileKeyword);

      this.visitToken(a.openParenToken);

      this.visitNodeOrToken(a.condition);

      this.visitToken(a.closeParenToken);

      this.visitNodeOrToken(a.statement);
    };

    a.prototype.visitWithStatement = function(a) {
      this.visitToken(a.withKeyword);

      this.visitToken(a.openParenToken);

      this.visitNodeOrToken(a.condition);

      this.visitToken(a.closeParenToken);

      this.visitNodeOrToken(a.statement);
    };

    a.prototype.visitEnumDeclaration = function(a) {
      this.visitList(a.modifiers);

      this.visitToken(a.enumKeyword);

      this.visitToken(a.identifier);

      this.visitToken(a.openBraceToken);

      this.visitSeparatedList(a.enumElements);

      this.visitToken(a.closeBraceToken);
    };

    a.prototype.visitEnumElement = function(a) {
      this.visitToken(a.propertyName);

      this.visitOptionalNode(a.equalsValueClause);
    };

    a.prototype.visitCastExpression = function(a) {
      this.visitToken(a.lessThanToken);

      this.visitNodeOrToken(a.type);

      this.visitToken(a.greaterThanToken);

      this.visitNodeOrToken(a.expression);
    };

    a.prototype.visitObjectLiteralExpression = function(a) {
      this.visitToken(a.openBraceToken);

      this.visitSeparatedList(a.propertyAssignments);

      this.visitToken(a.closeBraceToken);
    };

    a.prototype.visitSimplePropertyAssignment = function(a) {
      this.visitToken(a.propertyName);

      this.visitToken(a.colonToken);

      this.visitNodeOrToken(a.expression);
    };

    a.prototype.visitFunctionPropertyAssignment = function(a) {
      this.visitToken(a.propertyName);

      this.visitNode(a.callSignature);

      this.visitNode(a.block);
    };

    a.prototype.visitGetAccessorPropertyAssignment = function(a) {
      this.visitToken(a.getKeyword);

      this.visitToken(a.propertyName);

      this.visitToken(a.openParenToken);

      this.visitToken(a.closeParenToken);

      this.visitOptionalNode(a.typeAnnotation);

      this.visitNode(a.block);
    };

    a.prototype.visitSetAccessorPropertyAssignment = function(a) {
      this.visitToken(a.setKeyword);

      this.visitToken(a.propertyName);

      this.visitToken(a.openParenToken);

      this.visitNode(a.parameter);

      this.visitToken(a.closeParenToken);

      this.visitNode(a.block);
    };

    a.prototype.visitFunctionExpression = function(a) {
      this.visitToken(a.functionKeyword);

      this.visitOptionalToken(a.identifier);

      this.visitNode(a.callSignature);

      this.visitNode(a.block);
    };

    a.prototype.visitEmptyStatement = function(a) {
      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitTryStatement = function(a) {
      this.visitToken(a.tryKeyword);

      this.visitNode(a.block);

      this.visitOptionalNode(a.catchClause);

      this.visitOptionalNode(a.finallyClause);
    };

    a.prototype.visitCatchClause = function(a) {
      this.visitToken(a.catchKeyword);

      this.visitToken(a.openParenToken);

      this.visitToken(a.identifier);

      this.visitOptionalNode(a.typeAnnotation);

      this.visitToken(a.closeParenToken);

      this.visitNode(a.block);
    };

    a.prototype.visitFinallyClause = function(a) {
      this.visitToken(a.finallyKeyword);

      this.visitNode(a.block);
    };

    a.prototype.visitLabeledStatement = function(a) {
      this.visitToken(a.identifier);

      this.visitToken(a.colonToken);

      this.visitNodeOrToken(a.statement);
    };

    a.prototype.visitDoStatement = function(a) {
      this.visitToken(a.doKeyword);

      this.visitNodeOrToken(a.statement);

      this.visitToken(a.whileKeyword);

      this.visitToken(a.openParenToken);

      this.visitNodeOrToken(a.condition);

      this.visitToken(a.closeParenToken);

      this.visitToken(a.semicolonToken);
    };

    a.prototype.visitTypeOfExpression = function(a) {
      this.visitToken(a.typeOfKeyword);

      this.visitNodeOrToken(a.expression);
    };

    a.prototype.visitDeleteExpression = function(a) {
      this.visitToken(a.deleteKeyword);

      this.visitNodeOrToken(a.expression);
    };

    a.prototype.visitVoidExpression = function(a) {
      this.visitToken(a.voidKeyword);

      this.visitNodeOrToken(a.expression);
    };

    a.prototype.visitDebuggerStatement = function(a) {
      this.visitToken(a.debuggerKeyword);

      this.visitToken(a.semicolonToken);
    };

    return a;
  }();
  a.SyntaxWalker = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(a) {
    function b() {
      a.apply(this, arguments);

      this._position = 0;
    }
    __extends(b, a);

    b.prototype.visitToken = function(a) {
      this._position += a.fullWidth();
    };

    b.prototype.position = function() {
      return this._position;
    };

    b.prototype.skip = function(a) {
      this._position += a.fullWidth();
    };

    return b;
  }(a.SyntaxWalker);
  a.PositionTrackingWalker = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(b) {
    function c(c, d) {
      b.call(this);

      this.trackParents = c;

      this.trackPreviousToken = d;

      this.tokenToInformation = a.Collections.createHashTable(a.Collections.DefaultHashTableCapacity, a.Collections.identityHashCode);

      this.elementToPosition = a.Collections.createHashTable(a.Collections.DefaultHashTableCapacity, a.Collections.identityHashCode);

      this._previousToken = null;

      this._previousTokenInformation = null;

      this._currentPosition = 0;

      this._elementToParent = a.Collections.createHashTable(a.Collections.DefaultHashTableCapacity, a.Collections.identityHashCode);

      this._parentStack = [];

      this._parentStack.push(null);
    }
    __extends(c, b);

    c.create = function(a, b, d) {
      var e = new c(b, d);
      e.visitNode(a);

      return e;
    };

    c.prototype.visitNode = function(c) {
      if (this.trackParents) {
        this._elementToParent.add(c, a.ArrayUtilities.last(this._parentStack));
      }

      this.elementToPosition.add(c, this._currentPosition);

      if (this.trackParents) {
        this._parentStack.push(c);
      }

      b.prototype.visitNode.call(this, c);

      if (this.trackParents) {
        this._parentStack.pop();
      }
    };

    c.prototype.visitToken = function(b) {
      if (this.trackParents) {
        this._elementToParent.add(b, a.ArrayUtilities.last(this._parentStack));
      }
      if (this.trackPreviousToken) {
        var c = {
          previousToken: this._previousToken,
          nextToken: null
        };
        if (this._previousTokenInformation !== null) {
          this._previousTokenInformation.nextToken = b;
        }

        this._previousToken = b;

        this._previousTokenInformation = c;

        this.tokenToInformation.add(b, c);
      }
      this.elementToPosition.add(b, this._currentPosition);

      this._currentPosition += b.fullWidth();
    };

    c.prototype.parent = function(a) {
      return this._elementToParent.get(a);
    };

    c.prototype.fullStart = function(a) {
      return this.elementToPosition.get(a);
    };

    c.prototype.start = function(a) {
      return this.fullStart(a) + a.leadingTriviaWidth();
    };

    c.prototype.end = function(a) {
      return this.start(a) + a.width();
    };

    c.prototype.previousToken = function(a) {
      return this.tokenInformation(a).previousToken;
    };

    c.prototype.tokenInformation = function(a) {
      return this.tokenToInformation.get(a);
    };

    c.prototype.firstTokenInLineContainingToken = function(a) {
      var b = a;
      for (;;) {
        var c = this.tokenInformation(b);
        if (this.isFirstTokenInLineWorker(c)) break;
        b = c.previousToken;
      }
      return b;
    };

    c.prototype.isFirstTokenInLine = function(a) {
      var b = this.tokenInformation(a);
      return this.isFirstTokenInLineWorker(b);
    };

    c.prototype.isFirstTokenInLineWorker = function(a) {
      return a.previousToken === null || a.previousToken.hasTrailingNewLine();
    };

    return c;
  }(a.SyntaxWalker);
  a.SyntaxInformationMap = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(b) {
    function c() {
      b.apply(this, arguments);

      this.tokenTable = a.Collections.createHashTable(a.Collections.DefaultHashTableCapacity, a.Collections.identityHashCode);
    }
    __extends(c, b);

    c.checkInvariants = function(a) {
      a.accept(new c);
    };

    c.prototype.visitToken = function(a) {
      this.tokenTable.add(a, a);
    };

    return c;
  }(a.SyntaxWalker);
  a.SyntaxNodeInvariantsChecker = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(a) {
    function b(b) {
      a.call(this);

      this._depth = 0;

      this._maximumDepth = 0;

      this._maximumDepth = b;
    }
    __extends(b, a);

    b.prototype.visitNode = function(b) {
      if (this._depth < this._maximumDepth) {
        this._depth++;
        a.prototype.visitNode.call(this, b);
        this._depth--;
      } else {
        this.skip(b);
      }
    };

    return b;
  }(a.PositionTrackingWalker);
  a.DepthLimitedWalker = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function i(a, b, c, d, e) {
      var g = new f(a, b, d);
      return (new h(a, b.lineMap(), g, e)).parseSyntaxTree(c);
    }

    function j(a, b, c) {
      if (b.isUnchanged()) {
        return a;
      }
      var d = new g(a, b, c);
      return (new h(a.fileName(), c.lineMap(), d, a.parseOptions())).parseSyntaxTree(a.isDeclaration());
    }
    var c;
    (function(a) {
      a[a.CommaExpressionPrecedence = 1] = "CommaExpressionPrecedence";

      a[a.AssignmentExpressionPrecedence = 2] = "AssignmentExpressionPrecedence";

      a[a.ConditionalExpressionPrecedence = 3] = "ConditionalExpressionPrecedence";

      a[a.ArrowFunctionPrecedence = 4] = "ArrowFunctionPrecedence";

      a[a.LogicalOrExpressionPrecedence = 5] = "LogicalOrExpressionPrecedence";

      a[a.LogicalAndExpressionPrecedence = 6] = "LogicalAndExpressionPrecedence";

      a[a.BitwiseOrExpressionPrecedence = 7] = "BitwiseOrExpressionPrecedence";

      a[a.BitwiseExclusiveOrExpressionPrecedence = 8] = "BitwiseExclusiveOrExpressionPrecedence";

      a[a.BitwiseAndExpressionPrecedence = 9] = "BitwiseAndExpressionPrecedence";

      a[a.EqualityExpressionPrecedence = 10] = "EqualityExpressionPrecedence";

      a[a.RelationalExpressionPrecedence = 11] = "RelationalExpressionPrecedence";

      a[a.ShiftExpressionPrecdence = 12] = "ShiftExpressionPrecdence";

      a[a.AdditiveExpressionPrecedence = 13] = "AdditiveExpressionPrecedence";

      a[a.MultiplicativeExpressionPrecedence = 14] = "MultiplicativeExpressionPrecedence";

      a[a.UnaryExpressionPrecedence = 15] = "UnaryExpressionPrecedence";
    })(c || (c = {}));
    var d;
    (function(a) {
      a[a.SourceUnit_ModuleElements = 1] = "SourceUnit_ModuleElements";

      a[a.ClassDeclaration_ClassElements = 2] = "ClassDeclaration_ClassElements";

      a[a.ModuleDeclaration_ModuleElements = 4] = "ModuleDeclaration_ModuleElements";

      a[a.SwitchStatement_SwitchClauses = 8] = "SwitchStatement_SwitchClauses";

      a[a.SwitchClause_Statements = 16] = "SwitchClause_Statements";

      a[a.Block_Statements = 32] = "Block_Statements";

      a[a.TryBlock_Statements = 64] = "TryBlock_Statements";

      a[a.CatchBlock_Statements = 128] = "CatchBlock_Statements";

      a[a.EnumDeclaration_EnumElements = 256] = "EnumDeclaration_EnumElements";

      a[a.ObjectType_TypeMembers = 512] = "ObjectType_TypeMembers";

      a[a.ClassOrInterfaceDeclaration_HeritageClauses = 1024] = "ClassOrInterfaceDeclaration_HeritageClauses";

      a[a.HeritageClause_TypeNameList = 2048] = "HeritageClause_TypeNameList";

      a[a.VariableDeclaration_VariableDeclarators_AllowIn = 4096] =
        "VariableDeclaration_VariableDeclarators_AllowIn";

      a[a.VariableDeclaration_VariableDeclarators_DisallowIn = 8192] =
        "VariableDeclaration_VariableDeclarators_DisallowIn";

      a[a.ArgumentList_AssignmentExpressions = 16384] = "ArgumentList_AssignmentExpressions";

      a[a.ObjectLiteralExpression_PropertyAssignments = 32768] = "ObjectLiteralExpression_PropertyAssignments";

      a[a.ArrayLiteralExpression_AssignmentExpressions = 65536] = "ArrayLiteralExpression_AssignmentExpressions";

      a[a.ParameterList_Parameters = 1 << 17] = "ParameterList_Parameters";

      a[a.TypeArgumentList_Types = 1 << 18] = "TypeArgumentList_Types";

      a[a.TypeParameterList_TypeParameters = 1 << 19] = "TypeParameterList_TypeParameters";

      a[a.FirstListParsingState = a.SourceUnit_ModuleElements] = "FirstListParsingState";

      a[a.LastListParsingState = a.TypeArgumentList_Types] = "LastListParsingState";
    })(d || (d = {}));
    var e = function() {
      function a(a) {
        this._elements = [];

        this._index = 0;

        this._pinCount = 0;

        a.insertChildrenInto(this._elements, 0);
      }
      a.prototype.isFinished = function() {
        return this._index === this._elements.length;
      };

      a.prototype.currentElement = function() {
        return this.isFinished() ? null : this._elements[this._index];
      };

      a.prototype.currentNode = function() {
        var a = this.currentElement();
        return a !== null && a.isNode() ? a : null;
      };

      a.prototype.moveToFirstChild = function() {
        if (this.isFinished()) return;
        var a = this._elements[this._index];
        if (a.isToken()) return;
        var b = a;
        this._elements.splice(this._index, 1);

        b.insertChildrenInto(this._elements, this._index);
      };

      a.prototype.moveToNextSibling = function() {
        if (this.isFinished()) return;
        if (this._pinCount > 0) {
          this._index++;
          return;
        }
        this._elements.shift();
      };

      a.prototype.getAndPinCursorIndex = function() {
        this._pinCount++;

        return this._index;
      };

      a.prototype.releaseAndUnpinCursorIndex = function(a) {
        this._pinCount--;

        this._pinCount !== 0;
      };

      a.prototype.rewindToPinnedCursorIndex = function(a) {
        this._index = a;
      };

      a.prototype.pinCount = function() {
        return this._pinCount;
      };

      a.prototype.moveToFirstToken = function() {
        var a;
        while (!this.isFinished()) {
          a = this.currentElement();
          if (a.isNode()) {
            this.moveToFirstChild();
            continue;
          }
          return;
        }
      };

      a.prototype.currentToken = function() {
        this.moveToFirstToken();
        if (this.isFinished()) {
          return null;
        }
        var a = this.currentElement();
        return a;
      };

      a.prototype.peekToken = function(a) {
        this.moveToFirstToken();
        var b = this.getAndPinCursorIndex();
        try {
          for (var c = 0; c < a; c++) {
            this.moveToNextSibling();
            this.moveToFirstToken();
          }
          return this.currentToken();
        } finally {
          this.rewindToPinnedCursorIndex(b);

          this.releaseAndUnpinCursorIndex(b);
        }
      };

      return a;
    }();

    var f = function() {
      function b(b, c, d) {
        this._previousToken = null;

        this._absolutePosition = 0;

        this._tokenDiagnostics = [];

        this.rewindPointPool = [];

        this.rewindPointPoolCount = 0;

        this.slidingWindow = new a.SlidingWindow(this, a.ArrayUtilities.createArray(32, null), null);

        this.scanner = new a.Scanner(b, c, d);
      }
      b.prototype.languageVersion = function() {
        return this.scanner.languageVersion();
      };

      b.prototype.currentNode = function() {
        return null;
      };

      b.prototype.moveToNextNode = function() {
        throw a.Errors.invalidOperation();
      };

      b.prototype.absolutePosition = function() {
        return this._absolutePosition;
      };

      b.prototype.previousToken = function() {
        return this._previousToken;
      };

      b.prototype.tokenDiagnostics = function() {
        return this._tokenDiagnostics;
      };

      b.prototype.getOrCreateRewindPoint = function() {
        if (this.rewindPointPoolCount === 0) {
          return {};
        }
        this.rewindPointPoolCount--;
        var a = this.rewindPointPool[this.rewindPointPoolCount];
        this.rewindPointPool[this.rewindPointPoolCount] = null;

        return a;
      };

      b.prototype.getRewindPoint = function() {
        var a = this.slidingWindow.getAndPinAbsoluteIndex();

        var b = this.getOrCreateRewindPoint();
        b.slidingWindowIndex = a;

        b.previousToken = this._previousToken;

        b.absolutePosition = this._absolutePosition;

        b.pinCount = this.slidingWindow.pinCount();

        return b;
      };

      b.prototype.isPinned = function() {
        return this.slidingWindow.pinCount() > 0;
      };

      b.prototype.rewind = function(a) {
        this.slidingWindow.rewindToPinnedIndex(a.slidingWindowIndex);

        this._previousToken = a.previousToken;

        this._absolutePosition = a.absolutePosition;
      };

      b.prototype.releaseRewindPoint = function(a) {
        this.slidingWindow.releaseAndUnpinAbsoluteIndex(a.absoluteIndex);

        this.rewindPointPool[this.rewindPointPoolCount] = a;

        this.rewindPointPoolCount++;
      };

      b.prototype.fetchMoreItems = function(a, b, c, d, e) {
        c[d] = this.scanner.scan(this._tokenDiagnostics, a);

        return 1;
      };

      b.prototype.peekToken = function(a) {
        return this.slidingWindow.peekItemN(a);
      };

      b.prototype.moveToNextToken = function() {
        var a = this.currentToken();
        this._absolutePosition += a.fullWidth();

        this._previousToken = a;

        this.slidingWindow.moveToNextItem();
      };

      b.prototype.currentToken = function() {
        return this.slidingWindow.currentItem(!1);
      };

      b.prototype.removeDiagnosticsOnOrAfterPosition = function(a) {
        var b = this._tokenDiagnostics.length;
        while (b > 0) {
          var c = this._tokenDiagnostics[b - 1];
          if (!(c.start() >= a)) break;
          b--;
        }
        this._tokenDiagnostics.length = b;
      };

      b.prototype.resetToPosition = function(a, b) {
        this._absolutePosition = a;

        this._previousToken = b;

        this.removeDiagnosticsOnOrAfterPosition(a);

        this.slidingWindow.disgardAllItemsFromCurrentIndexOnwards();

        this.scanner.setAbsoluteIndex(a);
      };

      b.prototype.currentTokenAllowingRegularExpression = function() {
        this.resetToPosition(this._absolutePosition, this._previousToken);
        var a = this.slidingWindow.currentItem(!0);
        return a;
      };

      return b;
    }();

    var g = function() {
      function b(a, c, d) {
        this._changeDelta = 0;
        var g = a.sourceUnit();
        this._oldSourceUnitCursor = new e(g);

        this._changeRange = b.extendToAffectedRange(c, g);

        this._normalParserSource = new f(a.fileName(), d, a.languageVersion());
      }
      b.extendToAffectedRange = function(b, c) {
        var d = 1;

        var e = b.span().start();
        for (var f = 0; e > 0 && f <= d; f++) {
          var g = c.findToken(e);

          var h = g.fullStart();
          e = a.MathPrototype.max(0, h - 1);
        }
        var i = a.TextSpan.fromBounds(e, b.span().end());

        var j = b.newLength() + (b.span().start() - e);
        return new a.TextChangeRange(i, j);
      };

      b.prototype.languageVersion = function() {
        return this._normalParserSource.languageVersion();
      };

      b.prototype.absolutePosition = function() {
        return this._normalParserSource.absolutePosition();
      };

      b.prototype.previousToken = function() {
        return this._normalParserSource.previousToken();
      };

      b.prototype.tokenDiagnostics = function() {
        return this._normalParserSource.tokenDiagnostics();
      };

      b.prototype.getRewindPoint = function() {
        var a = this._normalParserSource.getRewindPoint();

        var b = this._oldSourceUnitCursor.getAndPinCursorIndex();
        a.changeDelta = this._changeDelta;

        a.changeRange = this._changeRange;

        a.oldSourceUnitCursorIndex = b;

        return a;
      };

      b.prototype.rewind = function(a) {
        this._changeRange = a.changeRange;

        this._changeDelta = a.changeDelta;

        this._oldSourceUnitCursor.rewindToPinnedCursorIndex(a.oldSourceUnitCursorIndex);

        this._normalParserSource.rewind(a);
      };

      b.prototype.releaseRewindPoint = function(a) {
        this._oldSourceUnitCursor.releaseAndUnpinCursorIndex(a.oldSourceUnitCursorIndex);

        this._normalParserSource.releaseRewindPoint(a);
      };

      b.prototype.canReadFromOldSourceUnit = function() {
        return this._normalParserSource.isPinned() ? !1 : this._changeRange !== null && this._changeRange.newSpan()
          .intersectsWithPosition(this.absolutePosition()) ? !1 : (this.syncCursorToNewTextIfBehind(), this._changeDelta ===
            0 && !this._oldSourceUnitCursor.isFinished());
      };

      b.prototype.currentNode = function() {
        return this.canReadFromOldSourceUnit() ? this.tryGetNodeFromOldSourceUnit() : null;
      };

      b.prototype.currentToken = function() {
        if (this.canReadFromOldSourceUnit()) {
          var a = this.tryGetTokenFromOldSourceUnit();
          if (a !== null) {
            return a;
          }
        }
        return this._normalParserSource.currentToken();
      };

      b.prototype.currentTokenAllowingRegularExpression = function() {
        return this._normalParserSource.currentTokenAllowingRegularExpression();
      };

      b.prototype.syncCursorToNewTextIfBehind = function() {
        for (;;) {
          if (this._oldSourceUnitCursor.isFinished()) break;
          if (this._changeDelta >= 0) break;
          var a = this._oldSourceUnitCursor.currentElement();
          if (a.isNode() && a.fullWidth() > Math.abs(this._changeDelta)) {
            this._oldSourceUnitCursor.moveToFirstChild();
          } else {
            this._oldSourceUnitCursor.moveToNextSibling();
            this._changeDelta += a.fullWidth();
          }
        }
      };

      b.prototype.intersectsWithChangeRangeSpanInOriginalText = function(a, b) {
        return this._changeRange !== null && this._changeRange.span().intersectsWith(a, b);
      };

      b.prototype.tryGetNodeFromOldSourceUnit = function() {
        for (;;) {
          var a = this._oldSourceUnitCursor.currentNode();
          if (a === null) {
            return null;
          }
          if (!this.intersectsWithChangeRangeSpanInOriginalText(this.absolutePosition(), a.fullWidth()) && !a.isIncrementallyUnusable()) {
            return a;
          }
          this._oldSourceUnitCursor.moveToFirstChild();
        }
      };

      b.prototype.canReuseTokenFromOldSourceUnit = function(a, b) {
        return b !== null && !this.intersectsWithChangeRangeSpanInOriginalText(a, b.fullWidth()) && !b.isIncrementallyUnusable() ? !
          0 : !1;
      };

      b.prototype.tryGetTokenFromOldSourceUnit = function() {
        var a = this._oldSourceUnitCursor.currentToken();
        return this.canReuseTokenFromOldSourceUnit(this.absolutePosition(), a) ? a : null;
      };

      b.prototype.peekToken = function(a) {
        if (this.canReadFromOldSourceUnit()) {
          var b = this.tryPeekTokenFromOldSourceUnit(a);
          if (b !== null) {
            return b;
          }
        }
        return this._normalParserSource.peekToken(a);
      };

      b.prototype.tryPeekTokenFromOldSourceUnit = function(a) {
        var b = this.absolutePosition();
        for (var c = 0; c < a; c++) {
          var d = this._oldSourceUnitCursor.peekToken(c);
          if (!this.canReuseTokenFromOldSourceUnit(b, d)) {
            return null;
          }
          b += d.fullWidth();
        }
        var e = this._oldSourceUnitCursor.peekToken(a);
        return this.canReuseTokenFromOldSourceUnit(b, e) ? e : null;
      };

      b.prototype.moveToNextNode = function() {
        var a = this._oldSourceUnitCursor.currentElement();

        var b = this._oldSourceUnitCursor.currentNode();
        this._oldSourceUnitCursor.moveToNextSibling();
        var c = this.absolutePosition() + b.fullWidth();

        var d = b.lastToken();
        this._normalParserSource.resetToPosition(c, d);

        this._changeRange === null;
      };

      b.prototype.moveToNextToken = function() {
        var a = this.currentToken();
        if (this._oldSourceUnitCursor.currentToken() === a) {
          this._oldSourceUnitCursor.moveToNextSibling();
          var b = this.absolutePosition() + a.fullWidth();

          var c = a;
          this._normalParserSource.resetToPosition(b, c);

          this._changeRange === null;
        } else {
          this._changeDelta -= a.fullWidth();

          this._normalParserSource.moveToNextToken();
          if (this._changeRange !== null) {
            var d = this._changeRange.newSpan();
            if (this.absolutePosition() >= d.end()) {
              this._changeDelta += this._changeRange.newLength() - this._changeRange.span().length();
              this._changeRange = null;
            }
          }
        }
      };

      return b;
    }();

    var h = function() {
      function b(b, c, d, e) {
        this.listParsingState = 0;

        this.isInStrictMode = !1;

        this.diagnostics = [];

        this.factory = a.Syntax.normalModeFactory;

        this.mergeTokensStorage = [];

        this.arrayPool = [];

        this.fileName = b;

        this.lineMap = c;

        this.source = d;

        this.parseOptions = e;
      }
      b.prototype.getRewindPoint = function() {
        var a = this.source.getRewindPoint();
        a.diagnosticsCount = this.diagnostics.length;

        a.isInStrictMode = this.isInStrictMode;

        a.listParsingState = this.listParsingState;

        return a;
      };

      b.prototype.rewind = function(a) {
        this.source.rewind(a);

        this.diagnostics.length = a.diagnosticsCount;
      };

      b.prototype.releaseRewindPoint = function(a) {
        this.source.releaseRewindPoint(a);
      };

      b.prototype.currentTokenStart = function() {
        return this.source.absolutePosition() + this.currentToken().leadingTriviaWidth();
      };

      b.prototype.previousTokenStart = function() {
        return this.previousToken() === null ? 0 : this.source.absolutePosition() - this.previousToken().fullWidth() +
          this.previousToken().leadingTriviaWidth();
      };

      b.prototype.previousTokenEnd = function() {
        return this.previousToken() === null ? 0 : this.previousTokenStart() + this.previousToken().width();
      };

      b.prototype.currentNode = function() {
        var a = this.source.currentNode();
        return a === null || a.parsedInStrictMode() !== this.isInStrictMode ? null : a;
      };

      b.prototype.currentToken = function() {
        return this.source.currentToken();
      };

      b.prototype.currentTokenAllowingRegularExpression = function() {
        return this.source.currentTokenAllowingRegularExpression();
      };

      b.prototype.peekToken = function(a) {
        return this.source.peekToken(a);
      };

      b.prototype.eatAnyToken = function() {
        var a = this.currentToken();
        this.moveToNextToken();

        return a;
      };

      b.prototype.moveToNextToken = function() {
        this.source.moveToNextToken();
      };

      b.prototype.previousToken = function() {
        return this.source.previousToken();
      };

      b.prototype.eatNode = function() {
        var a = this.source.currentNode();
        this.source.moveToNextNode();

        return a;
      };

      b.prototype.eatToken = function(a) {
        var b = this.currentToken();
        return b.tokenKind === a ? (this.moveToNextToken(), b) : this.createMissingToken(a, b);
      };

      b.prototype.tryEatToken = function(a) {
        return this.currentToken().tokenKind === a ? this.eatToken(a) : null;
      };

      b.prototype.tryEatKeyword = function(a) {
        return this.currentToken().tokenKind === a ? this.eatKeyword(a) : null;
      };

      b.prototype.eatKeyword = function(a) {
        var b = this.currentToken();
        return b.tokenKind === a ? (this.moveToNextToken(), b) : this.createMissingToken(a, b);
      };

      b.prototype.isIdentifier = function(a) {
        var b = a.tokenKind;
        return b === 11 ? !0 : b >= 51 ? b <= 59 ? !this.isInStrictMode : b <= 70 : !1;
      };

      b.prototype.eatIdentifierNameToken = function() {
        var b = this.currentToken();
        return b.tokenKind === 11 ? (this.moveToNextToken(), b) : a.SyntaxFacts.isAnyKeyword(b.tokenKind) ? (this.moveToNextToken(),
          a.Syntax.convertToIdentifierName(b)) : this.createMissingToken(11, b);
      };

      b.prototype.eatIdentifierToken = function() {
        var b = this.currentToken();
        return this.isIdentifier(b) ? (this.moveToNextToken(), b.tokenKind === 11 ? b : a.Syntax.convertToIdentifierName(
          b)) : this.createMissingToken(11, b);
      };

      b.prototype.canEatAutomaticSemicolon = function(a) {
        var b = this.currentToken();
        return b.tokenKind === 10 ? !0 : b.tokenKind === 72 ? !0 : a ? !0 : this.previousToken() !== null && this.previousToken()
          .hasTrailingNewLine() ? !0 : !1;
      };

      b.prototype.canEatExplicitOrAutomaticSemicolon = function(a) {
        var b = this.currentToken();
        return b.tokenKind === 79 ? !0 : this.canEatAutomaticSemicolon(a);
      };

      b.prototype.eatExplicitOrAutomaticSemicolon = function(b) {
        var c = this.currentToken();
        if (c.tokenKind === 79) {
          return this.eatToken(79);
        }
        if (this.canEatAutomaticSemicolon(b)) {
          var d = a.Syntax.emptyToken(79);
          this.parseOptions.allowAutomaticSemicolonInsertion() || this.addDiagnostic(new a.SyntaxDiagnostic(this.fileName,
            this.previousTokenEnd(), 0, 11, null));

          return d;
        }
        return this.eatToken(79);
      };

      b.prototype.isKeyword = function(b) {
        if (b >= a.SyntaxKind.FirstKeyword) {
          if (b <= 50) {
            return !0;
          }
          if (this.isInStrictMode) {
            return b <= 59;
          }
        }
        return !1;
      };

      b.prototype.createMissingToken = function(b, c) {
        var d = this.getExpectedTokenDiagnostic(b, c);
        this.addDiagnostic(d);

        return a.Syntax.emptyToken(b);
      };

      b.prototype.getExpectedTokenDiagnostic = function(b, c) {
        var d = this.currentToken();
        return a.SyntaxFacts.isAnyKeyword(b) || a.SyntaxFacts.isAnyPunctuation(b) ? new a.SyntaxDiagnostic(this.fileName,
          this.currentTokenStart(), d.width(), 9, [a.SyntaxFacts.getText(b)]) : c !== null && a.SyntaxFacts.isAnyKeyword(
          c.tokenKind) ? new a.SyntaxDiagnostic(this.fileName, this.currentTokenStart(), d.width(), 10, [a.SyntaxFacts
          .getText(c.tokenKind)
        ]) : new a.SyntaxDiagnostic(this.fileName, this.currentTokenStart(), d.width(), 7, null);
      };

      b.getPrecedence = function(b) {
        switch (b) {
          case 172:
            return 1;
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
            return 2;
          case 185:
            return 3;
          case 186:
            return 5;
          case 187:
            return 6;
          case 188:
            return 7;
          case 189:
            return 8;
          case 190:
            return 9;
          case 191:
          case 192:
          case 193:
          case 194:
            return 10;
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
            return 11;
          case 201:
          case 202:
          case 203:
            return 12;
          case 207:
          case 208:
            return 13;
          case 204:
          case 205:
          case 206:
            return 14;
          case 163:
          case 164:
          case 165:
          case 166:
          case 169:
          case 170:
          case 171:
          case 167:
          case 168:
            return 15;
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.addSkippedTokenAfterNodeOrToken = function(b, c) {
        if (b.isToken()) {
          return this.addSkippedTokenAfterToken(b, c);
        }
        if (b.isNode()) {
          return this.addSkippedTokenAfterNode(b, c);
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.addSkippedTokenAfterNode = function(a, b) {
        var c = a.lastToken();

        var d = this.addSkippedTokenAfterToken(c, b);
        return a.replaceToken(c, d);
      };

      b.prototype.addSkippedTokensBeforeNode = function(a, b) {
        if (b.length > 0) {
          var c = a.firstToken();

          var d = this.addSkippedTokensBeforeToken(c, b);
          return a.replaceToken(c, d);
        }
        return a;
      };

      b.prototype.addSkippedTokensBeforeToken = function(b, c) {
        var d = [];
        for (var e = 0, f = c.length; e < f; e++) {
          this.addSkippedTokenToTriviaArray(d, c[e]);
        }
        this.addTriviaTo(b.leadingTrivia(), d);

        this.returnArray(c);

        return b.withLeadingTrivia(a.Syntax.triviaList(d));
      };

      b.prototype.addSkippedTokensAfterToken = function(b, c) {
        if (c.length === 0) {
          this.returnArray(c);
          return b;
        }
        var d = b.trailingTrivia().toArray();
        for (var e = 0, f = c.length; e < f; e++) {
          this.addSkippedTokenToTriviaArray(d, c[e]);
        }
        this.returnArray(c);

        return b.withTrailingTrivia(a.Syntax.triviaList(d));
      };

      b.prototype.addSkippedTokenAfterToken = function(b, c) {
        var d = b.trailingTrivia().toArray();
        this.addSkippedTokenToTriviaArray(d, c);

        return b.withTrailingTrivia(a.Syntax.triviaList(d));
      };

      b.prototype.addSkippedTokenToTriviaArray = function(b, c) {
        this.addTriviaTo(c.leadingTrivia(), b);
        var d = c.withLeadingTrivia(a.Syntax.emptyTriviaList).withTrailingTrivia(a.Syntax.emptyTriviaList);
        b.push(a.Syntax.skippedTokenTrivia(d));

        this.addTriviaTo(c.trailingTrivia(), b);
      };

      b.prototype.addTriviaTo = function(a, b) {
        for (var c = 0, d = a.count(); c < d; c++) {
          b.push(a.syntaxTriviaAt(c));
        }
      };

      b.prototype.parseSyntaxTree = function(b) {
        var c = this.parseSourceUnit();

        var d = this.source.tokenDiagnostics().concat(this.diagnostics);
        d.sort(function(a, b) {
          return a.start() - b.start();
        });

        return new a.SyntaxTree(c, b, d, this.fileName, this.lineMap, this.source.languageVersion(), this.parseOptions);
      };

      b.prototype.setStrictMode = function(b) {
        this.isInStrictMode = b;

        this.factory = b ? a.Syntax.strictModeFactory : a.Syntax.normalModeFactory;
      };

      b.prototype.parseSourceUnit = function() {
        var a = this.isInStrictMode;

        var c = this.parseSyntaxList(1, b.updateStrictModeState);

        var d = c.list;
        this.setStrictMode(a);
        var e = this.factory.sourceUnit(d, this.currentToken());
        e = this.addSkippedTokensBeforeNode(e, c.skippedTokens);

        return e;
      };

      b.updateStrictModeState = function(b, c) {
        if (!b.isInStrictMode) {
          for (var d = 0; d < c.length; d++) {
            var e = c[d];
            if (!a.SyntaxFacts.isDirectivePrologueElement(e)) return;
          }
          b.setStrictMode(a.SyntaxFacts.isUseStrictDirective(c[c.length - 1]));
        }
      };

      b.prototype.isModuleElement = function(a) {
        return this.currentNode() !== null && this.currentNode().isModuleElement() ? !0 : this.isImportDeclaration() ||
          this.isExportAssignment() || this.isModuleDeclaration() || this.isInterfaceDeclaration() || this.isClassDeclaration() ||
          this.isEnumDeclaration() || this.isStatement(a);
      };

      b.prototype.parseModuleElement = function() {
        if (this.currentNode() !== null && this.currentNode().isModuleElement()) {
          return this.eatNode();
        }
        if (this.isImportDeclaration()) {
          return this.parseImportDeclaration();
        }
        if (this.isExportAssignment()) {
          return this.parseExportAssignment();
        }
        if (this.isModuleDeclaration()) {
          return this.parseModuleDeclaration();
        }
        if (this.isInterfaceDeclaration()) {
          return this.parseInterfaceDeclaration();
        }
        if (this.isClassDeclaration()) {
          return this.parseClassDeclaration();
        }
        if (this.isEnumDeclaration()) {
          return this.parseEnumDeclaration();
        }
        if (this.isStatement(!1)) {
          return this.parseStatement();
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.isImportDeclaration = function() {
        return this.currentToken().tokenKind === 49;
      };

      b.prototype.parseImportDeclaration = function() {
        var a = this.eatKeyword(49);

        var b = this.eatIdentifierToken();

        var c = this.eatToken(108);

        var d = this.parseModuleReference();

        var e = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.importDeclaration(a, b, c, d, e);
      };

      b.prototype.isExportAssignment = function() {
        return this.currentToken().tokenKind === 47 && this.peekToken(1).tokenKind === 108;
      };

      b.prototype.parseExportAssignment = function() {
        var a = this.eatKeyword(47);

        var b = this.eatToken(108);

        var c = this.eatIdentifierToken();

        var d = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.exportAssignment(a, b, c, d);
      };

      b.prototype.parseModuleReference = function() {
        return this.isExternalModuleReference() ? this.parseExternalModuleReference() : this.parseModuleNameModuleReference();
      };

      b.prototype.isExternalModuleReference = function() {
        var a = this.currentToken();
        return a.tokenKind === 66 || a.tokenKind === 67 ? this.peekToken(1).tokenKind === 73 : !1;
      };

      b.prototype.parseExternalModuleReference = function() {
        var a = this.eatAnyToken();

        var b = this.eatToken(73);

        var c = this.eatToken(14);

        var d = this.eatToken(74);
        return this.factory.externalModuleReference(a, b, c, d);
      };

      b.prototype.parseModuleNameModuleReference = function() {
        var a = this.parseName();
        return this.factory.moduleNameModuleReference(a);
      };

      b.prototype.parseIdentifierName = function() {
        var a = this.eatIdentifierNameToken();
        return a;
      };

      b.prototype.isName = function() {
        return this.isIdentifier(this.currentToken());
      };

      b.prototype.tryParseTypeArgumentList = function(a) {
        if (this.currentToken().kind() !== 81) {
          return null;
        }
        var b;

        var c;

        var d;

        var e;
        if (!a) {
          b = this.eatToken(81);
          d = this.parseSeparatedSyntaxList(262144);
          e = d.list;
          b = this.addSkippedTokensAfterToken(b, d.skippedTokens);
          c = this.eatToken(82);
          return this.factory.typeArgumentList(b, e, c);
        }
        var f = this.getRewindPoint();
        try {
          b = this.eatToken(81);

          d = this.parseSeparatedSyntaxList(262144);

          e = d.list;

          b = this.addSkippedTokensAfterToken(b, d.skippedTokens);

          c = this.eatToken(82);

          return c.fullWidth() === 0 || !this.canFollowTypeArgumentListInExpression(this.currentToken().kind()) ? (
            this.rewind(f), null) : this.factory.typeArgumentList(b, e, c);
        } finally {
          this.releaseRewindPoint(f);
        }
      };

      b.prototype.canFollowTypeArgumentListInExpression = function(a) {
        switch (a) {
          case 73:
          case 77:
          case 74:
          case 76:
          case 107:
          case 79:
          case 80:
          case 106:
          case 85:
          case 88:
          case 87:
          case 89:
          case 104:
          case 105:
          case 101:
          case 99:
          case 100:
          case 72:
          case 10:
            return !0;
          default:
            return !1;
        }
      };

      b.prototype.parseName = function() {
        var b = this.isIdentifier(this.currentToken());

        var c = this.eatIdentifierToken();
        while (b && this.currentToken().tokenKind === 77) {
          var d = this.eatToken(77);

          var e = this.currentToken();

          var f;
          if (a.SyntaxFacts.isAnyKeyword(e.tokenKind) && this.previousToken().hasTrailingNewLine() && !e.hasTrailingNewLine() &&
            a.SyntaxFacts.isIdentifierNameOrAnyKeyword(this.peekToken(1))) {
            f = this.createMissingToken(11, e);
          } else {
            f = this.eatIdentifierNameToken();
          }

          c = this.factory.qualifiedName(c, d, f);

          b = f.fullWidth() > 0;
        }
        return c;
      };

      b.prototype.isEnumDeclaration = function() {
        var a = this.modifierCount();
        return a > 0 && this.peekToken(a).tokenKind === 46 ? !0 : this.currentToken().tokenKind === 46 && this.isIdentifier(
          this.peekToken(1));
      };

      b.prototype.parseEnumDeclaration = function() {
        var b = this.parseModifiers();

        var c = this.eatKeyword(46);

        var d = this.eatIdentifierToken();

        var e = this.eatToken(71);

        var f = a.Syntax.emptySeparatedList;
        if (e.width() > 0) {
          var g = this.parseSeparatedSyntaxList(256);
          f = g.list;

          e = this.addSkippedTokensAfterToken(e, g.skippedTokens);
        }
        var h = this.eatToken(72);
        return this.factory.enumDeclaration(b, c, d, e, f, h);
      };

      b.prototype.isEnumElement = function(a) {
        return this.currentNode() !== null && this.currentNode().kind() === 243 ? !0 : this.isPropertyName(this.currentToken(),
          a);
      };

      b.prototype.parseEnumElement = function() {
        if (this.currentNode() !== null && this.currentNode().kind() === 243) {
          return this.eatNode();
        }
        var a = this.eatPropertyName();

        var b = null;
        this.isEqualsValueClause(!1) && (b = this.parseEqualsValueClause(!0));

        return this.factory.enumElement(a, b);
      };

      b.isModifier = function(a) {
        switch (a.tokenKind) {
          case 57:
          case 55:
          case 58:
          case 47:
          case 64:
            return !0;
          default:
            return !1;
        }
      };

      b.prototype.modifierCount = function() {
        var a = 0;
        for (;;) {
          if (b.isModifier(this.peekToken(a))) {
            a++;
            continue;
          }
          break;
        }
        return a;
      };

      b.prototype.parseModifiers = function() {
        var c = this.getArray();
        for (;;) {
          if (b.isModifier(this.currentToken())) {
            c.push(this.eatAnyToken());
            continue;
          }
          break;
        }
        var d = a.Syntax.list(c);
        this.returnZeroOrOneLengthArray(c);

        return d;
      };

      b.prototype.isClassDeclaration = function() {
        var a = this.modifierCount();
        return a > 0 && this.peekToken(a).tokenKind === 44 ? !0 : this.currentToken().tokenKind === 44 && this.isIdentifier(
          this.peekToken(1));
      };

      b.prototype.parseHeritageClauses = function() {
        var b = a.Syntax.emptyList;
        if (this.isHeritageClause()) {
          var c = this.parseSyntaxList(1024);
          b = c.list;

          a.Debug.assert(c.skippedTokens.length === 0);
        }
        return b;
      };

      b.prototype.parseClassDeclaration = function() {
        var b = this.parseModifiers();

        var c = this.eatKeyword(44);

        var d = this.eatIdentifierToken();

        var e = this.parseOptionalTypeParameterList(!1);

        var f = this.parseHeritageClauses();

        var g = this.eatToken(71);

        var h = a.Syntax.emptyList;
        if (g.width() > 0) {
          var i = this.parseSyntaxList(2);
          h = i.list;

          g = this.addSkippedTokensAfterToken(g, i.skippedTokens);
        }
        var j = this.eatToken(72);
        return this.factory.classDeclaration(b, c, d, e, f, g, h, j);
      };

      b.prototype.isConstructorDeclaration = function() {
        return this.currentToken().tokenKind === 63;
      };

      b.isPublicOrPrivateKeyword = function(a) {
        return a.tokenKind === 57 || a.tokenKind === 55;
      };

      b.prototype.isMemberAccessorDeclaration = function(a) {
        var b = this.modifierCount();
        return this.peekToken(b).tokenKind !== 65 && this.peekToken(b).tokenKind !== 69 ? !1 : (b++, this.isPropertyName(
          this.peekToken(b), a));
      };

      b.prototype.parseMemberAccessorDeclaration = function() {
        var b = this.parseModifiers();
        if (this.currentToken().tokenKind === 65) {
          return this.parseGetMemberAccessorDeclaration(b);
        }
        if (this.currentToken().tokenKind === 69) {
          return this.parseSetMemberAccessorDeclaration(b);
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.parseGetMemberAccessorDeclaration = function(a) {
        var b = this.eatKeyword(65);

        var c = this.eatPropertyName();

        var d = this.parseParameterList();

        var e = this.parseOptionalTypeAnnotation(!1);

        var f = this.parseBlock(!1, !1);
        return this.factory.getMemberAccessorDeclaration(a, b, c, d, e, f);
      };

      b.prototype.parseSetMemberAccessorDeclaration = function(a) {
        var b = this.eatKeyword(69);

        var c = this.eatPropertyName();

        var d = this.parseParameterList();

        var e = this.parseBlock(!1, !1);
        return this.factory.setMemberAccessorDeclaration(a, b, c, d, e);
      };

      b.prototype.isClassElement = function(a) {
        return this.currentNode() !== null && this.currentNode().isClassElement() ? !0 : this.isConstructorDeclaration() ||
          this.isMemberFunctionDeclaration(a) || this.isMemberAccessorDeclaration(a) || this.isMemberVariableDeclaration(
            a) || this.isIndexSignature();
      };

      b.prototype.parseConstructorDeclaration = function() {
        var a = this.eatKeyword(63);

        var b = this.parseParameterList();

        var c = null;

        var d = null;
        this.isBlock() ? d = this.parseBlock(!1, !0) : c = this.eatExplicitOrAutomaticSemicolon(!1);

        return this.factory.constructorDeclaration(a, b, d, c);
      };

      b.prototype.isMemberFunctionDeclaration = function(a) {
        var c = 0;
        for (;;) {
          var d = this.peekToken(c);
          if (this.isPropertyName(d, a) && this.isCallSignature(c + 1)) {
            return !0;
          }
          if (b.isModifier(d)) {
            c++;
            continue;
          }
          return !1;
        }
      };

      b.prototype.parseMemberFunctionDeclaration = function() {
        var c = this.getArray();
        for (;;) {
          var d = this.currentToken();
          if (this.isPropertyName(d, !1) && this.isCallSignature(1)) break;
          a.Debug.assert(b.isModifier(d));

          c.push(this.eatAnyToken());
        }
        var e = a.Syntax.list(c);
        this.returnZeroOrOneLengthArray(c);
        var f = this.eatPropertyName();

        var g = this.parseCallSignature(!1);

        var h = this.tryAddUnexpectedEqualsGreaterThanToken(g);

        var i = g !== h;
        g = h;
        var j = null;

        var k = null;
        i || this.isBlock() ? j = this.parseBlock(i, !0) : k = this.eatExplicitOrAutomaticSemicolon(!1);

        return this.factory.memberFunctionDeclaration(e, f, g, j, k);
      };

      b.prototype.isDefinitelyMemberVariablePropertyName = function(b) {
        if (!a.SyntaxFacts.isAnyKeyword(this.peekToken(b).tokenKind)) {
          return !0;
        }
        switch (this.peekToken(b + 1).tokenKind) {
          case 79:
          case 108:
          case 107:
          case 72:
          case 10:
            return !0;
          default:
            return !1;
        }
      };

      b.prototype.isMemberVariableDeclaration = function(a) {
        var c = 0;
        for (;;) {
          var d = this.peekToken(c);
          if (this.isPropertyName(d, a) && this.isDefinitelyMemberVariablePropertyName(c)) {
            return !0;
          }
          if (b.isModifier(this.peekToken(c))) {
            c++;
            continue;
          }
          return !1;
        }
      };

      b.prototype.parseMemberVariableDeclaration = function() {
        var c = this.getArray();
        for (;;) {
          var d = this.currentToken();
          if (this.isPropertyName(d, !1) && this.isDefinitelyMemberVariablePropertyName(0)) break;
          a.Debug.assert(b.isModifier(d));

          c.push(this.eatAnyToken());
        }
        var e = a.Syntax.list(c);
        this.returnZeroOrOneLengthArray(c);
        var f = this.parseVariableDeclarator(!0, !0);

        var g = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.memberVariableDeclaration(e, f, g);
      };

      b.prototype.parseClassElement = function(b) {
        if (this.currentNode() !== null && this.currentNode().isClassElement()) {
          return this.eatNode();
        }
        if (this.isConstructorDeclaration()) {
          return this.parseConstructorDeclaration();
        }
        if (this.isMemberFunctionDeclaration(b)) {
          return this.parseMemberFunctionDeclaration();
        }
        if (this.isMemberAccessorDeclaration(b)) {
          return this.parseMemberAccessorDeclaration();
        }
        if (this.isMemberVariableDeclaration(b)) {
          return this.parseMemberVariableDeclaration();
        }
        if (this.isIndexSignature()) {
          return this.parseIndexSignature();
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.tryAddUnexpectedEqualsGreaterThanToken = function(b) {
        var c = this.currentToken();

        var d = c.tokenKind === 86;
        if (d) {
          var e = new a.SyntaxDiagnostic(this.fileName, this.currentTokenStart(), c.width(), 16, []);
          this.addDiagnostic(e);
          var f = this.eatAnyToken();
          return this.addSkippedTokenAfterNode(b, c);
        }
        return b;
      };

      b.prototype.isFunctionDeclaration = function() {
        var a = this.modifierCount();
        return this.peekToken(a).tokenKind === 27;
      };

      b.prototype.parseFunctionDeclaration = function() {
        var a = this.parseModifiers();

        var b = this.eatKeyword(27);

        var c = this.eatIdentifierToken();

        var d = this.parseCallSignature(!1);

        var e = this.tryAddUnexpectedEqualsGreaterThanToken(d);

        var f = d !== e;
        d = e;
        var g = null;

        var h = null;
        f || this.isBlock() ? h = this.parseBlock(f, !0) : g = this.eatExplicitOrAutomaticSemicolon(!1);

        return this.factory.functionDeclaration(a, b, c, d, h, g);
      };

      b.prototype.isModuleDeclaration = function() {
        var a = this.modifierCount();
        if (a > 0 && this.peekToken(a).tokenKind === 66) {
          return !0;
        }
        if (this.currentToken().tokenKind === 66) {
          var b = this.peekToken(1);
          return this.isIdentifier(b) || b.tokenKind === 14;
        }
        return !1;
      };

      b.prototype.parseModuleDeclaration = function() {
        var b = this.parseModifiers();

        var c = this.eatKeyword(66);

        var d = null;

        var e = null;
        if (this.currentToken().tokenKind === 14) {
          e = this.eatToken(14);
        } else {
          d = this.parseName();
        }
        var f = this.eatToken(71);

        var g = a.Syntax.emptyList;
        if (f.width() > 0) {
          var h = this.parseSyntaxList(4);
          g = h.list;

          f = this.addSkippedTokensAfterToken(f, h.skippedTokens);
        }
        var i = this.eatToken(72);
        return this.factory.moduleDeclaration(b, c, d, e, f, g, i);
      };

      b.prototype.isInterfaceDeclaration = function() {
        var a = this.modifierCount();
        return a > 0 && this.peekToken(a).tokenKind === 52 ? !0 : this.currentToken().tokenKind === 52 && this.isIdentifier(
          this.peekToken(1));
      };

      b.prototype.parseInterfaceDeclaration = function() {
        var a = this.parseModifiers();

        var b = this.eatKeyword(52);

        var c = this.eatIdentifierToken();

        var d = this.parseOptionalTypeParameterList(!1);

        var e = this.parseHeritageClauses();

        var f = this.parseObjectType();
        return this.factory.interfaceDeclaration(a, b, c, d, e, f);
      };

      b.prototype.parseObjectType = function() {
        var b = this.eatToken(71);

        var c = a.Syntax.emptySeparatedList;
        if (b.width() > 0) {
          var d = this.parseSeparatedSyntaxList(512);
          c = d.list;

          b = this.addSkippedTokensAfterToken(b, d.skippedTokens);
        }
        var e = this.eatToken(72);
        return this.factory.objectType(b, c, e);
      };

      b.prototype.isTypeMember = function(a) {
        return this.currentNode() !== null && this.currentNode().isTypeMember() ? !0 : this.isCallSignature(0) ||
          this.isConstructSignature() || this.isIndexSignature() || this.isMethodSignature(a) || this.isPropertySignature(
            a);
      };

      b.prototype.parseTypeMember = function() {
        if (this.currentNode() !== null && this.currentNode().isTypeMember()) {
          return this.eatNode();
        }
        if (this.isCallSignature(0)) {
          return this.parseCallSignature(!1);
        }
        if (this.isConstructSignature()) {
          return this.parseConstructSignature();
        }
        if (this.isIndexSignature()) {
          return this.parseIndexSignature();
        }
        if (this.isMethodSignature(!1)) {
          return this.parseMethodSignature();
        }
        if (this.isPropertySignature(!1)) {
          return this.parsePropertySignature();
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.parseConstructSignature = function() {
        var a = this.eatKeyword(31);

        var b = this.parseCallSignature(!1);
        return this.factory.constructSignature(a, b);
      };

      b.prototype.parseIndexSignature = function() {
        var a = this.eatToken(75);

        var b = this.parseParameter();

        var c = this.eatToken(76);

        var d = this.parseOptionalTypeAnnotation(!1);
        return this.factory.indexSignature(a, b, c, d);
      };

      b.prototype.parseMethodSignature = function() {
        var a = this.eatPropertyName();

        var b = this.tryEatToken(106);

        var c = this.parseCallSignature(!1);
        return this.factory.methodSignature(a, b, c);
      };

      b.prototype.parsePropertySignature = function() {
        var a = this.eatPropertyName();

        var b = this.tryEatToken(106);

        var c = this.parseOptionalTypeAnnotation(!1);
        return this.factory.propertySignature(a, b, c);
      };

      b.prototype.isCallSignature = function(a) {
        var b = this.peekToken(a).tokenKind;
        return b === 73 || b === 81;
      };

      b.prototype.isConstructSignature = function() {
        if (this.currentToken().tokenKind !== 31) {
          return !1;
        }
        var a = this.peekToken(1);
        return a.tokenKind === 81 || a.tokenKind === 73;
      };

      b.prototype.isIndexSignature = function() {
        return this.currentToken().tokenKind === 75;
      };

      b.prototype.isMethodSignature = function(a) {
        if (this.isPropertyName(this.currentToken(), a)) {
          if (this.isCallSignature(1)) {
            return !0;
          }
          if (this.peekToken(1).tokenKind === 106 && this.isCallSignature(2)) {
            return !0;
          }
        }
        return !1;
      };

      b.prototype.isPropertySignature = function(a) {
        var c = this.currentToken();
        return b.isModifier(c) && !c.hasTrailingNewLine() && this.isPropertyName(this.peekToken(1), a) ? !1 : this.isPropertyName(
          c, a);
      };

      b.prototype.isHeritageClause = function() {
        var a = this.currentToken();
        return a.tokenKind === 48 || a.tokenKind === 51;
      };

      b.prototype.isNotHeritageClauseTypeName = function() {
        return this.currentToken().tokenKind === 51 || this.currentToken().tokenKind === 48 ? this.isIdentifier(
          this.peekToken(1)) : !1;
      };

      b.prototype.isHeritageClauseTypeName = function() {
        return this.isName() ? !this.isNotHeritageClauseTypeName() : !1;
      };

      b.prototype.parseHeritageClause = function() {
        var b = this.eatAnyToken();
        a.Debug.assert(b.tokenKind === 48 || b.tokenKind === 51);
        var c = this.parseSeparatedSyntaxList(2048);

        var d = c.list;
        b = this.addSkippedTokensAfterToken(b, c.skippedTokens);

        return this.factory.heritageClause(b, d);
      };

      b.prototype.isStatement = function(b) {
        if (this.currentNode() !== null && this.currentNode().isStatement()) {
          return !0;
        }
        switch (this.currentToken().tokenKind) {
          case 57:
          case 55:
          case 58:
            var c = this.peekToken(1);
            if (a.SyntaxFacts.isIdentifierNameOrAnyKeyword(c)) {
              return !1;
            }
        }
        return this.isVariableStatement() || this.isLabeledStatement() || this.isFunctionDeclaration() || this.isIfStatement() ||
          this.isBlock() || this.isExpressionStatement() || this.isReturnStatement() || this.isSwitchStatement() ||
          this.isThrowStatement() || this.isBreakStatement() || this.isContinueStatement() || this.isForOrForInStatement() ||
          this.isEmptyStatement(b) || this.isWhileStatement() || this.isWithStatement() || this.isDoStatement() ||
          this.isTryStatement() || this.isDebuggerStatement();
      };

      b.prototype.parseStatement = function() {
        return this.currentNode() !== null && this.currentNode().isStatement() ? this.eatNode() : this.isVariableStatement() ?
          this.parseVariableStatement() : this.isLabeledStatement() ? this.parseLabeledStatement() : this.isFunctionDeclaration() ?
          this.parseFunctionDeclaration() : this.isIfStatement() ? this.parseIfStatement() : this.isBlock() ? this.parseBlock(!
            1, !1) : this.isReturnStatement() ? this.parseReturnStatement() : this.isSwitchStatement() ? this.parseSwitchStatement() :
          this.isThrowStatement() ? this.parseThrowStatement() : this.isBreakStatement() ? this.parseBreakStatement() :
          this.isContinueStatement() ? this.parseContinueStatement() : this.isForOrForInStatement() ? this.parseForOrForInStatement() :
          this.isEmptyStatement(!1) ? this.parseEmptyStatement() : this.isWhileStatement() ? this.parseWhileStatement() :
          this.isWithStatement() ? this.parseWithStatement() : this.isDoStatement() ? this.parseDoStatement() :
          this.isTryStatement() ? this.parseTryStatement() : this.isDebuggerStatement() ? this.parseDebuggerStatement() :
          this.parseExpressionStatement();
      };

      b.prototype.isDebuggerStatement = function() {
        return this.currentToken().tokenKind === 19;
      };

      b.prototype.parseDebuggerStatement = function() {
        var a = this.eatKeyword(19);

        var b = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.debuggerStatement(a, b);
      };

      b.prototype.isDoStatement = function() {
        return this.currentToken().tokenKind === 22;
      };

      b.prototype.parseDoStatement = function() {
        var a = this.eatKeyword(22);

        var b = this.parseStatement();

        var c = this.eatKeyword(42);

        var d = this.eatToken(73);

        var e = this.parseExpression(!0);

        var f = this.eatToken(74);

        var g = this.eatExplicitOrAutomaticSemicolon(!0);
        return this.factory.doStatement(a, b, c, d, e, f, g);
      };

      b.prototype.isLabeledStatement = function() {
        return this.isIdentifier(this.currentToken()) && this.peekToken(1).tokenKind === 107;
      };

      b.prototype.parseLabeledStatement = function() {
        var a = this.eatIdentifierToken();

        var b = this.eatToken(107);

        var c = this.parseStatement();
        return this.factory.labeledStatement(a, b, c);
      };

      b.prototype.isTryStatement = function() {
        return this.currentToken().tokenKind === 38;
      };

      b.prototype.parseTryStatement = function() {
        var a = this.eatKeyword(38);

        var b = this.listParsingState;
        this.listParsingState |= 64;
        var c = this.parseBlock(!1, !1);
        this.listParsingState = b;
        var d = null;
        if (this.isCatchClause()) {
          d = this.parseCatchClause();
        }
        var e = null;
        if (d === null || this.isFinallyClause()) {
          e = this.parseFinallyClause();
        }
        return this.factory.tryStatement(a, c, d, e);
      };

      b.prototype.isCatchClause = function() {
        return this.currentToken().tokenKind === 17;
      };

      b.prototype.parseCatchClause = function() {
        var a = this.eatKeyword(17);

        var b = this.eatToken(73);

        var c = this.eatIdentifierToken();

        var d = this.parseOptionalTypeAnnotation(!1);

        var e = this.eatToken(74);

        var f = this.listParsingState;
        this.listParsingState |= 128;
        var g = this.parseBlock(!1, !1);
        this.listParsingState = f;

        return this.factory.catchClause(a, b, c, d, e, g);
      };

      b.prototype.isFinallyClause = function() {
        return this.currentToken().tokenKind === 25;
      };

      b.prototype.parseFinallyClause = function() {
        var a = this.eatKeyword(25);

        var b = this.parseBlock(!1, !1);
        return this.factory.finallyClause(a, b);
      };

      b.prototype.isWithStatement = function() {
        return this.currentToken().tokenKind === 43;
      };

      b.prototype.parseWithStatement = function() {
        var a = this.eatKeyword(43);

        var b = this.eatToken(73);

        var c = this.parseExpression(!0);

        var d = this.eatToken(74);

        var e = this.parseStatement();
        return this.factory.withStatement(a, b, c, d, e);
      };

      b.prototype.isWhileStatement = function() {
        return this.currentToken().tokenKind === 42;
      };

      b.prototype.parseWhileStatement = function() {
        var a = this.eatKeyword(42);

        var b = this.eatToken(73);

        var c = this.parseExpression(!0);

        var d = this.eatToken(74);

        var e = this.parseStatement();
        return this.factory.whileStatement(a, b, c, d, e);
      };

      b.prototype.isEmptyStatement = function(a) {
        return a ? !1 : this.currentToken().tokenKind === 79;
      };

      b.prototype.parseEmptyStatement = function() {
        var a = this.eatToken(79);
        return this.factory.emptyStatement(a);
      };

      b.prototype.isForOrForInStatement = function() {
        return this.currentToken().tokenKind === 26;
      };

      b.prototype.parseForOrForInStatement = function() {
        var a = this.eatKeyword(26);

        var b = this.eatToken(73);

        var c = this.currentToken();
        return c.tokenKind === 40 ? this.parseForOrForInStatementWithVariableDeclaration(a, b) : c.tokenKind === 79 ?
          this.parseForStatement(a, b) : this.parseForOrForInStatementWithInitializer(a, b);
      };

      b.prototype.parseForOrForInStatementWithVariableDeclaration = function(a, b) {
        var c = this.parseVariableDeclaration(!1);
        return this.currentToken().tokenKind === 29 ? this.parseForInStatementWithVariableDeclarationOrInitializer(
          a, b, c, null) : this.parseForStatementWithVariableDeclarationOrInitializer(a, b, c, null);
      };

      b.prototype.parseForInStatementWithVariableDeclarationOrInitializer = function(a, b, c, d) {
        var e = this.eatKeyword(29);

        var f = this.parseExpression(!0);

        var g = this.eatToken(74);

        var h = this.parseStatement();
        return this.factory.forInStatement(a, b, c, d, e, f, g, h);
      };

      b.prototype.parseForOrForInStatementWithInitializer = function(a, b) {
        var c = this.parseExpression(!1);
        return this.currentToken().tokenKind === 29 ? this.parseForInStatementWithVariableDeclarationOrInitializer(
          a, b, null, c) : this.parseForStatementWithVariableDeclarationOrInitializer(a, b, null, c);
      };

      b.prototype.parseForStatement = function(a, b) {
        var c = null;
        this.currentToken().tokenKind !== 79 && this.currentToken().tokenKind !== 74 && this.currentToken().tokenKind !==
          10 && (c = this.parseExpression(!1));

        return this.parseForStatementWithVariableDeclarationOrInitializer(a, b, null, c);
      };

      b.prototype.parseForStatementWithVariableDeclarationOrInitializer = function(a, b, c, d) {
        var e = this.eatToken(79);

        var f = null;
        if (this.currentToken().tokenKind !== 79 && this.currentToken().tokenKind !== 74 && this.currentToken().tokenKind !==
          10) {
          f = this.parseExpression(!0);
        }
        var g = this.eatToken(79);

        var h = null;
        if (this.currentToken().tokenKind !== 74 && this.currentToken().tokenKind !== 10) {
          h = this.parseExpression(!0);
        }
        var i = this.eatToken(74);

        var j = this.parseStatement();
        return this.factory.forStatement(a, b, c, d, e, f, g, h, i, j);
      };

      b.prototype.isBreakStatement = function() {
        return this.currentToken().tokenKind === 15;
      };

      b.prototype.parseBreakStatement = function() {
        var a = this.eatKeyword(15);

        var b = null;
        if (!this.canEatExplicitOrAutomaticSemicolon(!1)) {
          if (this.isIdentifier(this.currentToken())) {
            b = this.eatIdentifierToken();
          }
        }
        var c = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.breakStatement(a, b, c);
      };

      b.prototype.isContinueStatement = function() {
        return this.currentToken().tokenKind === 18;
      };

      b.prototype.parseContinueStatement = function() {
        var a = this.eatKeyword(18);

        var b = null;
        if (!this.canEatExplicitOrAutomaticSemicolon(!1)) {
          if (this.isIdentifier(this.currentToken())) {
            b = this.eatIdentifierToken();
          }
        }
        var c = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.continueStatement(a, b, c);
      };

      b.prototype.isSwitchStatement = function() {
        return this.currentToken().tokenKind === 34;
      };

      b.prototype.parseSwitchStatement = function() {
        var b = this.eatKeyword(34);

        var c = this.eatToken(73);

        var d = this.parseExpression(!0);

        var e = this.eatToken(74);

        var f = this.eatToken(71);

        var g = a.Syntax.emptyList;
        if (f.width() > 0) {
          var h = this.parseSyntaxList(8);
          g = h.list;

          f = this.addSkippedTokensAfterToken(f, h.skippedTokens);
        }
        var i = this.eatToken(72);
        return this.factory.switchStatement(b, c, d, e, f, g, i);
      };

      b.prototype.isCaseSwitchClause = function() {
        return this.currentToken().tokenKind === 16;
      };

      b.prototype.isDefaultSwitchClause = function() {
        return this.currentToken().tokenKind === 20;
      };

      b.prototype.isSwitchClause = function() {
        return this.currentNode() !== null && this.currentNode().isSwitchClause() ? !0 : this.isCaseSwitchClause() ||
          this.isDefaultSwitchClause();
      };

      b.prototype.parseSwitchClause = function() {
        if (this.currentNode() !== null && this.currentNode().isSwitchClause()) {
          return this.eatNode();
        }
        if (this.isCaseSwitchClause()) {
          return this.parseCaseSwitchClause();
        }
        if (this.isDefaultSwitchClause()) {
          return this.parseDefaultSwitchClause();
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.parseCaseSwitchClause = function() {
        var b = this.eatKeyword(16);

        var c = this.parseExpression(!0);

        var d = this.eatToken(107);

        var e = a.Syntax.emptyList;
        if (d.fullWidth() > 0) {
          var f = this.parseSyntaxList(16);
          e = f.list;

          d = this.addSkippedTokensAfterToken(d, f.skippedTokens);
        }
        return this.factory.caseSwitchClause(b, c, d, e);
      };

      b.prototype.parseDefaultSwitchClause = function() {
        var b = this.eatKeyword(20);

        var c = this.eatToken(107);

        var d = a.Syntax.emptyList;
        if (c.fullWidth() > 0) {
          var e = this.parseSyntaxList(16);
          d = e.list;

          c = this.addSkippedTokensAfterToken(c, e.skippedTokens);
        }
        return this.factory.defaultSwitchClause(b, c, d);
      };

      b.prototype.isThrowStatement = function() {
        return this.currentToken().tokenKind === 36;
      };

      b.prototype.parseThrowStatement = function() {
        var a = this.eatKeyword(36);

        var b = null;
        if (this.canEatExplicitOrAutomaticSemicolon(!1)) {
          var c = this.createMissingToken(11, null);
          b = c;
        } else {
          b = this.parseExpression(!0);
        }
        var d = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.throwStatement(a, b, d);
      };

      b.prototype.isReturnStatement = function() {
        return this.currentToken().tokenKind === 33;
      };

      b.prototype.parseReturnStatement = function() {
        var a = this.eatKeyword(33);

        var b = null;
        if (!this.canEatExplicitOrAutomaticSemicolon(!1)) {
          b = this.parseExpression(!0);
        }
        var c = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.returnStatement(a, b, c);
      };

      b.prototype.isExpressionStatement = function() {
        var a = this.currentToken();

        var b = a.tokenKind;
        return b === 71 || b === 27 ? !1 : this.isExpression();
      };

      b.prototype.isAssignmentOrOmittedExpression = function() {
        return this.currentToken().tokenKind === 80 ? !0 : this.isExpression();
      };

      b.prototype.parseAssignmentOrOmittedExpression = function() {
        return this.currentToken().tokenKind === 80 ? this.factory.omittedExpression() : this.parseAssignmentExpression(!
          0);
      };

      b.prototype.isExpression = function() {
        var a = this.currentToken();

        var b = a.tokenKind;
        switch (b) {
          case 13:
          case 14:
          case 12:
            return !0;
          case 75:
          case 73:
            return !0;
          case 81:
            return !0;
          case 94:
          case 95:
          case 90:
          case 91:
          case 103:
          case 102:
            return !0;
          case 71:
            return !0;
          case 86:
            return !0;
          case 119:
          case 120:
            return !0;
          case 50:
          case 35:
          case 37:
          case 24:
          case 32:
            return !0;
          case 31:
            return !0;
          case 21:
          case 41:
          case 39:
            return !0;
          case 27:
            return !0;
        }
        return this.isIdentifier(this.currentToken()) ? !0 : !1;
      };

      b.prototype.parseExpressionStatement = function() {
        var a = this.parseExpression(!0);

        var b = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.expressionStatement(a, b);
      };

      b.prototype.isIfStatement = function() {
        return this.currentToken().tokenKind === 28;
      };

      b.prototype.parseIfStatement = function() {
        var a = this.eatKeyword(28);

        var b = this.eatToken(73);

        var c = this.parseExpression(!0);

        var d = this.eatToken(74);

        var e = this.parseStatement();

        var f = null;
        this.isElseClause() && (f = this.parseElseClause());

        return this.factory.ifStatement(a, b, c, d, e, f);
      };

      b.prototype.isElseClause = function() {
        return this.currentToken().tokenKind === 23;
      };

      b.prototype.parseElseClause = function() {
        var a = this.eatKeyword(23);

        var b = this.parseStatement();
        return this.factory.elseClause(a, b);
      };

      b.prototype.isVariableStatement = function() {
        var a = this.modifierCount();
        return this.peekToken(a).tokenKind === 40;
      };

      b.prototype.parseVariableStatement = function() {
        var a = this.parseModifiers();

        var b = this.parseVariableDeclaration(!0);

        var c = this.eatExplicitOrAutomaticSemicolon(!1);
        return this.factory.variableStatement(a, b, c);
      };

      b.prototype.parseVariableDeclaration = function(a) {
        var b = this.eatKeyword(40);

        var c = a ? 4096 : 8192;

        var d = this.parseSeparatedSyntaxList(c);

        var e = d.list;
        b = this.addSkippedTokensAfterToken(b, d.skippedTokens);

        return this.factory.variableDeclaration(b, e);
      };

      b.prototype.isVariableDeclarator = function() {
        return this.currentNode() !== null && this.currentNode().kind() === 224 ? !0 : this.isIdentifier(this.currentToken());
      };

      b.prototype.canReuseVariableDeclaratorNode = function(a) {
        if (a === null || a.kind() !== 224) {
          return !1;
        }
        var b = a;
        return b.equalsValueClause === null;
      };

      b.prototype.parseVariableDeclarator = function(a, b) {
        if (this.canReuseVariableDeclaratorNode(this.currentNode())) {
          return this.eatNode();
        }
        var c = b ? this.eatPropertyName() : this.eatIdentifierToken();

        var d = null;

        var e = null;
        c.width() > 0 && (e = this.parseOptionalTypeAnnotation(!1), this.isEqualsValueClause(!1) && (d = this.parseEqualsValueClause(
          a)));

        return this.factory.variableDeclarator(c, e, d);
      };

      b.prototype.isColonValueClause = function() {
        return this.currentToken().tokenKind === 107;
      };

      b.prototype.isEqualsValueClause = function(a) {
        var b = this.currentToken();
        return b.tokenKind === 108 ? !0 : this.previousToken().hasTrailingNewLine() ? !1 : b.tokenKind === 86 ? !1 :
          b.tokenKind === 71 && a ? !1 : this.isExpression();
      };

      b.prototype.parseEqualsValueClause = function(a) {
        var b = this.eatToken(108);

        var c = this.parseAssignmentExpression(a);
        return this.factory.equalsValueClause(b, c);
      };

      b.prototype.parseExpression = function(a) {
        return this.parseSubExpression(0, a);
      };

      b.prototype.parseAssignmentExpression = function(a) {
        return this.parseSubExpression(2, a);
      };

      b.prototype.parseUnaryExpression = function() {
        var b = this.currentToken().tokenKind;
        if (a.SyntaxFacts.isPrefixUnaryExpressionOperatorToken(b)) {
          var c = a.SyntaxFacts.getPrefixUnaryExpressionFromOperatorToken(b);

          var d = this.eatAnyToken();

          var e = this.parseUnaryExpression();
          return this.factory.prefixUnaryExpression(c, d, e);
        }
        return this.parseTerm(!1);
      };

      b.prototype.parseSubExpression = function(a, b) {
        var c = this.parseUnaryExpression();
        c = this.parseBinaryOrConditionalExpressions(a, b, c);

        return c;
      };

      b.prototype.parseBinaryOrConditionalExpressions = function(c, d, e) {
        for (;;) {
          var f = this.currentToken();

          var g = f.tokenKind;
          if (a.SyntaxFacts.isBinaryExpressionOperatorToken(g)) {
            if (g === 29 && !d) break;
            var h = this.tryMergeBinaryExpressionTokens();

            var i = h === null ? g : h.syntaxKind;

            var j = a.SyntaxFacts.getBinaryExpressionFromOperatorToken(i);

            var k = b.getPrecedence(j);
            if (k < c) break;
            if (k === c && !this.isRightAssociative(j)) break;
            var l = h === null ? f : a.Syntax.token(h.syntaxKind).withLeadingTrivia(f.leadingTrivia()).withTrailingTrivia(
              this.peekToken(h.tokenCount - 1).trailingTrivia());

            var m = h === null ? 1 : h.tokenCount;
            for (var n = 0; n < m; n++) {
              this.eatAnyToken();
            }
            e = this.factory.binaryExpression(j, e, l, this.parseSubExpression(k, d));
            continue;
          }
          if (g === 106 && c <= 3) {
            var o = this.eatToken(106);

            var p = this.parseAssignmentExpression(d);

            var q = this.eatToken(107);

            var r = this.parseAssignmentExpression(d);
            e = this.factory.conditionalExpression(e, o, p, q, r);
            continue;
          }
          break;
        }
        return e;
      };

      b.prototype.tryMergeBinaryExpressionTokens = function() {
        var a = this.currentToken();
        if (a.tokenKind === 82 && !a.hasTrailingTrivia()) {
          var b = this.mergeTokensStorage;
          b[0] = 0;

          b[1] = 0;

          b[2] = 0;
          for (var c = 0; c < b.length; c++) {
            var d = this.peekToken(c + 1);
            if (!d.hasLeadingTrivia()) {
              b[c] = d.tokenKind;
            }
            if (d.hasTrailingTrivia()) break;
          }
          if (b[0] === 82) {
            return b[1] === 82 ? b[2] === 108 ? {
              tokenCount: 4,
              syntaxKind: 115
            } : {
              tokenCount: 3,
              syntaxKind: 98
            } : b[1] === 108 ? {
              tokenCount: 3,
              syntaxKind: 114
            } : {
              tokenCount: 2,
              syntaxKind: 97
            };
          }
          if (b[0] === 108) {
            return {
              tokenCount: 2,
              syntaxKind: 84
            };
          }
        }
        return null;
      };

      b.prototype.isRightAssociative = function(a) {
        switch (a) {
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
            return !0;
          default:
            return !1;
        }
      };

      b.prototype.parseTerm = function(a) {
        var b = this.parseTermWorker();
        return b === null ? this.eatIdentifierToken() : this.parsePostFixExpression(b, a);
      };

      b.prototype.parsePostFixExpression = function(b, c) {
        for (;;) {
          var d = this.currentToken().tokenKind;
          switch (d) {
            case 73:
              if (c) {
                return b;
              }
              b = this.factory.invocationExpression(b, this.parseArgumentList(null));
              continue;
            case 81:
              if (c) {
                return b;
              }
              var e = this.tryParseArgumentList();
              if (e !== null) {
                b = this.factory.invocationExpression(b, e);
                continue;
              }
              break;
            case 75:
              b = this.parseElementAccessExpression(b, c);
              continue;
            case 94:
            case 95:
              if (this.previousToken() !== null && this.previousToken().hasTrailingNewLine()) break;
              b = this.factory.postfixUnaryExpression(a.SyntaxFacts.getPostfixUnaryExpressionFromOperatorToken(d),
                b, this.eatAnyToken());
              continue;
            case 77:
              b = this.factory.memberAccessExpression(b, this.eatToken(77), this.eatIdentifierNameToken());
              continue;
          }
          return b;
        }
      };

      b.prototype.tryParseArgumentList = function() {
        var b = null;
        if (this.currentToken().tokenKind === 81) {
          var c = this.getRewindPoint();
          try {
            b = this.tryParseTypeArgumentList(!0);
            var d = this.currentToken();

            var e = d.tokenKind === 73;

            var f = d.tokenKind === 77;

            var g = e || f;
            if (b === null || !g) {
              this.rewind(c);
              return null;
            }
            if (f) {
              var h = new a.SyntaxDiagnostic(this.fileName, this.currentTokenStart(), d.width(), 138, null);
              this.addDiagnostic(h);

              return this.factory.argumentList(b, a.Syntax.emptyToken(73), a.Syntax.emptySeparatedList, a.Syntax.emptyToken(
                74));
            }
          } finally {
            this.releaseRewindPoint(c);
          }
        }
        return this.currentToken().tokenKind === 73 ? this.parseArgumentList(b) : null;
      };

      b.prototype.parseArgumentList = function(b) {
        var c = this.eatToken(73);

        var d = a.Syntax.emptySeparatedList;
        if (c.fullWidth() > 0) {
          var e = this.parseSeparatedSyntaxList(16384);
          d = e.list;

          c = this.addSkippedTokensAfterToken(c, e.skippedTokens);
        }
        var f = this.eatToken(74);
        return this.factory.argumentList(b, c, d, f);
      };

      b.prototype.parseElementAccessExpression = function(b, c) {
        var d = this.currentTokenStart();

        var e = this.eatToken(75);

        var f;
        if (this.currentToken().tokenKind === 76 && c) {
          var g = this.currentTokenStart() + this.currentToken().width();

          var h = new a.SyntaxDiagnostic(this.fileName, d, g - d, 137, null);
          this.addDiagnostic(h);

          f = a.Syntax.emptyToken(11);
        } else {
          f = this.parseExpression(!0);
        }
        var i = this.eatToken(76);
        return this.factory.elementAccessExpression(b, e, f, i);
      };

      b.prototype.parseTermWorker = function() {
        var a = this.currentToken();
        if (a.tokenKind === 86) {
          return this.parseSimpleArrowFunctionExpression();
        }
        if (this.isIdentifier(a)) {
          if (this.isSimpleArrowFunctionExpression()) {
            return this.parseSimpleArrowFunctionExpression();
          }
          var b = this.eatIdentifierToken();
          return b;
        }
        var c = a.tokenKind;
        switch (c) {
          case 35:
            return this.parseThisExpression();
          case 37:
          case 24:
            return this.parseLiteralExpression();
          case 32:
            return this.parseLiteralExpression();
          case 31:
            return this.parseObjectCreationExpression();
          case 27:
            return this.parseFunctionExpression();
          case 50:
            return this.parseSuperExpression();
          case 39:
            return this.parseTypeOfExpression();
          case 21:
            return this.parseDeleteExpression();
          case 41:
            return this.parseVoidExpression();
          case 13:
            return this.parseLiteralExpression();
          case 12:
            return this.parseLiteralExpression();
          case 14:
            return this.parseLiteralExpression();
          case 75:
            return this.parseArrayLiteralExpression();
          case 71:
            return this.parseObjectLiteralExpression();
          case 73:
            return this.parseParenthesizedOrArrowFunctionExpression();
          case 81:
            return this.parseCastOrArrowFunctionExpression();
          case 119:
          case 120:
            var d = this.tryReparseDivideAsRegularExpression();
            if (d !== null) {
              return d;
            }
        }
        return null;
      };

      b.prototype.tryReparseDivideAsRegularExpression = function() {
        var b = this.currentToken();
        if (this.previousToken() !== null) {
          var c = this.previousToken().tokenKind;
          switch (c) {
            case 11:
              return null;
            case 35:
            case 37:
            case 24:
              return null;
            case 14:
            case 13:
            case 12:
            case 94:
            case 95:
            case 76:
            case 72:
              return null;
          }
        }
        b = this.currentTokenAllowingRegularExpression();
        if (b.tokenKind === 119 || b.tokenKind === 120) {
          return null;
        }
        if (b.tokenKind === 12) {
          return this.parseLiteralExpression();
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.parseTypeOfExpression = function() {
        var a = this.eatKeyword(39);

        var b = this.parseUnaryExpression();
        return this.factory.typeOfExpression(a, b);
      };

      b.prototype.parseDeleteExpression = function() {
        var a = this.eatKeyword(21);

        var b = this.parseUnaryExpression();
        return this.factory.deleteExpression(a, b);
      };

      b.prototype.parseVoidExpression = function() {
        var a = this.eatKeyword(41);

        var b = this.parseUnaryExpression();
        return this.factory.voidExpression(a, b);
      };

      b.prototype.parseSuperExpression = function() {
        var a = this.eatKeyword(50);
        return a;
      };

      b.prototype.parseFunctionExpression = function() {
        var a = this.eatKeyword(27);

        var b = null;
        if (this.isIdentifier(this.currentToken())) {
          b = this.eatIdentifierToken();
        }
        var c = this.parseCallSignature(!1);

        var d = this.parseBlock(!1, !0);
        return this.factory.functionExpression(a, b, c, d);
      };

      b.prototype.parseObjectCreationExpression = function() {
        var a = this.eatKeyword(31);

        var b = this.parseTerm(!0);

        var c = this.tryParseArgumentList();
        return this.factory.objectCreationExpression(a, b, c);
      };

      b.prototype.parseCastOrArrowFunctionExpression = function() {
        var a = this.getRewindPoint();
        try {
          var b = this.tryParseArrowFunctionExpression();
          return b !== null ? b : (this.rewind(a), this.parseCastExpression());
        } finally {
          this.releaseRewindPoint(a);
        }
      };

      b.prototype.parseCastExpression = function() {
        var a = this.eatToken(81);

        var b = this.parseType();

        var c = this.eatToken(82);

        var d = this.parseUnaryExpression();
        return this.factory.castExpression(a, b, c, d);
      };

      b.prototype.parseParenthesizedOrArrowFunctionExpression = function() {
        var a = this.tryParseArrowFunctionExpression();
        if (a !== null) {
          return a;
        }
        var b = this.eatToken(73);

        var c = this.parseExpression(!0);

        var d = this.eatToken(74);
        return this.factory.parenthesizedExpression(b, c, d);
      };

      b.prototype.tryParseArrowFunctionExpression = function() {
        var a = this.currentToken().tokenKind;
        if (this.isDefinitelyArrowFunctionExpression()) {
          return this.parseParenthesizedArrowFunctionExpression(!1);
        }
        if (!this.isPossiblyArrowFunctionExpression()) {
          return null;
        }
        var b = this.getRewindPoint();
        try {
          var c = this.parseParenthesizedArrowFunctionExpression(!0);
          c === null && this.rewind(b);

          return c;
        } finally {
          this.releaseRewindPoint(b);
        }
      };

      b.prototype.parseParenthesizedArrowFunctionExpression = function(a) {
        var b = this.currentToken();

        var c = this.parseCallSignature(!0);
        if (a && this.currentToken().tokenKind !== 86) {
          return null;
        }
        var d = this.eatToken(86);

        var e = this.parseArrowFunctionBody();
        return this.factory.parenthesizedArrowFunctionExpression(c, d, e);
      };

      b.prototype.parseArrowFunctionBody = function() {
        return this.isBlock() ? this.parseBlock(!1, !1) : this.parseAssignmentExpression(!0);
      };

      b.prototype.isSimpleArrowFunctionExpression = function() {
        return this.currentToken().tokenKind === 86 ? !0 : this.isIdentifier(this.currentToken()) && this.peekToken(
          1).tokenKind === 86;
      };

      b.prototype.parseSimpleArrowFunctionExpression = function() {
        var a = this.eatIdentifierToken();

        var b = this.eatToken(86);

        var c = this.parseArrowFunctionBody();
        return this.factory.simpleArrowFunctionExpression(a, b, c);
      };

      b.prototype.isBlock = function() {
        return this.currentToken().tokenKind === 71;
      };

      b.prototype.isDefinitelyArrowFunctionExpression = function() {
        var a = this.currentToken();
        if (a.tokenKind !== 73) {
          return !1;
        }
        var b = this.peekToken(1);

        var c;
        if (b.tokenKind === 74) {
          c = this.peekToken(2);
          return c.tokenKind === 107 || c.tokenKind === 86 || c.tokenKind === 71;
        }
        if (b.tokenKind === 78) {
          return !0;
        }
        if (!this.isIdentifier(b)) {
          return !1;
        }
        c = this.peekToken(2);
        if (c.tokenKind === 107) {
          return !0;
        }
        var d = this.peekToken(3);
        if (c.tokenKind === 106)
          if (d.tokenKind === 107 || d.tokenKind === 74 || d.tokenKind === 80) {
            return !0;
          }
        return c.tokenKind === 74 && d.tokenKind === 86 ? !0 : !1;
      };

      b.prototype.isPossiblyArrowFunctionExpression = function() {
        var a = this.currentToken();
        if (a.tokenKind !== 73) {
          return !0;
        }
        var b = this.peekToken(1);
        if (!this.isIdentifier(b)) {
          return !1;
        }
        var c = this.peekToken(2);
        if (c.tokenKind === 108) {
          return !0;
        }
        if (c.tokenKind === 80) {
          return !0;
        }
        if (c.tokenKind === 74) {
          var d = this.peekToken(3);
          if (d.tokenKind === 107) {
            return !0;
          }
        }
        return !1;
      };

      b.prototype.parseObjectLiteralExpression = function() {
        var a = this.eatToken(71);

        var b = this.parseSeparatedSyntaxList(32768);

        var c = b.list;
        a = this.addSkippedTokensAfterToken(a, b.skippedTokens);
        var d = this.eatToken(72);
        return this.factory.objectLiteralExpression(a, c, d);
      };

      b.prototype.parsePropertyAssignment = function() {
        if (this.isGetAccessorPropertyAssignment(!1)) {
          return this.parseGetAccessorPropertyAssignment();
        }
        if (this.isSetAccessorPropertyAssignment(!1)) {
          return this.parseSetAccessorPropertyAssignment();
        }
        if (this.isFunctionPropertyAssignment(!1)) {
          return this.parseFunctionPropertyAssignment();
        }
        if (this.isSimplePropertyAssignment(!1)) {
          return this.parseSimplePropertyAssignment();
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.isPropertyAssignment = function(a) {
        return this.isGetAccessorPropertyAssignment(a) || this.isSetAccessorPropertyAssignment(a) || this.isFunctionPropertyAssignment(
          a) || this.isSimplePropertyAssignment(a);
      };

      b.prototype.isGetAccessorPropertyAssignment = function(a) {
        return this.currentToken().tokenKind === 65 && this.isPropertyName(this.peekToken(1), a);
      };

      b.prototype.parseGetAccessorPropertyAssignment = function() {
        var a = this.eatKeyword(65);

        var b = this.eatPropertyName();

        var c = this.eatToken(73);

        var d = this.eatToken(74);

        var e = this.parseOptionalTypeAnnotation(!1);

        var f = this.parseBlock(!1, !0);
        return this.factory.getAccessorPropertyAssignment(a, b, c, d, e, f);
      };

      b.prototype.isSetAccessorPropertyAssignment = function(a) {
        return this.currentToken().tokenKind === 69 && this.isPropertyName(this.peekToken(1), a);
      };

      b.prototype.parseSetAccessorPropertyAssignment = function() {
        var a = this.eatKeyword(69);

        var b = this.eatPropertyName();

        var c = this.eatToken(73);

        var d = this.parseParameter();

        var e = this.eatToken(74);

        var f = this.parseBlock(!1, !0);
        return this.factory.setAccessorPropertyAssignment(a, b, c, d, e, f);
      };

      b.prototype.eatPropertyName = function() {
        return a.SyntaxFacts.isIdentifierNameOrAnyKeyword(this.currentToken()) ? this.eatIdentifierNameToken() :
          this.eatAnyToken();
      };

      b.prototype.isFunctionPropertyAssignment = function(a) {
        return this.isPropertyName(this.currentToken(), a) && this.isCallSignature(1);
      };

      b.prototype.parseFunctionPropertyAssignment = function() {
        var a = this.eatPropertyName();

        var b = this.parseCallSignature(!1);

        var c = this.parseBlock(!1, !0);
        return this.factory.functionPropertyAssignment(a, b, c);
      };

      b.prototype.isSimplePropertyAssignment = function(a) {
        return this.isPropertyName(this.currentToken(), a);
      };

      b.prototype.parseSimplePropertyAssignment = function() {
        var a = this.eatPropertyName();

        var b = this.eatToken(107);

        var c = this.parseAssignmentExpression(!0);
        return this.factory.simplePropertyAssignment(a, b, c);
      };

      b.prototype.isPropertyName = function(b, c) {
        if (a.SyntaxFacts.isIdentifierNameOrAnyKeyword(b)) {
          return c ? this.isIdentifier(b) : !0;
        }
        switch (b.tokenKind) {
          case 14:
          case 13:
            return !0;
          default:
            return !1;
        }
      };

      b.prototype.parseArrayLiteralExpression = function() {
        var a = this.eatToken(75);

        var b = this.parseSeparatedSyntaxList(65536);

        var c = b.list;
        a = this.addSkippedTokensAfterToken(a, b.skippedTokens);
        var d = this.eatToken(76);
        return this.factory.arrayLiteralExpression(a, c, d);
      };

      b.prototype.parseLiteralExpression = function() {
        return this.eatAnyToken();
      };

      b.prototype.parseThisExpression = function() {
        var a = this.eatKeyword(35);
        return a;
      };

      b.prototype.parseBlock = function(c, d) {
        var e = this.eatToken(71);

        var f = a.Syntax.emptyList;
        if (c || e.width() > 0) {
          var g = this.isInStrictMode;

          var h = d ? b.updateStrictModeState : null;

          var i = this.parseSyntaxList(32, h);
          f = i.list;

          e = this.addSkippedTokensAfterToken(e, i.skippedTokens);

          this.setStrictMode(g);
        }
        var j = this.eatToken(72);
        return this.factory.block(e, f, j);
      };

      b.prototype.parseCallSignature = function(a) {
        var b = this.parseOptionalTypeParameterList(a);

        var c = this.parseParameterList();

        var d = this.parseOptionalTypeAnnotation(!1);
        return this.factory.callSignature(b, c, d);
      };

      b.prototype.parseOptionalTypeParameterList = function(a) {
        if (this.currentToken().tokenKind !== 81) {
          return null;
        }
        var b = this.getRewindPoint();
        try {
          var c = this.eatToken(81);

          var d = this.parseSeparatedSyntaxList(524288);

          var e = d.list;
          c = this.addSkippedTokensAfterToken(c, d.skippedTokens);
          var f = this.eatToken(82);
          return a && f.fullWidth() === 0 ? (this.rewind(b), null) : this.factory.typeParameterList(c, e, f);
        } finally {
          this.releaseRewindPoint(b);
        }
      };

      b.prototype.isTypeParameter = function() {
        return this.isIdentifier(this.currentToken());
      };

      b.prototype.parseTypeParameter = function() {
        var a = this.eatIdentifierToken();

        var b = this.parseOptionalConstraint();
        return this.factory.typeParameter(a, b);
      };

      b.prototype.parseOptionalConstraint = function() {
        if (this.currentToken().kind() !== 48) {
          return null;
        }
        var a = this.eatKeyword(48);

        var b = this.parseType();
        return this.factory.constraint(a, b);
      };

      b.prototype.parseParameterList = function() {
        var b = this.eatToken(73);

        var c = a.Syntax.emptySeparatedList;
        if (b.width() > 0) {
          var d = this.parseSeparatedSyntaxList(131072);
          c = d.list;

          b = this.addSkippedTokensAfterToken(b, d.skippedTokens);
        }
        var e = this.eatToken(74);
        return this.factory.parameterList(b, c, e);
      };

      b.prototype.isTypeAnnotation = function() {
        return this.currentToken().tokenKind === 107;
      };

      b.prototype.parseOptionalTypeAnnotation = function(a) {
        return this.isTypeAnnotation() ? this.parseTypeAnnotation(a) : null;
      };

      b.prototype.parseTypeAnnotation = function(a) {
        var b = this.eatToken(107);

        var c = a && this.currentToken().tokenKind === 14 ? this.eatToken(14) : this.parseType();
        return this.factory.typeAnnotation(b, c);
      };

      b.prototype.isType = function() {
        return this.isPredefinedType() || this.isTypeLiteral() || this.isName();
      };

      b.prototype.parseType = function() {
        var a = this.parseNonArrayType();
        while (this.currentToken().tokenKind === 75) {
          var b = this.eatToken(75);

          var c = this.eatToken(76);
          a = this.factory.arrayType(a, b, c);
        }
        return a;
      };

      b.prototype.parseNonArrayType = function() {
        return this.isPredefinedType() ? this.parsePredefinedType() : this.isTypeLiteral() ? this.parseTypeLiteral() :
          this.parseNameOrGenericType();
      };

      b.prototype.parseNameOrGenericType = function() {
        var a = this.parseName();

        var b = this.tryParseTypeArgumentList(!1);
        return b === null ? a : this.factory.genericType(a, b);
      };

      b.prototype.parseTypeLiteral = function() {
        if (this.isObjectType()) {
          return this.parseObjectType();
        }
        if (this.isFunctionType()) {
          return this.parseFunctionType();
        }
        if (this.isConstructorType()) {
          return this.parseConstructorType();
        }
        throw a.Errors.invalidOperation();
      };

      b.prototype.parseFunctionType = function() {
        var a = this.parseOptionalTypeParameterList(!1);

        var b = this.parseParameterList();

        var c = this.eatToken(86);

        var d = this.parseType();
        return this.factory.functionType(a, b, c, d);
      };

      b.prototype.parseConstructorType = function() {
        var a = this.eatKeyword(31);

        var b = this.parseParameterList();

        var c = this.eatToken(86);

        var d = this.parseType();
        return this.factory.constructorType(a, null, b, c, d);
      };

      b.prototype.isTypeLiteral = function() {
        return this.isObjectType() || this.isFunctionType() || this.isConstructorType();
      };

      b.prototype.isObjectType = function() {
        return this.currentToken().tokenKind === 71;
      };

      b.prototype.isFunctionType = function() {
        var a = this.currentToken().tokenKind;
        return a === 73 || a === 81;
      };

      b.prototype.isConstructorType = function() {
        return this.currentToken().tokenKind === 31;
      };

      b.prototype.parsePredefinedType = function() {
        return this.eatAnyToken();
      };

      b.prototype.isPredefinedType = function() {
        switch (this.currentToken().tokenKind) {
          case 60:
          case 68:
          case 61:
          case 62:
          case 70:
          case 41:
            return !0;
        }
        return !1;
      };

      b.prototype.isParameter = function() {
        if (this.currentNode() !== null && this.currentNode().kind() === 242) {
          return !0;
        }
        var a = this.currentToken();
        return a.tokenKind === 78 ? !0 : b.isPublicOrPrivateKeyword(a) ? !0 : this.isIdentifier(a);
      };

      b.prototype.parseParameter = function() {
        if (this.currentNode() !== null && this.currentNode().kind() === 242) {
          return this.eatNode();
        }
        var a = this.tryEatToken(78);

        var c = null;
        if (b.isPublicOrPrivateKeyword(this.currentToken())) {
          c = this.eatAnyToken();
        }
        var d = this.eatIdentifierToken();

        var e = this.tryEatToken(106);

        var f = this.parseOptionalTypeAnnotation(!0);

        var g = null;
        this.isEqualsValueClause(!0) && (g = this.parseEqualsValueClause(!0));

        return this.factory.parameter(a, c, d, e, f, g);
      };

      b.prototype.parseSyntaxList = function(a, b) {
        if (typeof b == "undefined") {
          b = null;
        }
        var c = this.listParsingState;
        this.listParsingState |= a;
        var d = this.parseSyntaxListWorker(a, b);
        this.listParsingState = c;

        return d;
      };

      b.prototype.parseSeparatedSyntaxList = function(a) {
        var b = this.listParsingState;
        this.listParsingState |= a;
        var c = this.parseSeparatedSyntaxListWorker(a);
        this.listParsingState = b;

        return c;
      };

      b.prototype.abortParsingListOrMoveToNextToken = function(a, b, c) {
        this.reportUnexpectedTokenDiagnostic(a);
        for (var d = 262144; d >= 1; d >>= 1)
          if ((this.listParsingState & d) !== 0)
            if (this.isExpectedListTerminator(d) || this.isExpectedListItem(d, !0)) {
              return !0;
            }
        var e = this.currentToken();
        this.moveToNextToken();

        this.addSkippedTokenToList(b, c, e);

        return !1;
      };

      b.prototype.addSkippedTokenToList = function(a, b, c) {
        for (var d = a.length - 1; d >= 0; d--) {
          var e = a[d];

          var f = e.lastToken();
          if (f.fullWidth() > 0) {
            a[d] = this.addSkippedTokenAfterNodeOrToken(e, c);
            return;
          }
        }
        b.push(c);
      };

      b.prototype.tryParseExpectedListItem = function(a, b, c, d) {
        if (this.isExpectedListItem(a, b)) {
          var e = this.parseExpectedListItem(a);
          c.push(e);

          if (d !== null) {
            d(this, c);
          }
        }
      };

      b.prototype.listIsTerminated = function(a) {
        return this.isExpectedListTerminator(a) || this.currentToken().tokenKind === 10;
      };

      b.prototype.getArray = function() {
        return this.arrayPool.length > 0 ? this.arrayPool.pop() : [];
      };

      b.prototype.returnZeroOrOneLengthArray = function(a) {
        if (a.length <= 1) {
          this.returnArray(a);
        }
      };

      b.prototype.returnArray = function(a) {
        a.length = 0;

        this.arrayPool.push(a);
      };

      b.prototype.parseSyntaxListWorker = function(b, c) {
        var d = this.getArray();

        var e = this.getArray();
        for (;;) {
          var f = d.length;
          this.tryParseExpectedListItem(b, !1, d, c);
          var g = d.length;
          if (g === f) {
            if (this.listIsTerminated(b)) break;
            var h = this.abortParsingListOrMoveToNextToken(b, d, e);
            if (h) break;
          }
        }
        var i = a.Syntax.list(d);
        this.returnZeroOrOneLengthArray(d);

        return {
          skippedTokens: e,
          list: i
        };
      };

      b.prototype.parseSeparatedSyntaxListWorker = function(b) {
        var c = this.getArray();

        var d = this.getArray();
        a.Debug.assert(c.length === 0);

        a.Debug.assert(d.length === 0);

        a.Debug.assert(d !== c);
        var e = this.separatorKind(b);

        var f = e === 79;

        var g = !1;

        var h = !1;
        for (;;) {
          var i = c.length;
          this.tryParseExpectedListItem(b, g, c, null);
          var j = c.length;
          if (j === i) {
            if (this.listIsTerminated(b)) {
              h = !0;
              break;
            }
            var k = this.abortParsingListOrMoveToNextToken(b, c, d);
            if (k) break;
            g = !0;
            continue;
          }
          g = !1;
          var l = this.currentToken();
          if (l.tokenKind === e || l.tokenKind === 80) {
            c.push(this.eatAnyToken());
            continue;
          }
          if (this.listIsTerminated(b)) {
            h = !0;
            break;
          }
          if (f && this.canEatAutomaticSemicolon(!1)) {
            c.push(this.eatExplicitOrAutomaticSemicolon(!1));
            continue;
          }
          c.push(this.eatToken(e));

          g = !0;
        }
        var m = a.Syntax.separatedList(c);
        this.returnZeroOrOneLengthArray(c);

        return {
          skippedTokens: d,
          list: m
        };
      };

      b.prototype.separatorKind = function(b) {
        switch (b) {
          case 2048:
          case 16384:
          case 256:
          case 4096:
          case 8192:
          case 32768:
          case 131072:
          case 65536:
          case 262144:
          case 524288:
            return 80;
          case 512:
            return 79;
          case 1:
          case 1024:
          case 2:
          case 4:
          case 8:
          case 16:
          case 32:
          default:
            throw a.Errors.notYetImplemented();
        }
      };

      b.prototype.reportUnexpectedTokenDiagnostic = function(b) {
        var c = this.currentToken();

        var d = new a.SyntaxDiagnostic(this.fileName, this.currentTokenStart(), c.width(), 12, [this.getExpectedListElementType(
          b)]);
        this.addDiagnostic(d);
      };

      b.prototype.addDiagnostic = function(a) {
        if (this.diagnostics.length > 0 && this.diagnostics[this.diagnostics.length - 1].start() === a.start())
          return;
        this.diagnostics.push(a);
      };

      b.prototype.isExpectedListTerminator = function(b) {
        switch (b) {
          case 1:
            return this.isExpectedSourceUnit_ModuleElementsTerminator();
          case 1024:
            return this.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator();
          case 2:
            return this.isExpectedClassDeclaration_ClassElementsTerminator();
          case 4:
            return this.isExpectedModuleDeclaration_ModuleElementsTerminator();
          case 8:
            return this.isExpectedSwitchStatement_SwitchClausesTerminator();
          case 16:
            return this.isExpectedSwitchClause_StatementsTerminator();
          case 32:
            return this.isExpectedBlock_StatementsTerminator();
          case 64:
            return this.isExpectedTryBlock_StatementsTerminator();
          case 128:
            return this.isExpectedCatchBlock_StatementsTerminator();
          case 256:
            return this.isExpectedEnumDeclaration_EnumElementsTerminator();
          case 512:
            return this.isExpectedObjectType_TypeMembersTerminator();
          case 16384:
            return this.isExpectedArgumentList_AssignmentExpressionsTerminator();
          case 2048:
            return this.isExpectedHeritageClause_TypeNameListTerminator();
          case 4096:
            return this.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator();
          case 8192:
            return this.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator();
          case 32768:
            return this.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator();
          case 131072:
            return this.isExpectedParameterList_ParametersTerminator();
          case 262144:
            return this.isExpectedTypeArgumentList_TypesTerminator();
          case 524288:
            return this.isExpectedTypeParameterList_TypeParametersTerminator();
          case 65536:
            return this.isExpectedLiteralExpression_AssignmentExpressionsTerminator();
          default:
            throw a.Errors.invalidOperation();
        }
      };

      b.prototype.isExpectedSourceUnit_ModuleElementsTerminator = function() {
        return this.currentToken().tokenKind === 10;
      };

      b.prototype.isExpectedEnumDeclaration_EnumElementsTerminator = function() {
        return this.currentToken().tokenKind === 72;
      };

      b.prototype.isExpectedModuleDeclaration_ModuleElementsTerminator = function() {
        return this.currentToken().tokenKind === 72;
      };

      b.prototype.isExpectedObjectType_TypeMembersTerminator = function() {
        return this.currentToken().tokenKind === 72;
      };

      b.prototype.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator = function() {
        return this.currentToken().tokenKind === 72;
      };

      b.prototype.isExpectedLiteralExpression_AssignmentExpressionsTerminator = function() {
        return this.currentToken().tokenKind === 76;
      };

      b.prototype.isExpectedTypeArgumentList_TypesTerminator = function() {
        var a = this.currentToken();
        return a.tokenKind === 82 ? !0 : this.canFollowTypeArgumentListInExpression(a.tokenKind) ? !0 : !1;
      };

      b.prototype.isExpectedTypeParameterList_TypeParametersTerminator = function() {
        var a = this.currentToken();
        return a.tokenKind === 82 ? !0 : a.tokenKind === 73 || a.tokenKind === 71 || a.tokenKind === 48 || a.tokenKind ===
          51 ? !0 : !1;
      };

      b.prototype.isExpectedParameterList_ParametersTerminator = function() {
        var a = this.currentToken();
        return a.tokenKind === 74 ? !0 : a.tokenKind === 71 ? !0 : a.tokenKind === 86 ? !0 : !1;
      };

      b.prototype.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator = function() {
        return this.currentToken().tokenKind === 79 || this.currentToken().tokenKind === 74 ? !0 : this.currentToken()
          .tokenKind === 29 ? !0 : !1;
      };

      b.prototype.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator = function() {
        return this.previousToken().tokenKind === 80 ? !1 : this.currentToken().tokenKind === 86 ? !0 : this.canEatExplicitOrAutomaticSemicolon(!
          1);
      };

      b.prototype.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator = function() {
        var a = this.currentToken();
        return a.tokenKind === 71 || a.tokenKind === 72 ? !0 : !1;
      };

      b.prototype.isExpectedHeritageClause_TypeNameListTerminator = function() {
        var a = this.currentToken();
        return a.tokenKind === 48 || a.tokenKind === 51 ? !0 : this.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator() ? !
          0 : !1;
      };

      b.prototype.isExpectedArgumentList_AssignmentExpressionsTerminator = function() {
        var a = this.currentToken();
        return a.tokenKind === 74 || a.tokenKind === 79;
      };

      b.prototype.isExpectedClassDeclaration_ClassElementsTerminator = function() {
        return this.currentToken().tokenKind === 72;
      };

      b.prototype.isExpectedSwitchStatement_SwitchClausesTerminator = function() {
        return this.currentToken().tokenKind === 72;
      };

      b.prototype.isExpectedSwitchClause_StatementsTerminator = function() {
        return this.currentToken().tokenKind === 72 || this.isSwitchClause();
      };

      b.prototype.isExpectedBlock_StatementsTerminator = function() {
        return this.currentToken().tokenKind === 72;
      };

      b.prototype.isExpectedTryBlock_StatementsTerminator = function() {
        return this.currentToken().tokenKind === 17 || this.currentToken().tokenKind === 25;
      };

      b.prototype.isExpectedCatchBlock_StatementsTerminator = function() {
        return this.currentToken().tokenKind === 25;
      };

      b.prototype.isExpectedListItem = function(b, c) {
        switch (b) {
          case 1:
            return this.isModuleElement(c);
          case 1024:
            return this.isHeritageClause();
          case 2:
            return this.isClassElement(c);
          case 4:
            return this.isModuleElement(c);
          case 8:
            return this.isSwitchClause();
          case 16:
            return this.isStatement(c);
          case 32:
            return this.isStatement(c);
          case 64:
          case 128:
            return !1;
          case 256:
            return this.isEnumElement(c);
          case 4096:
          case 8192:
            return this.isVariableDeclarator();
          case 512:
            return this.isTypeMember(c);
          case 16384:
            return this.isExpectedArgumentList_AssignmentExpression();
          case 2048:
            return this.isHeritageClauseTypeName();
          case 32768:
            return this.isPropertyAssignment(c);
          case 131072:
            return this.isParameter();
          case 262144:
            return this.isType();
          case 524288:
            return this.isTypeParameter();
          case 65536:
            return this.isAssignmentOrOmittedExpression();
          default:
            throw a.Errors.invalidOperation();
        }
      };

      b.prototype.isExpectedArgumentList_AssignmentExpression = function() {
        return this.isExpression() ? !0 : this.currentToken().tokenKind === 80 ? !0 : !1;
      };

      b.prototype.parseExpectedListItem = function(b) {
        switch (b) {
          case 1:
            return this.parseModuleElement();
          case 1024:
            return this.parseHeritageClause();
          case 2:
            return this.parseClassElement(!1);
          case 4:
            return this.parseModuleElement();
          case 8:
            return this.parseSwitchClause();
          case 16:
            return this.parseStatement();
          case 32:
            return this.parseStatement();
          case 256:
            return this.parseEnumElement();
          case 512:
            return this.parseTypeMember();
          case 16384:
            return this.parseAssignmentExpression(!0);
          case 2048:
            return this.parseNameOrGenericType();
          case 4096:
            return this.parseVariableDeclarator(!0, !1);
          case 8192:
            return this.parseVariableDeclarator(!1, !1);
          case 32768:
            return this.parsePropertyAssignment();
          case 65536:
            return this.parseAssignmentOrOmittedExpression();
          case 131072:
            return this.parseParameter();
          case 262144:
            return this.parseType();
          case 524288:
            return this.parseTypeParameter();
          default:
            throw a.Errors.invalidOperation();
        }
      };

      b.prototype.getExpectedListElementType = function(b) {
        switch (b) {
          case 1:
            return a.Strings.module__class__interface__enum__import_or_statement;
          case 1024:
            return "{";
          case 2:
            return a.Strings.constructor__function__accessor_or_variable;
          case 4:
            return a.Strings.module__class__interface__enum__import_or_statement;
          case 8:
            return a.Strings.case_or_default_clause;
          case 16:
            return a.Strings.statement;
          case 32:
            return a.Strings.statement;
          case 4096:
          case 8192:
            return a.Strings.identifier;
          case 256:
            return a.Strings.identifier;
          case 512:
            return a.Strings.call__construct__index__property_or_function_signature;
          case 16384:
            return a.Strings.expression;
          case 2048:
            return a.Strings.type_name;
          case 32768:
            return a.Strings.property_or_accessor;
          case 131072:
            return a.Strings.parameter;
          case 262144:
            return a.Strings.type;
          case 524288:
            return a.Strings.type_parameter;
          case 65536:
            return a.Strings.expression;
          default:
            throw a.Errors.invalidOperation();
        }
      };

      return b;
    }();
    b.parse = i;

    b.incrementalParse = j;
  })(a.Parser || (a.Parser = {}));
  var b = a.Parser;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a, b, c, d, e, f, g) {
      this._allDiagnostics = null;

      this._sourceUnit = a;

      this._isDeclaration = b;

      this._parserDiagnostics = c;

      this._fileName = d;

      this._lineMap = e;

      this._languageVersion = f;

      this._parseOptions = g;
    }
    b.prototype.toJSON = function(b) {
      var c = {};
      c.isDeclaration = this._isDeclaration;

      c.languageVersion = a.LanguageVersion[this._languageVersion];

      c.parseOptions = this._parseOptions;

      this.diagnostics().length > 0 && (c.diagnostics = this.diagnostics());

      c.sourceUnit = this._sourceUnit;

      c.lineMap = this._lineMap;

      return c;
    };

    b.prototype.sourceUnit = function() {
      return this._sourceUnit;
    };

    b.prototype.isDeclaration = function() {
      return this._isDeclaration;
    };

    b.prototype.computeDiagnostics = function() {
      if (this._parserDiagnostics.length > 0) {
        return this._parserDiagnostics;
      }
      var a = [];
      this.sourceUnit().accept(new c(this, a));

      return a;
    };

    b.prototype.diagnostics = function() {
      this._allDiagnostics === null && (this._allDiagnostics = this.computeDiagnostics());

      return this._allDiagnostics;
    };

    b.prototype.fileName = function() {
      return this._fileName;
    };

    b.prototype.lineMap = function() {
      return this._lineMap;
    };

    b.prototype.languageVersion = function() {
      return this._languageVersion;
    };

    b.prototype.parseOptions = function() {
      return this._parseOptions;
    };

    b.prototype.structuralEquals = function(b) {
      return a.ArrayUtilities.sequenceEquals(this.diagnostics(), b.diagnostics(), a.SyntaxDiagnostic.equals) && this.sourceUnit()
        .structuralEquals(b.sourceUnit());
    };

    return b;
  }();
  a.SyntaxTree = b;
  var c = function(b) {
    function c(a, c) {
      b.call(this);

      this.syntaxTree = a;

      this.diagnostics = c;

      this.inAmbientDeclaration = !1;

      this.inBlock = !1;

      this.currentConstructor = null;
    }
    __extends(c, b);

    c.prototype.childFullStart = function(b, c) {
      return this.position() + a.Syntax.childOffset(b, c);
    };

    c.prototype.childStart = function(a, b) {
      return this.childFullStart(a, b) + b.leadingTriviaWidth();
    };

    c.prototype.pushDiagnostic = function(b, c, d, e) {
      if (typeof e == "undefined") {
        e = null;
      }

      this.diagnostics.push(new a.SyntaxDiagnostic(this.syntaxTree.fileName(), b, c, d, e));
    };

    c.prototype.pushDiagnostic1 = function(b, c, d, e) {
      if (typeof e == "undefined") {
        e = null;
      }

      this.diagnostics.push(new a.SyntaxDiagnostic(this.syntaxTree.fileName(), b + c.leadingTriviaWidth(), c.width(),
        d, e));
    };

    c.prototype.visitCatchClause = function(a) {
      if (a.typeAnnotation) {
        this.pushDiagnostic(this.childStart(a, a.typeAnnotation), a.typeAnnotation.width(), 17);
      }

      b.prototype.visitCatchClause.call(this, a);
    };

    c.prototype.checkParameterListOrder = function(a) {
      var b = this.childFullStart(a, a.parameters);

      var c = !1;

      var d = a.parameters.nonSeparatorCount();
      for (var e = 0, f = a.parameters.childCount(); e < f; e++) {
        var g = a.parameters.childAt(e);
        if (e % 2 === 0) {
          var h = e / 2;

          var i = a.parameters.childAt(e);
          if (i.dotDotDotToken) {
            if (h !== d - 1) {
              this.pushDiagnostic1(b, i, 18);
              return !0;
            }
            if (i.questionToken) {
              this.pushDiagnostic1(b, i, 56);
              return !0;
            }
            if (i.equalsValueClause) {
              this.pushDiagnostic1(b, i, 57);
              return !0;
            }
          } else if (i.questionToken || i.equalsValueClause) {
            c = !0;
            if (i.questionToken && i.equalsValueClause) {
              this.pushDiagnostic1(b, i, 19);
              return !0;
            }
          } else if (c) {
            this.pushDiagnostic1(b, i, 20);
            return !0;
          }
        }
        b += g.fullWidth();
      }
      return !1;
    };

    c.prototype.checkParameterListAcessibilityModifiers = function(b) {
      if (this.currentConstructor !== null && this.currentConstructor.parameterList === b && this.currentConstructor.block && !
        this.inAmbientDeclaration) {
        return !1;
      }
      var c = this.childFullStart(b, b.parameters);
      for (var d = 0, e = b.parameters.childCount(); d < e; d++) {
        var f = b.parameters.childAt(d);
        if (d % 2 === 0) {
          var g = b.parameters.childAt(d);
          if (g.publicOrPrivateKeyword) {
            var h = c + a.Syntax.childOffset(g, g.publicOrPrivateKeyword);
            this.pushDiagnostic1(h, g.publicOrPrivateKeyword, 43);
          }
        }
        c += f.fullWidth();
      }
      return !1;
    };

    c.prototype.checkForTrailingSeparator = function(a, b) {
      if (b.childCount() === 0 || b.childCount() % 2 === 1) {
        return !1;
      }
      var c = this.childFullStart(a, b);
      for (var d = 0, e = b.childCount(); d < e; d++) {
        var f = b.childAt(d);
        if (d === e - 1) {
          this.pushDiagnostic1(c, f, 13);
        }

        c += f.fullWidth();
      }
      return !0;
    };

    c.prototype.checkForAtLeastOneElement = function(a, b, c) {
      if (b.childCount() > 0) {
        return !1;
      }
      var d = this.childFullStart(a, b);

      var e = this.syntaxTree.sourceUnit().findToken(d);
      this.pushDiagnostic1(d, e.token(), 12, [c]);

      return !0;
    };

    c.prototype.visitParameterList = function(a) {
      if (this.checkParameterListAcessibilityModifiers(a) || this.checkParameterListOrder(a) || this.checkForTrailingSeparator(
        a, a.parameters)) {
        this.skip(a);
        return;
      }
      b.prototype.visitParameterList.call(this, a);
    };

    c.prototype.visitHeritageClause = function(c) {
      if (this.checkForTrailingSeparator(c, c.typeNames) || this.checkForAtLeastOneElement(c, c.typeNames, a.Strings.type_name)) {
        this.skip(c);
        return;
      }
      b.prototype.visitHeritageClause.call(this, c);
    };

    c.prototype.visitArgumentList = function(a) {
      if (this.checkForTrailingSeparator(a, a.arguments)) {
        this.skip(a);
        return;
      }
      b.prototype.visitArgumentList.call(this, a);
    };

    c.prototype.visitVariableDeclaration = function(c) {
      if (this.checkForTrailingSeparator(c, c.variableDeclarators) || this.checkForAtLeastOneElement(c, c.variableDeclarators,
        a.Strings.identifier)) {
        this.skip(c);
        return;
      }
      b.prototype.visitVariableDeclaration.call(this, c);
    };

    c.prototype.visitTypeArgumentList = function(c) {
      if (this.checkForTrailingSeparator(c, c.typeArguments) || this.checkForAtLeastOneElement(c, c.typeArguments, a.Strings
        .identifier)) {
        this.skip(c);
        return;
      }
      b.prototype.visitTypeArgumentList.call(this, c);
    };

    c.prototype.visitTypeParameterList = function(c) {
      if (this.checkForTrailingSeparator(c, c.typeParameters) || this.checkForAtLeastOneElement(c, c.typeParameters,
        a.Strings.identifier)) {
        this.skip(c);
        return;
      }
      b.prototype.visitTypeParameterList.call(this, c);
    };

    c.prototype.checkIndexSignatureParameter = function(a) {
      var b = this.childFullStart(a, a.parameter);

      var c = a.parameter;
      return c.dotDotDotToken ? (this.pushDiagnostic1(b, c, 21), !0) : c.publicOrPrivateKeyword ? (this.pushDiagnostic1(
        b, c, 22), !0) : c.questionToken ? (this.pushDiagnostic1(b, c, 23), !0) : c.equalsValueClause ? (this.pushDiagnostic1(
        b, c, 24), !0) : c.typeAnnotation ? c.typeAnnotation.type.kind() !== 70 && c.typeAnnotation.type.kind() !==
        68 ? (this.pushDiagnostic1(b, c, 27), !0) : !1 : (this.pushDiagnostic1(b, c, 26), !0);
    };

    c.prototype.visitIndexSignature = function(a) {
      if (this.checkIndexSignatureParameter(a)) {
        this.skip(a);
        return;
      }
      if (!a.typeAnnotation) {
        this.pushDiagnostic1(this.position(), a, 25);

        this.skip(a);
        return;
      }
      b.prototype.visitIndexSignature.call(this, a);
    };

    c.prototype.checkClassDeclarationHeritageClauses = function(b) {
      var c = this.childFullStart(b, b.heritageClauses);

      var d = !1;

      var e = !1;
      for (var f = 0, g = b.heritageClauses.childCount(); f < g; f++) {
        a.Debug.assert(f <= 2);
        var h = b.heritageClauses.childAt(f);
        if (h.extendsOrImplementsKeyword.tokenKind === 48) {
          if (d) {
            this.pushDiagnostic1(c, h, 28);
            return !0;
          }
          if (e) {
            this.pushDiagnostic1(c, h, 29);
            return !0;
          }
          if (h.typeNames.nonSeparatorCount() > 1) {
            this.pushDiagnostic1(c, h, 30);
            return !0;
          }
          d = !0;
        } else {
          a.Debug.assert(h.extendsOrImplementsKeyword.tokenKind === 51);
          if (e) {
            this.pushDiagnostic1(c, h, 31);
            return !0;
          }
          e = !0;
        }
        c += h.fullWidth();
      }
      return !1;
    };

    c.prototype.checkForDisallowedDeclareModifier = function(b) {
      if (this.inAmbientDeclaration) {
        var c = a.SyntaxUtilities.getToken(b, 64);
        if (c) {
          this.pushDiagnostic1(this.childFullStart(b, c), c, 41);
          return !0;
        }
      }
      return !1;
    };

    c.prototype.checkForRequiredDeclareModifier = function(b, c, d) {
      if (!this.inAmbientDeclaration && this.syntaxTree.isDeclaration() && !a.SyntaxUtilities.containsToken(d, 64)) {
        this.pushDiagnostic1(this.childFullStart(b, c), c.firstToken(), 49);
        return !0;
      }
    };

    c.prototype.checkFunctionOverloads = function(b, c) {
      if (!this.inAmbientDeclaration && !this.syntaxTree.isDeclaration()) {
        var d = this.childFullStart(b, c);

        var e = !1;

        var f = null;
        for (var g = 0, h = c.childCount(); g < h; g++) {
          var i = c.childAt(g);

          var j = g === h - 1;
          if (e) {
            if (i.kind() !== 129) {
              this.pushDiagnostic1(d, i.firstToken(), 44);
              return !0;
            }
            var k = i;
            if (k.identifier.valueText() !== f) {
              var l = d + a.Syntax.childOffset(i, k.identifier);
              this.pushDiagnostic1(l, k.identifier, 46, [f]);

              return !0;
            }
          }
          if (i.kind() === 129) {
            k = i;
            if (!a.SyntaxUtilities.containsToken(k.modifiers, 64)) {
              e = k.block === null;

              f = k.identifier.valueText();
              if (j && e) {
                this.pushDiagnostic1(d, i.firstToken(), 44);
                return !0;
              }
            } else {
              e = !1;
              f = "";
            }
          }
          d += i.fullWidth();
        }
      }
      return !1;
    };

    c.prototype.checkClassOverloads = function(b) {
      if (!this.inAmbientDeclaration && !a.SyntaxUtilities.containsToken(b.modifiers, 64)) {
        var c = this.childFullStart(b, b.classElements);

        var d = !1;

        var e = !1;

        var f = null;

        var g = null;
        for (var h = 0, i = b.classElements.childCount(); h < i; h++) {
          var j = b.classElements.childAt(h);

          var k = h === i - 1;
          if (d) {
            if (j.kind() !== 135) {
              this.pushDiagnostic1(c, j.firstToken(), 44);
              return !0;
            }
            g = j;
            if (g.propertyName.valueText() !== f) {
              var l = c + a.Syntax.childOffset(j, g.propertyName);
              this.pushDiagnostic1(l, g.propertyName, 46, [f]);

              return !0;
            }
          } else if (e && j.kind() !== 137) {
            this.pushDiagnostic1(c, j.firstToken(), 45);
            return !0;
          }
          if (j.kind() === 135) {
            g = j;

            d = g.block === null;

            f = g.propertyName.valueText();
            if (k && d) {
              this.pushDiagnostic1(c, j.firstToken(), 44);
              return !0;
            }
          } else if (j.kind() === 137) {
            var m = j;
            e = m.block === null;
            if (k && e) {
              this.pushDiagnostic1(c, j.firstToken(), 45);
              return !0;
            }
          }
          c += j.fullWidth();
        }
      }
      return !1;
    };

    c.prototype.checkForReservedName = function(b, c, d) {
      var e = this.childFullStart(b, c);

      var f;

      var g;

      var h = c;
      while (h !== null) {
        if (h.kind() === 122) {
          var i = h;
          f = i.right;

          g = e + this.childFullStart(i, f);

          h = i.left;
        } else {
          a.Debug.assert(h.kind() === 11);
          f = h;
          g = e;
          h = null;
        }
        switch (f.valueText()) {
          case "any":
          case "number":
          case "bool":
          case "string":
          case "void":
            this.pushDiagnostic(g + f.leadingTriviaWidth(), f.width(), d, [f.valueText()]);

            return !0;
        }
      }
      return !1;
    };

    c.prototype.visitClassDeclaration = function(c) {
      if (this.checkForReservedName(c, c.identifier, 60) || this.checkForDisallowedDeclareModifier(c.modifiers) ||
        this.checkForRequiredDeclareModifier(c, c.classKeyword, c.modifiers) || this.checkModuleElementModifiers(c.modifiers) ||
        this.checkClassDeclarationHeritageClauses(c) || this.checkClassOverloads(c)) {
        this.skip(c);
        return;
      }
      var d = this.inAmbientDeclaration;
      this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || a.SyntaxUtilities.containsToken(
        c.modifiers, 64);

      b.prototype.visitClassDeclaration.call(this, c);

      this.inAmbientDeclaration = d;
    };

    c.prototype.checkInterfaceDeclarationHeritageClauses = function(b) {
      var c = this.childFullStart(b, b.heritageClauses);

      var d = !1;
      for (var e = 0, f = b.heritageClauses.childCount(); e < f; e++) {
        a.Debug.assert(e <= 1);
        var g = b.heritageClauses.childAt(e);
        if (g.extendsOrImplementsKeyword.tokenKind !== 48) {
          a.Debug.assert(g.extendsOrImplementsKeyword.tokenKind === 51);
          this.pushDiagnostic1(c, g, 36);
          return !0;
        }
        if (d) {
          this.pushDiagnostic1(c, g, 28);
          return !0;
        }
        d = !0;

        c += g.fullWidth();
      }
      return !1;
    };

    c.prototype.checkInterfaceModifiers = function(a) {
      var b = this.position();
      for (var c = 0, d = a.childCount(); c < d; c++) {
        var e = a.childAt(c);
        if (e.tokenKind === 64) {
          this.pushDiagnostic1(b, e, 48);
          return !0;
        }
        b += e.fullWidth();
      }
      return !1;
    };

    c.prototype.visitInterfaceDeclaration = function(a) {
      if (this.checkForReservedName(a, a.identifier, 61) || this.checkInterfaceModifiers(a.modifiers) || this.checkModuleElementModifiers(
        a.modifiers) || this.checkInterfaceDeclarationHeritageClauses(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitInterfaceDeclaration.call(this, a);
    };

    c.prototype.checkClassElementModifiers = function(a) {
      var b = this.position();

      var c = !1;

      var d = !1;
      for (var e = 0, f = a.childCount(); e < f; e++) {
        var g = a.childAt(e);
        if (g.tokenKind === 57 || g.tokenKind === 55) {
          if (c) {
            this.pushDiagnostic1(b, g, 32);
            return !0;
          }
          if (d) {
            var h = a.childAt(e - 1);
            this.pushDiagnostic1(b, g, 33, [g.text(), h.text()]);

            return !0;
          }
          c = !0;
        } else {
          if (g.tokenKind !== 58) {
            this.pushDiagnostic1(b, g, 35, [g.text()]);
            return !0;
          }
          if (d) {
            this.pushDiagnostic1(b, g, 34, [g.text()]);
            return !0;
          }
          d = !0;
        }
        b += g.fullWidth();
      }
      return !1;
    };

    c.prototype.visitMemberVariableDeclaration = function(a) {
      if (this.checkClassElementModifiers(a.modifiers)) {
        this.skip(a);
        return;
      }
      b.prototype.visitMemberVariableDeclaration.call(this, a);
    };

    c.prototype.visitMemberFunctionDeclaration = function(a) {
      if (this.checkClassElementModifiers(a.modifiers)) {
        this.skip(a);
        return;
      }
      b.prototype.visitMemberFunctionDeclaration.call(this, a);
    };

    c.prototype.checkGetMemberAccessorParameter = function(a) {
      var b = this.childFullStart(a, a.getKeyword);
      return a.parameterList.parameters.childCount() !== 0 ? (this.pushDiagnostic1(b, a.getKeyword, 55), !0) : !1;
    };

    c.prototype.checkEcmaScriptVersionIsAtLeast = function(a, b, c, d) {
      if (this.syntaxTree.languageVersion() < c) {
        var e = this.childFullStart(a, b);
        this.pushDiagnostic1(e, b, d);

        return !0;
      }
      return !1;
    };

    c.prototype.visitGetMemberAccessorDeclaration = function(a) {
      if (this.checkEcmaScriptVersionIsAtLeast(a, a.getKeyword, 1, 59) || this.checkClassElementModifiers(a.modifiers) ||
        this.checkGetMemberAccessorParameter(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitGetMemberAccessorDeclaration.call(this, a);
    };

    c.prototype.checkSetMemberAccessorParameter = function(b) {
      var c = this.childFullStart(b, b.setKeyword);
      if (b.parameterList.parameters.childCount() !== 1) {
        this.pushDiagnostic1(c, b.setKeyword, 50);
        return !0;
      }
      var d = this.childFullStart(b, b.parameterList);

      var e = d + a.Syntax.childOffset(b.parameterList, b.parameterList.openParenToken);

      var f = b.parameterList.parameters.childAt(0);
      return f.publicOrPrivateKeyword ? (this.pushDiagnostic1(e, f, 51), !0) : f.questionToken ? (this.pushDiagnostic1(
        e, f, 52), !0) : f.equalsValueClause ? (this.pushDiagnostic1(e, f, 53), !0) : f.dotDotDotToken ? (this.pushDiagnostic1(
        e, f, 54), !0) : !1;
    };

    c.prototype.visitSetMemberAccessorDeclaration = function(a) {
      if (this.checkEcmaScriptVersionIsAtLeast(a, a.setKeyword, 1, 59) || this.checkClassElementModifiers(a.modifiers) ||
        this.checkSetMemberAccessorParameter(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitSetMemberAccessorDeclaration.call(this, a);
    };

    c.prototype.visitGetAccessorPropertyAssignment = function(a) {
      if (this.checkEcmaScriptVersionIsAtLeast(a, a.getKeyword, 1, 59)) {
        this.skip(a);
        return;
      }
      b.prototype.visitGetAccessorPropertyAssignment.call(this, a);
    };

    c.prototype.visitSetAccessorPropertyAssignment = function(a) {
      if (this.checkEcmaScriptVersionIsAtLeast(a, a.setKeyword, 1, 59)) {
        this.skip(a);
        return;
      }
      b.prototype.visitSetAccessorPropertyAssignment.call(this, a);
    };

    c.prototype.visitEnumDeclaration = function(c) {
      if (this.checkForReservedName(c, c.identifier, 62) || this.checkForDisallowedDeclareModifier(c.modifiers) ||
        this.checkForRequiredDeclareModifier(c, c.enumKeyword, c.modifiers) || this.checkModuleElementModifiers(c.modifiers),
        this.checkEnumElements(c)) {
        this.skip(c);
        return;
      }
      var d = this.inAmbientDeclaration;
      this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || a.SyntaxUtilities.containsToken(
        c.modifiers, 64);

      b.prototype.visitEnumDeclaration.call(this, c);

      this.inAmbientDeclaration = d;
    };

    c.prototype.checkEnumElements = function(a) {
      var b = this.childFullStart(a, a.enumElements);

      var c = !1;
      for (var d = 0, e = a.enumElements.childCount(); d < e; d++) {
        var f = a.enumElements.childAt(d);
        if (d % 2 === 0) {
          var g = f;
          if (!g.equalsValueClause && c) {
            this.pushDiagnostic1(b, g, 64, null);
            return !0;
          }
          if (g.equalsValueClause) {
            var h = g.equalsValueClause.value;
            if (h.kind() !== 13) {
              c = !0;
            }
          }
        }
        b += f.fullWidth();
      }
      return !1;
    };

    c.prototype.visitInvocationExpression = function(a) {
      if (a.expression.kind() === 50 && a.argumentList.typeArgumentList !== null) {
        this.pushDiagnostic1(this.position(), a, 37);
      }

      b.prototype.visitInvocationExpression.call(this, a);
    };

    c.prototype.checkModuleElementModifiers = function(b) {
      var c = this.position();

      var d = !1;

      var e = !1;
      for (var f = 0, g = b.childCount(); f < g; f++) {
        var h = b.childAt(f);
        if (h.tokenKind === 57 || h.tokenKind === 55 || h.tokenKind === 58) {
          this.pushDiagnostic1(c, h, 47, [h.text()]);
          return !0;
        }
        if (h.tokenKind === 64) {
          if (e) {
            this.pushDiagnostic1(c, h, 32);
            return;
          }
          e = !0;
        } else if (h.tokenKind === 47) {
          if (d) {
            this.pushDiagnostic1(c, h, 34, [h.text()]);
            return;
          }
          if (e) {
            this.pushDiagnostic1(c, h, 33, [a.SyntaxFacts.getText(47), a.SyntaxFacts.getText(64)]);
            return;
          }
          d = !0;
        }
        c += h.fullWidth();
      }
      return !1;
    };

    c.prototype.checkForDisallowedImportDeclaration = function(a) {
      if (a.stringLiteral === null) {
        var b = this.childFullStart(a, a.moduleElements);
        for (var c = 0, d = a.moduleElements.childCount(); c < d; c++) {
          var e = a.moduleElements.childAt(c);
          if (e.kind() === 133) {
            var f = e;
            if (f.moduleReference.kind() === 245) {
              this.pushDiagnostic1(b, f, 201, null);
            }
          }
          b += e.fullWidth();
        }
      }
      return !1;
    };

    c.prototype.visitModuleDeclaration = function(c) {
      if (this.checkForReservedName(c, c.moduleName, 63) || this.checkForDisallowedDeclareModifier(c.modifiers) ||
        this.checkForRequiredDeclareModifier(c, c.moduleKeyword, c.modifiers) || this.checkModuleElementModifiers(c.modifiers) ||
        this.checkForDisallowedImportDeclaration(c) || this.checkForDisallowedExports(c, c.moduleElements) || this.checkForMultipleExportAssignments(
          c, c.moduleElements)) {
        this.skip(c);
        return;
      }
      if (!a.SyntaxUtilities.containsToken(c.modifiers, 64) && this.checkFunctionOverloads(c, c.moduleElements)) {
        this.skip(c);
        return;
      }
      if (c.stringLiteral && !this.inAmbientDeclaration && !a.SyntaxUtilities.containsToken(c.modifiers, 64)) {
        var d = this.childFullStart(c, c.stringLiteral);
        this.pushDiagnostic1(d, c.stringLiteral, 38);

        this.skip(c);
        return;
      }
      if (!c.stringLiteral && this.checkForDisallowedExportAssignment(c)) {
        this.skip(c);
        return;
      }
      var e = this.inAmbientDeclaration;
      this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || a.SyntaxUtilities.containsToken(
        c.modifiers, 64);

      b.prototype.visitModuleDeclaration.call(this, c);

      this.inAmbientDeclaration = e;
    };

    c.prototype.checkForDisallowedExports = function(b, c) {
      var d = !1;
      for (var e = 0, f = c.childCount(); e < f; e++) {
        var g = c.childAt(e);
        if (a.SyntaxUtilities.hasExportKeyword(g)) {
          d = !0;
          break;
        }
      }
      var h = this.childFullStart(b, c);
      if (d)
        for (var e = 0, f = c.childCount(); e < f; e++) {
          var g = c.childAt(e);
          if (g.kind() === 134) {
            this.pushDiagnostic1(h, g, 67);
            return !0;
          }
          h += g.fullWidth();
        }
      return !1;
    };

    c.prototype.checkForMultipleExportAssignments = function(a, b) {
      var c = this.childFullStart(a, b);

      var d = !1;

      var e = !1;
      for (var f = 0, g = b.childCount(); f < g; f++) {
        var h = b.childAt(f);
        if (h.kind() === 134) {
          if (d) {
            this.pushDiagnostic1(c, h, 68);
            e = !0;
          }
          d = !0;
        }

        c += h.fullWidth();
      }
      return e;
    };

    c.prototype.checkForDisallowedExportAssignment = function(a) {
      var b = this.childFullStart(a, a.moduleElements);
      for (var c = 0, d = a.moduleElements.childCount(); c < d; c++) {
        var e = a.moduleElements.childAt(c);
        if (e.kind() === 134) {
          this.pushDiagnostic1(b, e, 66);
          return !0;
        }
        b += e.fullWidth();
      }
      return !1;
    };

    c.prototype.visitBlock = function(a) {
      if (this.inAmbientDeclaration || this.syntaxTree.isDeclaration()) {
        this.pushDiagnostic1(this.position(), a.firstToken(), 40);

        this.skip(a);
        return;
      }
      if (this.checkFunctionOverloads(a, a.statements)) {
        this.skip(a);
        return;
      }
      var c = this.inBlock;
      this.inBlock = !0;

      b.prototype.visitBlock.call(this, a);

      this.inBlock = c;
    };

    c.prototype.checkForStatementInAmbientContxt = function(a) {
      return this.inAmbientDeclaration || this.syntaxTree.isDeclaration() ? (this.pushDiagnostic1(this.position(), a.firstToken(),
        39), !0) : !1;
    };

    c.prototype.visitBreakStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitBreakStatement.call(this, a);
    };

    c.prototype.visitContinueStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitContinueStatement.call(this, a);
    };

    c.prototype.visitDebuggerStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitDebuggerStatement.call(this, a);
    };

    c.prototype.visitDoStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitDoStatement.call(this, a);
    };

    c.prototype.visitEmptyStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitEmptyStatement.call(this, a);
    };

    c.prototype.visitExpressionStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitExpressionStatement.call(this, a);
    };

    c.prototype.visitForInStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitForInStatement.call(this, a);
    };

    c.prototype.visitForStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitForStatement.call(this, a);
    };

    c.prototype.visitIfStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitIfStatement.call(this, a);
    };

    c.prototype.visitLabeledStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitLabeledStatement.call(this, a);
    };

    c.prototype.visitReturnStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitReturnStatement.call(this, a);
    };

    c.prototype.visitSwitchStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitSwitchStatement.call(this, a);
    };

    c.prototype.visitThrowStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitThrowStatement.call(this, a);
    };

    c.prototype.visitTryStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitTryStatement.call(this, a);
    };

    c.prototype.visitWhileStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitWhileStatement.call(this, a);
    };

    c.prototype.visitWithStatement = function(a) {
      if (this.checkForStatementInAmbientContxt(a)) {
        this.skip(a);
        return;
      }
      b.prototype.visitWithStatement.call(this, a);
    };

    c.prototype.checkForDisallowedModifiers = function(a, b) {
      if (this.inBlock && b.childCount() > 0) {
        var c = this.childFullStart(a, b);
        this.pushDiagnostic1(c, b.childAt(0), 58);

        return !0;
      }
      return !1;
    };

    c.prototype.visitFunctionDeclaration = function(c) {
      if (this.checkForDisallowedDeclareModifier(c.modifiers) || this.checkForDisallowedModifiers(c, c.modifiers) ||
        this.checkForRequiredDeclareModifier(c, c.functionKeyword, c.modifiers) || this.checkModuleElementModifiers(c
          .modifiers)) {
        this.skip(c);
        return;
      }
      var d = this.inAmbientDeclaration;
      this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || a.SyntaxUtilities.containsToken(
        c.modifiers, 64);

      b.prototype.visitFunctionDeclaration.call(this, c);

      this.inAmbientDeclaration = d;
    };

    c.prototype.visitVariableStatement = function(c) {
      if (this.checkForDisallowedDeclareModifier(c.modifiers) || this.checkForDisallowedModifiers(c, c.modifiers) ||
        this.checkForRequiredDeclareModifier(c, c.variableDeclaration, c.modifiers) || this.checkModuleElementModifiers(
          c.modifiers)) {
        this.skip(c);
        return;
      }
      var d = this.inAmbientDeclaration;
      this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || a.SyntaxUtilities.containsToken(
        c.modifiers, 64);

      b.prototype.visitVariableStatement.call(this, c);

      this.inAmbientDeclaration = d;
    };

    c.prototype.checkListSeparators = function(b, c, d) {
      var e = this.childFullStart(b, c);
      for (var f = 0, g = c.childCount(); f < g; f++) {
        var h = c.childAt(f);
        if (f % 2 === 1 && h.kind() !== d) {
          this.pushDiagnostic1(e, h, 9, [a.SyntaxFacts.getText(d)]);
        }

        e += h.fullWidth();
      }
      return !1;
    };

    c.prototype.visitObjectType = function(a) {
      if (this.checkListSeparators(a, a.typeMembers, 79)) {
        this.skip(a);
        return;
      }
      var c = this.inAmbientDeclaration;
      this.inAmbientDeclaration = !0;

      b.prototype.visitObjectType.call(this, a);

      this.inAmbientDeclaration = c;
    };

    c.prototype.visitArrayType = function(a) {
      var c = this.inAmbientDeclaration;
      this.inAmbientDeclaration = !0;

      b.prototype.visitArrayType.call(this, a);

      this.inAmbientDeclaration = c;
    };

    c.prototype.visitFunctionType = function(a) {
      var c = this.inAmbientDeclaration;
      this.inAmbientDeclaration = !0;

      b.prototype.visitFunctionType.call(this, a);

      this.inAmbientDeclaration = c;
    };

    c.prototype.visitConstructorType = function(a) {
      var c = this.inAmbientDeclaration;
      this.inAmbientDeclaration = !0;

      b.prototype.visitConstructorType.call(this, a);

      this.inAmbientDeclaration = c;
    };

    c.prototype.visitEqualsValueClause = function(a) {
      if (this.inAmbientDeclaration) {
        this.pushDiagnostic1(this.position(), a.firstToken(), 42);

        this.skip(a);
        return;
      }
      b.prototype.visitEqualsValueClause.call(this, a);
    };

    c.prototype.visitConstructorDeclaration = function(a) {
      var c = this.currentConstructor;
      this.currentConstructor = a;

      b.prototype.visitConstructorDeclaration.call(this, a);

      this.currentConstructor = c;
    };

    c.prototype.visitSourceUnit = function(a) {
      if (this.checkFunctionOverloads(a, a.moduleElements) || this.checkForDisallowedExports(a, a.moduleElements) ||
        this.checkForMultipleExportAssignments(a, a.moduleElements)) {
        this.skip(a);
        return;
      }
      b.prototype.visitSourceUnit.call(this, a);
    };

    c.prototype.visitExternalModuleReference = function(a) {
      if (a.moduleOrRequireKeyword.tokenKind === 66 && !this.syntaxTree.parseOptions().allowModuleKeywordInExternalModuleReference()) {
        this.pushDiagnostic1(this.position(), a.moduleOrRequireKeyword, 65);

        this.skip(a);
        return;
      }
      b.prototype.visitExternalModuleReference.call(this, a);
    };

    return c;
  }(a.PositionTrackingWalker);
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(b) {
    function c(a) {
      b.call(this);

      this.textSpan = a;

      this._position = 0;
    }
    __extends(c, b);

    c.prototype.visitToken = function(a) {
      this._position += a.fullWidth();
    };

    c.prototype.visitNode = function(b) {
      var c = new a.TextSpan(this.position(), b.fullWidth());
      if (c.intersectsWithTextSpan(this.textSpan)) {
        b.accept(this);
      } else {
        this._position += b.fullWidth();
      }
    };

    c.prototype.position = function() {
      return this._position;
    };

    return c;
  }(a.SyntaxWalker);
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b() {}
    b.lookupInUnicodeMap = function(a, b) {
      if (a < b[0]) {
        return !1;
      }
      var c = 0;

      var d = b.length;

      var e;
      while (c + 1 < d) {
        e = c + (d - c) / 2;

        e -= e % 2;
        if (b[e] <= a && a <= b[e + 1]) {
          return !0;
        }
        if (a < b[e]) {
          d = e;
        } else {
          c = e + 2;
        }
      }
      return !1;
    };

    b.isIdentifierStart = function(c, d) {
      if (d === 0) {
        return b.lookupInUnicodeMap(c, b.unicodeES3IdentifierStart);
      }
      if (d === 1) {
        return b.lookupInUnicodeMap(c, b.unicodeES5IdentifierStart);
      }
      throw a.Errors.argumentOutOfRange("languageVersion");
    };

    b.isIdentifierPart = function(c, d) {
      if (d === 0) {
        return b.lookupInUnicodeMap(c, b.unicodeES3IdentifierPart);
      }
      if (d === 1) {
        return b.lookupInUnicodeMap(c, b.unicodeES5IdentifierPart);
      }
      throw a.Errors.argumentOutOfRange("languageVersion");
    };

    b.unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685,
      688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974,
      976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369,
      1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786,
      1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447,
      2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575,
      2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693,
      2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,
      2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911,
      2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990,
      2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214,
      3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370,
      3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648,
      3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749,
      3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840,
      3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304,
      4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696,
      4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800,
      4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896,
      4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272,
      6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027,
      8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150,
      8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473,
      8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321,
      12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593,
      12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275,
      64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326,
      64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313,
      65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500
    ];

    b.unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688,
      696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910,
      929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269,
      1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474,
      1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768,
      1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388,
      2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489,
      2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562,
      2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626,
      2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705,
      2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784,
      2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883,
      2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960,
      2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010,
      3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123,
      3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212,
      3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294,
      3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400,
      3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517,
      3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673,
      3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749,
      3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805,
      3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972,
      3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153,
      4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678,
      4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782,
      4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878,
      4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750,
      5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929,
      7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061,
      8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180,
      8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469,
      8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295,
      12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588,
      12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262,
      64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433,
      64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138,
      65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479,
      65482, 65487, 65490, 65495, 65498, 65500
    ];

    b.unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740,
      748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153,
      1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747,
      1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,
      1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208,
      2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448,
      2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545,
      2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654,
      2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768,
      2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909,
      2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975,
      2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129,
      3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261,
      3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425,
      3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654,
      3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749,
      3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,
      3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198,
      4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685,
      4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800,
      4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759,
      5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6e3, 6016,
      6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512,
      6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086,
      7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680,
      7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064,
      8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182,
      8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484,
      8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264,
      11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568,
      11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,
      11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353,
      12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312,
      19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623,
      42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43009, 43011,
      43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312,
      43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642,
      43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744,
      43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032,
      55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287,
      64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848,
      64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,
      65479, 65482, 65487, 65490, 65495, 65498, 65500
    ];

    b.unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748,
      748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153,
      1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477,
      1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,
      1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220,
      2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472,
      2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531,
      2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617,
      2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691,
      2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765,
      2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867,
      2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929,
      2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,
      2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084,
      3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161,
      3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268,
      3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,
      3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455,
      3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542,
      3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722,
      3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773,
      3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893,
      3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169,
      4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696,
      4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822,
      4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786,
      5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6e3, 6002, 6003, 6016,
      6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400,
      6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688,
      6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168,
      7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008,
      8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,
      8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276,
      8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458,
      8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,
      8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,
      11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704,
      11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321,
      12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549,
      12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240,
      42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891,
      42894, 42896, 42899, 42912, 42922, 43e3, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259,
      43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600,
      43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785,
      43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216,
      55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312,
      64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,
      65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313,
      65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500
    ];

    return b;
  }();
  a.Unicode = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function b(a, b) {
    return (a & b) !== 0;
  }

  function c(a, b) {
    return a & ~b;
  }

  function i(a) {
    return a;
  }
  a.hasFlag = b;

  a.withoutFlag = c;

  (function(a) {
    a[a.None = 0] = "None";

    a[a.SingleLine = 2] = "SingleLine";

    a[a.OptionalName = 4] = "OptionalName";

    a[a.TypeReference = 8] = "TypeReference";

    a[a.EnumElement = 16] = "EnumElement";

    a[a.EnumMapElement = 32] = "EnumMapElement";
  })(a.ASTFlags || (a.ASTFlags = {}));
  var d = a.ASTFlags;
  (function(a) {
    a[a.None = 0] = "None";

    a[a.Exported = 1] = "Exported";

    a[a.Private = 2] = "Private";

    a[a.Public = 4] = "Public";

    a[a.Ambient = 8] = "Ambient";

    a[a.Static = 16] = "Static";
  })(a.DeclFlags || (a.DeclFlags = {}));
  var e = a.DeclFlags;
  (function(a) {
    a[a.None = 0] = "None";

    a[a.Exported = 1] = "Exported";

    a[a.Private = 2] = "Private";

    a[a.Public = 4] = "Public";

    a[a.Ambient = 8] = "Ambient";

    a[a.Static = 16] = "Static";

    a[a.IsEnum = 128] = "IsEnum";

    a[a.IsWholeFile = 256] = "IsWholeFile";

    a[a.IsDynamic = 512] = "IsDynamic";
  })(a.ModuleFlags || (a.ModuleFlags = {}));
  var f = a.ModuleFlags;
  (function(a) {
    a[a.None = 0] = "None";

    a[a.Exported = 1] = "Exported";

    a[a.Private = 2] = "Private";

    a[a.Public = 4] = "Public";

    a[a.Ambient = 8] = "Ambient";

    a[a.Static = 16] = "Static";

    a[a.Property = 256] = "Property";

    a[a.ClassProperty = 2048] = "ClassProperty";

    a[a.Constant = 4096] = "Constant";

    a[a.EnumElement = 8192] = "EnumElement";
  })(a.VariableFlags || (a.VariableFlags = {}));
  var g = a.VariableFlags;
  (function(a) {
    a[a.None = 0] = "None";

    a[a.Exported = 1] = "Exported";

    a[a.Private = 2] = "Private";

    a[a.Public = 4] = "Public";

    a[a.Ambient = 8] = "Ambient";

    a[a.Static = 16] = "Static";

    a[a.GetAccessor = 32] = "GetAccessor";

    a[a.SetAccessor = 64] = "SetAccessor";

    a[a.Signature = 128] = "Signature";

    a[a.Method = 256] = "Method";

    a[a.CallMember = 512] = "CallMember";

    a[a.ConstructMember = 1024] = "ConstructMember";

    a[a.IsFatArrowFunction = 2048] = "IsFatArrowFunction";

    a[a.IndexerMember = 4096] = "IndexerMember";

    a[a.IsFunctionExpression = 8192] = "IsFunctionExpression";

    a[a.IsFunctionProperty = 16384] = "IsFunctionProperty";
  })(a.FunctionFlags || (a.FunctionFlags = {}));
  var h = a.FunctionFlags;
  a.ToDeclFlags = i;

  (function(a) {
    a[a.SuccessfulComparison = 0] = "SuccessfulComparison";

    a[a.RequiredPropertyIsMissing = 2] = "RequiredPropertyIsMissing";

    a[a.IncompatibleSignatures = 4] = "IncompatibleSignatures";

    a[a.SourceSignatureHasTooManyParameters = 3] = "SourceSignatureHasTooManyParameters";

    a[a.IncompatibleReturnTypes = 16] = "IncompatibleReturnTypes";

    a[a.IncompatiblePropertyTypes = 32] = "IncompatiblePropertyTypes";

    a[a.IncompatibleParameterTypes = 64] = "IncompatibleParameterTypes";

    a[a.InconsistantPropertyAccesibility = 128] = "InconsistantPropertyAccesibility";
  })(a.TypeRelationshipFlags || (a.TypeRelationshipFlags = {}));
  var j = a.TypeRelationshipFlags;
  (function(a) {
    a[a.Synchronous = 0] = "Synchronous";

    a[a.Asynchronous = 1] = "Asynchronous";
  })(a.ModuleGenTarget || (a.ModuleGenTarget = {}));
  var k = a.ModuleGenTarget;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.None = 0] = "None";

    a[a.List = 1] = "List";

    a[a.Script = 2] = "Script";

    a[a.TrueLiteral = 3] = "TrueLiteral";

    a[a.FalseLiteral = 4] = "FalseLiteral";

    a[a.StringLiteral = 5] = "StringLiteral";

    a[a.RegularExpressionLiteral = 6] = "RegularExpressionLiteral";

    a[a.NumericLiteral = 7] = "NumericLiteral";

    a[a.NullLiteral = 8] = "NullLiteral";

    a[a.TypeParameter = 9] = "TypeParameter";

    a[a.GenericType = 10] = "GenericType";

    a[a.TypeRef = 11] = "TypeRef";

    a[a.FunctionDeclaration = 12] = "FunctionDeclaration";

    a[a.ClassDeclaration = 13] = "ClassDeclaration";

    a[a.InterfaceDeclaration = 14] = "InterfaceDeclaration";

    a[a.ModuleDeclaration = 15] = "ModuleDeclaration";

    a[a.ImportDeclaration = 16] = "ImportDeclaration";

    a[a.VariableDeclarator = 17] = "VariableDeclarator";

    a[a.VariableDeclaration = 18] = "VariableDeclaration";

    a[a.Parameter = 19] = "Parameter";

    a[a.Name = 20] = "Name";

    a[a.ArrayLiteralExpression = 21] = "ArrayLiteralExpression";

    a[a.ObjectLiteralExpression = 22] = "ObjectLiteralExpression";

    a[a.OmittedExpression = 23] = "OmittedExpression";

    a[a.VoidExpression = 24] = "VoidExpression";

    a[a.CommaExpression = 25] = "CommaExpression";

    a[a.PlusExpression = 26] = "PlusExpression";

    a[a.NegateExpression = 27] = "NegateExpression";

    a[a.DeleteExpression = 28] = "DeleteExpression";

    a[a.ThisExpression = 29] = "ThisExpression";

    a[a.SuperExpression = 30] = "SuperExpression";

    a[a.InExpression = 31] = "InExpression";

    a[a.MemberAccessExpression = 32] = "MemberAccessExpression";

    a[a.InstanceOfExpression = 33] = "InstanceOfExpression";

    a[a.TypeOfExpression = 34] = "TypeOfExpression";

    a[a.ElementAccessExpression = 35] = "ElementAccessExpression";

    a[a.InvocationExpression = 36] = "InvocationExpression";

    a[a.ObjectCreationExpression = 37] = "ObjectCreationExpression";

    a[a.AssignmentExpression = 38] = "AssignmentExpression";

    a[a.AddAssignmentExpression = 39] = "AddAssignmentExpression";

    a[a.SubtractAssignmentExpression = 40] = "SubtractAssignmentExpression";

    a[a.DivideAssignmentExpression = 41] = "DivideAssignmentExpression";

    a[a.MultiplyAssignmentExpression = 42] = "MultiplyAssignmentExpression";

    a[a.ModuloAssignmentExpression = 43] = "ModuloAssignmentExpression";

    a[a.AndAssignmentExpression = 44] = "AndAssignmentExpression";

    a[a.ExclusiveOrAssignmentExpression = 45] = "ExclusiveOrAssignmentExpression";

    a[a.OrAssignmentExpression = 46] = "OrAssignmentExpression";

    a[a.LeftShiftAssignmentExpression = 47] = "LeftShiftAssignmentExpression";

    a[a.SignedRightShiftAssignmentExpression = 48] = "SignedRightShiftAssignmentExpression";

    a[a.UnsignedRightShiftAssignmentExpression = 49] = "UnsignedRightShiftAssignmentExpression";

    a[a.ConditionalExpression = 50] = "ConditionalExpression";

    a[a.LogicalOrExpression = 51] = "LogicalOrExpression";

    a[a.LogicalAndExpression = 52] = "LogicalAndExpression";

    a[a.BitwiseOrExpression = 53] = "BitwiseOrExpression";

    a[a.BitwiseExclusiveOrExpression = 54] = "BitwiseExclusiveOrExpression";

    a[a.BitwiseAndExpression = 55] = "BitwiseAndExpression";

    a[a.EqualsWithTypeConversionExpression = 56] = "EqualsWithTypeConversionExpression";

    a[a.NotEqualsWithTypeConversionExpression = 57] = "NotEqualsWithTypeConversionExpression";

    a[a.EqualsExpression = 58] = "EqualsExpression";

    a[a.NotEqualsExpression = 59] = "NotEqualsExpression";

    a[a.LessThanExpression = 60] = "LessThanExpression";

    a[a.LessThanOrEqualExpression = 61] = "LessThanOrEqualExpression";

    a[a.GreaterThanExpression = 62] = "GreaterThanExpression";

    a[a.GreaterThanOrEqualExpression = 63] = "GreaterThanOrEqualExpression";

    a[a.AddExpression = 64] = "AddExpression";

    a[a.SubtractExpression = 65] = "SubtractExpression";

    a[a.MultiplyExpression = 66] = "MultiplyExpression";

    a[a.DivideExpression = 67] = "DivideExpression";

    a[a.ModuloExpression = 68] = "ModuloExpression";

    a[a.LeftShiftExpression = 69] = "LeftShiftExpression";

    a[a.SignedRightShiftExpression = 70] = "SignedRightShiftExpression";

    a[a.UnsignedRightShiftExpression = 71] = "UnsignedRightShiftExpression";

    a[a.BitwiseNotExpression = 72] = "BitwiseNotExpression";

    a[a.LogicalNotExpression = 73] = "LogicalNotExpression";

    a[a.PreIncrementExpression = 74] = "PreIncrementExpression";

    a[a.PreDecrementExpression = 75] = "PreDecrementExpression";

    a[a.PostIncrementExpression = 76] = "PostIncrementExpression";

    a[a.PostDecrementExpression = 77] = "PostDecrementExpression";

    a[a.CastExpression = 78] = "CastExpression";

    a[a.ParenthesizedExpression = 79] = "ParenthesizedExpression";

    a[a.Member = 80] = "Member";

    a[a.Block = 81] = "Block";

    a[a.BreakStatement = 82] = "BreakStatement";

    a[a.ContinueStatement = 83] = "ContinueStatement";

    a[a.DebuggerStatement = 84] = "DebuggerStatement";

    a[a.DoStatement = 85] = "DoStatement";

    a[a.EmptyStatement = 86] = "EmptyStatement";

    a[a.ExportAssignment = 87] = "ExportAssignment";

    a[a.ExpressionStatement = 88] = "ExpressionStatement";

    a[a.ForInStatement = 89] = "ForInStatement";

    a[a.ForStatement = 90] = "ForStatement";

    a[a.IfStatement = 91] = "IfStatement";

    a[a.LabeledStatement = 92] = "LabeledStatement";

    a[a.ReturnStatement = 93] = "ReturnStatement";

    a[a.SwitchStatement = 94] = "SwitchStatement";

    a[a.ThrowStatement = 95] = "ThrowStatement";

    a[a.TryStatement = 96] = "TryStatement";

    a[a.VariableStatement = 97] = "VariableStatement";

    a[a.WhileStatement = 98] = "WhileStatement";

    a[a.WithStatement = 99] = "WithStatement";

    a[a.CaseClause = 100] = "CaseClause";

    a[a.CatchClause = 101] = "CatchClause";

    a[a.Comment = 102] = "Comment";
  })(a.NodeType || (a.NodeType = {}));
  var b = a.NodeType;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {
      this.prototype = undefined;

      this.toString = undefined;

      this.toLocaleString = undefined;

      this.valueOf = undefined;

      this.hasOwnProperty = undefined;

      this.propertyIsEnumerable = undefined;

      this.isPrototypeOf = undefined;

      this.constructor = undefined;
    }
    return a;
  }();
  a.BlockIntrinsics = b;
  var c = function() {
    function a() {
      this.itemCount = 0;

      this.table = new b;
    }
    a.prototype.getAllKeys = function() {
      var a = [];
      for (var b in this.table) {
        if (this.table[b] !== undefined) {
          a.push(b);
        }
      }
      return a;
    };

    a.prototype.add = function(a, b) {
      return this.table[a] !== undefined ? !1 : (this.table[a] = b, this.itemCount++, !0);
    };

    a.prototype.addOrUpdate = function(a, b) {
      return this.table[a] !== undefined ? (this.table[a] = b, !1) : (this.table[a] = b, this.itemCount++, !0);
    };

    a.prototype.map = function(a, b) {
      for (var c in this.table) {
        var d = this.table[c];
        if (d !== undefined) {
          a(c, this.table[c], b);
        }
      }
    };

    a.prototype.every = function(a, b) {
      for (var c in this.table) {
        var d = this.table[c];
        if (d !== undefined && !a(c, this.table[c], b)) {
          return !1;
        }
      }
      return !0;
    };

    a.prototype.some = function(a, b) {
      for (var c in this.table) {
        var d = this.table[c];
        if (d !== undefined && a(c, this.table[c], b)) {
          return !0;
        }
      }
      return !1;
    };

    a.prototype.count = function() {
      return this.itemCount;
    };

    a.prototype.lookup = function(a) {
      var b = this.table[a];
      return b === undefined ? null : b;
    };

    return a;
  }();
  a.StringHashTable = c;
  var d = function(a) {
    function b() {
      a.apply(this, arguments);
    }
    __extends(b, a);

    b.prototype.getAllKeys = function() {
      var b = [];
      a.prototype.map.call(this, function(a, c, d) {
        if (c !== undefined) {
          b.push(a.substring(1));
        }
      }, null);

      return b;
    };

    b.prototype.add = function(b, c) {
      return a.prototype.add.call(this, "#" + b, c);
    };

    b.prototype.addOrUpdate = function(b, c) {
      return a.prototype.addOrUpdate.call(this, "#" + b, c);
    };

    b.prototype.map = function(b, c) {
      return a.prototype.map.call(this, function(a, c, d) {
        return b(a.substring(1), c, d);
      }, c);
    };

    b.prototype.every = function(b, c) {
      return a.prototype.every.call(this, function(a, c, d) {
        return b(a.substring(1), c, d);
      }, c);
    };

    b.prototype.some = function(b, c) {
      return a.prototype.some.call(this, function(a, c, d) {
        return b(a.substring(1), c, d);
      }, c);
    };

    b.prototype.lookup = function(b) {
      return a.prototype.lookup.call(this, "#" + b);
    };

    return b;
  }(c);
  a.IdentiferNameHashTable = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function c(a, b) {
    return e(a, b, !1);
  }

  function d(a, b) {
    return e(a, b, !0);
  }

  function e(a, b, c) {
    return a === b ? !0 : a !== null && b !== null && a.nodeType === b.nodeType && a.structuralEquals(b, c);
  }

  function f(b, e, f) {
    return a.ArrayUtilities.sequenceEquals(b, e, f ? d : c);
  }
  var b = function() {
    function a() {
      this.minChar = -1;

      this.limChar = -1;

      this.trailingTriviaWidth = 0;
    }
    return a;
  }();
  a.ASTSpan = b;

  a.astID = 0;

  a.structuralEqualsNotIncludingPosition = c;

  a.structuralEqualsIncludingPosition = d;
  var g = function() {
    function b(b) {
      this.nodeType = b;

      this.minChar = -1;

      this.limChar = -1;

      this.trailingTriviaWidth = 0;

      this._flags = 0;

      this.typeCheckPhase = -1;

      this.astID = a.astID++;

      this.passCreated = a.CompilerDiagnostics.analysisPass;

      this.preComments = null;

      this.postComments = null;

      this.docComments = null;
    }
    b.prototype.shouldEmit = function() {
      return !0;
    };

    b.prototype.isExpression = function() {
      return !1;
    };

    b.prototype.isStatementOrExpression = function() {
      return !1;
    };

    b.prototype.getFlags = function() {
      return this._flags;
    };

    b.prototype.setFlags = function(a) {
      this._flags = a;
    };

    b.prototype.getLength = function() {
      return this.limChar - this.minChar;
    };

    b.prototype.getID = function() {
      return this.astID;
    };

    b.prototype.isDeclaration = function() {
      return !1;
    };

    b.prototype.isStatement = function() {
      return !1;
    };

    b.prototype.emit = function(a) {
      a.emitComments(this, !0);

      a.recordSourceMappingStart(this);

      this.emitWorker(a);

      a.recordSourceMappingEnd(this);

      a.emitComments(this, !1);
    };

    b.prototype.emitWorker = function(a) {
      throw new Error("please implement in derived class");
    };

    b.prototype.getDocComments = function() {
      if (!this.isDeclaration() || !this.preComments || this.preComments.length === 0) {
        return [];
      }
      if (!this.docComments) {
        var a = this.preComments.length;

        var b = [];
        for (var c = a - 1; c >= 0; c--) {
          if (this.preComments[c].isDocComment()) {
            var d = b.length > 0 ? b[b.length - 1] : null;
            if (d === null || this.preComments[c].limLine === d.minLine || this.preComments[c].limLine + 1 === d.minLine) {
              b.push(this.preComments[c]);
              continue;
            }
          }
          break;
        }
        this.docComments = b.reverse();
      }
      return this.docComments;
    };

    b.prototype.structuralEquals = function(a, b) {
      if (b)
        if (this.minChar !== a.minChar || this.limChar !== a.limChar) {
          return !1;
        }
      return this._flags === a._flags && f(this.preComments, a.preComments, b) && f(this.postComments, a.postComments,
        b);
    };

    return b;
  }();
  a.AST = g;
  var h = function(a) {
    function b() {
      a.call(this, 1);

      this.members = [];
    }
    __extends(b, a);

    b.prototype.append = function(a) {
      this.members[this.members.length] = a;

      return this;
    };

    b.prototype.emit = function(a) {
      a.recordSourceMappingStart(this);

      a.emitModuleElements(this);

      a.recordSourceMappingEnd(this);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && f(this.members, b.members, c);
    };

    return b;
  }(g);
  a.ASTList = h;
  var i = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);

    return b;
  }(g);
  a.Expression = i;
  var j = function(a) {
    function b(b) {
      a.call(this, 20);

      this.actualText = b;

      this.setText(b);
    }
    __extends(b, a);

    b.prototype.setText = function(a) {
      this.actualText = a;

      this.text = a;
    };

    b.prototype.isMissing = function() {
      return !1;
    };

    b.prototype.emit = function(a) {
      a.emitName(this, !0);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && this.text === b.text && this.actualText === b.actualText &&
        this.isMissing() === b.isMissing();
    };

    return b;
  }(i);
  a.Identifier = j;
  var k = function(a) {
    function b() {
      a.call(this, "__missing");
    }
    __extends(b, a);

    b.prototype.isMissing = function() {
      return !0;
    };

    b.prototype.emit = function(a) {};

    return b;
  }(j);
  a.MissingIdentifier = k;
  var l = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      switch (this.nodeType) {
        case 8:
          a.writeToOutput("null");
          break;
        case 4:
          a.writeToOutput("false");
          break;
        case 3:
          a.writeToOutput("true");
          break;
        default:
          throw new Error("please implement in derived class");
      }
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c);
    };

    return b;
  }(i);
  a.LiteralExpression = l;
  var m = function(b) {
    function c() {
      b.call(this, 29);
    }
    __extends(c, b);

    c.prototype.emitWorker = function(b) {
      if (b.thisFunctionDeclaration && a.hasFlag(b.thisFunctionDeclaration.getFunctionFlags(), 2048)) {
        b.writeToOutput("_this");
      } else {
        b.writeToOutput("this");
      }
    };

    c.prototype.structuralEquals = function(a, c) {
      return b.prototype.structuralEquals.call(this, a, c);
    };

    return c;
  }(i);
  a.ThisExpression = m;
  var n = function(a) {
    function b() {
      a.call(this, 30);
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.emitSuperReference();
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c);
    };

    return b;
  }(i);
  a.SuperExpression = n;
  var o = function(a) {
    function b(b) {
      a.call(this, 79);

      this.expression = b;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput("(");

      this.expression.emit(a);

      a.writeToOutput(")");
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.expression, b.expression, c);
    };

    return b;
  }(i);
  a.ParenthesizedExpression = o;
  var p = function(a) {
    function b(b, c) {
      a.call(this, b);

      this.operand = c;

      this.castTerm = null;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      switch (this.nodeType) {
        case 76:
          this.operand.emit(a);

          a.writeToOutput("++");
          break;
        case 73:
          a.writeToOutput("!");

          this.operand.emit(a);
          break;
        case 77:
          this.operand.emit(a);

          a.writeToOutput("--");
          break;
        case 22:
          a.emitObjectLiteral(this);
          break;
        case 21:
          a.emitArrayLiteral(this);
          break;
        case 72:
          a.writeToOutput("~");

          this.operand.emit(a);
          break;
        case 27:
          a.writeToOutput("-");

          if (this.operand.nodeType === 27 || this.operand.nodeType === 75) {
            a.writeToOutput(" ");
          }

          this.operand.emit(a);
          break;
        case 26:
          a.writeToOutput("+");

          if (this.operand.nodeType === 26 || this.operand.nodeType === 74) {
            a.writeToOutput(" ");
          }

          this.operand.emit(a);
          break;
        case 74:
          a.writeToOutput("++");

          this.operand.emit(a);
          break;
        case 75:
          a.writeToOutput("--");

          this.operand.emit(a);
          break;
        case 34:
          a.writeToOutput("typeof ");

          this.operand.emit(a);
          break;
        case 28:
          a.writeToOutput("delete ");

          this.operand.emit(a);
          break;
        case 24:
          a.writeToOutput("void ");

          this.operand.emit(a);
          break;
        case 78:
          this.operand.emit(a);
          break;
        default:
          throw new Error("please implement in derived class");
      }
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.castTerm, b.castTerm, c) && e(this.operand, b.operand,
        c);
    };

    return b;
  }(i);
  a.UnaryExpression = p;
  var q = function(a) {
    function b(b, c, d, e) {
      a.call(this, b);

      this.target = c;

      this.typeArguments = d;

      this.arguments = e;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      if (this.nodeType === 37) {
        a.emitNew(this.target, this.arguments);
      } else {
        a.emitCall(this, this.target, this.arguments);
      }
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.target, b.target, c) && e(this.typeArguments, b.typeArguments,
        c) && e(this.arguments, b.arguments, c);
    };

    return b;
  }(i);
  a.CallExpression = q;
  var r = function(b) {
    function c(a, c, d) {
      b.call(this, a);

      this.operand1 = c;

      this.operand2 = d;
    }
    __extends(c, b);

    c.getTextForBinaryToken = function(b) {
      switch (b) {
        case 25:
          return ",";
        case 38:
          return "=";
        case 39:
          return "+=";
        case 40:
          return "-=";
        case 42:
          return "*=";
        case 41:
          return "/=";
        case 43:
          return "%=";
        case 44:
          return "&=";
        case 45:
          return "^=";
        case 46:
          return "|=";
        case 47:
          return "<<=";
        case 48:
          return ">>=";
        case 49:
          return ">>>=";
        case 51:
          return "||";
        case 52:
          return "&&";
        case 53:
          return "|";
        case 54:
          return "^";
        case 55:
          return "&";
        case 56:
          return "==";
        case 57:
          return "!=";
        case 58:
          return "===";
        case 59:
          return "!==";
        case 60:
          return "<";
        case 62:
          return ">";
        case 61:
          return "<=";
        case 63:
          return ">=";
        case 33:
          return "instanceof";
        case 31:
          return "in";
        case 69:
          return "<<";
        case 70:
          return ">>";
        case 71:
          return ">>>";
        case 66:
          return "*";
        case 67:
          return "/";
        case 68:
          return "%";
        case 64:
          return "+";
        case 65:
          return "-";
      }
      throw a.Errors.invalidOperation();
    };

    c.prototype.emitWorker = function(b) {
      switch (this.nodeType) {
        case 32:
          if (!b.tryEmitConstant(this)) {
            this.operand1.emit(b);
            b.writeToOutput(".");
            b.emitName(this.operand2, !1);
          }
          break;
        case 35:
          b.emitIndex(this.operand1, this.operand2);
          break;
        case 80:
          if (this.operand2.nodeType === 12 && this.operand2.isAccessor()) {
            var d = this.operand2;
            if (a.hasFlag(d.getFunctionFlags(), 32)) {
              b.writeToOutput("get ");
            } else {
              b.writeToOutput("set ");
            }

            this.operand1.emit(b);
          } else {
            this.operand1.emit(b);
            b.writeToOutputTrimmable(": ");
          }
          this.operand2.emit(b);
          break;
        case 25:
          this.operand1.emit(b);

          b.writeToOutput(", ");

          this.operand2.emit(b);
          break;
        default:
          this.operand1.emit(b);
          var e = c.getTextForBinaryToken(this.nodeType);
          if (e === "instanceof") {
            b.writeToOutput(" instanceof ");
          } else {
            if (e === "in") {
              b.writeToOutput(" in ");
            } else {
              b.writeToOutputTrimmable(" " + e + " ");
            }
          }

          this.operand2.emit(b);
      }
    };

    c.prototype.structuralEquals = function(a, c) {
      return b.prototype.structuralEquals.call(this, a, c) && e(this.operand1, a.operand1, c) && e(this.operand2, a.operand2,
        c);
    };

    return c;
  }(i);
  a.BinaryExpression = r;
  var s = function(a) {
    function b(b, c, d) {
      a.call(this, 50);

      this.operand1 = b;

      this.operand2 = c;

      this.operand3 = d;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      this.operand1.emit(a);

      a.writeToOutput(" ? ");

      this.operand2.emit(a);

      a.writeToOutput(" : ");

      this.operand3.emit(a);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.operand1, b.operand1, c) && e(this.operand2, b.operand2,
        c) && e(this.operand3, b.operand3, c);
    };

    return b;
  }(i);
  a.ConditionalExpression = s;
  var t = function(a) {
    function b(b, c) {
      a.call(this, 7);

      this.value = b;

      this.text = c;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput(this.text);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && this.value === b.value && this.text === b.text;
    };

    return b;
  }(i);
  a.NumberLiteral = t;
  var u = function(a) {
    function b(b) {
      a.call(this, 6);

      this.text = b;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput(this.text);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && this.text === b.text;
    };

    return b;
  }(i);
  a.RegexLiteral = u;
  var v = function(a) {
    function b(b, c) {
      a.call(this, 5);

      this.actualText = b;

      this.text = c;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput(this.actualText);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && this.actualText === b.actualText;
    };

    return b;
  }(i);
  a.StringLiteral = v;
  var w = function(a) {
    function b(b, c) {
      a.call(this, 16);

      this.id = b;

      this.alias = c;

      this.isDynamicImport = !1;
    }
    __extends(b, a);

    b.prototype.isStatementOrExpression = function() {
      return !0;
    };

    b.prototype.isDeclaration = function() {
      return !0;
    };

    b.prototype.emit = function(a) {
      if (a.importStatementShouldBeEmitted(this)) {
        var b = a.modAliasId;

        var c = a.firstModAlias;
        a.recordSourceMappingStart(this);

        a.emitComments(this, !0);

        a.writeToOutput("var " + this.id.actualText + " = ");

        a.modAliasId = this.id.actualText;

        a.firstModAlias = this.firstAliasedModToString();
        var d = this.alias.nodeType === 11 ? this.alias.term : this.alias;
        a.emitJavascript(d, !1);

        a.writeToOutput(";");

        a.emitComments(this, !1);

        a.recordSourceMappingEnd(this);

        a.modAliasId = b;

        a.firstModAlias = c;
      }
    };

    b.prototype.getAliasName = function(a) {
      if (typeof a == "undefined") {
        a = this.alias;
      }
      if (a.nodeType === 20) {
        return a.actualText;
      }
      var b = a;
      return this.getAliasName(b.operand1) + "." + this.getAliasName(b.operand2);
    };

    b.prototype.firstAliasedModToString = function() {
      if (this.alias.nodeType === 20) {
        return this.alias.actualText;
      }
      var a = this.alias;

      var b = a.term.operand1;
      return b.actualText;
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.id, b.id, c) && e(this.alias, b.alias, c);
    };

    return b;
  }(g);
  a.ImportDeclaration = w;
  var x = function(a) {
    function b(b) {
      a.call(this, 87);

      this.id = b;
    }
    __extends(b, a);

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.id, b.id, c);
    };

    b.prototype.emit = function(a) {
      a.setExportAssignmentIdentifier(this.id.actualText);
    };

    return b;
  }(g);
  a.ExportAssignment = x;
  var y = function(b) {
    function c(a, c) {
      b.call(this, c);

      this.id = a;

      this.init = null;

      this.isImplicitlyInitialized = !1;

      this.typeExpr = null;

      this._varFlags = 0;
    }
    __extends(c, b);

    c.prototype.isDeclaration = function() {
      return !0;
    };

    c.prototype.isStatementOrExpression = function() {
      return !0;
    };

    c.prototype.getVarFlags = function() {
      return this._varFlags;
    };

    c.prototype.setVarFlags = function(a) {
      this._varFlags = a;
    };

    c.prototype.isProperty = function() {
      return a.hasFlag(this.getVarFlags(), 256);
    };

    c.prototype.structuralEquals = function(a, c) {
      return b.prototype.structuralEquals.call(this, a, c) && this._varFlags === a._varFlags && e(this.init, a.init,
        c) && e(this.typeExpr, a.typeExpr, c) && e(this.id, a.id, c);
    };

    return c;
  }(g);
  a.BoundDecl = y;
  var z = function(b) {
    function c(a) {
      b.call(this, a, 17);
    }
    __extends(c, b);

    c.prototype.isExported = function() {
      return a.hasFlag(this.getVarFlags(), 1);
    };

    c.prototype.isStatic = function() {
      return a.hasFlag(this.getVarFlags(), 16);
    };

    c.prototype.emit = function(a) {
      a.emitVariableDeclarator(this);
    };

    return c;
  }(y);
  a.VariableDeclarator = z;
  var A = function(a) {
    function b(b) {
      a.call(this, b, 19);

      this.isOptional = !1;
    }
    __extends(b, a);

    b.prototype.isOptionalArg = function() {
      return this.isOptional || this.init;
    };

    b.prototype.emitWorker = function(a) {
      a.writeToOutput(this.id.actualText);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && this.isOptional === b.isOptional;
    };

    return b;
  }(y);
  a.Parameter = A;
  var B = function(b) {
    function c(a, c, d, e, f, g) {
      b.call(this, g);

      this.name = a;

      this.block = c;

      this.isConstructor = d;

      this.typeArguments = e;

      this.arguments = f;

      this.hint = null;

      this._functionFlags = 0;

      this.returnTypeAnnotation = null;

      this.variableArgList = !1;

      this.classDecl = null;
    }
    __extends(c, b);

    c.prototype.isDeclaration = function() {
      return !0;
    };

    c.prototype.getFunctionFlags = function() {
      return this._functionFlags;
    };

    c.prototype.setFunctionFlags = function(a) {
      this._functionFlags = a;
    };

    c.prototype.structuralEquals = function(a, c) {
      return b.prototype.structuralEquals.call(this, a, c) && this._functionFlags === a._functionFlags && this.hint ===
        a.hint && this.variableArgList === a.variableArgList && e(this.name, a.name, c) && e(this.block, a.block, c) &&
        this.isConstructor === a.isConstructor && e(this.typeArguments, a.typeArguments, c) && e(this.arguments, a.arguments,
          c);
    };

    c.prototype.shouldEmit = function() {
      return !a.hasFlag(this.getFunctionFlags(), 128) && !a.hasFlag(this.getFunctionFlags(), 8);
    };

    c.prototype.emit = function(a) {
      a.emitFunction(this);
    };

    c.prototype.getNameText = function() {
      return this.name ? this.name.actualText : this.hint;
    };

    c.prototype.isMethod = function() {
      return (this.getFunctionFlags() & 256) !== 0;
    };

    c.prototype.isCallMember = function() {
      return a.hasFlag(this.getFunctionFlags(), 512);
    };

    c.prototype.isConstructMember = function() {
      return a.hasFlag(this.getFunctionFlags(), 1024);
    };

    c.prototype.isIndexerMember = function() {
      return a.hasFlag(this.getFunctionFlags(), 4096);
    };

    c.prototype.isSpecialFn = function() {
      return this.isCallMember() || this.isIndexerMember() || this.isConstructMember();
    };

    c.prototype.isAccessor = function() {
      return a.hasFlag(this.getFunctionFlags(), 32) || a.hasFlag(this.getFunctionFlags(), 64);
    };

    c.prototype.isGetAccessor = function() {
      return a.hasFlag(this.getFunctionFlags(), 32);
    };

    c.prototype.isSetAccessor = function() {
      return a.hasFlag(this.getFunctionFlags(), 64);
    };

    c.prototype.isStatic = function() {
      return a.hasFlag(this.getFunctionFlags(), 16);
    };

    c.prototype.isSignature = function() {
      return (this.getFunctionFlags() & 128) !== 0;
    };

    return c;
  }(g);
  a.FunctionDeclaration = B;
  var C = function(a) {
    function b() {
      a.call(this, 2);

      this.moduleElements = null;

      this.referencedFiles = [];

      this.requiresExtendsBlock = !1;

      this.isDeclareFile = !1;

      this.topLevelMod = null;

      this.containsUnicodeChar = !1;

      this.containsUnicodeCharInComment = !1;
    }
    __extends(b, a);

    b.prototype.emit = function(a) {
      if (!this.isDeclareFile) {
        a.emitScriptElements(this, this.requiresExtendsBlock);
      }
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.moduleElements, b.moduleElements, c);
    };

    return b;
  }(g);
  a.Script = C;
  var D = function(a) {
    function b(b, c, d) {
      a.call(this, b);

      this.name = c;

      this.members = d;
    }
    __extends(b, a);

    b.prototype.isDeclaration = function() {
      return !0;
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.name, b.name, c) && e(this.members, b.members, c);
    };

    return b;
  }(g);
  a.NamedDeclaration = D;
  var E = function(b) {
    function c(a, c, d) {
      b.call(this, 15, a, c);

      this.endingToken = d;

      this._moduleFlags = 0;

      this.amdDependencies = [];

      this.containsUnicodeChar = !1;

      this.containsUnicodeCharInComment = !1;

      this.prettyName = this.name.actualText;
    }
    __extends(c, b);

    c.prototype.getModuleFlags = function() {
      return this._moduleFlags;
    };

    c.prototype.setModuleFlags = function(a) {
      this._moduleFlags = a;
    };

    c.prototype.structuralEquals = function(a, c) {
      return b.prototype.structuralEquals.call(this, a, c) ? this._moduleFlags === a._moduleFlags : !1;
    };

    c.prototype.isEnum = function() {
      return a.hasFlag(this.getModuleFlags(), 128);
    };

    c.prototype.isWholeFile = function() {
      return a.hasFlag(this.getModuleFlags(), 256);
    };

    c.prototype.shouldEmit = function() {
      if (a.hasFlag(this.getModuleFlags(), 8)) {
        return !1;
      }
      if (a.hasFlag(this.getModuleFlags(), 128)) {
        return !0;
      }
      for (var b = 0, c = this.members.members.length; b < c; b++) {
        var d = this.members.members[b];
        if (d.nodeType === 15) {
          if (d.shouldEmit()) {
            return !0;
          }
        } else if (d.nodeType !== 14) {
          return !0;
        }
      }
      return !1;
    };

    c.prototype.emit = function(a) {
      if (this.shouldEmit()) {
        a.emitComments(this, !0);
        a.emitModule(this);
        a.emitComments(this, !1);
      }
    };

    return c;
  }(D);
  a.ModuleDeclaration = E;
  var F = function(a) {
    function b(b, c, d, e, f, g) {
      a.call(this, b, c, g);

      this.typeParameters = d;

      this.extendsList = e;

      this.implementsList = f;

      this._varFlags = 0;
    }
    __extends(b, a);

    b.prototype.getVarFlags = function() {
      return this._varFlags;
    };

    b.prototype.setVarFlags = function(a) {
      this._varFlags = a;
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && this._varFlags === b._varFlags && e(this.typeParameters,
        b.typeParameters, c) && e(this.extendsList, b.extendsList, c) && e(this.implementsList, b.implementsList, c);
    };

    return b;
  }(D);
  a.TypeDeclaration = F;
  var G = function(b) {
    function c(a, c, d, e, f) {
      b.call(this, 13, a, c, e, f, d);

      this.constructorDecl = null;

      this.endingToken = null;
    }
    __extends(c, b);

    c.prototype.shouldEmit = function() {
      return !a.hasFlag(this.getVarFlags(), 8);
    };

    c.prototype.emit = function(a) {
      a.emitClass(this);
    };

    return c;
  }(F);
  a.ClassDeclaration = G;
  var H = function(a) {
    function b(b, c, d, e, f) {
      a.call(this, 14, b, c, e, f, d);
    }
    __extends(b, a);

    b.prototype.shouldEmit = function() {
      return !1;
    };

    return b;
  }(F);
  a.InterfaceDeclaration = H;
  var I = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);

    b.prototype.isStatement = function() {
      return !0;
    };

    b.prototype.isStatementOrExpression = function() {
      return !0;
    };

    return b;
  }(g);
  a.Statement = I;
  var J = function(a) {
    function b(b) {
      a.call(this, 95);

      this.expression = b;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput("throw ");

      this.expression.emit(a);

      a.writeToOutput(";");
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.expression, b.expression, c);
    };

    return b;
  }(I);
  a.ThrowStatement = J;
  var K = function(a) {
    function b(b) {
      a.call(this, 88);

      this.expression = b;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      this.expression.emit(a);

      a.writeToOutput(";");
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.expression, b.expression, c);
    };

    return b;
  }(I);
  a.ExpressionStatement = K;
  var L = function(a) {
    function b(b, c) {
      a.call(this, 92);

      this.identifier = b;

      this.statement = c;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.recordSourceMappingStart(this.identifier);

      a.writeToOutput(this.identifier.actualText);

      a.recordSourceMappingEnd(this.identifier);

      a.writeLineToOutput(":");

      a.emitJavascript(this.statement, !0);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.identifier, b.identifier, c) && e(this.statement,
        b.statement, c);
    };

    return b;
  }(I);
  a.LabeledStatement = L;
  var M = function(a) {
    function b(b) {
      a.call(this, 18);

      this.declarators = b;
    }
    __extends(b, a);

    b.prototype.emit = function(a) {
      a.emitVariableDeclaration(this);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.declarators, b.declarators, c);
    };

    return b;
  }(g);
  a.VariableDeclaration = M;
  var N = function(b) {
    function c(a) {
      b.call(this, 97);

      this.declaration = a;
    }
    __extends(c, b);

    c.prototype.shouldEmit = function() {
      if (a.hasFlag(this.getFlags(), 32)) {
        return !1;
      }
      var b = this.declaration.declarators.members[0];
      return !a.hasFlag(b.getVarFlags(), 8) || b.init !== null;
    };

    c.prototype.emitWorker = function(b) {
      if (a.hasFlag(this.getFlags(), 16)) {
        b.emitEnumElement(this.declaration.declarators.members[0]);
      } else {
        this.declaration.emit(b);
        b.writeToOutput(";");
      }
    };

    c.prototype.structuralEquals = function(a, c) {
      return b.prototype.structuralEquals.call(this, a, c) && e(this.declaration, a.declaration, c);
    };

    return c;
  }(I);
  a.VariableStatement = N;
  var O = function(a) {
    function b(b) {
      a.call(this, 81);

      this.statements = b;

      this.closeBraceSpan = null;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeLineToOutput(" {");

      a.indenter.increaseIndent();

      if (this.statements) {
        a.emitModuleElements(this.statements);
      }

      a.indenter.decreaseIndent();

      a.emitIndent();

      a.writeToOutput("}");
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.statements, b.statements, c);
    };

    return b;
  }(I);
  a.Block = O;
  var P = function(a) {
    function b(b) {
      a.call(this, b);

      this.target = null;

      this.resolvedTarget = null;
    }
    __extends(b, a);

    b.prototype.hasExplicitTarget = function() {
      return this.target;
    };

    b.prototype.emitWorker = function(a) {
      if (this.nodeType === 82) {
        a.writeToOutput("break");
      } else {
        a.writeToOutput("continue");
      }

      if (this.hasExplicitTarget()) {
        a.writeToOutput(" " + this.target);
      }

      a.writeToOutput(";");
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && this.target === b.target;
    };

    return b;
  }(I);
  a.Jump = P;
  var Q = function(a) {
    function b(b, c) {
      a.call(this, 98);

      this.cond = b;

      this.body = c;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput("while (");

      this.cond.emit(a);

      a.writeToOutput(")");

      a.emitBlockOrStatement(this.body);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.cond, b.cond, c) && e(this.body, b.body, c);
    };

    return b;
  }(I);
  a.WhileStatement = Q;
  var R = function(a) {
    function b(b, c) {
      a.call(this, 85);

      this.body = b;

      this.cond = c;

      this.whileSpan = null;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput("do");

      a.emitBlockOrStatement(this.body);

      a.recordSourceMappingStart(this.whileSpan);

      a.writeToOutput(" while");

      a.recordSourceMappingEnd(this.whileSpan);

      a.writeToOutput("(");

      this.cond.emit(a);

      a.writeToOutput(")");

      a.writeToOutput(";");
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.body, b.body, c) && e(this.cond, b.cond, c);
    };

    return b;
  }(I);
  a.DoStatement = R;
  var S = function(a) {
    function c(c, d, e) {
      a.call(this, 91);

      this.cond = c;

      this.thenBod = d;

      this.elseBod = e;

      this.statement = new b;
    }
    __extends(c, a);

    c.prototype.emitWorker = function(a) {
      a.recordSourceMappingStart(this.statement);

      a.writeToOutput("if (");

      this.cond.emit(a);

      a.writeToOutput(")");

      a.recordSourceMappingEnd(this.statement);

      a.emitBlockOrStatement(this.thenBod);

      if (this.elseBod) {
        if (this.elseBod.nodeType === 91) {
          a.writeToOutput(" else ");
          this.elseBod.emit(a);
        } else {
          a.writeToOutput(" else");
          a.emitBlockOrStatement(this.elseBod);
        }
      }
    };

    c.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.cond, b.cond, c) && e(this.thenBod, b.thenBod, c) &&
        e(this.elseBod, b.elseBod, c);
    };

    return c;
  }(I);
  a.IfStatement = S;
  var T = function(a) {
    function b(b) {
      a.call(this, 93);

      this.returnExpression = b;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      if (this.returnExpression) {
        a.writeToOutput("return ");
        this.returnExpression.emit(a);
        a.writeToOutput(";");
      } else {
        a.writeToOutput("return;");
      }
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.returnExpression, b.returnExpression, c);
    };

    return b;
  }(I);
  a.ReturnStatement = T;
  var U = function(a) {
    function c(c, d, e) {
      a.call(this, 89);

      this.lval = c;

      this.obj = d;

      this.body = e;

      this.statement = new b;
    }
    __extends(c, a);

    c.prototype.emitWorker = function(a) {
      a.recordSourceMappingStart(this.statement);

      a.writeToOutput("for (");

      this.lval.emit(a);

      a.writeToOutput(" in ");

      this.obj.emit(a);

      a.writeToOutput(")");

      a.recordSourceMappingEnd(this.statement);

      a.emitBlockOrStatement(this.body);
    };

    c.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.lval, b.lval, c) && e(this.obj, b.obj, c) && e(
        this.body, b.body, c);
    };

    return c;
  }(I);
  a.ForInStatement = U;
  var V = function(a) {
    function b(b, c, d, e) {
      a.call(this, 90);

      this.init = b;

      this.cond = c;

      this.incr = d;

      this.body = e;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput("for (");

      if (this.init) {
        if (this.init.nodeType !== 1) {
          this.init.emit(a);
        } else {
          a.setInVarBlock(this.init.members.length);
          a.emitCommaSeparatedList(this.init);
        }
      }

      a.writeToOutput("; ");

      a.emitJavascript(this.cond, !1);

      a.writeToOutput("; ");

      a.emitJavascript(this.incr, !1);

      a.writeToOutput(")");

      a.emitBlockOrStatement(this.body);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.init, b.init, c) && e(this.cond, b.cond, c) && e(
        this.incr, b.incr, c) && e(this.body, b.body, c);
    };

    return b;
  }(I);
  a.ForStatement = V;
  var W = function(a) {
    function b(b, c) {
      a.call(this, 99);

      this.expr = b;

      this.body = c;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput("with (");

      if (this.expr) {
        this.expr.emit(a);
      }

      a.writeToOutput(")");

      a.emitBlockOrStatement(this.body);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.expr, b.expr, c) && e(this.body, b.body, c);
    };

    return b;
  }(I);
  a.WithStatement = W;
  var X = function(a) {
    function c(c) {
      a.call(this, 94);

      this.val = c;

      this.defaultCase = null;

      this.statement = new b;
    }
    __extends(c, a);

    c.prototype.emitWorker = function(a) {
      a.recordSourceMappingStart(this.statement);

      a.writeToOutput("switch (");

      this.val.emit(a);

      a.writeToOutput(")");

      a.recordSourceMappingEnd(this.statement);

      a.writeLineToOutput(" {");

      a.indenter.increaseIndent();
      var b = null;
      for (var c = 0, d = this.caseList.members.length; c < d; c++) {
        var e = this.caseList.members[c];
        a.emitSpaceBetweenConstructs(b, e);

        a.emitJavascript(e, !0);

        b = e;
      }
      a.indenter.decreaseIndent();

      a.emitIndent();

      a.writeToOutput("}");
    };

    c.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.caseList, b.caseList, c) && e(this.val, b.val, c);
    };

    return c;
  }(I);
  a.SwitchStatement = X;
  var Y = function(a) {
    function c() {
      a.call(this, 100);

      this.expr = null;

      this.colonSpan = new b;
    }
    __extends(c, a);

    c.prototype.emitWorker = function(a) {
      if (this.expr) {
        a.writeToOutput("case ");
        this.expr.emit(a);
      } else {
        a.writeToOutput("default");
      }

      a.recordSourceMappingStart(this.colonSpan);

      a.writeToOutput(":");

      a.recordSourceMappingEnd(this.colonSpan);

      if (this.body.members.length === 1 && this.body.members[0].nodeType === 81) {
        this.body.members[0].emit(a);
        a.writeLineToOutput("");
      } else {
        a.writeLineToOutput("");
        a.indenter.increaseIndent();
        this.body.emit(a);
        a.indenter.decreaseIndent();
      }
    };

    c.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.expr, b.expr, c) && e(this.body, b.body, c);
    };

    return c;
  }(g);
  a.CaseClause = Y;
  var Z = function(a) {
    function b(b, c) {
      a.call(this, 9);

      this.name = b;

      this.constraint = c;
    }
    __extends(b, a);

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.name, b.name, c) && e(this.constraint, b.constraint,
        c);
    };

    return b;
  }(g);
  a.TypeParameter = Z;
  var $ = function(a) {
    function b(b, c) {
      a.call(this, 10);

      this.name = b;

      this.typeArguments = c;
    }
    __extends(b, a);

    b.prototype.emit = function(a) {
      this.name.emit(a);
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.name, b.name, c) && e(this.typeArguments, b.typeArguments,
        c);
    };

    return b;
  }(g);
  a.GenericType = $;
  var _ = function(a) {
    function b(b, c) {
      a.call(this, 11);

      this.term = b;

      this.arrayCount = c;
    }
    __extends(b, a);

    b.prototype.emit = function(a) {
      throw new Error("should not emit a type ref");
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.term, b.term, c) && this.arrayCount === b.arrayCount;
    };

    return b;
  }(g);
  a.TypeReference = _;
  var ab = function(a) {
    function b(b, c, d) {
      a.call(this, 96);

      this.tryBody = b;

      this.catchClause = c;

      this.finallyBody = d;
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput("try ");

      this.tryBody.emit(a);

      a.emitJavascript(this.catchClause, !1);

      if (this.finallyBody) {
        a.writeToOutput(" finally");
        this.finallyBody.emit(a);
      }
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.tryBody, b.tryBody, c) && e(this.catchClause, b.catchClause,
        c) && e(this.finallyBody, b.finallyBody, c);
    };

    return b;
  }(I);
  a.TryStatement = ab;
  var bb = function(a) {
    function c(c, d) {
      a.call(this, 101);

      this.param = c;

      this.body = d;

      this.statement = new b;
    }
    __extends(c, a);

    c.prototype.emitWorker = function(a) {
      a.writeToOutput(" ");

      a.recordSourceMappingStart(this.statement);

      a.writeToOutput("catch (");

      this.param.id.emit(a);

      a.writeToOutput(")");

      a.recordSourceMappingEnd(this.statement);

      this.body.emit(a);
    };

    c.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c) && e(this.param, b.param, c) && e(this.body, b.body, c);
    };

    return c;
  }(g);
  a.CatchClause = bb;
  var cb = function(a) {
    function b() {
      a.call(this, 84);
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput("debugger;");
    };

    return b;
  }(I);
  a.DebuggerStatement = cb;
  var db = function(a) {
    function b() {
      a.call(this, 23);
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {};

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c);
    };

    return b;
  }(i);
  a.OmittedExpression = db;
  var eb = function(a) {
    function b() {
      a.call(this, 86);
    }
    __extends(b, a);

    b.prototype.emitWorker = function(a) {
      a.writeToOutput(";");
    };

    b.prototype.structuralEquals = function(b, c) {
      return a.prototype.structuralEquals.call(this, b, c);
    };

    return b;
  }(I);
  a.EmptyStatement = eb;
  var fb = function(b) {
    function c(a, c, d) {
      b.call(this, 102);

      this.content = a;

      this.isBlockComment = c;

      this.endsLine = d;

      this.text = null;

      this.docCommentText = null;
    }
    __extends(c, b);

    c.prototype.structuralEquals = function(a, c) {
      return b.prototype.structuralEquals.call(this, a, c) && this.minLine === a.minLine && this.content === a.content &&
        this.isBlockComment === a.isBlockComment && this.endsLine === a.endsLine;
    };

    c.prototype.getText = function() {
      if (this.text === null)
        if (this.isBlockComment) {
          this.text = this.content.split("\n");
          for (var a = 0; a < this.text.length; a++) {
            this.text[a] = this.text[a].replace(/^\s+|\s+$/g, "");
          }
        } else {
          this.text = [this.content.replace(/^\s+|\s+$/g, "")];
        }
      return this.text;
    };

    c.prototype.isDocComment = function() {
      return this.isBlockComment ? this.content.charAt(2) === "*" && this.content.charAt(3) !== "/" : !1;
    };

    c.prototype.getDocCommentTextValue = function() {
      this.docCommentText === null && (this.docCommentText = c.cleanJSDocComment(this.content));

      return this.docCommentText;
    };

    c.consumeLeadingSpace = function(b, c, d) {
      var e = b.length;
      if (d !== undefined) {
        e = a.min(c + d, e);
      }
      for (; c < e; c++) {
        var f = b.charCodeAt(c);
        if (f !== 32 && f !== 9) {
          return c;
        }
      }
      return e !== b.length ? e : -1;
    };

    c.isSpaceChar = function(a, b) {
      var c = a.length;
      if (b < c) {
        var d = a.charCodeAt(b);
        return d === 32 || d === 9;
      }
      return b === c;
    };

    c.cleanDocCommentLine = function(a, b, d) {
      var e = c.consumeLeadingSpace(a, 0);
      if (e !== -1) {
        var f = e;
        if (b && a.charAt(e) === "*") {
          var g = e + 1;
          e = c.consumeLeadingSpace(a, g, d);
          if (e === -1) {
            return null;
          }
          f = e - g;
        }
        return {
          minChar: e,
          limChar: a.charAt(a.length - 1) === "\r" ? a.length - 1 : a.length,
          jsDocSpacesRemoved: f
        };
      }
      return null;
    };

    c.cleanJSDocComment = function(a, b) {
      var d = [];
      a = a.replace("/**", "");

      if (a.length >= 2 && a.charAt(a.length - 1) === "/" && a.charAt(a.length - 2) === "*") {
        a = a.substring(0, a.length - 2);
      }
      var e = a.split("\n");

      var f = !1;
      for (var g = 0; g < e.length; g++) {
        var h = e[g];

        var i = c.cleanDocCommentLine(h, !0, b);
        if (!i) continue;
        var j = "";

        var k = i.minChar;
        for (var l = h.indexOf("@", i.minChar); 0 <= l && l < i.limChar; l = h.indexOf("@", l + 1)) {
          var m = f;
          if (h.indexOf("param", l + 1) === l + 1 && c.isSpaceChar(h, l + 6)) {
            if (!m) {
              j += h.substring(k, l);
            }
            k = l;
            f = !0;
          } else {
            if (m) {
              k = l;
              f = !1;
            }
          }
        }
        if (!f) {
          j += h.substring(k, i.limChar);
        }
        var n = c.cleanDocCommentLine(j, !1);
        if (n) {
          if (b === undefined) {
            b = i.jsDocSpacesRemoved;
          }
          d.push(j);
        }
      }
      return d.join("\n");
    };

    c.getDocCommentText = function(a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        var d = a[c].getDocCommentTextValue();
        if (d !== "") {
          b.push(d);
        }
      }
      return b.join("\n");
    };

    c.getParameterDocCommentText = function(a, b) {
      if (b.length === 0 || !b[0].isBlockComment) {
        return "";
      }
      for (var d = 0; d < b.length; d++) {
        var e = b[d].content;
        for (var f = e.indexOf("@param", 0); 0 <= f; f = e.indexOf("@param", f)) {
          f += 6;
          if (!c.isSpaceChar(e, f)) continue;
          f = c.consumeLeadingSpace(e, f);
          if (f === -1) break;
          if (e.charCodeAt(f) === 123) {
            f++;
            var g = 0;
            for (var h = 1; f < e.length; f++) {
              g = e.charCodeAt(f);
              if (g === 123) {
                h++;
                continue;
              }
              if (g === 125) {
                h--;
                if (h === 0) break;
                continue;
              }
              if (g === 64) break;
            }
            if (f === e.length) break;
            if (g === 64) continue;
            f = c.consumeLeadingSpace(e, f + 1);
            if (f === -1) break;
          }
          if (a !== e.substr(f, a.length) || !c.isSpaceChar(e, f + a.length)) continue;
          f = c.consumeLeadingSpace(e, f + a.length);
          if (f === -1) {
            return "";
          }
          var i = e.indexOf("@", f);

          var j = e.substring(f, i < 0 ? e.length : i);

          var k = undefined;

          var l = e.substring(0, f).lastIndexOf("\n") + 1;
          if (l !== 0 && l < f && e.charAt(l + 1) === "\r") {
            l++;
          }
          var m = c.consumeLeadingSpace(e, l);
          m !== f && e.charAt(m) === "*" && (k = f - m - 1);

          return c.cleanJSDocComment(j, k);
        }
      }
      return "";
    };

    return c;
  }(g);
  a.Comment = fb;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function f() {
    e || (e = new d);

    return e;
  }
  var b = function() {
    function a() {
      this.goChildren = !0;
    }
    return a;
  }();
  a.AstWalkOptions = b;
  var c = function() {
    function a(a, b, c, d, e) {
      this.childrenWalkers = a;

      this.pre = b;

      this.post = c;

      this.options = d;

      this.state = e;
    }
    a.prototype.walk = function(a, b) {
      var c = this.pre(a, b, this);
      if (c === undefined) {
        c = a;
      }

      if (this.options.goChildren) {
        this.childrenWalkers[a.nodeType](a, b, this);
      } else {
        this.options.goChildren = !0;
      }
      if (this.post) {
        var d = this.post(c, b, this);
        d === undefined && (d = c);

        return d;
      }
      return c;
    };

    return a;
  }();

  var d = function() {
    function d() {
      this.childrenWalkers = [];

      this.initChildrenWalkers();
    }
    d.prototype.walk = function(a, b, c, d, e) {
      return this.getWalker(b, c, d, e).walk(a, null);
    };

    d.prototype.getWalker = function(a, b, c, d) {
      return this.getSlowWalker(a, b, c, d);
    };

    d.prototype.getSlowWalker = function(a, d, e, f) {
      e || (e = new b);

      return new c(this.childrenWalkers, a, d, e, f);
    };

    d.prototype.initChildrenWalkers = function() {
      this.childrenWalkers[0] = g.walkNone;

      this.childrenWalkers[86] = g.walkNone;

      this.childrenWalkers[23] = g.walkNone;

      this.childrenWalkers[3] = g.walkNone;

      this.childrenWalkers[4] = g.walkNone;

      this.childrenWalkers[29] = g.walkNone;

      this.childrenWalkers[30] = g.walkNone;

      this.childrenWalkers[5] = g.walkNone;

      this.childrenWalkers[6] = g.walkNone;

      this.childrenWalkers[8] = g.walkNone;

      this.childrenWalkers[21] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[22] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[24] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[25] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[26] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[27] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[28] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[31] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[32] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[33] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[34] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[7] = g.walkNone;

      this.childrenWalkers[20] = g.walkNone;

      this.childrenWalkers[9] = g.walkTypeParameterChildren;

      this.childrenWalkers[10] = g.walkGenericTypeChildren;

      this.childrenWalkers[11] = g.walkTypeReferenceChildren;

      this.childrenWalkers[35] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[36] = g.walkCallExpressionChildren;

      this.childrenWalkers[37] = g.walkCallExpressionChildren;

      this.childrenWalkers[38] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[39] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[40] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[41] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[42] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[43] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[44] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[45] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[46] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[47] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[48] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[49] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[50] = g.walkTrinaryExpressionChildren;

      this.childrenWalkers[51] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[52] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[53] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[54] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[55] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[56] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[57] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[58] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[59] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[60] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[61] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[62] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[63] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[64] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[65] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[66] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[67] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[68] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[69] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[70] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[71] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[72] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[73] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[74] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[75] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[76] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[77] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[78] = g.walkUnaryExpressionChildren;

      this.childrenWalkers[79] = g.walkParenthesizedExpressionChildren;

      this.childrenWalkers[12] = g.walkFuncDeclChildren;

      this.childrenWalkers[80] = g.walkBinaryExpressionChildren;

      this.childrenWalkers[17] = g.walkBoundDeclChildren;

      this.childrenWalkers[18] = g.walkVariableDeclarationChildren;

      this.childrenWalkers[19] = g.walkBoundDeclChildren;

      this.childrenWalkers[93] = g.walkReturnStatementChildren;

      this.childrenWalkers[82] = g.walkNone;

      this.childrenWalkers[83] = g.walkNone;

      this.childrenWalkers[95] = g.walkThrowStatementChildren;

      this.childrenWalkers[90] = g.walkForStatementChildren;

      this.childrenWalkers[89] = g.walkForInStatementChildren;

      this.childrenWalkers[91] = g.walkIfStatementChildren;

      this.childrenWalkers[98] = g.walkWhileStatementChildren;

      this.childrenWalkers[85] = g.walkDoStatementChildren;

      this.childrenWalkers[81] = g.walkBlockChildren;

      this.childrenWalkers[100] = g.walkCaseClauseChildren;

      this.childrenWalkers[94] = g.walkSwitchStatementChildren;

      this.childrenWalkers[96] = g.walkTryStatementChildren;

      this.childrenWalkers[101] = g.walkCatchClauseChildren;

      this.childrenWalkers[1] = g.walkListChildren;

      this.childrenWalkers[2] = g.walkScriptChildren;

      this.childrenWalkers[13] = g.walkClassDeclChildren;

      this.childrenWalkers[14] = g.walkTypeDeclChildren;

      this.childrenWalkers[15] = g.walkModuleDeclChildren;

      this.childrenWalkers[16] = g.walkImportDeclChildren;

      this.childrenWalkers[87] = g.walkExportAssignmentChildren;

      this.childrenWalkers[99] = g.walkWithStatementChildren;

      this.childrenWalkers[88] = g.walkExpressionStatementChildren;

      this.childrenWalkers[92] = g.walkLabeledStatementChildren;

      this.childrenWalkers[97] = g.walkVariableStatementChildren;

      this.childrenWalkers[102] = g.walkNone;

      this.childrenWalkers[84] = g.walkNone;
      for (var b in a.NodeType)
        if (a.NodeType.hasOwnProperty(b) && a.StringUtilities.isString(a.NodeType[b]) && this.childrenWalkers[b] ===
          undefined) throw new Error("initWalkers function is not up to date with enum content!");
    };

    return d;
  }();
  a.AstWalkerFactory = d;
  var e;
  a.getAstWalkerFactory = f;
  var g;
  (function(a) {
    function b(a, b, c) {}

    function c(a, b, c) {
      var d = a.members.length;
      for (var e = 0; e < d; e++) {
        a.members[e] = c.walk(a.members[e], a);
      }
    }

    function d(a, b, c) {
      if (a.expression) {
        a.expression = c.walk(a.expression, a);
      }
    }

    function e(a, b, c) {
      if (a.castTerm) {
        a.castTerm = c.walk(a.castTerm, a);
      }

      if (a.operand) {
        a.operand = c.walk(a.operand, a);
      }
    }

    function f(a, b, c) {
      if (a.expression) {
        a.expression = c.walk(a.expression, a);
      }
    }

    function g(a, b, c) {
      if (a.operand1) {
        a.operand1 = c.walk(a.operand1, a);
      }

      if (a.operand2) {
        a.operand2 = c.walk(a.operand2, a);
      }
    }

    function h(a, b, c) {
      if (a.name) {
        a.name = c.walk(a.name, a);
      }

      if (a.constraint) {
        a.constraint = c.walk(a.constraint, a);
      }
    }

    function i(a, b, c) {
      if (a.name) {
        a.name = c.walk(a.name, a);
      }

      if (a.typeArguments) {
        a.typeArguments = c.walk(a.typeArguments, a);
      }
    }

    function j(a, b, c) {
      if (a.term) {
        a.term = c.walk(a.term, a);
      }
    }

    function k(a, b, c) {
      a.target = c.walk(a.target, a);

      if (a.typeArguments) {
        a.typeArguments = c.walk(a.typeArguments, a);
      }

      if (a.arguments) {
        a.arguments = c.walk(a.arguments, a);
      }
    }

    function l(a, b, c) {
      if (a.operand1) {
        a.operand1 = c.walk(a.operand1, a);
      }

      if (a.operand2) {
        a.operand2 = c.walk(a.operand2, a);
      }

      if (a.operand3) {
        a.operand3 = c.walk(a.operand3, a);
      }
    }

    function m(a, b, c) {
      if (a.name) {
        a.name = c.walk(a.name, a);
      }

      if (a.typeArguments) {
        a.typeArguments = c.walk(a.typeArguments, a);
      }

      if (a.arguments) {
        a.arguments = c.walk(a.arguments, a);
      }

      if (a.returnTypeAnnotation) {
        a.returnTypeAnnotation = c.walk(a.returnTypeAnnotation, a);
      }

      if (a.block) {
        a.block = c.walk(a.block, a);
      }
    }

    function n(a, b, c) {
      if (a.id) {
        a.id = c.walk(a.id, a);
      }

      if (a.init) {
        a.init = c.walk(a.init, a);
      }

      if (a.typeExpr) {
        a.typeExpr = c.walk(a.typeExpr, a);
      }
    }

    function o(a, b, c) {
      if (a.returnExpression) {
        a.returnExpression = c.walk(a.returnExpression, a);
      }
    }

    function p(a, b, c) {
      if (a.init) {
        a.init = c.walk(a.init, a);
      }

      if (a.cond) {
        a.cond = c.walk(a.cond, a);
      }

      if (a.incr) {
        a.incr = c.walk(a.incr, a);
      }

      if (a.body) {
        a.body = c.walk(a.body, a);
      }
    }

    function q(a, b, c) {
      a.lval = c.walk(a.lval, a);

      a.obj = c.walk(a.obj, a);

      if (a.body) {
        a.body = c.walk(a.body, a);
      }
    }

    function r(a, b, c) {
      a.cond = c.walk(a.cond, a);

      if (a.thenBod) {
        a.thenBod = c.walk(a.thenBod, a);
      }

      if (a.elseBod) {
        a.elseBod = c.walk(a.elseBod, a);
      }
    }

    function s(a, b, c) {
      a.cond = c.walk(a.cond, a);

      if (a.body) {
        a.body = c.walk(a.body, a);
      }
    }

    function t(a, b, c) {
      a.cond = c.walk(a.cond, a);

      if (a.body) {
        a.body = c.walk(a.body, a);
      }
    }

    function u(a, b, c) {
      if (a.statements) {
        a.statements = c.walk(a.statements, a);
      }
    }

    function v(a, b, c) {
      if (a.declarators) {
        a.declarators = c.walk(a.declarators, a);
      }
    }

    function w(a, b, c) {
      if (a.expr) {
        a.expr = c.walk(a.expr, a);
      }

      if (a.body) {
        a.body = c.walk(a.body, a);
      }
    }

    function x(a, b, c) {
      if (a.val) {
        a.val = c.walk(a.val, a);
      }

      if (a.caseList) {
        a.caseList = c.walk(a.caseList, a);
      }
    }

    function y(a, b, c) {
      if (a.tryBody) {
        a.tryBody = c.walk(a.tryBody, a);
      }

      if (a.catchClause) {
        a.catchClause = c.walk(a.catchClause, a);
      }

      if (a.finallyBody) {
        a.finallyBody = c.walk(a.finallyBody, a);
      }
    }

    function z(a, b, c) {
      if (a.param) {
        a.param = c.walk(a.param, a);
      }

      if (a.body) {
        a.body = c.walk(a.body, a);
      }
    }

    function A(a, b, c) {
      a.name = c.walk(a.name, a);

      if (a.members) {
        a.members = c.walk(a.members, a);
      }
    }

    function B(a, b, c) {
      A(a, b, c);
    }

    function C(a, b, c) {
      B(a, b, c);

      if (a.typeParameters) {
        a.typeParameters = c.walk(a.typeParameters, a);
      }

      if (a.extendsList) {
        a.extendsList = c.walk(a.extendsList, a);
      }

      if (a.implementsList) {
        a.implementsList = c.walk(a.implementsList, a);
      }
    }

    function D(a, b, c) {
      if (a.moduleElements) {
        a.moduleElements = c.walk(a.moduleElements, a);
      }
    }

    function E(a, b, c) {
      B(a, b, c);

      if (a.typeParameters) {
        a.typeParameters = c.walk(a.typeParameters, a);
      }

      if (a.extendsList) {
        a.extendsList = c.walk(a.extendsList, a);
      }

      if (a.implementsList) {
        a.implementsList = c.walk(a.implementsList, a);
      }
    }

    function F(a, b, c) {
      A(a, b, c);
    }

    function G(a, b, c) {
      if (a.id) {
        a.id = c.walk(a.id, a);
      }

      if (a.alias) {
        a.alias = c.walk(a.alias, a);
      }
    }

    function H(a, b, c) {
      if (a.id) {
        a.id = c.walk(a.id, a);
      }
    }

    function I(a, b, c) {
      if (a.expr) {
        a.expr = c.walk(a.expr, a);
      }

      if (a.body) {
        a.body = c.walk(a.body, a);
      }
    }

    function J(a, b, c) {
      a.expression = c.walk(a.expression, a);
    }

    function K(a, b, c) {
      a.identifier = c.walk(a.identifier, a);

      a.statement = c.walk(a.statement, a);
    }

    function L(a, b, c) {
      a.declaration = c.walk(a.declaration, a);
    }
    a.walkNone = b;

    a.walkListChildren = c;

    a.walkThrowStatementChildren = d;

    a.walkUnaryExpressionChildren = e;

    a.walkParenthesizedExpressionChildren = f;

    a.walkBinaryExpressionChildren = g;

    a.walkTypeParameterChildren = h;

    a.walkGenericTypeChildren = i;

    a.walkTypeReferenceChildren = j;

    a.walkCallExpressionChildren = k;

    a.walkTrinaryExpressionChildren = l;

    a.walkFuncDeclChildren = m;

    a.walkBoundDeclChildren = n;

    a.walkReturnStatementChildren = o;

    a.walkForStatementChildren = p;

    a.walkForInStatementChildren = q;

    a.walkIfStatementChildren = r;

    a.walkWhileStatementChildren = s;

    a.walkDoStatementChildren = t;

    a.walkBlockChildren = u;

    a.walkVariableDeclarationChildren = v;

    a.walkCaseClauseChildren = w;

    a.walkSwitchStatementChildren = x;

    a.walkTryStatementChildren = y;

    a.walkCatchClauseChildren = z;

    a.walkRecordChildren = A;

    a.walkNamedTypeChildren = B;

    a.walkClassDeclChildren = C;

    a.walkScriptChildren = D;

    a.walkTypeDeclChildren = E;

    a.walkModuleDeclChildren = F;

    a.walkImportDeclChildren = G;

    a.walkExportAssignmentChildren = H;

    a.walkWithStatementChildren = I;

    a.walkExpressionStatementChildren = J;

    a.walkLabeledStatementChildren = K;

    a.walkVariableStatementChildren = L;
  })(g || (g = {}));
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    function c(b, c) {
      var e = function(a, b) {
        g.options.goChildren = d(!0, a, c);

        return a;
      };

      var f = function(a, b) {
        d(!1, a, c);

        return a;
      };

      var g = a.getAstWalkerFactory().getWalker(e, f);
      g.walk(b, null);
    }

    function d(b, c, d) {
      var e = c.nodeType;

      var f = a.NodeType[e] + "Callback";
      return d[f] ? d[f](b, c) : d.DefaultCallback ? d.DefaultCallback(b, c) : !0;
    }
    b.walk = c;
  })(a.AstWalkerWithDetailCallback || (a.AstWalkerWithDetailCallback = {}));
  var b = a.AstWalkerWithDetailCallback;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function b(a, b) {
    return a >= b ? a : b;
  }

  function c(a, b) {
    return a <= b ? a : b;
  }

  function e(a) {
    return a === null ? !1 : a.minChar === -1 || a.limChar === -1 ? !1 : !0;
  }

  function h(b, c, d, g) {
    if (typeof d == "undefined") {
      d = !0;
    }

    if (typeof g == "undefined") {
      g = 0;
    }
    var h = function(a) {
      if (a && a.length > 0)
        for (var b = 0; b < a.length; b++) {
          var e = a[b].minChar;

          var f = a[b].limChar + (d ? a[b].trailingTriviaWidth : 0);
          if (!a[b].isBlockComment) {
            f++;
          }

          if (c >= e && c < f) {
            j.path.push(a[b]);
          }
        }
    };

    var i = function(f, i, k) {
      if (e(f)) {
        var l = a.hasFlag(g, 1) || f.nodeType === 20 || f.nodeType === 32 || f.nodeType === 11 || c === b.limChar + b
          .trailingTriviaWidth;

        var m = f.minChar;

        var n = f.limChar + (d ? f.trailingTriviaWidth : 0) + (l ? 1 : 0);
        if (c >= m && c < n) {
          var o = j.path.ast();
          if (o === null || f.minChar >= o.minChar && f.limChar + (d ? f.trailingTriviaWidth : 0) <= o.limChar + (d ?
            o.trailingTriviaWidth : 0)) {
            j.path.push(f);
          }
        }
        if (c < n) {
          h(f.preComments);
        }

        if (c >= m) {
          h(f.postComments);
        }

        if (!a.hasFlag(g, 2)) {
          k.options.goChildren = m <= c && c <= n;
        }
      }
      return f;
    };

    var j = new f;
    a.getAstWalkerFactory().walk(b, i, null, null, j);

    return j.path;
  }

  function i(b, c) {
    var e = function(a, b, d) {
      var e = d.state;
      e.push(a);

      c(e, d);

      return a;
    };

    var f = function(a, b, c) {
      var d = c.state;
      d.pop();

      return a;
    };

    var g = new d;
    a.getAstWalkerFactory().walk(b, e, f, null, g);
  }
  a.max = b;

  a.min = c;
  var d = function() {
    function a() {
      this.asts = [];

      this.top = -1;
    }
    a.reverseIndexOf = function(a, b) {
      return a === null || a.length <= b ? null : a[a.length - b - 1];
    };

    a.prototype.clone = function() {
      var b = new a;
      b.asts = this.asts.map(function(a) {
        return a;
      });

      b.top = this.top;

      return b;
    };

    a.prototype.pop = function() {
      var a = this.ast();
      this.up();
      while (this.asts.length > this.count()) {
        this.asts.pop();
      }
      return a;
    };

    a.prototype.push = function(a) {
      while (this.asts.length > this.count()) {
        this.asts.pop();
      }
      this.top = this.asts.length;

      this.asts.push(a);
    };

    a.prototype.up = function() {
      if (this.top <= -1) throw new Error("Invalid call to 'up'");
      this.top--;
    };

    a.prototype.down = function() {
      if (this.top === this.ast.length - 1) throw new Error("Invalid call to 'down'");
      this.top++;
    };

    a.prototype.nodeType = function() {
      return this.ast() === null ? 0 : this.ast().nodeType;
    };

    a.prototype.ast = function() {
      return a.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));
    };

    a.prototype.parent = function() {
      return a.reverseIndexOf(this.asts, this.asts.length - this.top);
    };

    a.prototype.count = function() {
      return this.top + 1;
    };

    a.prototype.get = function(a) {
      return this.asts[a];
    };

    a.prototype.isNameOfClass = function() {
      return this.ast() === null || this.parent() === null ? !1 : this.ast().nodeType === 20 && this.parent().nodeType ===
        13 && this.parent().name === this.ast();
    };

    a.prototype.isNameOfInterface = function() {
      return this.ast() === null || this.parent() === null ? !1 : this.ast().nodeType === 20 && this.parent().nodeType ===
        14 && this.parent().name === this.ast();
    };

    a.prototype.isNameOfArgument = function() {
      return this.ast() === null || this.parent() === null ? !1 : this.ast().nodeType === 20 && this.parent().nodeType ===
        19 && this.parent().id === this.ast();
    };

    a.prototype.isNameOfVariable = function() {
      return this.ast() === null || this.parent() === null ? !1 : this.ast().nodeType === 20 && this.parent().nodeType ===
        17 && this.parent().id === this.ast();
    };

    a.prototype.isNameOfModule = function() {
      return this.ast() === null || this.parent() === null ? !1 : this.ast().nodeType === 20 && this.parent().nodeType ===
        15 && this.parent().name === this.ast();
    };

    a.prototype.isNameOfFunction = function() {
      return this.ast() === null || this.parent() === null ? !1 : this.ast().nodeType === 20 && this.parent().nodeType ===
        12 && this.parent().name === this.ast();
    };

    a.prototype.isBodyOfFunction = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === 12 && this.asts[this.top - 1].block === this.asts[
        this.top - 0];
    };

    a.prototype.isArgumentListOfFunction = function() {
      return this.count() >= 2 && this.asts[this.top - 0].nodeType === 1 && this.asts[this.top - 1].nodeType === 12 &&
        this.asts[this.top - 1].arguments === this.asts[this.top - 0];
    };

    a.prototype.isTargetOfCall = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === 36 && this.asts[this.top - 1].target === this.asts[
        this.top];
    };

    a.prototype.isTargetOfNew = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === 37 && this.asts[this.top - 1].target === this.asts[
        this.top];
    };

    a.prototype.isInClassImplementsList = function() {
      return this.ast() === null || this.parent() === null ? !1 : this.parent().nodeType === 13 && this.isMemberOfList(
        this.parent().implementsList, this.ast());
    };

    a.prototype.isInInterfaceExtendsList = function() {
      return this.ast() === null || this.parent() === null ? !1 : this.parent().nodeType === 14 && this.isMemberOfList(
        this.parent().extendsList, this.ast());
    };

    a.prototype.isMemberOfMemberAccessExpression = function() {
      return this.count() > 1 && this.parent().nodeType === 32 && this.parent().operand2 === this.asts[this.top] ? !0 : !
        1;
    };

    a.prototype.isCallExpression = function() {
      return this.count() >= 1 && (this.asts[this.top - 0].nodeType === 36 || this.asts[this.top - 0].nodeType === 37);
    };

    a.prototype.isCallExpressionTarget = function() {
      if (this.count() < 2) {
        return !1;
      }
      var a = this.top;

      var b = this.asts[a].nodeType;
      if (b === 29 || b === 30 || b === 20) {
        a--;
      }
      while (a >= 0) {
        if (a < this.top && this.asts[a].nodeType === 32 && this.asts[a].operand2 === this.asts[a + 1]) {
          a--;
          continue;
        }
        break;
      }
      return a < this.top && (this.asts[a].nodeType === 36 || this.asts[a].nodeType === 37) && this.asts[a + 1] ===
        this.asts[a].target;
    };

    a.prototype.isDeclaration = function() {
      if (this.ast() !== null) switch (this.ast().nodeType) {
        case 13:
        case 14:
        case 15:
        case 12:
        case 17:
          return !0;
      }
      return !1;
    };

    a.prototype.isMemberOfList = function(a, b) {
      if (a && a.members)
        for (var c = 0, d = a.members.length; c < d; c++)
          if (a.members[c] === b) {
            return !0;
          }
      return !1;
    };

    return a;
  }();
  a.AstPath = d;

  a.isValidAstNode = e;
  var f = function() {
    function b() {
      this.path = new a.AstPath;
    }
    return b;
  }();
  a.AstPathContext = f;

  (function(a) {
    a[a.Default = 0] = "Default";

    a[a.EdgeInclusive = 1] = "EdgeInclusive";

    a[a.DontPruneSearchBasedOnPosition = 2] = "DontPruneSearchBasedOnPosition";
  })(a.GetAstPathOptions || (a.GetAstPathOptions = {}));
  var g = a.GetAstPathOptions;
  a.getAstPathToPosition = h;

  a.walkAST = i;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    a.encode = function(b) {
      if (b < 64) {
        return a.encodedValues.charAt(b);
      }
      throw TypeError(b + ": not a 64 based value");
    };

    a.decodeChar = function(b) {
      if (b.length === 1) {
        return a.encodedValues.indexOf(b);
      }
      throw TypeError('"' + b + '" must have length 1');
    };

    a.encodedValues = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    return a;
  }();

  var c = function() {
    function a() {}
    a.encode = function(a) {
      if (a < 0) {
        a = (-a << 1) + 1;
      } else {
        a <<= 1;
      }
      var c = "";
      do {
        var d = a & 31;
        a >>= 5;

        if (a > 0) {
          d |= 32;
        }

        c += b.encode(d);
      } while (a > 0);
      return c;
    };

    a.decode = function(a) {
      var c = 0;

      var d = !1;

      var e = 0;
      for (var f = 0; f < a.length; f++) {
        var g = b.decodeChar(a[f]);
        if (f === 0) {
          if ((g & 1) === 1) {
            d = !0;
          }
          c = g >> 1 & 15;
        } else {
          c |= (g & 31) << e;
        }

        e += f === 0 ? 4 : 5;
        if ((g & 32) !== 32) {
          return {
            value: d ? -c : c,
            rest: a.substr(f + 1)
          };
        }
      }
      throw new Error('Base64 value "' + a + '" finished with a continuation bit');
    };

    return a;
  }();
  a.Base64VLQFormat = c;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    return a;
  }();
  a.SourceMapPosition = b;
  var c = function() {
    function a() {
      this.start = new b;

      this.end = new b;

      this.nameIndex = -1;

      this.childMappings = [];
    }
    return a;
  }();
  a.SourceMapping = c;
  var d = function() {
    function b(b, c, d, e, f, g) {
      this.sourceMapFileName = d;

      this.jsFile = e;

      this.sourceMapOut = f;

      this.sourceMappings = [];

      this.currentMappings = [];

      this.names = [];

      this.currentNameIndex = [];

      this.currentMappings.push(this.sourceMappings);

      c = a.switchToForwardSlashes(c);

      this.jsFileName = a.getPrettyName(c, !1, !0);
      var h = c.lastIndexOf(this.jsFileName);

      var i = c.substring(0, h);
      if (g) {
        if (c.indexOf("://") === -1) {
          c = "file:///" + c;
        }
        this.jsFileName = c;
      }

      this.tsFileName = a.getRelativePathToFixedPath(i, b);
    }
    b.emitSourceMapping = function(c) {
      var d = c[0];
      d.jsFile.WriteLine("//@ sourceMappingURL=" + d.jsFileName + b.MapFileExtension);
      var e = d.sourceMapOut;

      var f = "";

      var g = [];

      var h = 0;

      var i = 0;

      var j = 0;

      var k = 0;

      var l = 0;

      var m = 0;

      var n = [];

      var o = 0;

      var p = !1;

      var q = null;
      for (var r = 0; r < c.length; r++) {
        d = c[r];
        var s = g.length;
        g.push(d.tsFileName);

        if (d.names.length > 0) {
          n.push.apply(n, d.names);
        }
        var t = function(b, c) {
          if (q !== null && q.emittedColumn === b.emittedColumn && q.emittedLine === b.emittedLine) return;
          if (i !== b.emittedLine) {
            while (i < b.emittedLine) {
              h = 0;
              f += ";";
              i++;
            }
            p = !1;
          } else {
            if (p) {
              f += ",";
            }
          }
          f += a.Base64VLQFormat.encode(b.emittedColumn - h);

          h = b.emittedColumn;

          f += a.Base64VLQFormat.encode(s - l);

          l = s;

          f += a.Base64VLQFormat.encode(b.sourceLine - 1 - k);

          k = b.sourceLine - 1;

          f += a.Base64VLQFormat.encode(b.sourceColumn - j);

          j = b.sourceColumn;

          if (c >= 0) {
            f += a.Base64VLQFormat.encode(o + c - m);
            m = o + c;
          }

          p = !0;

          q = b;
        };

        var u = function(a) {
          for (var b = 0; b < a.length; b++) {
            var c = a[b];
            t(c.start, c.nameIndex);

            u(c.childMappings);

            t(c.end, c.nameIndex);
          }
        };
        u(d.sourceMappings);

        o += d.names.length;
      }
      e.Write(JSON.stringify({
        version: 3,
        file: d.jsFileName,
        sources: g,
        names: n,
        mappings: f
      }));

      e.Close();
    };

    b.MapFileExtension = ".map";

    return b;
  }();
  a.SourceMapper = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.Prog = 0] = "Prog";

    a[a.Module = 1] = "Module";

    a[a.DynamicModule = 2] = "DynamicModule";

    a[a.Class = 3] = "Class";

    a[a.Constructor = 4] = "Constructor";

    a[a.Function = 5] = "Function";

    a[a.Args = 6] = "Args";

    a[a.Interface = 7] = "Interface";
  })(a.EmitContainer || (a.EmitContainer = {}));
  var b = a.EmitContainer;

  var c = function() {
    function a() {
      this.column = 0;

      this.line = 0;

      this.container = 0;
    }
    return a;
  }();
  a.EmitState = c;
  var d = function() {
    function a(a) {
      this.compilationSettings = a;

      this.ioHost = null;

      this.outputMany = !0;

      this.commonDirectoryPath = "";
    }
    a.prototype.mapOutputFileName = function(a, b) {
      if (this.outputMany) {
        var c = a;
        this.compilationSettings.outputOption !== "" && (c = a.replace(this.commonDirectoryPath, ""), c = this.compilationSettings
          .outputOption + c);

        return b(c, !1);
      }
      return b(this.compilationSettings.outputOption, !0);
    };

    return a;
  }();
  a.EmitOptions = d;
  var e = function() {
    function a() {
      this.indentAmt = 0;
    }
    a.prototype.increaseIndent = function() {
      this.indentAmt += a.indentStep;
    };

    a.prototype.decreaseIndent = function() {
      this.indentAmt -= a.indentStep;
    };

    a.prototype.getIndent = function() {
      var b = a.indentStrings[this.indentAmt];
      if (b === undefined) {
        b = "";
        for (var c = 0; c < this.indentAmt; c += a.indentStep) {
          b += a.indentStepString;
        }
        a.indentStrings[this.indentAmt] = b;
      }
      return b;
    };

    a.indentStep = 4;

    a.indentStepString = "    ";

    a.indentStrings = [];

    return a;
  }();
  a.Indenter = e;
  var f = function() {
    function b(b, d, f, g) {
      this.emittingFileName = b;

      this.outfile = d;

      this.emitOptions = f;

      this.semanticInfoChain = g;

      this.globalThisCapturePrologueEmitted = !1;

      this.extendsPrologueEmitted = !1;

      this.thisClassNode = null;

      this.thisFunctionDeclaration = null;

      this.moduleName = "";

      this.emitState = new c;

      this.indenter = new e;

      this.modAliasId = null;

      this.firstModAlias = null;

      this.allSourceMappers = [];

      this.sourceMapper = null;

      this.captureThisStmtString = "var _this = this;";

      this.varListCountStack = [0];

      this.pullTypeChecker = null;

      this.declStack = [];

      this.resolvingContext = new a.PullTypeResolutionContext;

      this.exportAssignmentIdentifier = null;

      this.document = null;

      a.globalSemanticInfoChain = g;

      a.globalBinder.semanticInfoChain = g;

      this.pullTypeChecker = new a.PullTypeChecker(f.compilationSettings, g);
    }
    b.prototype.pushDecl = function(a) {
      if (a) {
        this.declStack[this.declStack.length] = a;
      }
    };

    b.prototype.popDecl = function(a) {
      if (a) {
        this.declStack.length--;
      }
    };

    b.prototype.getEnclosingDecl = function() {
      var a = this.declStack.length;

      var b = a > 0 ? this.declStack[a - 1] : null;
      return b;
    };

    b.prototype.setTypeCheckerUnit = function(a) {
      if (!this.pullTypeChecker.resolver) {
        this.pullTypeChecker.setUnit(a);
        return;
      }
      this.pullTypeChecker.resolver.setUnitPath(a);
    };

    b.prototype.setExportAssignmentIdentifier = function(a) {
      this.exportAssignmentIdentifier = a;
    };

    b.prototype.getExportAssignmentIdentifier = function() {
      return this.exportAssignmentIdentifier;
    };

    b.prototype.setDocument = function(a) {
      this.document = a;
    };

    b.prototype.importStatementShouldBeEmitted = function(a, b) {
      if (!a.isDynamicImport) {
        return !0;
      }
      var c = this.semanticInfoChain.getDeclForAST(a, this.document.fileName);

      var d = c.getSymbol();
      return d.getIsUsedAsValue();
    };

    b.prototype.setSourceMappings = function(a) {
      this.allSourceMappers.push(a);

      this.sourceMapper = a;
    };

    b.prototype.writeToOutput = function(a) {
      this.outfile.Write(a);

      this.emitState.column += a.length;
    };

    b.prototype.writeToOutputTrimmable = function(a) {
      if (this.emitOptions.compilationSettings.minWhitespace) {
        a = a.replace(/[\s]*/g, "");
      }

      this.writeToOutput(a);
    };

    b.prototype.writeLineToOutput = function(a) {
      if (this.emitOptions.compilationSettings.minWhitespace) {
        this.writeToOutput(a);
        var b = a.charCodeAt(a.length - 1);
        if (b !== 32 && b !== 59 && b !== 91) {
          this.writeToOutput(" ");
        }
      } else {
        this.outfile.WriteLine(a);
        this.emitState.column = 0;
        this.emitState.line++;
      }
    };

    b.prototype.writeCaptureThisStatement = function(a) {
      this.emitIndent();

      this.recordSourceMappingStart(a);

      this.writeToOutput(this.captureThisStmtString);

      this.recordSourceMappingEnd(a);

      this.writeLineToOutput("");
    };

    b.prototype.setInVarBlock = function(a) {
      this.varListCountStack[this.varListCountStack.length - 1] = a;
    };

    b.prototype.setContainer = function(a) {
      var b = this.emitState.container;
      this.emitState.container = a;

      return b;
    };

    b.prototype.getIndentString = function() {
      return this.emitOptions.compilationSettings.minWhitespace ? "" : this.indenter.getIndent();
    };

    b.prototype.emitIndent = function() {
      this.writeToOutput(this.getIndentString());
    };

    b.prototype.emitCommentInPlace = function(a) {
      var b = a.getText();

      var c = !1;
      if (a.isBlockComment) {
        if (this.emitState.column === 0) {
          this.emitIndent();
        }

        this.recordSourceMappingStart(a);

        this.writeToOutput(b[0]);
        if (b.length > 1 || a.endsLine) {
          for (var d = 1; d < b.length; d++) {
            this.writeLineToOutput("");
            this.emitIndent();
            this.writeToOutput(b[d]);
          }
          this.recordSourceMappingEnd(a);

          this.writeLineToOutput("");

          c = !0;
        } else {
          this.recordSourceMappingEnd(a);
        }
      } else {
        if (this.emitState.column === 0) {
          this.emitIndent();
        }
        this.recordSourceMappingStart(a);
        this.writeToOutput(b[0]);
        this.recordSourceMappingEnd(a);
        this.writeLineToOutput("");
        c = !0;
      }
      if (c) {
        this.emitIndent();
      } else {
        this.writeToOutput(" ");
      }
    };

    b.prototype.emitComments = function(a, b) {
      var c = b ? a.preComments : a.postComments;
      if (this.emitOptions.compilationSettings.emitComments && c && c.length !== 0)
        for (var d = 0; d < c.length; d++) {
          this.emitCommentInPlace(c[d]);
        }
    };

    b.prototype.emitObjectLiteral = function(b) {
      var c = !a.hasFlag(b.getFlags(), 2);
      this.writeToOutput("{");
      var d = b.operand;
      if (d.members.length > 0) {
        if (c) {
          this.writeLineToOutput("");
        } else {
          this.writeToOutput(" ");
        }
        this.indenter.increaseIndent();
        this.emitCommaSeparatedList(d, c);
        this.indenter.decreaseIndent();
        if (c) {
          this.emitIndent();
        } else {
          this.writeToOutput(" ");
        }
      }

      this.writeToOutput("}");
    };

    b.prototype.emitArrayLiteral = function(b) {
      var c = !a.hasFlag(b.getFlags(), 2);
      this.writeToOutput("[");
      var d = b.operand;
      if (d.members.length > 0) {
        if (c) {
          this.writeLineToOutput("");
        }
        this.indenter.increaseIndent();
        this.emitCommaSeparatedList(d, c);
        this.indenter.decreaseIndent();
        if (c) {
          this.emitIndent();
        }
      }

      this.writeToOutput("]");
    };

    b.prototype.emitNew = function(a, b) {
      this.writeToOutput("new ");
      if (a.nodeType === 11) {
        var c = a;
        if (c.arrayCount) {
          this.writeToOutput("Array()");
        } else {
          c.term.emit(this);
          this.writeToOutput("()");
        }
      } else {
        a.emit(this);
        this.recordSourceMappingStart(b);
        this.writeToOutput("(");
        this.emitCommaSeparatedList(b);
        this.writeToOutput(")");
        this.recordSourceMappingEnd(b);
      }
    };

    b.prototype.getVarDeclFromIdentifier = function(b) {
      a.CompilerDiagnostics.assert(b.boundDecl && b.boundDecl.init && b.boundDecl.init.nodeType === 20,
        "The init expression of bound declaration when emitting as constant has to be indentifier");
      var c = b.boundDecl.init;

      var d = c;
      this.setTypeCheckerUnit(this.document.fileName);
      var e = this.resolvingContext.resolvingTypeReference ? this.pullTypeChecker.resolver.resolveTypeNameExpression(
        d, b.pullDecl.getParentDecl(), this.resolvingContext).symbol : this.pullTypeChecker.resolver.resolveNameExpression(
        d, b.pullDecl.getParentDecl(), this.resolvingContext).symbol;
      if (e) {
        var f = e.getDeclarations();
        if (f.length === 1) {
          var g = f[0];

          var h = this.semanticInfoChain.getASTForDecl(g);
          if (h && h.nodeType === 17) {
            return {
              boundDecl: h,
              pullDecl: g
            };
          }
        }
      }
      return null;
    };

    b.prototype.getConstantValue = function(a) {
      var b = a.boundDecl.init;
      if (b) {
        if (b.nodeType === 7) {
          var c = b;
          return c.value;
        }
        if (b.nodeType === 69) {
          var d = b;
          if (d.operand1.nodeType === 7 && d.operand2.nodeType === 7) {
            return d.operand1.value << d.operand2.value;
          }
        } else if (b.nodeType === 20) {
          var e = this.getVarDeclFromIdentifier(a);
          if (e) {
            return this.getConstantValue(e);
          }
        }
      }
      return null;
    };

    b.prototype.getConstantDecl = function(a) {
      this.setTypeCheckerUnit(this.document.fileName);
      var b = this.pullTypeChecker.resolver.resolveDottedNameExpression(a, this.getEnclosingDecl(), this.resolvingContext)
        .symbol;
      if (b && b.hasFlag(524288)) {
        var c = b.getDeclarations();
        if (c.length === 1) {
          var d = c[0];

          var e = this.semanticInfoChain.getASTForDecl(d);
          if (e && e.nodeType === 17) {
            return {
              boundDecl: e,
              pullDecl: d
            };
          }
        }
      }
      return null;
    };

    b.prototype.tryEmitConstant = function(a) {
      if (!this.emitOptions.compilationSettings.propagateConstants) {
        return !1;
      }
      var b = a.operand2;

      var c = this.getConstantDecl(a);
      if (c) {
        var d = this.getConstantValue(c);
        if (d !== null) {
          this.writeToOutput(d.toString());
          var e = " /* ";
          e += b.actualText;

          e += " */";

          this.writeToOutput(e);

          return !0;
        }
      }
      return !1;
    };

    b.prototype.emitCall = function(a, b, c) {
      if (!this.emitSuperCall(a)) {
        if (b.nodeType === 12) {
          this.writeToOutput("(");
        }
        if (a.target.nodeType === 30 && this.emitState.container === 4) {
          this.writeToOutput("_super.call");
        } else {
          this.emitJavascript(b, !1);
        }
        if (b.nodeType === 12) {
          this.writeToOutput(")");
        }
        this.recordSourceMappingStart(c);
        this.writeToOutput("(");
        if (a.target.nodeType === 30 && this.emitState.container === 4) {
          this.writeToOutput("this");
          if (c && c.members.length) {
            this.writeToOutput(", ");
          }
        }
        this.emitCommaSeparatedList(c);
        this.writeToOutput(")");
        this.recordSourceMappingEnd(c);
      }
    };

    b.prototype.emitInnerFunction = function(b, c, d) {
      if (typeof d == "undefined") {
        d = !0;
      }
      var e = this.semanticInfoChain.getDeclForAST(b, this.document.fileName);
      this.pushDecl(e);
      var f = !1;
      if (d) {
        this.emitComments(b, !0);
      }

      if (f) {
        this.writeToOutput("(");
      }

      this.recordSourceMappingStart(b);
      var g = b.isAccessor() ? a.PullHelpers.getAccessorSymbol(b, this.semanticInfoChain, this.document.fileName) :
        null;

      var h = g ? g.getContainer() : null;

      var i = h ? h.getKind() : 0;
      if (!b.isAccessor() || i === 8 || i === 33554432) {
        this.writeToOutput("function ");
      }

      if (b.isConstructor) {
        this.writeToOutput(this.thisClassNode.name.actualText);
      }
      if (c) {
        var j = b.getNameText();
        if (j && !b.isAccessor()) {
          if (b.name) {
            this.recordSourceMappingStart(b.name);
          }
          this.writeToOutput(j);
          if (b.name) {
            this.recordSourceMappingEnd(b.name);
          }
        }
      }
      this.writeToOutput("(");
      var k = 0;
      if (b.arguments) {
        this.emitComments(b.arguments, !0);
        var l = this.setContainer(6);
        k = b.arguments.members.length;
        var m = k;
        if (b.variableArgList) {
          m--;
        }
        for (var n = 0; n < m; n++) {
          var o = b.arguments.members[n];
          o.emit(this);

          if (n < m - 1) {
            this.writeToOutput(", ");
          }
        }
        this.setContainer(l);

        this.emitComments(b.arguments, !1);
      }
      this.writeLineToOutput(") {");

      if (b.isConstructor) {
        this.recordSourceMappingNameStart("constructor");
      } else {
        if (b.isGetAccessor()) {
          this.recordSourceMappingNameStart("get_" + b.getNameText());
        } else {
          if (b.isSetAccessor()) {
            this.recordSourceMappingNameStart("set_" + b.getNameText());
          } else {
            this.recordSourceMappingNameStart(b.getNameText());
          }
        }
      }

      this.indenter.increaseIndent();

      this.emitDefaultValueAssignments(b);

      this.emitRestParameterInitializer(b);

      if (this.shouldCaptureThis(b)) {
        this.writeCaptureThisStatement(b);
      }

      if (b.isConstructor) {
        this.emitConstructorStatements(b);
      } else {
        this.emitModuleElements(b.block.statements);
      }

      this.indenter.decreaseIndent();

      this.emitIndent();

      this.recordSourceMappingStart(b.block.closeBraceSpan);

      this.writeToOutput("}");

      this.recordSourceMappingNameEnd();

      this.recordSourceMappingEnd(b.block.closeBraceSpan);

      this.recordSourceMappingEnd(b);

      if (f) {
        this.writeToOutput(")");
      }

      this.recordSourceMappingEnd(b);

      this.emitComments(b, !1);

      this.popDecl(e);
    };

    b.prototype.emitDefaultValueAssignments = function(a) {
      var b = a.arguments.members.length;
      if (a.variableArgList) {
        b--;
      }
      for (var c = 0; c < b; c++) {
        var d = a.arguments.members[c];
        if (d.init) {
          this.emitIndent();
          this.recordSourceMappingStart(d);
          this.writeToOutput("if (typeof " + d.id.actualText + ' === "undefined") { ');
          this.recordSourceMappingStart(d.id);
          this.writeToOutput(d.id.actualText);
          this.recordSourceMappingEnd(d.id);
          this.writeToOutput(" = ");
          this.emitJavascript(d.init, !1);
          this.writeLineToOutput("; }");
          this.recordSourceMappingEnd(d);
        }
      }
    };

    b.prototype.emitRestParameterInitializer = function(a) {
      if (a.variableArgList) {
        var b = a.arguments.members.length;

        var c = a.arguments.members[b - 1];
        this.emitIndent();

        this.recordSourceMappingStart(c);

        this.writeToOutput("var ");

        this.recordSourceMappingStart(c.id);

        this.writeToOutput(c.id.actualText);

        this.recordSourceMappingEnd(c.id);

        this.writeLineToOutput(" = [];");

        this.recordSourceMappingEnd(c);

        this.emitIndent();

        this.writeToOutput("for (");

        this.recordSourceMappingStart(c);

        this.writeToOutput("var _i = 0;");

        this.recordSourceMappingEnd(c);

        this.writeToOutput(" ");

        this.recordSourceMappingStart(c);

        this.writeToOutput("_i < (arguments.length - " + (b - 1) + ")");

        this.recordSourceMappingEnd(c);

        this.writeToOutput("; ");

        this.recordSourceMappingStart(c);

        this.writeToOutput("_i++");

        this.recordSourceMappingEnd(c);

        this.writeLineToOutput(") {");

        this.indenter.increaseIndent();

        this.emitIndent();

        this.recordSourceMappingStart(c);

        this.writeToOutput(c.id.actualText + "[_i] = arguments[_i + " + (b - 1) + "];");

        this.recordSourceMappingEnd(c);

        this.writeLineToOutput("");

        this.indenter.decreaseIndent();

        this.emitIndent();

        this.writeLineToOutput("}");
      }
    };

    b.prototype.getImportDecls = function(b) {
      var c = this.semanticInfoChain.getUnit(this.document.fileName);

      var d = [];

      var e = c.getTopLevelDecls();
      while (e.length > 0) {
        var f = e.shift();
        if (f.getKind() & 256) {
          var g = c.getASTForDecl(f);
          if (g.alias.nodeType === 20) {
            var h = g.alias.actualText;
            if (a.isQuoted(h)) {
              var i = f.getSymbol();

              var j = i && i.getType();
              if (j && j !== this.semanticInfoChain.anyTypeSymbol && !j.isError()) {
                d.push(f);
              }
            }
          }
        }
        e = e.concat(f.getChildDecls());
      }
      return d;
    };

    b.prototype.getModuleImportAndDependencyList = function(a) {
      var b = "";

      var c = "";

      var d = this.semanticInfoChain.getUnit(this.document.fileName);

      var e = this.getImportDecls(this.document.fileName);
      if (e.length)
        for (var f = 0; f < e.length; f++) {
          var g = e[f];

          var h = g.getSymbol();

          var i = d.getASTForDecl(g);
          if (h.getIsUsedAsValue()) {
            if (f <= e.length - 1) {
              c += ", ";
              b += ", ";
            }
            b += "__" + g.getName() + "__";
            c += i.firstAliasedModToString();
          }
        }
      for (var f = 0; f < a.amdDependencies.length; f++) {
        c += ', "' + a.amdDependencies[f] + '"';
      }
      return {
        importList: b,
        dependencyList: c
      };
    };

    b.prototype.shouldCaptureThis = function(a) {
      if (a.nodeType === 2) {
        var b = this.semanticInfoChain.getUnit(this.document.fileName).getTopLevelDecls()[0];
        return (b.getFlags() & 262144) === 262144;
      }
      var c = this.semanticInfoChain.getDeclForAST(a, this.document.fileName);
      return c ? (c.getFlags() & 262144) === 262144 : !1;
    };

    b.prototype.emitModule = function(b) {
      var c = this.semanticInfoChain.getDeclForAST(b, this.document.fileName);
      this.pushDecl(c);
      var d = b.name.actualText;
      if (a.isTSFile(d)) {
        b.name.setText(d.substring(0, d.length - 3));
      }
      var e = a.hasFlag(b.getModuleFlags(), 512);

      var f = this.outfile;

      var g = this.emittingFileName;

      var h = this.allSourceMappers;

      var i = this.sourceMapper;

      var j = this.emitState.column;

      var k = this.emitState.line;

      var l = this.setContainer(1);

      var m = this.moduleName;

      var n = a.hasFlag(b.getModuleFlags(), 1);

      var o = a.hasFlag(b.getModuleFlags(), 256);
      this.moduleName = b.name.actualText;
      if (e) {
        this.setExportAssignmentIdentifier(null);

        this.setContainer(2);

        this.recordSourceMappingStart(b);
        if (this.emitOptions.compilationSettings.moduleGenTarget === 1) {
          var p = '["require", "exports"';

          var q = "require, exports";

          var r = this.getModuleImportAndDependencyList(b);
          q += r.importList;

          p += r.dependencyList + "]";

          this.writeLineToOutput("define(" + p + "," + " function(" + q + ") {");
        }
      } else {
        if (!n) {
          this.recordSourceMappingStart(b);
          this.writeToOutput("var ");
          this.recordSourceMappingStart(b.name);
          this.writeToOutput(this.moduleName);
          this.recordSourceMappingEnd(b.name);
          this.writeLineToOutput(";");
          this.recordSourceMappingEnd(b);
          this.emitIndent();
        }
        this.writeToOutput("(");
        this.recordSourceMappingStart(b);
        this.writeToOutput("function (");
        this.recordSourceMappingStart(b.name);
        this.writeToOutput(this.moduleName);
        this.recordSourceMappingEnd(b.name);
        this.writeLineToOutput(") {");
      }
      if (!o) {
        this.recordSourceMappingNameStart(this.moduleName);
      }

      if (!e || this.emitOptions.compilationSettings.moduleGenTarget === 1) {
        this.indenter.increaseIndent();
      }

      if (this.shouldCaptureThis(b)) {
        this.writeCaptureThisStatement(b);
      }

      this.emitModuleElements(b.members);

      if (!e || this.emitOptions.compilationSettings.moduleGenTarget === 1) {
        this.indenter.decreaseIndent();
      }

      this.emitIndent();
      if (e) {
        var s = this.getExportAssignmentIdentifier();

        var t = c.getSymbol().getExportAssignedValueSymbol();
        if (this.emitOptions.compilationSettings.moduleGenTarget === 1) {
          if (s && t && !(t.getKind() & a.PullElementKind.SomeTypeReference)) {
            this.indenter.increaseIndent();
            this.emitIndent();
            this.writeLineToOutput("return " + s + ";");
            this.indenter.decreaseIndent();
          }
          this.writeToOutput("});");
        } else {
          if (s && t && !(t.getKind() & a.PullElementKind.SomeTypeReference)) {
            this.emitIndent();
            this.writeLineToOutput("module.exports = " + s + ";");
          }
        }

        if (!o) {
          this.recordSourceMappingNameEnd();
        }

        this.recordSourceMappingEnd(b);

        if (this.outfile !== f) {
          this.emitSourceMapsAndClose();
          if (i !== null) {
            this.allSourceMappers = h;
            this.sourceMapper = i;
            this.emitState.column = j;
            this.emitState.line = k;
          }
          this.outfile = f;
          this.emittingFileName = g;
        }
      } else {
        var u = l === 2;
        this.recordSourceMappingStart(b.endingToken);
        if (l === 0 && n) {
          this.writeToOutput("}");
          if (!o) {
            this.recordSourceMappingNameEnd();
          }
          this.recordSourceMappingEnd(b.endingToken);
          this.writeToOutput(")(this." + this.moduleName + " || (this." + this.moduleName + " = {}));");
        } else if (n || l === 0) {
          var v = m !== "" ? (u ? "exports" : m) + "." : m;
          this.writeToOutput("}");

          if (!o) {
            this.recordSourceMappingNameEnd();
          }

          this.recordSourceMappingEnd(b.endingToken);

          this.writeToOutput(")(" + v + this.moduleName + " || (" + v + this.moduleName + " = {}));");
        } else {
          if (!n && l !== 0) {
            this.writeToOutput("}");
            if (!o) {
              this.recordSourceMappingNameEnd();
            }
            this.recordSourceMappingEnd(b.endingToken);
            this.writeToOutput(")(" + this.moduleName + " || (" + this.moduleName + " = {}));");
          } else {
            this.writeToOutput("}");
            if (!o) {
              this.recordSourceMappingNameEnd();
            }
            this.recordSourceMappingEnd(b.endingToken);
            this.writeToOutput(")();");
          }
        }
        this.recordSourceMappingEnd(b);

        if (l !== 0 && n) {
          this.recordSourceMappingStart(b);
          if (u) {
            this.writeLineToOutput("");
            this.emitIndent();
            this.writeToOutput("var " + this.moduleName + " = exports." + this.moduleName + ";");
          } else {
            this.writeLineToOutput("");
            this.emitIndent();
            this.writeToOutput("var " + this.moduleName + " = " + m + "." + this.moduleName + ";");
          }
          this.recordSourceMappingEnd(b);
        }
      }
      this.setContainer(l);

      this.moduleName = m;

      this.popDecl(c);
    };

    b.prototype.emitEnumElement = function(a) {
      this.writeToOutput(this.moduleName);

      this.writeToOutput("[");

      this.writeToOutput(this.moduleName);

      this.writeToOutput('["');

      this.writeToOutput(a.id.text);

      this.writeToOutput('"] = ');

      a.init.emit(this);

      this.writeToOutput('] = "');

      this.writeToOutput(a.id.text);

      this.writeToOutput('";');
    };

    b.prototype.emitIndex = function(a, b) {
      a.emit(this);

      this.writeToOutput("[");

      b.emit(this);

      this.writeToOutput("]");
    };

    b.prototype.emitFunction = function(b) {
      if (a.hasFlag(b.getFunctionFlags(), 128)) return;
      var c;

      var d = this.thisFunctionDeclaration;
      this.thisFunctionDeclaration = b;

      if (b.isConstructor) {
        c = this.setContainer(4);
      } else {
        c = this.setContainer(5);
      }
      var e = b.getNameText();
      if (c !== 4 || (b.getFunctionFlags() & 256) === 0) {
        this.recordSourceMappingStart(b);
        this.emitInnerFunction(b, b.name && !b.name.isMissing());
      }
      this.setContainer(c);

      this.thisFunctionDeclaration = d;
      if (!a.hasFlag(b.getFunctionFlags(), 128))
        if (a.hasFlag(b.getFunctionFlags(), 16)) {
          if (this.thisClassNode) {
            this.writeLineToOutput("");
            if (b.isAccessor()) {
              this.emitPropertyAccessor(b, this.thisClassNode.name.actualText, !1);
            } else {
              this.emitIndent();
              this.recordSourceMappingStart(b);
              this.writeToOutput(this.thisClassNode.name.actualText + "." + e + " = " + e + ";");
              this.recordSourceMappingEnd(b);
            }
          }
        } else if ((this.emitState.container === 1 || this.emitState.container === 2) && a.hasFlag(b.getFunctionFlags(),
        1)) {
        this.writeLineToOutput("");

        this.emitIndent();
        var f = this.emitState.container === 1 ? this.moduleName : "exports";
        this.recordSourceMappingStart(b);

        this.writeToOutput(f + "." + e + " = " + e + ";");

        this.recordSourceMappingEnd(b);
      }
    };

    b.prototype.emitAmbientVarDecl = function(a) {
      if (a.init) {
        this.emitComments(a, !0);
        this.recordSourceMappingStart(a);
        this.recordSourceMappingStart(a.id);
        this.writeToOutput(a.id.actualText);
        this.recordSourceMappingEnd(a.id);
        this.writeToOutput(" = ");
        this.emitJavascript(a.init, !1);
        this.recordSourceMappingEnd(a);
        this.emitComments(a, !1);
      }
    };

    b.prototype.varListCount = function() {
      return this.varListCountStack[this.varListCountStack.length - 1];
    };

    b.prototype.emitVarDeclVar = function() {
      this.varListCount() >= 0 && (this.writeToOutput("var "), this.setInVarBlock(-this.varListCount()));

      return !0;
    };

    b.prototype.onEmitVar = function() {
      if (this.varListCount() > 0) {
        this.setInVarBlock(this.varListCount() - 1);
      } else {
        if (this.varListCount() < 0) {
          this.setInVarBlock(this.varListCount() + 1);
        }
      }
    };

    b.prototype.emitVariableDeclaration = function(b) {
      var c = b.declarators.members[0];

      var d = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(c, this.document.fileName);

      var e = d && d.symbol;

      var f = e ? e.getContainer() : null;

      var g = f ? f.getKind() : 0;

      var h = g === 8;
      this.emitComments(b, !0);

      this.recordSourceMappingStart(b);

      this.setInVarBlock(b.declarators.members.length);
      var i = a.hasFlag(c.getVarFlags(), 8) && c.init === null;
      if (!i)
        for (var j = 0, k = b.declarators.members.length; j < k; j++) {
          var l = b.declarators.members[j];
          if (j > 0) {
            if (h) {
              this.writeToOutputTrimmable(";");
            } else {
              this.writeToOutputTrimmable(", ");
            }
          }

          l.emit(this);
        }
      this.recordSourceMappingEnd(b);

      this.emitComments(b, !1);
    };

    b.prototype.emitVariableDeclarator = function(a) {
      var b = this.semanticInfoChain.getDeclForAST(a, this.document.fileName);
      this.pushDecl(b);
      if ((a.getVarFlags() & 8) === 8) {
        this.emitAmbientVarDecl(a);
        this.onEmitVar();
      } else {
        this.emitComments(a, !0);

        this.recordSourceMappingStart(a);
        var c = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(a, this.document.fileName);

        var d = c && c.symbol;

        var e = d ? d.getContainer() : null;

        var f = e ? e.getKind() : 0;

        var g = e ? e.getAssociatedContainerType() : null;

        var h = g ? g.getKind() : 0;
        if (f === 8) {
          if (this.emitState.container !== 6) {
            if (a.isStatic()) {
              this.writeToOutput(e.getName() + ".");
            } else {
              this.writeToOutput("this.");
            }
          }
        } else {
          if (f === 64 || f === 32 || h === 4 || h === 32 || h === 64) {
            if (!a.isExported() && !a.isProperty()) {
              this.emitVarDeclVar();
            } else {
              if (this.emitState.container === 2) {
                this.writeToOutput("exports.");
              } else {
                this.writeToOutput(this.moduleName + ".");
              }
            }
          } else {
            this.emitVarDeclVar();
          }
        }

        this.recordSourceMappingStart(a.id);

        this.writeToOutput(a.id.actualText);

        this.recordSourceMappingEnd(a.id);
        var i = a.init !== null;
        if (i) {
          this.writeToOutputTrimmable(" = ");
          this.varListCountStack.push(0);
          a.init.emit(this);
          this.varListCountStack.pop();
        }

        if (f === 8 && this.emitState.container !== 6) {
          this.writeToOutput(";");
        }

        this.onEmitVar();

        this.recordSourceMappingEnd(a);

        this.emitComments(a, !1);
      }
      this.popDecl(b);
    };

    b.prototype.symbolIsUsedInItsEnclosingContainer = function(a, b) {
      if (typeof b == "undefined") {
        b = !1;
      }
      var c = a.getDeclarations();
      if (c.length) {
        var d = this.getEnclosingDecl();
        if (d) {
          var e = c[0].getParentDecl();
          if (e) {
            var f = e;

            var g = d;
            while (f) {
              if (f.getKind() === (b ? 32 : 4)) break;
              f = f.getParentDecl();
            }
            if (f)
              while (g) {
                if (g.getKind() === (b ? 32 : 4)) break;
                g = g.getParentDecl();
              }
            if (f && g) {
              var h = f === g;
              !h && a.hasFlag(32768) && (h = f === g.getParentDecl());

              return h;
            }
          }
        }
      }
      return !1;
    };

    b.prototype.emitName = function(b, c) {
      this.emitComments(b, !0);

      this.recordSourceMappingStart(b);
      if (!b.isMissing()) {
        this.setTypeCheckerUnit(this.document.fileName);
        var d = this.resolvingContext.resolvingTypeReference ? this.pullTypeChecker.resolver.resolveTypeNameExpression(
          b, this.getEnclosingDecl(), this.resolvingContext) : this.pullTypeChecker.resolver.resolveNameExpression(b,
          this.getEnclosingDecl(), this.resolvingContext);

        var e = d.symbol;

        var f = d.symbolAlias;

        var g = e.getKind();

        var h = f && f.getDeclarations()[0].getParentDecl() == this.getEnclosingDecl();
        if (c && this.emitState.container !== 6 && e) {
          var i = e.getContainer();
          if (i) {
            var j = i.getKind();
            if (j === 8) {
              if (e.hasFlag(16)) {
                this.writeToOutput(i.getName() + ".");
              } else {
                if (g === 4096) {
                  this.emitThis();
                  this.writeToOutput(".");
                }
              }
            } else if (j === 4 || j === 64 || i.hasFlag(163840)) {
              if (g === 4096 || g === 67108864) {
                this.writeToOutput(i.getName() + ".");
              } else {
                if (e.hasFlag(1) && g === 1024 && !e.hasFlag(163840)) {
                  this.writeToOutput(i.getName() + ".");
                } else {
                  if (e.hasFlag(1) && !this.symbolIsUsedInItsEnclosingContainer(e)) {
                    this.writeToOutput(i.getName() + ".");
                  }
                }
              }
            } else if (j === 32 || i.hasFlag(65536)) {
              if (g === 4096) {
                this.writeToOutput("exports.");
              } else {
                if (e.hasFlag(1) && !h && !e.hasFlag(a.PullElementFlags.ImplicitVariable) && e.getKind() !== 32768 &&
                  e.getKind() !== 8 && e.getKind() !== 64) {
                  this.writeToOutput("exports.");
                }
              }
            } else if (g === 4096) {
              if (i.getKind() === 8) {
                this.emitThis();
                this.writeToOutput(".");
              }
            } else {
              var k = e.getDeclarations();

              var l = !0;
              for (var m = 0; m < k.length; m++) {
                if (k[m].getScriptName() === this.document.fileName) {
                  l = !1;
                }
              }
              if (l) {
                this.writeToOutput(i.getName() + ".");
              }
            }
          }
        }
        if (e && g === 32)
          if (this.emitOptions.compilationSettings.moduleGenTarget === 1) {
            this.writeToOutput("__" + this.modAliasId + "__");
          } else {
            var n = this.semanticInfoChain.getASTForSymbol(e, this.document.fileName);

            var o = b.actualText;

            var p = e.hasFlag(8);
            o = p ? o : this.firstModAlias ? this.firstModAlias : a.quoteBaseName(o);

            o = p ? o : a.isRelative(a.stripQuotes(o)) ? o : a.quoteStr("./" + a.stripQuotes(o));

            this.writeToOutput("require(" + o + ")");
          } else {
            this.writeToOutput(b.actualText);
          }
      }
      this.recordSourceMappingEnd(b);

      this.emitComments(b, !1);
    };

    b.prototype.recordSourceMappingNameStart = function(a) {
      if (this.sourceMapper) {
        var b = a;
        if (a) {
          if (this.sourceMapper.currentNameIndex.length > 0) {
            b = this.sourceMapper.names[this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length -
              1]] + "." + a;
          }
        } else {
          b = "";
        }

        this.sourceMapper.names.push(b);

        this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);
      }
    };

    b.prototype.recordSourceMappingNameEnd = function() {
      if (this.sourceMapper) {
        this.sourceMapper.currentNameIndex.pop();
      }
    };

    b.prototype.recordSourceMappingStart = function(b) {
      if (this.sourceMapper && a.isValidAstNode(b)) {
        var c = {
          line: -1,
          character: -1
        };

        var d = new a.SourceMapping;
        d.start.emittedColumn = this.emitState.column;

        d.start.emittedLine = this.emitState.line;
        var e = this.document.lineMap;
        e.fillLineAndCharacterFromPosition(b.minChar, c);

        d.start.sourceColumn = c.character;

        d.start.sourceLine = c.line + 1;

        e.fillLineAndCharacterFromPosition(b.limChar, c);

        d.end.sourceColumn = c.character;

        d.end.sourceLine = c.line + 1;

        if (this.sourceMapper.currentNameIndex.length > 0) {
          d.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];
        }
        var f = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];
        f.push(d);

        this.sourceMapper.currentMappings.push(d.childMappings);
      }
    };

    b.prototype.recordSourceMappingEnd = function(b) {
      if (this.sourceMapper && a.isValidAstNode(b)) {
        this.sourceMapper.currentMappings.pop();
        var c = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];

        var d = c[c.length - 1];
        d.end.emittedColumn = this.emitState.column;

        d.end.emittedLine = this.emitState.line;
      }
    };

    b.prototype.emitSourceMapsAndClose = function() {
      if (this.sourceMapper !== null) {
        a.SourceMapper.emitSourceMapping(this.allSourceMappers);
      }
      try {
        this.outfile.Close();
      } catch (c) {
        b.throwEmitterError(c);
      }
    };

    b.prototype.emitParameterPropertyAndMemberVariableAssignments = function() {
      var b = this.thisClassNode.constructorDecl;
      if (b && b.arguments)
        for (var c = 0, d = b.arguments.members.length; c < d; c++) {
          var e = b.arguments.members[c];
          if ((e.getVarFlags() & 256) !== 0) {
            this.emitIndent();
            this.recordSourceMappingStart(e);
            this.recordSourceMappingStart(e.id);
            this.writeToOutput("this." + e.id.actualText);
            this.recordSourceMappingEnd(e.id);
            this.writeToOutput(" = ");
            this.recordSourceMappingStart(e.id);
            this.writeToOutput(e.id.actualText);
            this.recordSourceMappingEnd(e.id);
            this.writeLineToOutput(";");
            this.recordSourceMappingEnd(e);
          }
        }
      for (var c = 0, d = this.thisClassNode.members.members.length; c < d; c++)
        if (this.thisClassNode.members.members[c].nodeType === 17) {
          var f = this.thisClassNode.members.members[c];
          if (!a.hasFlag(f.getVarFlags(), 16) && f.init) {
            this.emitIndent();
            this.emitVariableDeclarator(f);
            this.writeLineToOutput("");
          }
        }
    };

    b.prototype.emitCommaSeparatedList = function(a, b) {
      if (typeof b == "undefined") {
        b = !1;
      }
      if (a === null) return;
      for (var c = 0, d = a.members.length; c < d; c++) {
        var e = a.members[c];
        this.emitJavascript(e, b);

        if (c < d - 1) {
          this.writeToOutput(b ? "," : ", ");
        }

        if (b) {
          this.writeLineToOutput("");
        }
      }
    };

    b.prototype.emitModuleElements = function(a) {
      if (a === null) return;
      this.emitComments(a, !0);
      var b = null;
      for (var c = 0, d = a.members.length; c < d; c++) {
        var e = a.members[c];
        if (e.shouldEmit()) {
          this.emitSpaceBetweenConstructs(b, e);
          this.emitJavascript(e, !0);
          this.writeLineToOutput("");
          b = e;
        }
      }
      this.emitComments(a, !1);
    };

    b.prototype.isDirectivePrologueElement = function(a) {
      if (a.nodeType === 88) {
        var b = a;
        return b.expression.nodeType === 5;
      }
      return !1;
    };

    b.prototype.emitSpaceBetweenConstructs = function(a, b) {
      if (a === null || b === null) return;
      if (a.minChar === -1 || a.limChar === -1 || b.minChar === -1 || b.limChar === -1) return;
      var c = this.document.lineMap;

      var d = c.getLineNumberFromPosition(a.limChar);

      var e = c.getLineNumberFromPosition(b.minChar);
      if (e - d > 1) {
        this.writeLineToOutput("");
      }
    };

    b.prototype.emitScriptElements = function(a, b) {
      var c = a.moduleElements;
      this.emitComments(c, !0);
      for (var d = 0, e = c.members.length; d < e; d++) {
        var f = c.members[d];
        if (!this.isDirectivePrologueElement(f)) break;
        this.emitJavascript(f, !0);

        this.writeLineToOutput("");
      }
      this.emitPrologue(a, b);
      var g = null;
      for (; d < e; d++) {
        var f = c.members[d];
        if (f.shouldEmit()) {
          this.emitSpaceBetweenConstructs(g, f);
          this.emitJavascript(f, !0);
          this.writeLineToOutput("");
          g = f;
        }
      }
      this.emitComments(c, !1);
    };

    b.prototype.emitConstructorStatements = function(a) {
      var b = a.block.statements;
      if (b === null) return;
      this.emitComments(b, !0);
      var c = this.thisClassNode.extendsList && this.thisClassNode.extendsList.members.length > 0;

      var d = c ? 1 : 0;

      var e = null;
      for (var f = 0, g = b.members.length; f < g; f++) {
        if (f === d) {
          this.emitParameterPropertyAndMemberVariableAssignments();
        }
        var h = b.members[f];
        if (h.shouldEmit()) {
          this.emitSpaceBetweenConstructs(e, h);
          this.emitJavascript(h, !0);
          this.writeLineToOutput("");
          e = h;
        }
      }
      if (f === d) {
        this.emitParameterPropertyAndMemberVariableAssignments();
      }

      this.emitComments(b, !1);
    };

    b.prototype.emitJavascript = function(a, b) {
      if (a === null) return;
      if (b && this.indenter.indentAmt > 0) {
        this.emitIndent();
      }

      a.emit(this);
    };

    b.prototype.emitPropertyAccessor = function(b, c, d) {
      if (!a.hasFlag(b.getFunctionFlags(), 32)) {
        var e = a.PullHelpers.getAccessorSymbol(b, this.semanticInfoChain, this.document.fileName);
        if (e.getGetter()) return;
      }
      this.emitIndent();

      this.recordSourceMappingStart(b);

      this.writeLineToOutput("Object.defineProperty(" + c + (d ? '.prototype, "' : ', "') + b.name.actualText + '"' +
        ", {");

      this.indenter.increaseIndent();
      var f = a.PullHelpers.getGetterAndSetterFunction(b, this.semanticInfoChain, this.document.fileName);
      if (f.getter) {
        this.emitIndent();
        this.recordSourceMappingStart(f.getter);
        this.writeToOutput("get: ");
        this.emitInnerFunction(f.getter, !1);
        this.writeLineToOutput(",");
      }

      if (f.setter) {
        this.emitIndent();
        this.recordSourceMappingStart(f.setter);
        this.writeToOutput("set: ");
        this.emitInnerFunction(f.setter, !1);
        this.writeLineToOutput(",");
      }

      this.emitIndent();

      this.writeLineToOutput("enumerable: true,");

      this.emitIndent();

      this.writeLineToOutput("configurable: true");

      this.indenter.decreaseIndent();

      this.emitIndent();

      this.writeLineToOutput("});");

      this.recordSourceMappingEnd(b);
    };

    b.prototype.emitPrototypeMember = function(a, b) {
      if (a.isAccessor()) {
        this.emitPropertyAccessor(a, b, !0);
      } else {
        this.emitIndent();
        this.recordSourceMappingStart(a);
        this.emitComments(a, !0);
        this.writeToOutput(b + ".prototype." + a.getNameText() + " = ");
        this.emitInnerFunction(a, !1, !1);
        this.writeLineToOutput(";");
      }
    };

    b.prototype.emitClass = function(b) {
      var c = this.semanticInfoChain.getDeclForAST(b, this.document.fileName);
      this.pushDecl(c);
      var d = this.thisClassNode;
      this.thisClassNode = b;
      var e = b.name.actualText;
      this.emitComments(b, !0);
      var f = this.setContainer(3);
      this.recordSourceMappingStart(b);

      this.writeToOutput("var " + e);
      var g = b.extendsList && b.extendsList.members.length;

      var h = null;

      var i = null;

      var j = null;
      if (g) {
        this.writeLineToOutput(" = (function (_super) {");
      } else {
        this.writeLineToOutput(" = (function () {");
      }

      this.recordSourceMappingNameStart(e);

      this.indenter.increaseIndent();

      if (g) {
        h = b.extendsList.members[0];
        i = h.nodeType === 36 ? h.target : h;
        this.emitIndent();
        this.writeLineToOutput("__extends(" + e + ", _super);");
      }

      this.emitIndent();
      var k = b.constructorDecl;
      if (k) {
        k.emit(this);
        this.writeLineToOutput("");
      } else {
        this.recordSourceMappingStart(b);
        this.indenter.increaseIndent();
        this.writeLineToOutput("function " + b.name.actualText + "() {");
        this.recordSourceMappingNameStart("constructor");
        if (g) {
          this.emitIndent();
          this.writeLineToOutput("_super.apply(this, arguments);");
        }
        this.emitParameterPropertyAndMemberVariableAssignments();
        this.indenter.decreaseIndent();
        this.emitIndent();
        this.writeLineToOutput("}");
        this.recordSourceMappingNameEnd();
        this.recordSourceMappingEnd(b);
      }

      this.emitClassMembers(b);

      this.emitIndent();

      this.recordSourceMappingStart(b.endingToken);

      this.writeLineToOutput("return " + e + ";");

      this.recordSourceMappingEnd(b.endingToken);

      this.indenter.decreaseIndent();

      this.emitIndent();

      this.recordSourceMappingStart(b.endingToken);

      this.writeToOutput("}");

      this.recordSourceMappingNameEnd();

      this.recordSourceMappingEnd(b.endingToken);

      this.recordSourceMappingStart(b);

      this.writeToOutput(")(");

      if (g) {
        this.resolvingContext.resolvingTypeReference = !0;
        this.emitJavascript(i, !1);
        this.resolvingContext.resolvingTypeReference = !1;
      }

      this.writeToOutput(");");

      this.recordSourceMappingEnd(b);
      if ((f === 1 || f === 2) && a.hasFlag(b.getVarFlags(), 1)) {
        this.writeLineToOutput("");

        this.emitIndent();
        var l = f === 1 ? this.moduleName : "exports";
        this.recordSourceMappingStart(b);

        this.writeToOutput(l + "." + e + " = " + e + ";");

        this.recordSourceMappingEnd(b);
      }
      this.recordSourceMappingEnd(b);

      this.emitComments(b, !1);

      this.setContainer(f);

      this.thisClassNode = d;

      this.popDecl(c);
    };

    b.prototype.emitClassMembers = function(b) {
      var c = null;
      for (var d = 0, e = b.members.members.length; d < e; d++) {
        var f = b.members.members[d];
        if (f.nodeType === 12) {
          var g = f;
          if (a.hasFlag(g.getFunctionFlags(), 256) && !g.isSignature()) {
            this.emitSpaceBetweenConstructs(c, g);
            if (a.hasFlag(g.getFunctionFlags(), 16)) {
              if (g.isAccessor()) {
                this.emitPropertyAccessor(g, this.thisClassNode.name.actualText, !1);
              } else {
                this.emitIndent();
                this.recordSourceMappingStart(g);
                this.writeToOutput(b.name.actualText + "." + g.name.actualText + " = ");
                this.emitInnerFunction(g, !1);
                this.writeLineToOutput(";");
              }
            } else {
              this.emitPrototypeMember(g, b.name.actualText);
            }
            c = g;
          }
        }
      }
      for (var d = 0, e = b.members.members.length; d < e; d++) {
        var f = b.members.members[d];
        if (f.nodeType === 17) {
          var h = f;
          if (a.hasFlag(h.getVarFlags(), 16) && h.init) {
            this.emitSpaceBetweenConstructs(c, h);
            this.emitIndent();
            this.recordSourceMappingStart(h);
            this.writeToOutput(b.name.actualText + "." + h.id.actualText + " = ");
            h.init.emit(this);
            this.writeLineToOutput(";");
            this.recordSourceMappingEnd(h);
            c = h;
          }
        }
      }
    };

    b.prototype.emitPrologue = function(a, b) {
      if (!this.extendsPrologueEmitted) {
        if (b) {
          this.extendsPrologueEmitted = !0;
          this.writeLineToOutput("var __extends = this.__extends || function (d, b) {");
          this.writeLineToOutput("    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];");
          this.writeLineToOutput("    function __() { this.constructor = d; }");
          this.writeLineToOutput("    __.prototype = b.prototype;");
          this.writeLineToOutput("    d.prototype = new __();");
          this.writeLineToOutput("};");
        }
      }

      if (!this.globalThisCapturePrologueEmitted) {
        if (this.shouldCaptureThis(a)) {
          this.globalThisCapturePrologueEmitted = !0;
          this.writeLineToOutput(this.captureThisStmtString);
        }
      }
    };

    b.prototype.emitSuperReference = function() {
      this.writeToOutput("_super.prototype");
    };

    b.prototype.emitSuperCall = function(a) {
      if (a.target.nodeType === 32) {
        var b = a.target;
        if (b.operand1.nodeType === 30) {
          b.emit(this);
          this.writeToOutput(".call(");
          this.emitThis();
          a.arguments && a.arguments.members.length > 0 && (this.writeToOutput(", "), this.emitCommaSeparatedList(a.arguments));
          this.writeToOutput(")");
          return !0;
        }
      }
      return !1;
    };

    b.prototype.emitThis = function() {
      if (this.thisFunctionDeclaration && !this.thisFunctionDeclaration.isMethod() && !this.thisFunctionDeclaration.isConstructor) {
        this.writeToOutput("_this");
      } else {
        this.writeToOutput("this");
      }
    };

    b.prototype.emitBlockOrStatement = function(a) {
      if (a.nodeType === 81) {
        a.emit(this);
      } else {
        this.writeLineToOutput("");
        this.indenter.increaseIndent();
        this.emitJavascript(a, !0);
        this.indenter.decreaseIndent();
      }
    };

    b.throwEmitterError = function(a) {
      var b = new Error(a.message);
      throw b.isEmitterError = !0, b;
    };

    b.handleEmitterError = function(b, c) {
      if (c.isEmitterError === !0) {
        return [new a.Diagnostic(b, 0, 0, 275, [c.message])];
      }
      throw c;
    };

    return b;
  }();
  a.Emitter = f;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {
      this.prefix = "";

      this.suffix = "";
    }
    a.prototype.isString = function() {
      return !1;
    };

    a.prototype.isArray = function() {
      return !1;
    };

    a.prototype.isMarker = function() {
      return !this.isString() && !this.isArray();
    };

    a.prototype.toString = function() {
      return a.memberNameToString(this);
    };

    a.memberNameToString = function(b, c, d) {
      if (typeof d == "undefined") {
        d = 0;
      }
      var e = b.prefix;
      if (b.isString()) {
        e += b.text;
      } else if (b.isArray()) {
        var f = b;
        for (var g = 0; g < f.entries.length; g++) {
          if (f.entries[g].isMarker()) {
            if (c) {
              c.push(d + e.length);
            }
            continue;
          }
          e += a.memberNameToString(f.entries[g], c, d + e.length);

          e += f.delim;
        }
      }
      e += b.suffix;

      return e;
    };

    a.create = function(a, b, e) {
      if (typeof a == "string") {
        return new c(a);
      }
      var f = new d;
      b && (f.prefix = b);

      e && (f.suffix = e);

      f.entries.push(a);

      return f;
    };

    return a;
  }();
  a.MemberName = b;
  var c = function(a) {
    function b(b) {
      a.call(this);

      this.text = b;
    }
    __extends(b, a);

    b.prototype.isString = function() {
      return !0;
    };

    return b;
  }(b);
  a.MemberNameString = c;
  var d = function(a) {
    function b() {
      a.call(this);

      this.delim = "";

      this.entries = [];
    }
    __extends(b, a);

    b.prototype.isArray = function() {
      return !0;
    };

    b.prototype.add = function(a) {
      this.entries.push(a);
    };

    b.prototype.addAll = function(a) {
      for (var b = 0; b < a.length; b++) {
        this.entries.push(a[b]);
      }
    };

    return b;
  }(b);
  a.MemberNameArray = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function b(a) {
    return a.replace(/"/g, "").replace(/'/g, "");
  }

  function c(a) {
    return a.indexOf("'") !== -1;
  }

  function d(a) {
    return a.indexOf('"') !== -1 || c(a);
  }

  function e(a) {
    return '"' + a + '"';
  }

  function f(a) {
    a.indexOf('"') !== -1 ? (a = a.replace('"', "'"), a = a.replace('"', "'")) : (a = a.replace("'", '"'), a = a.replace(
      "'", '"'));

    return a;
  }

  function g(a) {
    return a.replace(/\\/g, "/");
  }

  function h(a) {
    return a.length > 5 && a.substring(a.length - 5, a.length) === ".d.ts" ? a.substring(0, a.length - 5) : a.length >
      3 && a.substring(a.length - 3, a.length) === ".ts" ? a.substring(0, a.length - 3) : a.length > 3 && a.substring(
        a.length - 3, a.length) === ".js" ? a.substring(0, a.length - 3) : a;
  }

  function i(a) {
    return l(a) ? r(a) : r(a);
  }

  function j(a, b) {
    var c = a.toLocaleUpperCase();

    var d = b.toLocaleUpperCase();

    var e = d.length;
    return c.length > e && c.substring(c.length - e, c.length) === d;
  }

  function k(a) {
    return j(a, ".js");
  }

  function l(a) {
    return j(a, ".ts");
  }

  function m(a) {
    return j(a, ".d.ts");
  }

  function n(a, c, d) {
    if (typeof c == "undefined") {
      c = !0;
    }

    if (typeof d == "undefined") {
      d = !1;
    }
    var f = d ? g(a) : h(b(a));

    var i = this.getPathComponents(f);
    return i.length ? c ? e(i[i.length - 1]) : i[i.length - 1] : a;
  }

  function o(a) {
    return a.split("/");
  }

  function p(a, b) {
    b = g(b);
    var c = this.getPathComponents(b);

    var d = this.getPathComponents(a);

    var e = 0;
    for (; e < c.length && e < d.length; e++)
      if (d[e] !== c[e]) break;
    if (e !== 0) {
      var f = "";

      var h = c.slice(e, c.length);
      for (; e < d.length; e++) {
        if (d[e] !== "") {
          f += "../";
        }
      }
      return f + h.join("/");
    }
    return b;
  }

  function q(a) {
    var c = h(b(a));

    var d = u(c);
    if (d === "") {
      return a;
    }
    var f = c.split(d);

    var g = f.length > 1 ? 1 : 0;
    return e(f[g]);
  }

  function r(a) {
    return h(b(a)) + ".d.ts";
  }

  function s(a) {
    return a.charAt(0) === ".";
  }

  function t(a) {
    return a.charAt(0) === "\\" || a.charAt(0) === "/" || a.indexOf(":\\") !== -1 || a.indexOf(":/") !== -1;
  }

  function u(a) {
    if (a === "") {
      return a;
    }
    var b = a.indexOf("/") !== -1;
    return b ? w(a) : "";
  }

  function v(a) {
    a = g(a);
    var b = o(a);
    return b.slice(0, b.length - 1);
  }

  function w(a) {
    var b = v(a);
    return b.join("/") + "/";
  }

  function x(b) {
    if (/^\\\\[^\\]/.test(b)) {
      b = "file:" + b;
    }
    var c = this.getPathComponents(g(b));

    var d = [];
    for (var e = 0; e < c.length; e++) {
      var f = c[e];
      if (f === ".") continue;
      if (d.length > 0 && a.ArrayUtilities.last(d) !== ".." && f === "..") {
        d.pop();
        continue;
      }
      d.push(f);
    }
    return d.join("/");
  }
  a.stripQuotes = b;

  a.isSingleQuoted = c;

  a.isQuoted = d;

  a.quoteStr = e;

  a.swapQuotes = f;

  a.switchToForwardSlashes = g;

  a.trimModName = h;

  a.getDeclareFilePath = i;

  a.isJSFile = k;

  a.isTSFile = l;

  a.isDTSFile = m;

  a.getPrettyName = n;

  a.getPathComponents = o;

  a.getRelativePathToFixedPath = p;

  a.quoteBaseName = q;

  a.changePathToDTS = r;

  a.isRelative = s;

  a.isRooted = t;

  a.getRootFilePath = u;

  a.filePathComponents = v;

  a.filePath = w;

  a.normalizePath = x;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a, b) {
      this.path = a;

      this.fileInformation = b;

      this.referencedFiles = null;

      this.lineStarts = null;
    }
    b.prototype.getText = function(a, b) {
      return this.fileInformation.contents().substring(a, b);
    };

    b.prototype.getLength = function() {
      return this.fileInformation.contents().length;
    };

    b.prototype.getLineStartPositions = function() {
      this.lineStarts === null && (this.lineStarts = a.LineMap.fromString(this.fileInformation.contents()).lineStarts());

      return this.lineStarts;
    };

    b.prototype.getTextChangeRangeSinceVersion = function(b) {
      throw a.Errors.notYetImplemented();
    };

    return b;
  }();
  a.SourceUnit = b;
  var c = function() {
    function b(b, c) {
      this.compilationSettings = b;

      this.ioHost = c;

      this.code = [];

      this.inputFileNameToOutputFileName = new a.StringHashTable;
    }
    b.prototype.getSourceUnit = function(b) {
      var c = a.switchToForwardSlashes(b.toUpperCase());
      for (var d = 0, e = this.code.length; d < e; d++) {
        var f = this.code[d];

        var g = a.switchToForwardSlashes(f.path.toUpperCase());
        if (c === g) {
          return f;
        }
      }
      return null;
    };

    return b;
  }();
  a.CompilationEnvironment = c;
  var d = function() {
    function c(a) {
      this.environment = a;

      this.visited = {};
    }
    c.prototype.resolveCode = function(c, d, e, f) {
      var g = {
        fileInformation: null,
        path: c
      };

      var h = this.environment.ioHost;

      var i = a.isRelative(c);

      var j = i ? !1 : a.isRooted(c);

      var k = i ? h.resolvePath(d + "/" + c) : j || !d || e ? c : d + "/" + c;
      if (!a.isTSFile(k)) {
        k += ".ts";
      }

      k = a.switchToForwardSlashes(a.stripQuotes(k));
      var l = this.environment.compilationSettings.useCaseSensitiveFileResolution ? k : k.toLocaleUpperCase();
      if (!this.visited[l]) {
        if (i || j || !e) try {
          a.CompilerDiagnostics.debugPrint("   Reading code from " + k);
          try {
            g.fileInformation = h.readFile(k);
          } catch (m) {
            if (a.isTSFile(k)) {
              k = a.changePathToDTS(k);
              a.CompilerDiagnostics.debugPrint("   Reading code from " + k);
              g.fileInformation = h.readFile(k);
            }
          }
          a.CompilerDiagnostics.debugPrint("   Found code at " + k);

          g.path = k;

          this.visited[l] = !0;
        } catch (n) {
          a.CompilerDiagnostics.debugPrint("   Did not find code for " + c);

          return !1;
        } else {
          try {
            g = h.findFile(d, k);

            if (!g) {
              if (a.isTSFile(k)) {
                k = a.changePathToDTS(k);
                g = h.findFile(d, k);
              }
            }
          } catch (o) {
            a.CompilerDiagnostics.debugPrint("   Did not find code for " + k);

            return !1;
          }
          if (g) {
            g.path = a.switchToForwardSlashes(a.stripQuotes(g.path));
            a.CompilerDiagnostics.debugPrint(c + " resolved to: " + g.path);
            g.fileInformation = g.fileInformation;
            this.visited[l] = !0;
          } else {
            a.CompilerDiagnostics.debugPrint("Could not find " + c);
          }
        }
        if (g && g.fileInformation !== null) {
          var p = h.dirName(g.path);

          var q = new b(g.path, g.fileInformation);

          var r = a.preProcessFile(g.path, q, this.environment.compilationSettings);

          var s = h.resolvePath(g.path);

          var t;
          q.referencedFiles = r.referencedFiles;
          for (var u = 0; u < r.referencedFiles.length; u++) {
            var v = r.referencedFiles[u];
            k = a.isRooted(v.path) ? v.path : p + "/" + v.path;

            k = h.resolvePath(k);
            if (s === k) {
              f.errorReporter.addDiagnostic(new a.Diagnostic(k, v.position, v.length, 270, null));
              continue;
            }
            t = this.resolveCode(v.path, p, !1, f);

            if (!t) {
              f.errorReporter.addDiagnostic(new a.Diagnostic(s, v.position, v.length, 271, [v.path]));
            }
          }
          for (var u = 0; u < r.importedFiles.length; u++) {
            var w = r.importedFiles[u];
            t = this.resolveCode(w.path, p, !0, f);

            if (!t) {
              f.errorReporter.addDiagnostic(new a.Diagnostic(s, w.position, w.length, 272, [w.path]));
            }
          }
          f.postResolution(q.path, q);
        }
      }
      return !0;
    };

    return c;
  }();
  a.CodeResolver = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function c(b) {
    var c = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/gim;

    var d = c.exec(b);
    if (d) {
      var e = a.normalizePath(d[3]);

      var f = a.normalizePath(e);

      var g = d.length >= 7 && d[6] === "true";
      g && a.CompilerDiagnostics.debugPrint(e + " is resident");

      return {
        line: 0,
        character: 0,
        position: 0,
        length: 0,
        path: a.switchToForwardSlashes(f),
        isResident: g
      };
    }
    return null;
  }

  function d(a) {
    var b = /^(\/\/\/\s*<implicit-import\s*)*\/>/gim;

    var c = b.exec(a);
    return c ? !0 : !1;
  }

  function e(a, b) {
    var c = j(a, b, null, !1);
    return c.referencedFiles;
  }

  function h(b, c, d, e) {
    var f = 0;

    var h = {
      line: -1,
      character: -1
    };
    while (d.tokenKind !== 10) {
      if (d.tokenKind === 49) {
        var i = f + d.leadingTriviaWidth();
        d = c.scan(g, !1);
        if (a.SyntaxFacts.isIdentifierNameOrAnyKeyword(d)) {
          d = c.scan(g, !1);
          if (d.tokenKind === 108) {
            d = c.scan(g, !1);
            if (d.tokenKind === 66 || d.tokenKind === 67) {
              d = c.scan(g, !1);
              if (d.tokenKind === 73) {
                var j = c.absoluteIndex();
                d = c.scan(g, !1);

                b.fillLineAndCharacterFromPosition(i, h);
                if (d.tokenKind === 14) {
                  var k = {
                    line: h.line,
                    character: h.character,
                    position: j + d.leadingTriviaWidth(),
                    length: d.width(),
                    path: a.stripQuotes(a.switchToForwardSlashes(d.text())),
                    isResident: !1
                  };
                  e.push(k);
                }
              }
            }
          }
        }
      }
      f = c.absoluteIndex();

      d = c.scan(g, !1);
    }
  }

  function i(a, b, d, e) {
    var f = b.leadingTrivia();

    var g = 0;

    var h = {
      line: -1,
      character: -1
    };

    var i = !1;
    for (var j = 0, k = f.count(); j < k; j++) {
      var l = f.syntaxTriviaAt(j);
      if (l.kind() === 7) {
        var m = l.fullText();

        var n = c(m);
        if (n) {
          a.fillLineAndCharacterFromPosition(g, h);
          n.position = g;
          n.length = l.fullWidth();
          n.line = h.line;
          n.character = h.character;
          e.push(n);
        }
        if (d) {
          var o = /^(\/\/\/\s*<reference\s+no-default-lib=)('|")(.+?)\2\s*\/>/gim;

          var p = o.exec(m);
          if (p) {
            i = p[3] === "true";
          }
        }
      }
      g += l.fullWidth();
    }
    return {
      noDefaultLib: i
    };
  }

  function j(c, d, e, j) {
    if (typeof j == "undefined") {
      j = !0;
    }

    e = e || new b;
    var k = a.SimpleText.fromScriptSnapshot(d);

    var l = new a.Scanner(c, k, e.codeGenTarget, f);

    var m = l.scan(g, !1);

    var n = [];
    if (j) {
      h(k.lineMap(), l, m, n);
    }
    var o = [];

    var p = i(k.lineMap(), m, e, o);
    g.length = 0;

    return {
      settings: e,
      referencedFiles: o,
      importedFiles: n,
      isLibFile: p.noDefaultLib
    };
  }

  function k(b) {
    return new a.ParseOptions(b.allowAutomaticSemicolonInsertion, b.allowModuleKeywordInExternalModuleReference);
  }
  var b = function() {
    function a() {
      this.propagateConstants = !1;

      this.minWhitespace = !1;

      this.emitComments = !1;

      this.watch = !1;

      this.exec = !1;

      this.resolve = !0;

      this.disallowBool = !1;

      this.allowAutomaticSemicolonInsertion = !0;

      this.allowModuleKeywordInExternalModuleReference = !0;

      this.useDefaultLib = !0;

      this.codeGenTarget = 0;

      this.moduleGenTarget = 0;

      this.outputOption = "";

      this.mapSourceFiles = !1;

      this.emitFullSourceMapPath = !1;

      this.generateDeclarationFiles = !1;

      this.useCaseSensitiveFileResolution = !1;

      this.gatherDiagnostics = !1;

      this.updateTC = !1;

      this.implicitAny = !1;
    }
    return a;
  }();
  a.CompilationSettings = b;

  a.getImplicitImport = d;

  a.getReferencedFiles = e;
  var f = a.ArrayUtilities.createArray(2048, 0);

  var g = [];
  a.preProcessFile = j;

  a.getParseOptions = k;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a, b, c) {
      this.ioHost = a;

      this.path = b;

      this.writeByteOrderMark = c;

      this.contents = "";

      this.onNewLine = !0;
    }
    b.prototype.Write = function(a) {
      this.contents += a;

      this.onNewLine = !1;
    };

    b.prototype.WriteLine = function(a) {
      this.contents += a;

      this.contents += "\r\n";

      this.onNewLine = !0;
    };

    b.prototype.Close = function() {
      try {
        this.ioHost.writeFile(this.path, this.contents, this.writeByteOrderMark);
      } catch (b) {
        a.Emitter.throwEmitterError(b);
      }
    };

    return b;
  }();
  a.TextWriter = b;
  var c = function() {
    function c(c, d, e, f) {
      this.emittingFileName = c;

      this.semanticInfoChain = d;

      this.emitOptions = e;

      this.writeByteOrderMark = f;

      this.fileName = null;

      this.declFile = null;

      this.indenter = new a.Indenter;

      this.declarationContainerStack = [];

      this.isDottedModuleName = [];

      this.ignoreCallbackAst = null;

      this.singleDeclFile = null;

      this.varListCount = 0;

      this.declFile = new b(e.ioHost, c, f);
    }
    c.prototype.widenType = function(a) {
      return a === this.semanticInfoChain.undefinedTypeSymbol || a === this.semanticInfoChain.nullTypeSymbol ? this.semanticInfoChain
        .anyTypeSymbol : a;
    };

    c.prototype.close = function() {
      try {
        this.declFile.Close();
      } catch (b) {
        a.Emitter.throwEmitterError(b);
      }
    };

    c.prototype.emitDeclarations = function(b) {
      a.AstWalkerWithDetailCallback.walk(b, this);
    };

    c.prototype.getAstDeclarationContainer = function() {
      return this.declarationContainerStack[this.declarationContainerStack.length - 1];
    };

    c.prototype.emitDottedModuleName = function() {
      return this.isDottedModuleName.length === 0 ? !1 : this.isDottedModuleName[this.isDottedModuleName.length - 1];
    };

    c.prototype.getIndentString = function(a) {
      typeof a == "undefined" && (a = !1);

      return this.emitOptions.compilationSettings.minWhitespace ? "" : this.indenter.getIndent();
    };

    c.prototype.emitIndent = function() {
      this.declFile.Write(this.getIndentString());
    };

    c.prototype.canEmitSignature = function(b, c, d, e) {
      if (typeof d == "undefined") {
        d = !0;
      }

      if (typeof e == "undefined") {
        e = !0;
      }
      var f;
      if (e) {
        f = this.getAstDeclarationContainer();
      } else {
        f = this.declarationContainerStack[this.declarationContainerStack.length - 2];
      }
      if (f.nodeType === 15 && !a.hasFlag(b, 1)) {
        var g = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(c, this.fileName).symbol;
        return g && g.isExternallyVisible();
      }
      return !d && f.nodeType === 2 && a.hasFlag(b, 8) ? !1 : !0;
    };

    c.prototype.canEmitPrePostAstSignature = function(b, c, d) {
      return this.ignoreCallbackAst ? (a.CompilerDiagnostics.assert(this.ignoreCallbackAst !== c,
        "Ignore Callback AST mismatch"), this.ignoreCallbackAst = null, !1) : d && !this.canEmitSignature(b, c, !0, d) ?
        (this.ignoreCallbackAst = c, !1) : !0;
    };

    c.prototype.getDeclFlagsString = function(b, c) {
      var d = this.getIndentString();
      if (a.hasFlag(b, 16)) {
        if (a.hasFlag(b, 2)) {
          d += "private ";
        }
        d += "static ";
      } else if (a.hasFlag(b, 2)) {
        d += "private ";
      } else if (a.hasFlag(b, 4)) {
        d += "public ";
      } else {
        var e = !a.hasFlag(b, 1);

        var f = this.getAstDeclarationContainer();
        if (f.nodeType === 15 && a.hasFlag(f.getModuleFlags(), 256) && a.hasFlag(b, 1)) {
          d += "export ";
          e = !0;
        }

        if (e && c !== "interface") {
          d += "declare ";
        }

        d += c + " ";
      }
      return d;
    };

    c.prototype.emitDeclFlags = function(a, b) {
      this.declFile.Write(this.getDeclFlagsString(a, b));
    };

    c.prototype.canEmitTypeAnnotationSignature = function(b) {
      typeof b == "undefined" && (b = 0);

      return !a.hasFlag(b, 2);
    };

    c.prototype.pushDeclarationContainer = function(a) {
      this.declarationContainerStack.push(a);
    };

    c.prototype.popDeclarationContainer = function(b) {
      a.CompilerDiagnostics.assert(b !== this.getAstDeclarationContainer(), "Declaration container mismatch");

      this.declarationContainerStack.pop();
    };

    c.prototype.emitTypeNamesMember = function(a, b) {
      if (typeof b == "undefined") {
        b = !1;
      }

      if (a.prefix === "{ ") {
        if (b) {
          this.emitIndent();
        }
        this.declFile.WriteLine("{");
        this.indenter.increaseIndent();
        b = !0;
      } else {
        if (a.prefix !== "") {
          if (b) {
            this.emitIndent();
          }
          this.declFile.Write(a.prefix);
          b = !1;
        }
      }
      if (a.isString()) {
        if (b) {
          this.emitIndent();
        }
        this.declFile.Write(a.text);
      } else if (a.isArray()) {
        var c = a;
        for (var d = 0; d < c.entries.length; d++) {
          this.emitTypeNamesMember(c.entries[d], b);
          if (c.delim === "; ") {
            this.declFile.WriteLine(";");
          }
        }
      }
      if (a.suffix === "}") {
        this.indenter.decreaseIndent();
        this.emitIndent();
        this.declFile.Write(a.suffix);
      } else {
        this.declFile.Write(a.suffix);
      }
    };

    c.prototype.emitTypeSignature = function(a) {
      var b = this.getAstDeclarationContainer();

      var c = this.semanticInfoChain.getDeclForAST(b, this.fileName);

      var d = c.getSymbol();

      var e = a.getScopedNameEx(d);
      this.emitTypeNamesMember(e);
    };

    c.prototype.emitComment = function(a) {
      var b = a.getText();
      if (this.declFile.onNewLine) {
        this.emitIndent();
      } else {
        if (!a.isBlockComment) {
          this.declFile.WriteLine("");
          this.emitIndent();
        }
      }

      this.declFile.Write(b[0]);
      for (var c = 1; c < b.length; c++) {
        this.declFile.WriteLine("");
        this.emitIndent();
        this.declFile.Write(b[c]);
      }
      if (a.endsLine || !a.isBlockComment) {
        this.declFile.WriteLine("");
      } else {
        this.declFile.Write(" ");
      }
    };

    c.prototype.emitDeclarationComments = function(a, b) {
      if (typeof b == "undefined") {
        b = !0;
      }
      if (!this.emitOptions.compilationSettings.emitComments) return;
      var c = a.getDocComments();
      this.writeDeclarationComments(c, b);
    };

    c.prototype.writeDeclarationComments = function(a, b) {
      if (typeof b == "undefined") {
        b = !0;
      }
      if (a.length > 0) {
        for (var c = 0; c < a.length; c++) {
          this.emitComment(a[c]);
        }
        if (b) {
          if (!this.declFile.onNewLine) {
            this.declFile.WriteLine("");
          }
        } else {
          if (this.declFile.onNewLine) {
            this.emitIndent();
          }
        }
      }
    };

    c.prototype.emitTypeOfBoundDecl = function(a) {
      var b = this.semanticInfoChain.getDeclForAST(a, this.fileName);

      var c = b.getSymbol();

      var d = this.widenType(c.getType());
      if (!d) return;
      if (a.typeExpr || a.init && d !== this.semanticInfoChain.anyTypeSymbol) {
        this.declFile.Write(": ");
        this.emitTypeSignature(d);
      }
    };

    c.prototype.VariableDeclaratorCallback = function(b, c) {
      if (b && this.canEmitSignature(a.ToDeclFlags(c.getVarFlags()), c, !1)) {
        var d = this.getAstDeclarationContainer().nodeType === 14;
        this.emitDeclarationComments(c);

        if (d) {
          this.emitIndent();
          this.declFile.Write(c.id.actualText);
          if (a.hasFlag(c.id.getFlags(), 4)) {
            this.declFile.Write("?");
          }
        } else {
          if (this.varListCount >= 0) {
            this.emitDeclFlags(a.ToDeclFlags(c.getVarFlags()), "var");
            this.varListCount = -this.varListCount;
          }
          this.declFile.Write(c.id.actualText);
        }

        if (this.canEmitTypeAnnotationSignature(a.ToDeclFlags(c.getVarFlags()))) {
          this.emitTypeOfBoundDecl(c);
        }

        if (this.varListCount > 0) {
          this.varListCount--;
        } else {
          if (this.varListCount < 0) {
            this.varListCount++;
          }
        }

        if (this.varListCount < 0) {
          this.declFile.Write(", ");
        } else {
          this.declFile.WriteLine(";");
        }
      }
      return !1;
    };

    c.prototype.BlockCallback = function(a, b) {
      return !1;
    };

    c.prototype.VariableStatementCallback = function(a, b) {
      return !0;
    };

    c.prototype.VariableDeclarationCallback = function(a, b) {
      a ? this.varListCount = b.declarators.members.length : this.varListCount = 0;

      return !0;
    };

    c.prototype.emitArgDecl = function(b, c) {
      this.indenter.increaseIndent();

      this.emitDeclarationComments(b, !1);

      this.declFile.Write(b.id.actualText);

      if (b.isOptionalArg()) {
        this.declFile.Write("?");
      }

      this.indenter.decreaseIndent();

      if (this.canEmitTypeAnnotationSignature(a.ToDeclFlags(c.getFunctionFlags()))) {
        this.emitTypeOfBoundDecl(b);
      }
    };

    c.prototype.isOverloadedCallSignature = function(a) {
      var b = this.semanticInfoChain.getDeclForAST(a, this.fileName);

      var c = b.getSymbol();

      var d = c.getType();

      var e = d.getCallSignatures();
      return e && e.length > 1;
    };

    c.prototype.FunctionDeclarationCallback = function(b, c) {
      if (!b) {
        return !1;
      }
      if (c.isAccessor()) {
        return this.emitPropertyAccessorSignature(c);
      }
      var d = this.getAstDeclarationContainer().nodeType === 14;

      var e = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(c, this.fileName).symbol;

      var f = e.getType();
      if (c.block) {
        var g = f.getConstructSignatures();
        if (g && g.length > 1) {
          return !1;
        }
        if (this.isOverloadedCallSignature(c)) {
          return !1;
        }
      } else if (!d && a.hasFlag(c.getFunctionFlags(), 2) && this.isOverloadedCallSignature(c)) {
        var h = f.getCallSignatures();
        a.Debug.assert(h && h.length > 1);
        var i = h[0].isDefinition() ? h[1] : h[0];

        var j = i.getDeclarations()[0];

        var k = this.semanticInfoChain.getASTForDecl(j);
        if (k !== c) {
          return !1;
        }
      }
      if (!this.canEmitSignature(a.ToDeclFlags(c.getFunctionFlags()), c, !1)) {
        return !1;
      }
      var l = this.semanticInfoChain.getDeclForAST(c, this.fileName).getSignatureSymbol();
      this.emitDeclarationComments(c);
      if (c.isConstructor) {
        this.emitIndent();
        this.declFile.Write("constructor");
        this.emitTypeParameters(c.typeArguments, l);
      } else {
        var m = c.getNameText();
        if (d) {
          this.emitIndent();
          if (c.isConstructMember()) {
            this.declFile.Write("new");
            this.emitTypeParameters(c.typeArguments, l);
          } else {
            if (!c.isCallMember() && !c.isIndexerMember()) {
              this.declFile.Write(m);
              this.emitTypeParameters(c.typeArguments, l);
              if (a.hasFlag(c.name.getFlags(), 4)) {
                this.declFile.Write("? ");
              }
            } else {
              this.emitTypeParameters(c.typeArguments, l);
            }
          }
        } else {
          this.emitDeclFlags(a.ToDeclFlags(c.getFunctionFlags()), "function");
          if (m !== "__missing" || !c.name || !c.name.isMissing()) {
            this.declFile.Write(m);
          } else {
            if (c.isConstructMember()) {
              this.declFile.Write("new");
            }
          }
          this.emitTypeParameters(c.typeArguments, l);
        }
      }
      if (c.isIndexerMember()) {
        this.declFile.Write("[");
      } else {
        this.declFile.Write("(");
      }
      if (c.arguments) {
        var n = c.arguments.members.length;
        if (c.variableArgList) {
          n--;
        }
        for (var o = 0; o < n; o++) {
          var p = c.arguments.members[o];
          this.emitArgDecl(p, c);

          if (o < n - 1) {
            this.declFile.Write(", ");
          }
        }
      }
      if (c.variableArgList) {
        var q = c.arguments.members[c.arguments.members.length - 1];
        if (c.arguments.members.length > 1) {
          this.declFile.Write(", ...");
        } else {
          this.declFile.Write("...");
        }

        this.emitArgDecl(q, c);
      }
      if (c.isIndexerMember()) {
        this.declFile.Write("]");
      } else {
        this.declFile.Write(")");
      }
      if (!c.isConstructor && this.canEmitTypeAnnotationSignature(a.ToDeclFlags(c.getFunctionFlags()))) {
        var r = l.getReturnType();
        if (c.returnTypeAnnotation || r && r !== this.semanticInfoChain.anyTypeSymbol) {
          this.declFile.Write(": ");
          this.emitTypeSignature(r);
        }
      }
      this.declFile.WriteLine(";");

      return !1;
    };

    c.prototype.emitBaseExpression = function(a, b) {
      var c = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(a.members[b], this.fileName);

      var d = c && c.symbol;
      this.emitTypeSignature(d);
    };

    c.prototype.emitBaseList = function(a, b) {
      var c = b ? a.extendsList : a.implementsList;
      if (c && c.members.length > 0) {
        var d = b ? "extends" : "implements";
        this.declFile.Write(" " + d + " ");
        var e = c.members.length;
        for (var f = 0; f < e; f++) {
          if (f > 0) {
            this.declFile.Write(", ");
          }
          this.emitBaseExpression(c, f);
        }
      }
    };

    c.prototype.emitAccessorDeclarationComments = function(b) {
      if (!this.emitOptions.compilationSettings.emitComments) return;
      var c = a.PullHelpers.getGetterAndSetterFunction(b, this.semanticInfoChain, this.fileName);

      var d = [];
      if (c.getter) {
        d = d.concat(c.getter.getDocComments());
      }

      if (c.setter) {
        d = d.concat(c.setter.getDocComments());
      }

      this.writeDeclarationComments(d);
    };

    c.prototype.emitPropertyAccessorSignature = function(b) {
      var c = a.PullHelpers.getAccessorSymbol(b, this.semanticInfoChain, this.fileName);
      if (!a.hasFlag(b.getFunctionFlags(), 32) && c.getGetter()) {
        return !1;
      }
      this.emitAccessorDeclarationComments(b);

      this.emitDeclFlags(a.ToDeclFlags(b.getFunctionFlags()), "var");

      this.declFile.Write(b.name.actualText);
      if (this.canEmitTypeAnnotationSignature(a.ToDeclFlags(b.getFunctionFlags()))) {
        this.declFile.Write(" : ");
        var d = c.getType();
        this.emitTypeSignature(d);
      }
      this.declFile.WriteLine(";");

      return !1;
    };

    c.prototype.emitClassMembersFromConstructorDefinition = function(b) {
      if (b.arguments) {
        var c = b.arguments.members.length;
        if (b.variableArgList) {
          c--;
        }
        for (var d = 0; d < c; d++) {
          var e = b.arguments.members[d];
          if (a.hasFlag(e.getVarFlags(), 256)) {
            this.emitDeclarationComments(e);
            this.emitDeclFlags(a.ToDeclFlags(e.getVarFlags()), "var");
            this.declFile.Write(e.id.actualText);
            if (this.canEmitTypeAnnotationSignature(a.ToDeclFlags(e.getVarFlags()))) {
              this.emitTypeOfBoundDecl(e);
            }
            this.declFile.WriteLine(";");
          }
        }
      }
    };

    c.prototype.ClassDeclarationCallback = function(b, c) {
      if (!this.canEmitPrePostAstSignature(a.ToDeclFlags(c.getVarFlags()), c, b)) {
        return !1;
      }
      if (b) {
        var d = c.name.actualText;
        this.emitDeclarationComments(c);

        this.emitDeclFlags(a.ToDeclFlags(c.getVarFlags()), "class");

        this.declFile.Write(d);

        this.pushDeclarationContainer(c);

        this.emitTypeParameters(c.typeParameters);

        this.emitBaseList(c, !0);

        this.emitBaseList(c, !1);

        this.declFile.WriteLine(" {");

        this.indenter.increaseIndent();

        if (c.constructorDecl) {
          this.emitClassMembersFromConstructorDefinition(c.constructorDecl);
        }
      } else {
        this.indenter.decreaseIndent();
        this.popDeclarationContainer(c);
        this.emitIndent();
        this.declFile.WriteLine("}");
      }
      return !0;
    };

    c.prototype.emitTypeParameters = function(a, b) {
      if (!a || !a.members.length) return;
      this.declFile.Write("<");
      var c = this.getAstDeclarationContainer();

      var d = this.semanticInfoChain.getDeclForAST(c, this.fileName);

      var e = d.getSymbol();

      var f;
      if (b) {
        f = b.getTypeParameters();
      } else {
        f = e.getTypeArguments();
        if (!f || !f.length) {
          f = e.getTypeParameters();
        }
      }
      for (var g = 0; g < f.length; g++) {
        if (g) {
          this.declFile.Write(", ");
        }
        var h = f[g].getScopedNameEx(e, !0);
        this.emitTypeNamesMember(h);
      }
      this.declFile.Write(">");
    };

    c.prototype.InterfaceDeclarationCallback = function(b, c) {
      if (!this.canEmitPrePostAstSignature(a.ToDeclFlags(c.getVarFlags()), c, b)) {
        return !1;
      }
      if (b) {
        var d = c.name.actualText;
        this.emitDeclarationComments(c);

        this.emitDeclFlags(a.ToDeclFlags(c.getVarFlags()), "interface");

        this.declFile.Write(d);

        this.pushDeclarationContainer(c);

        this.emitTypeParameters(c.typeParameters);

        this.emitBaseList(c, !0);

        this.declFile.WriteLine(" {");

        this.indenter.increaseIndent();
      } else {
        this.indenter.decreaseIndent();
        this.popDeclarationContainer(c);
        this.emitIndent();
        this.declFile.WriteLine("}");
      }
      return !0;
    };

    c.prototype.ImportDeclarationCallback = function(b, c) {
      if (b) {
        var d = this.semanticInfoChain.getDeclForAST(c, this.fileName);

        var e = d.getSymbol();
        if (e.getTypeUsedExternally() || a.PullContainerTypeSymbol.usedAsSymbol(e.getContainer(), e)) {
          this.emitDeclarationComments(c);
          this.emitIndent();
          this.declFile.Write("import ");
          this.declFile.Write(c.id.actualText + " = ");
          if (c.isDynamicImport) {
            this.declFile.WriteLine("require(" + c.getAliasName() + ");");
          } else {
            this.declFile.WriteLine(c.getAliasName() + ";");
          }
        }
      }
      return !1;
    };

    c.prototype.emitEnumSignature = function(b) {
      if (!this.canEmitSignature(a.ToDeclFlags(b.getModuleFlags()), b)) {
        return !1;
      }
      this.emitDeclarationComments(b);

      this.emitDeclFlags(a.ToDeclFlags(b.getModuleFlags()), "enum");

      this.declFile.WriteLine(b.name.actualText + " {");

      this.indenter.increaseIndent();
      var c = b.members.members.length;
      for (var d = 0; d < c; d++) {
        var e = b.members.members[d];
        if (e.nodeType === 97 && !a.hasFlag(e.getFlags(), 32)) {
          var f = e;
          this.emitDeclarationComments(e);

          this.emitIndent();

          this.declFile.WriteLine(f.declaration.declarators.members[0].id.actualText + ",");
        }
      }
      this.indenter.decreaseIndent();

      this.emitIndent();

      this.declFile.WriteLine("}");

      return !1;
    };

    c.prototype.ModuleDeclarationCallback = function(c, d) {
      if (a.hasFlag(d.getModuleFlags(), 256)) {
        if (a.hasFlag(d.getModuleFlags(), 512))
          if (c) {
            if (!this.emitOptions.outputMany) {
              this.singleDeclFile = this.declFile;

              a.CompilerDiagnostics.assert(this.indenter.indentAmt === 0,
                "Indent has to be 0 when outputing new file");
              var e = this.emitOptions.mapOutputFileName(this.fileName, a.TypeScriptCompiler.mapToDTSFileName);

              var f = d.containsUnicodeChar || this.emitOptions.compilationSettings.emitComments && d.containsUnicodeCharInComment;
              this.declFile = new b(this.emitOptions.ioHost, e, this.writeByteOrderMark);
            }
            this.pushDeclarationContainer(d);
          } else {
            if (!this.emitOptions.outputMany) {
              a.CompilerDiagnostics.assert(this.singleDeclFile !== this.declFile,
                "singleDeclFile cannot be null as we are going to revert back to it");

              a.CompilerDiagnostics.assert(this.indenter.indentAmt === 0,
                "Indent has to be 0 when outputing new file");
              try {
                this.declFile.Close();
              } catch (g) {
                a.Emitter.throwEmitterError(g);
              }
              this.declFile = this.singleDeclFile;
            }
            this.popDeclarationContainer(d);
          }
        return !0;
      }
      if (d.isEnum()) {
        c && this.emitEnumSignature(d);
        return !1;
      }
      if (!this.canEmitPrePostAstSignature(a.ToDeclFlags(d.getModuleFlags()), d, c)) {
        return !1;
      }
      if (c) {
        if (this.emitDottedModuleName()) {
          this.dottedModuleEmit += ".";
        } else {
          this.dottedModuleEmit = this.getDeclFlagsString(a.ToDeclFlags(d.getModuleFlags()), "module");
        }

        this.dottedModuleEmit += d.name.actualText;
        var h = d.members.members.length === 1 && d.members.members[0].nodeType === 15 && !d.members.members[0].isEnum() &&
          a.hasFlag(d.members.members[0].getModuleFlags(), 1);

        var i = d.getDocComments();
        h = h && (i === null || i.length === 0);

        this.isDottedModuleName.push(h);

        this.pushDeclarationContainer(d);

        if (!h) {
          this.emitDeclarationComments(d);
          this.declFile.Write(this.dottedModuleEmit);
          this.declFile.WriteLine(" {");
          this.indenter.increaseIndent();
        }
      } else {
        if (!this.emitDottedModuleName()) {
          this.indenter.decreaseIndent();
          this.emitIndent();
          this.declFile.WriteLine("}");
        }
        this.popDeclarationContainer(d);
        this.isDottedModuleName.pop();
      }
      return !0;
    };

    c.prototype.ExportAssignmentCallback = function(a, b) {
      a && (this.emitIndent(), this.declFile.Write("export = "), this.declFile.Write(b.id.actualText), this.declFile.WriteLine(
        ";"));

      return !1;
    };

    c.prototype.ScriptCallback = function(b, c) {
      if (b) {
        if (this.emitOptions.outputMany)
          for (var d = 0; d < c.referencedFiles.length; d++) {
            var e = c.referencedFiles[d].path;

            var f;
            if (a.isRooted(e)) {
              f = this.emitOptions.mapOutputFileName(e, a.TypeScriptCompiler.mapToDTSFileName);
            } else {
              f = a.getDeclareFilePath(c.referencedFiles[d].path);
            }

            this.declFile.WriteLine('/// <reference path="' + f + '" />');
          }
        this.pushDeclarationContainer(c);
      } else {
        this.popDeclarationContainer(c);
      }
      return !0;
    };

    c.prototype.DefaultCallback = function(a, b) {
      return !b.isStatement();
    };

    return c;
  }();
  a.DeclarationEmitter = c;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a) {
      var c = Math.max(1, b.computeM(a));

      var d = Math.max(1, b.computeK(a));

      var e = c + 7 & -8;
      this.bitArray = [];
      for (var f = 0, g = e; f < g; f++) {
        this.bitArray[f] = !1;
      }
      this.hashFunctionCount = d;
    }
    b.computeM = function(a) {
      var c = b.falsePositiveProbability;

      var d = a;

      var e = d * Math.log(c);

      var f = Math.log(1 / Math.pow(2, Math.log(2)));
      return Math.ceil(e / f);
    };

    b.computeK = function(a) {
      var c = a;

      var d = b.computeM(a);

      var e = Math.log(2) * d / c;
      return Math.round(e);
    };

    b.prototype.computeHash = function(b, c) {
      var d = 1540483477;

      var e = 24;

      var f = b.length;

      var g = Math.abs(c ^ f);

      var h = 0;
      while (f >= 2) {
        var i = this.getCharacter(b, h);

        var j = this.getCharacter(b, h + 1);

        var k = Math.abs(i | j << 16);
        k = a.IntegerUtilities.integerMultiplyLow32Bits(k, d);

        k ^= k >> e;

        k = a.IntegerUtilities.integerMultiplyLow32Bits(k, d);

        g = a.IntegerUtilities.integerMultiplyLow32Bits(g, d);

        g ^= k;

        h += 2;

        f -= 2;
      }
      f == 1 && (g ^= this.getCharacter(b, h), g = a.IntegerUtilities.integerMultiplyLow32Bits(g, d));

      g ^= g >> 13;

      g = a.IntegerUtilities.integerMultiplyLow32Bits(g, d);

      g ^= g >> 15;

      return Math.round(g);
    };

    b.prototype.getCharacter = function(a, b) {
      return a.charCodeAt(b);
    };

    b.prototype.addKeys = function(a) {
      for (var b in a) {
        this.add(b);
      }
    };

    b.prototype.add = function(a) {
      for (var b = 0; b < this.hashFunctionCount; b++) {
        var c = this.computeHash(a, b);
        c %= this.bitArray.length;

        this.bitArray[Math.abs(c)] = !0;
      }
    };

    b.prototype.probablyContains = function(a) {
      for (var b = 0; b < this.hashFunctionCount; b++) {
        var c = this.computeHash(a, b);
        c %= this.bitArray.length;
        if (!this.bitArray[Math.abs(c)]) {
          return !1;
        }
      }
      return !0;
    };

    b.prototype.isEquivalent = function(a) {
      return b.isEquivalent(this.bitArray, a.bitArray) && this.hashFunctionCount == a.hashFunctionCount;
    };

    b.isEquivalent = function(a, b) {
      if (a.length != b.length) {
        return !1;
      }
      for (var c = 0; c < a.length; c++)
        if (a[c] != b[c]) {
          return !1;
        }
      return !0;
    };

    b.falsePositiveProbability = 1e-4;

    return b;
  }();
  a.BloomFilter = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function(a) {
    function b(b) {
      a.call(this);

      this.list = b;
    }
    __extends(b, a);

    b.prototype.visitToken = function(a) {
      this.list[a.text()] = !0;
    };

    return b;
  }(a.SyntaxWalker);
  a.IdentifierWalker = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {
      this.map = {};
    }
    a.prototype.link = function(a, b) {
      this.map[a] = b;
    };

    a.prototype.unlink = function(a) {
      this.map[a] = undefined;
    };

    a.prototype.read = function(a) {
      return this.map[a];
    };

    a.prototype.flush = function() {
      this.map = {};
    };

    a.prototype.unpatch = function() {
      return null;
    };

    return a;
  }();
  a.DataMap = b;
  var c = function(a) {
    function b(b) {
      a.call(this);

      this.parent = b;

      this.diffs = {};
    }
    __extends(b, a);

    b.prototype.link = function(a, b) {
      this.diffs[a] = b;
    };

    b.prototype.unlink = function(a) {
      this.diffs[a] = undefined;
    };

    b.prototype.read = function(a) {
      var b = this.diffs[a];
      return b ? b : this.parent.read(a);
    };

    b.prototype.flush = function() {
      this.diffs = {};
    };

    b.prototype.unpatch = function() {
      this.flush();

      return this.parent;
    };

    return b;
  }(b);
  a.PatchedDataMap = c;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.None = 0] = "None";

    a[a.Exported = 1] = "Exported";

    a[a.Private = 2] = "Private";

    a[a.Public = 4] = "Public";

    a[a.Ambient = 8] = "Ambient";

    a[a.Static = 16] = "Static";

    a[a.GetAccessor = 32] = "GetAccessor";

    a[a.SetAccessor = 64] = "SetAccessor";

    a[a.Optional = 128] = "Optional";

    a[a.Call = 256] = "Call";

    a[a.Constructor = 512] = "Constructor";

    a[a.Index = 1024] = "Index";

    a[a.Signature = 2048] = "Signature";

    a[a.Enum = 4096] = "Enum";

    a[a.FatArrow = 8192] = "FatArrow";

    a[a.ClassConstructorVariable = 16384] = "ClassConstructorVariable";

    a[a.InitializedModule = 32768] = "InitializedModule";

    a[a.InitializedDynamicModule = 65536] = "InitializedDynamicModule";

    a[a.InitializedEnum = 1 << 17] = "InitializedEnum";

    a[a.MustCaptureThis = 1 << 18] = "MustCaptureThis";

    a[a.Constant = 1 << 19] = "Constant";

    a[a.ExpressionElement = 1 << 20] = "ExpressionElement";

    a[a.DeclaredInAWithBlock = 1 << 21] = "DeclaredInAWithBlock";

    a[a.ImplicitVariable = a.ClassConstructorVariable | a.InitializedModule | a.InitializedDynamicModule | a.InitializedEnum] =
      "ImplicitVariable";

    a[a.SomeInitializedModule = a.InitializedModule | a.InitializedDynamicModule | a.InitializedEnum] =
      "SomeInitializedModule";
  })(a.PullElementFlags || (a.PullElementFlags = {}));
  var b = a.PullElementFlags;
  (function(a) {
    a[a.None = 0] = "None";

    a[a.Global = 0] = "Global";

    a[a.Script = 1] = "Script";

    a[a.Primitive = 2] = "Primitive";

    a[a.Container = 4] = "Container";

    a[a.Class = 8] = "Class";

    a[a.Interface = 16] = "Interface";

    a[a.DynamicModule = 32] = "DynamicModule";

    a[a.Enum = 64] = "Enum";

    a[a.Array = 128] = "Array";

    a[a.TypeAlias = 256] = "TypeAlias";

    a[a.ObjectLiteral = 512] = "ObjectLiteral";

    a[a.Variable = 1024] = "Variable";

    a[a.Parameter = 2048] = "Parameter";

    a[a.Property = 4096] = "Property";

    a[a.TypeParameter = 8192] = "TypeParameter";

    a[a.Function = 16384] = "Function";

    a[a.ConstructorMethod = 32768] = "ConstructorMethod";

    a[a.Method = 65536] = "Method";

    a[a.FunctionExpression = 1 << 17] = "FunctionExpression";

    a[a.GetAccessor = 1 << 18] = "GetAccessor";

    a[a.SetAccessor = 1 << 19] = "SetAccessor";

    a[a.CallSignature = 1 << 20] = "CallSignature";

    a[a.ConstructSignature = 1 << 21] = "ConstructSignature";

    a[a.IndexSignature = 1 << 22] = "IndexSignature";

    a[a.ObjectType = 1 << 23] = "ObjectType";

    a[a.FunctionType = 1 << 24] = "FunctionType";

    a[a.ConstructorType = 1 << 25] = "ConstructorType";

    a[a.EnumMember = 1 << 26] = "EnumMember";

    a[a.ErrorType = 1 << 27] = "ErrorType";

    a[a.Expression = 1 << 28] = "Expression";

    a[a.WithBlock = 1 << 29] = "WithBlock";

    a[a.CatchBlock = 1 << 30] = "CatchBlock";

    a[a.All = a.Script | a.Global | a.Primitive | a.Container | a.Class | a.Interface | a.DynamicModule | a.Enum |
      a.Array | a.TypeAlias | a.ObjectLiteral | a.Variable | a.Parameter | a.Property | a.TypeParameter | a.Function |
      a.ConstructorMethod | a.Method | a.FunctionExpression | a.GetAccessor | a.SetAccessor | a.CallSignature | a.ConstructSignature |
      a.IndexSignature | a.ObjectType | a.FunctionType | a.ConstructorType | a.EnumMember | a.ErrorType | a.Expression |
      a.WithBlock | a.CatchBlock] = "All";

    a[a.SomeFunction = a.Function | a.ConstructorMethod | a.Method | a.FunctionExpression | a.GetAccessor | a.SetAccessor |
      a.CallSignature | a.ConstructSignature | a.IndexSignature] = "SomeFunction";

    a[a.SomeValue = a.Variable | a.Parameter | a.Property | a.EnumMember | a.SomeFunction] = "SomeValue";

    a[a.SomeType = a.Script | a.Global | a.Primitive | a.Class | a.Interface | a.Enum | a.Array | a.ObjectType | a.FunctionType |
      a.ConstructorType | a.TypeParameter | a.ErrorType] = "SomeType";

    a[a.AcceptableAlias = a.Variable | a.SomeFunction | a.Class | a.Interface | a.Enum | a.Container | a.ObjectType |
      a.FunctionType | a.ConstructorType] = "AcceptableAlias";

    a[a.SomeContainer = a.Container | a.DynamicModule | a.TypeAlias] = "SomeContainer";

    a[a.SomeBlock = a.WithBlock | a.CatchBlock] = "SomeBlock";

    a[a.SomeSignature = a.CallSignature | a.ConstructSignature | a.IndexSignature] = "SomeSignature";

    a[a.SomeAccessor = a.GetAccessor | a.SetAccessor] = "SomeAccessor";

    a[a.SomeTypeReference = a.Interface | a.ObjectType | a.FunctionType | a.ConstructorType] = "SomeTypeReference";

    a[a.SomeLHS = a.Variable | a.Property | a.Parameter | a.SetAccessor | a.Method] = "SomeLHS";

    a[a.InterfaceTypeExtension = a.Interface | a.Class | a.Enum] = "InterfaceTypeExtension";

    a[a.ClassTypeExtension = a.Interface | a.Class] = "ClassTypeExtension";

    a[a.EnumTypeExtension = a.Interface | a.Enum] = "EnumTypeExtension";
  })(a.PullElementKind || (a.PullElementKind = {}));
  var c = a.PullElementKind;
  (function(a) {
    a[a.TypedAs = 0] = "TypedAs";

    a[a.ContextuallyTypedAs = 1] = "ContextuallyTypedAs";

    a[a.ProvidesInferredType = 2] = "ProvidesInferredType";

    a[a.ArrayType = 3] = "ArrayType";

    a[a.ArrayOf = 4] = "ArrayOf";

    a[a.PublicMember = 5] = "PublicMember";

    a[a.PrivateMember = 6] = "PrivateMember";

    a[a.ConstructorMethod = 7] = "ConstructorMethod";

    a[a.Aliases = 8] = "Aliases";

    a[a.ExportAliases = 9] = "ExportAliases";

    a[a.ContainedBy = 10] = "ContainedBy";

    a[a.Extends = 11] = "Extends";

    a[a.Implements = 12] = "Implements";

    a[a.Parameter = 13] = "Parameter";

    a[a.ReturnType = 14] = "ReturnType";

    a[a.CallSignature = 15] = "CallSignature";

    a[a.ConstructSignature = 16] = "ConstructSignature";

    a[a.IndexSignature = 17] = "IndexSignature";

    a[a.TypeParameter = 18] = "TypeParameter";

    a[a.TypeArgument = 19] = "TypeArgument";

    a[a.TypeParameterSpecializedTo = 20] = "TypeParameterSpecializedTo";

    a[a.SpecializedTo = 21] = "SpecializedTo";

    a[a.TypeConstraint = 22] = "TypeConstraint";

    a[a.ContributesToExpression = 23] = "ContributesToExpression";

    a[a.GetterFunction = 24] = "GetterFunction";

    a[a.SetterFunction = 25] = "SetterFunction";
  })(a.SymbolLinkKind || (a.SymbolLinkKind = {}));
  var d = a.SymbolLinkKind;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  a.pullDeclID = 0;

  a.lastBoundPullDeclId = 0;
  var b = function() {
    function b(b, c, d, e, f, g) {
      this.symbol = null;

      this.declGroups = new a.BlockIntrinsics;

      this.signatureSymbol = null;

      this.specializingSignatureSymbol = null;

      this.childDecls = [];

      this.typeParameters = [];

      this.childDeclTypeCache = new a.BlockIntrinsics;

      this.childDeclValueCache = new a.BlockIntrinsics;

      this.childDeclNamespaceCache = new a.BlockIntrinsics;

      this.childDeclTypeParameterCache = new a.BlockIntrinsics;

      this.declID = a.pullDeclID++;

      this.declFlags = 0;

      this.diagnostics = null;

      this.parentDecl = null;

      this._parentPath = null;

      this._isBound = !1;

      this.synthesizedValDecl = null;

      this.declName = b;

      this.declType = d;

      this.declFlags = e;

      this.span = f;

      this.scriptName = g;

      if (c !== this.declName) {
        this.declDisplayName = c;
      }
    }
    b.prototype.getDeclID = function() {
      return this.declID;
    };

    b.prototype.getName = function() {
      return this.declName;
    };

    b.prototype.getKind = function() {
      return this.declType;
    };

    b.prototype.getDisplayName = function() {
      return this.declDisplayName === undefined ? this.declName : this.declDisplayName;
    };

    b.prototype.setSymbol = function(a) {
      this.symbol = a;
    };

    b.prototype.ensureSymbolIsBound = function(b) {
      if (typeof b == "undefined") {
        b = !1;
      }
      if (!(b && this.signatureSymbol || this.symbol) && !this._isBound && this.declType != 1) {
        var c = a.globalBinder.semanticInfo;
        a.globalBinder.setUnit(this.scriptName);

        a.globalBinder.bindDeclToPullSymbol(this);

        if (c) {
          a.globalBinder.setUnit(c.getPath());
        }
      }
    };

    b.prototype.getSymbol = function() {
      return this.declType == 1 ? null : (this.ensureSymbolIsBound(), this.symbol);
    };

    b.prototype.hasSymbol = function() {
      return this.symbol != null;
    };

    b.prototype.setSignatureSymbol = function(a) {
      this.signatureSymbol = a;
    };

    b.prototype.getSignatureSymbol = function() {
      this.ensureSymbolIsBound(!0);

      return this.signatureSymbol;
    };

    b.prototype.hasSignature = function() {
      return this.signatureSymbol != null;
    };

    b.prototype.setSpecializingSignatureSymbol = function(a) {
      this.specializingSignatureSymbol = a;
    };

    b.prototype.getSpecializingSignatureSymbol = function() {
      return this.specializingSignatureSymbol ? this.specializingSignatureSymbol : this.signatureSymbol;
    };

    b.prototype.getFlags = function() {
      return this.declFlags;
    };

    b.prototype.setFlags = function(a) {
      this.declFlags = a;
    };

    b.prototype.getSpan = function() {
      return this.span;
    };

    b.prototype.setSpan = function(a) {
      this.span = a;
    };

    b.prototype.getScriptName = function() {
      return this.scriptName;
    };

    b.prototype.setValueDecl = function(a) {
      this.synthesizedValDecl = a;
    };

    b.prototype.getValueDecl = function() {
      return this.synthesizedValDecl;
    };

    b.prototype.isEqual = function(a) {
      return this.declName === a.declName && this.declType === a.declType && this.declFlags === a.declFlags && this.scriptName ===
        a.scriptName && this.span.start() === a.span.start() && this.span.end() === a.span.end();
    };

    b.prototype.getParentDecl = function() {
      return this.parentDecl;
    };

    b.prototype.setParentDecl = function(a) {
      this.parentDecl = a;
    };

    b.prototype.addDiagnostic = function(a) {
      if (a) {
        if (!this.diagnostics) {
          this.diagnostics = [];
        }
        this.diagnostics[this.diagnostics.length] = a;
      }
    };

    b.prototype.getDiagnostics = function() {
      return this.diagnostics;
    };

    b.prototype.setErrors = function(a) {
      if (a) {
        this.diagnostics = [];
        for (var b = 0; b < a.length; b++) {
          a[b].adjustOffset(this.span.start());
          this.diagnostics[this.diagnostics.length] = a[b];
        }
      }
    };

    b.prototype.resetErrors = function() {
      this.diagnostics = [];
    };

    b.prototype.getChildDeclCache = function(b) {
      return b === 8192 ? this.childDeclTypeParameterCache : a.hasFlag(b, a.PullElementKind.SomeContainer) ? this.childDeclNamespaceCache :
        a.hasFlag(b, a.PullElementKind.SomeType) ? this.childDeclTypeCache : this.childDeclValueCache;
    };

    b.prototype.addChildDecl = function(a) {
      if (a.getKind() === 8192) {
        this.typeParameters[this.typeParameters.length] = a;
      } else {
        this.childDecls[this.childDecls.length] = a;
      }
      var b = a.getName();

      var c = this.getChildDeclCache(a.getKind());

      var d = c[b];
      if (!d) {
        d = [];
      }

      d.push(a);

      c[b] = d;
    };

    b.prototype.searchChildDecls = function(b, c) {
      var d = c & a.PullElementKind.SomeType ? this.childDeclTypeCache : c & a.PullElementKind.SomeContainer ? this.childDeclNamespaceCache :
        this.childDeclValueCache;

      var e = d[b];
      if (e) {
        return e;
      }
      if (c & a.PullElementKind.SomeType) {
        e = this.childDeclTypeParameterCache[b];
        if (e) {
          return e;
        }
      }
      return [];
    };

    b.prototype.getChildDecls = function() {
      return this.childDecls;
    };

    b.prototype.getTypeParameters = function() {
      return this.typeParameters;
    };

    b.prototype.addVariableDeclToGroup = function(a) {
      var b = this.declGroups[a.getName()];
      if (b) {
        b.addDecl(a);
      } else {
        b = new d(a.getName());
        b.addDecl(a);
        this.declGroups[a.getName()] = b;
      }
    };

    b.prototype.getVariableDeclGroups = function() {
      var a = [];
      for (var b in this.declGroups) {
        if (this.declGroups[b]) {
          a[a.length] = this.declGroups[b].getDecls();
        }
      }
      return a;
    };

    b.prototype.getParentPath = function() {
      return this._parentPath;
    };

    b.prototype.setParentPath = function(a) {
      this._parentPath = a;
    };

    b.prototype.setIsBound = function(a) {
      this._isBound = a;
    };

    b.prototype.isBound = function() {
      return this._isBound;
    };

    return b;
  }();
  a.PullDecl = b;
  var c = function(a) {
    function b(b, c, d, e) {
      a.call(this, "", "", 131072, c, d, e);

      this.functionExpressionName = b;
    }
    __extends(b, a);

    b.prototype.getFunctionExpressionName = function() {
      return this.functionExpressionName;
    };

    return b;
  }(b);
  a.PullFunctionExpressionDecl = c;
  var d = function() {
    function a(a) {
      this.name = a;

      this._decls = [];
    }
    a.prototype.addDecl = function(a) {
      if (a.getName() === this.name) {
        this._decls[this._decls.length] = a;
      }
    };

    a.prototype.getDecls = function() {
      return this._decls;
    };

    return a;
  }();
  a.PullDeclGroup = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function s(a, c, e, f) {
    var g = e.getCachedArrayType();
    if (!g || (g.getKind() & 16) === 0) {
      return null;
    }
    if (g.isGeneric()) {
      var h = g.getDeclarations()[0];
      return w(g, [c], e, h, f);
    }
    if (c.getArrayType()) {
      return c.getArrayType();
    }
    var i = new r;
    i.addDeclaration(g.getDeclarations()[0]);

    c.setArrayType(i);

    i.addOutgoingLink(c, 4);
    var j = null;

    var k = null;

    var l = null;

    var n = null;

    var o = null;

    var p = null;

    var q = null;

    var s = null;

    var t = null;

    var u = null;

    var v = null;

    var x = null;

    var y = null;

    var z = null;

    var A = g.getMembers();
    for (var B = 0; B < A.length; B++) {
      e.resolveDeclaredSymbol(A[B], null, f);
      if (A[B].getKind() === 65536) {
        n = A[B];

        e.resolveDeclaredSymbol(n, null, f);

        o = n.getType();

        p = new b(n.getName(), 65536);

        q = new m;

        p.setType(q);

        p.addDeclaration(n.getDeclarations()[0]);

        s = o.getCallSignatures();
        for (var C = 0; C < s.length; C++) {
          t = new d(1048576);

          t.addDeclaration(s[C].getDeclarations()[0]);

          u = s[C].getParameters();

          y = s[C].getReturnType();

          if (y === a) {
            t.setReturnType(c);
          } else {
            t.setReturnType(y);
          }
          for (var D = 0; D < u.length; D++) {
            v = new b(u[D].getName(), u[D].getKind());

            x = u[D].getType();
            if (x === null) continue;
            if (x === a) {
              v.setType(c);
            } else {
              v.setType(x);
            }

            t.addParameter(v);
          }
          q.addSignature(t);
        }
        i.addMember(p, 5);
      } else {
        j = A[B];
        k = new b(j.getName(), j.getKind());
        k.addDeclaration(j.getDeclarations()[0]);
        l = j.getType();
        if (l === a) {
          k.setType(c);
        } else {
          k.setType(l);
        }
        i.addMember(k, 5);
      }
    }
    i.addOutgoingLink(g, 3);

    return i;
  }

  function t(a, b) {
    if (a.isTypeParameter()) {
      return a == b;
    }
    var c = a.getTypeArguments();
    if (c)
      for (var d = 0; d < c.length; d++)
        if (t(c[d], b)) {
          return !0;
        }
    return !1;
  }

  function u(a) {
    var b = a.getDeclarations()[0];
    return a.isGeneric() ? a.getKind() & 24 ? b.getSymbol().getType() : a : a;
  }

  function v(a, b) {
    if (a == b) {
      return !1;
    }
    if (!a.isTypeParameter() || !b.isTypeParameter()) {
      return !0;
    }
    var c = a.getDeclarations()[0].getParentDecl();

    var d = b.getDeclarations()[0].getParentDecl();
    if (c == d) {
      return !0;
    }
    while (c) {
      if (c.getFlags() & 16) {
        return !0;
      }
      if (c == d) {
        return !1;
      }
      c = c.getParentDecl();
    }
    return !0;
  }

  function w(c, f, g, h, j, k) {
    if (c.isPrimitive() || !c.isGeneric()) {
      return c;
    }
    var l = f != null;
    if (f === null || j.specializingToAny && f.length) {
      f = [];
    }
    if (c.isTypeParameter()) {
      if (j.specializingToAny) {
        return g.semanticInfoChain.anyTypeSymbol;
      }
      var m = j.findSpecializationForType(c);
      return m != c && v(m, c) ? m : f && f.length && v(f[0], c) ? f[0] : c;
    }
    if (c.isArray()) {
      if (c.currentlyBeingSpecialized()) {
        return c;
      }
      var n = null;
      if (!j.specializingToAny) {
        var o = c.getElementType();
        n = w(o, f, g, h, j, k);
      } else {
        n = g.semanticInfoChain.anyTypeSymbol;
      }
      var q = w(g.getCachedArrayType(), [n], g, h, j);
      return q;
    }
    var s = c.getTypeParameters();
    if (!j.specializingToAny && l && s.length > f.length) {
      l = !1;
    }
    var y = null;

    var z = c.getDeclarations()[0];

    var A = u(c);

    var B = c === g.getCachedArrayType() || c.isArray();
    if (l || j.specializingToAny) {
      if (!f.length || j.specializingToAny)
        for (var C = 0; C < s.length; C++) {
          f[f.length] = g.semanticInfoChain.anyTypeSymbol;
        }
      if (B) {
        y = f[0].getArrayType();
      } else {
        if (f.length) {
          y = A.getSpecialization(f);
        }
      }

      if (!y && !s.length && j.specializingToAny) {
        y = A.getSpecialization([g.semanticInfoChain.anyTypeSymbol]);
      }
      for (var C = 0; C < f.length; C++)
        if (!f[C].isTypeParameter() && (f[C] == A || t(f[C], s[C]))) {
          G = g.semanticInfoChain.getASTForDecl(z);
          return G && f[C] != g.getCachedArrayType() ? (F = j.postError(h.getScriptName(), G.minChar, G.getLength(),
            225, null, h, !0), g.getNewErrorTypeSymbol(F)) : g.semanticInfoChain.anyTypeSymbol;
        }
    } else {
      var D = c.getTypeArguments();

      var E = D ? D : s;

      var F;

      var G;
      for (var C = 0; C < E.length; C++) {
        if (!E[C].isTypeParameter() && (f[C] == A || t(E[C], s[C]))) {
          G = g.semanticInfoChain.getASTForDecl(z);
          return G && f[C] != g.getCachedArrayType() ? (F = j.postError(h.getScriptName(), G.minChar, G.getLength(),
            225, null, h, !0), g.getNewErrorTypeSymbol(F)) : g.semanticInfoChain.anyTypeSymbol;
        }
        m = w(E[C], null, g, h, j, k);

        f[C] = m != null ? m : E[C];
      }
      y = A.getSpecialization(f);
    }
    var H = A.getTypeParameters();
    if (H.length && H.length == f.length) {
      for (var C = 0; C < f.length; C++)
        if (f[C] != H[C]) break;
      if (C == H.length) {
        return A;
      }
    }
    if (y) {
      if ( !! y.isResolved() || !! y.currentlyBeingSpecialized()) {
        return y;
      }
      c.invalidateSpecializations();
    }
    var I = j.inSpecialization;
    j.inSpecialization = !0;

    a.nSpecializationsCreated++;

    y = c.isClass() ? new i(c.getName()) : B ? new r : c.isTypeParameter() ? new p(c.getName(), c.isFunctionTypeParameter()) :
      new e(c.getName(), c.getKind());

    y.setRootSymbol(A);

    y.setIsBeingSpecialized();

    y.setTypeArguments(f);

    A.addSpecialization(y, f);

    if (B) {
      y.setElementType(f[0]);
      f[0].setArrayType(y);
    }
    if (c.currentlyBeingSpecialized()) {
      return y;
    }
    var J = c.currentlyBeingSpecialized();
    if (c.getKind() == 33554432) {
      c.setIsBeingSpecialized();
    }
    var K = {};
    for (var C = 0; C < s.length; C++) {
      if (s[C] != f[C]) {
        K[s[C].getSymbolID().toString()] = f[C];
      }
      y.addMember(s[C], 18, !0);
    }
    var L = c.getExtendedTypes();

    var M;

    var N;

    var O;

    var P = c.getDeclarations();
    if (L.length)
      for (var C = 0; C < P.length; C++) {
        M = P[C];

        N = g.semanticInfoChain.getASTForDecl(M);
        if (N.extendsList) {
          O = g.getUnitPath();

          g.setUnitPath(M.getScriptName());

          j.pushTypeSpecializationCache(K);
          var Q = g.resolveTypeReference(new a.TypeReference(N.extendsList.members[0], 0), M, j).symbol;
          g.setUnitPath(O);

          j.popTypeSpecializationCache();

          y.addExtendedType(Q);
        }
      }
    var R = c.getImplementedTypes();
    if (R.length)
      for (var C = 0; C < P.length; C++) {
        M = P[C];

        N = g.semanticInfoChain.getASTForDecl(M);
        if (N.implementsList) {
          O = g.getUnitPath();

          g.setUnitPath(M.getScriptName());

          j.pushTypeSpecializationCache(K);
          var S = g.resolveTypeReference(new a.TypeReference(N.implementsList.members[0], 0), M, j).symbol;
          g.setUnitPath(O);

          j.popTypeSpecializationCache();

          y.addImplementedType(S);
        }
      }
    var T = c.getCallSignatures(!1);

    var U = c.getConstructSignatures(!1);

    var V = c.getIndexSignatures(!1);

    var W = c.getMembers();

    var X;

    var Y;

    var Z = null;

    var G = null;

    var $;

    var _;

    var ab = null;

    var bb = null;
    for (var C = 0; C < T.length; C++) {
      Y = T[C];
      if (!Y.currentlyBeingSpecialized()) {
        j.pushTypeSpecializationCache(K);

        Z = Y.getDeclarations()[0];

        O = g.getUnitPath();

        g.setUnitPath(Z.getScriptName());

        X = new d(Y.getKind());

        a.nSpecializedSignaturesCreated++;

        X.mimicSignature(Y, g);

        G = g.semanticInfoChain.getASTForDecl(Z);

        a.Debug.assert(G != null, "Call signature for type '" + c.toString() +
          "' could not be specialized because of a stale declaration");

        bb = Z.getSpecializingSignatureSymbol();

        Z.setSpecializingSignatureSymbol(X);

        g.resolveAST(G, !1, z, j);

        Z.setSpecializingSignatureSymbol(bb);

        $ = Y.getParameters();

        _ = X.getParameters();
        for (var cb = 0; cb < $.length; cb++) {
          _[cb].setType($[cb].getType());
        }
        X.setResolved();

        g.setUnitPath(O);

        ab = X.getReturnType();

        if (!ab) {
          X.setReturnType(Y.getReturnType());
        }

        Y.setIsBeingSpecialized();

        X.setRootSymbol(Y);

        X = x(X, !0, K, null, g, z, j);

        Y.setIsSpecialized();

        j.popTypeSpecializationCache();
        if (!X) {
          j.inSpecialization = I;
          c.setValueIsBeingSpecialized(J);
          a.Debug.assert(!1, "returning from call");
          return g.semanticInfoChain.anyTypeSymbol;
        }
      } else {
        X = Y;
      }
      y.addCallSignature(X);

      if (X.hasGenericParameter()) {
        y.setHasGenericSignature();
      }
    }
    for (var C = 0; C < U.length; C++) {
      Y = U[C];
      if (!Y.currentlyBeingSpecialized()) {
        j.pushTypeSpecializationCache(K);

        Z = Y.getDeclarations()[0];

        O = g.getUnitPath();

        g.setUnitPath(Z.getScriptName());

        X = new d(Y.getKind());

        a.nSpecializedSignaturesCreated++;

        X.mimicSignature(Y, g);

        G = g.semanticInfoChain.getASTForDecl(Z);

        a.Debug.assert(G != null, "Construct signature for type '" + c.toString() +
          "' could not be specialized because of a stale declaration");

        bb = Z.getSpecializingSignatureSymbol();

        Z.setSpecializingSignatureSymbol(X);

        g.resolveAST(G, !1, z, j);

        Z.setSpecializingSignatureSymbol(bb);

        $ = Y.getParameters();

        _ = X.getParameters();
        for (var cb = 0; cb < $.length; cb++) {
          _[cb].setType($[cb].getType());
        }
        X.setResolved();

        g.setUnitPath(O);

        ab = X.getReturnType();

        if (!ab) {
          X.setReturnType(Y.getReturnType());
        }

        Y.setIsBeingSpecialized();

        X.setRootSymbol(Y);

        X = x(X, !0, K, null, g, z, j);

        Y.setIsSpecialized();

        j.popTypeSpecializationCache();
        if (!X) {
          j.inSpecialization = I;
          c.setValueIsBeingSpecialized(J);
          a.Debug.assert(!1, "returning from construct");
          return g.semanticInfoChain.anyTypeSymbol;
        }
      } else {
        X = Y;
      }
      y.addConstructSignature(X);

      if (X.hasGenericParameter()) {
        y.setHasGenericSignature();
      }
    }
    for (var C = 0; C < V.length; C++) {
      Y = V[C];
      if (!Y.currentlyBeingSpecialized()) {
        j.pushTypeSpecializationCache(K);

        Z = Y.getDeclarations()[0];

        O = g.getUnitPath();

        g.setUnitPath(Z.getScriptName());

        X = new d(Y.getKind());

        a.nSpecializedSignaturesCreated++;

        X.mimicSignature(Y, g);

        G = g.semanticInfoChain.getASTForDecl(Z);

        a.Debug.assert(G != null, "Index signature for type '" + c.toString() +
          "' could not be specialized because of a stale declaration");

        bb = Z.getSpecializingSignatureSymbol();

        Z.setSpecializingSignatureSymbol(X);

        g.resolveAST(G, !1, z, j);

        Z.setSpecializingSignatureSymbol(bb);

        $ = Y.getParameters();

        _ = X.getParameters();
        for (var cb = 0; cb < $.length; cb++) {
          _[cb].setType($[cb].getType());
        }
        X.setResolved();

        g.setUnitPath(O);

        ab = X.getReturnType();

        if (!ab) {
          X.setReturnType(Y.getReturnType());
        }

        Y.setIsBeingSpecialized();

        X.setRootSymbol(Y);

        X = x(X, !0, K, null, g, z, j);

        Y.setIsSpecialized();

        j.popTypeSpecializationCache();
        if (!X) {
          j.inSpecialization = I;
          c.setValueIsBeingSpecialized(J);
          a.Debug.assert(!1, "returning from index");
          return g.semanticInfoChain.anyTypeSymbol;
        }
      } else {
        X = Y;
      }
      y.addIndexSignature(X);

      if (X.hasGenericParameter()) {
        y.setHasGenericSignature();
      }
    }
    var db = null;

    var eb = null;

    var fb = null;

    var gb = null;

    var hb = null;

    var ib = null;
    for (var C = 0; C < W.length; C++) {
      db = W[C];
      db.setIsBeingSpecialized();
      P = db.getDeclarations();
      eb = new b(db.getName(), db.getKind());
      eb.setRootSymbol(db);
      if (db.getIsOptional()) {
        eb.setIsOptional();
      }
      if (!db.isResolved()) {
        g.resolveDeclaredSymbol(db, z, j);
      }
      fb = db.getType();
      if (!fb) {
        fb = y;
      }
      hb = K[fb.getSymbolID().toString()];
      if (hb) {
        eb.setType(hb);
      } else {
        if (fb.isGeneric() && !fb.isFixed()) {
          O = g.getUnitPath();
          g.setUnitPath(P[0].getScriptName());
          j.pushTypeSpecializationCache(K);
          gb = w(fb, fb.getIsSpecialized() ? null : f, g, z, j, k);
          g.setUnitPath(O);
          j.popTypeSpecializationCache();
          eb.setType(gb);
        } else {
          eb.setType(fb);
        }
      }
      db.setIsSpecialized();
      y.addMember(eb, db.hasFlag(2) ? 6 : 5);
    }
    if (c.isClass()) {
      var jb = c.getConstructorMethod();
      if (!jb.isResolved()) {
        var kb = j.isSpecializingConstructorMethod;
        j.isSpecializingConstructorMethod = !0;

        g.resolveDeclaredSymbol(jb, h, j);

        j.isSpecializingConstructorMethod = kb;
      }
      var lb = new b(jb.getName(), 32768);

      var mb = w(jb.getType(), f, g, z, j, k);
      lb.setType(mb);
      var nb = jb.getDeclarations();
      lb.setRootSymbol(jb);

      y.setConstructorMethod(lb);
    }
    y.setIsSpecialized();

    y.setResolved();

    c.setValueIsBeingSpecialized(J);

    j.inSpecialization = I;

    return y;
  }

  function x(c, e, f, g, h, i, j, k) {
    if (c.currentlyBeingSpecialized()) {
      return c;
    }
    if (!c.isResolved() && !c.isResolving()) {
      h.resolveDeclaredSymbol(c, i, j);
    }
    var l = c.getSpecialization(g);
    if (l) {
      return l;
    }
    c.setIsBeingSpecialized();
    var m = j.inSpecialization;
    j.inSpecialization = !0;

    l = new d(c.getKind());

    a.nSpecializedSignaturesCreated++;

    l.setRootSymbol(c);

    if (c.hasVariableParamList()) {
      l.setHasVariableParamList();
    }

    if (c.hasGenericParameter()) {
      l.setHasGenericParameter();
    }

    c.addSpecialization(l, g);
    var n = c.getParameters();

    var o = c.getTypeParameters();

    var p = c.getReturnType();
    for (var q = 0; q < o.length; q++) {
      l.addTypeParameter(o[q]);
    }
    if (c.hasGenericParameter()) {
      l.setHasGenericParameter();
    }
    var r;

    var s;

    var t;

    var u;

    var v;

    var x = new a.BlockIntrinsics;

    var y = null;
    if (e)
      for (var q = 0; q < o.length; q++) {
        x[o[q].getName()] = !0;
        if (!y) {
          y = {};
        }
        y[o[q].getSymbolID().toString()] = o[q];
      }
    j.pushTypeSpecializationCache(f);

    if (e && y) {
      j.pushTypeSpecializationCache(y);
    }
    var z = x[p.getName()] ? p : w(p, null, h, i, j, k);
    if (e && y) {
      j.popTypeSpecializationCache();
    }

    j.popTypeSpecializationCache();

    l.setReturnType(z);
    for (var A = 0; A < n.length; A++) {
      r = new b(n[A].getName(), n[A].getKind());
      r.setRootSymbol(n[A]);
      u = n[A].getType();
      j.pushTypeSpecializationCache(f);
      if (e && y) {
        j.pushTypeSpecializationCache(y);
      }
      s = x[u.getName()] ? u : w(u, null, h, i, j, k);
      if (e && y) {
        j.popTypeSpecializationCache();
      }
      j.popTypeSpecializationCache();
      if (n[A].getIsOptional()) {
        r.setIsOptional();
      }
      if (n[A].getIsVarArg()) {
        r.setIsVarArg();
        l.setHasVariableParamList();
      }
      if (h.isTypeArgumentOrWrapper(s)) {
        l.setHasGenericParameter();
      }
      r.setType(s);
      l.addParameter(r, r.getIsOptional());
    }
    c.setIsSpecialized();

    j.inSpecialization = m;

    return l;
  }

  function y(a) {
    var b = "";
    for (var c = 0; c < a.length; c++) {
      b += a[c].getSymbolID().toString() + "#";
    }
    return b;
  }
  a.pullSymbolID = 0;

  a.lastBoundPullSymbolID = 0;

  a.globalTyvarID = 0;
  var b = function() {
    function b(b, c) {
      this.pullSymbolID = a.pullSymbolID++;

      this.outgoingLinks = new a.LinkList;

      this.incomingLinks = new a.LinkList;

      this.declarations = new a.LinkList;

      this.cachedPathIDs = {};

      this.cachedContainerLink = null;

      this.cachedTypeLink = null;

      this.cachedDeclarations = null;

      this.hasBeenResolved = !1;

      this.isOptional = !1;

      this.inResolution = !1;

      this.isSynthesized = !1;

      this.isBound = !1;

      this.rebindingID = 0;

      this.isVarArg = !1;

      this.isSpecialized = !1;

      this.isBeingSpecialized = !1;

      this.rootSymbol = null;

      this.typeChangeUpdateVersion = -1;

      this.addUpdateVersion = -1;

      this.removeUpdateVersion = -1;

      this.docComments = null;

      this.isPrinting = !1;

      this.name = b;

      this.declKind = c;
    }
    b.prototype.getSymbolID = function() {
      return this.pullSymbolID;
    };

    b.prototype.isType = function() {
      return (this.declKind & a.PullElementKind.SomeType) != 0;
    };

    b.prototype.isSignature = function() {
      return (this.declKind & a.PullElementKind.SomeSignature) != 0;
    };

    b.prototype.isArray = function() {
      return (this.declKind & 128) != 0;
    };

    b.prototype.isPrimitive = function() {
      return this.declKind === 2;
    };

    b.prototype.isAccessor = function() {
      return !1;
    };

    b.prototype.isError = function() {
      return !1;
    };

    b.prototype.isAlias = function() {
      return !1;
    };

    b.prototype.isContainer = function() {
      return !1;
    };

    b.prototype.findAliasedType = function(a) {
      for (var b = 0; b < a.length; b++) {
        var c = a[b].getChildDecls();
        for (var d = 0; d < c.length; d++)
          if (c[d].getKind() === 256) {
            var e = c[d].getSymbol();
            if (j.usedAsSymbol(e, this)) {
              return e;
            }
          }
      }
      return null;
    };

    b.prototype.getAliasedSymbol = function(a) {
      if (!a) {
        return null;
      }
      var b = a.pathToRoot();
      if (b.length && b[b.length - 1].getKind() === 32) {
        var c = b[b.length - 1].getDeclarations();

        var d = this.findAliasedType(c);
        return d;
      }
      return null;
    };

    b.prototype.getName = function(a, b) {
      var c = this.getAliasedSymbol(a);
      return c ? c.getName() : this.name;
    };

    b.prototype.getDisplayName = function(a, b) {
      var c = this.getAliasedSymbol(a);
      return c ? c.getDisplayName() : this.getDeclarations()[0].getDisplayName();
    };

    b.prototype.getKind = function() {
      return this.declKind;
    };

    b.prototype.setKind = function(a) {
      this.declKind = a;
    };

    b.prototype.setIsOptional = function() {
      this.isOptional = !0;
    };

    b.prototype.getIsOptional = function() {
      return this.isOptional;
    };

    b.prototype.getIsVarArg = function() {
      return this.isVarArg;
    };

    b.prototype.setIsVarArg = function() {
      this.isVarArg = !0;
    };

    b.prototype.setIsSynthesized = function() {
      this.isSynthesized = !0;
    };

    b.prototype.getIsSynthesized = function() {
      return this.isSynthesized;
    };

    b.prototype.setIsSpecialized = function() {
      this.isSpecialized = !0;

      this.isBeingSpecialized = !1;
    };

    b.prototype.getIsSpecialized = function() {
      return this.isSpecialized;
    };

    b.prototype.currentlyBeingSpecialized = function() {
      return this.isBeingSpecialized;
    };

    b.prototype.setIsBeingSpecialized = function() {
      this.isBeingSpecialized = !0;
    };

    b.prototype.setValueIsBeingSpecialized = function(a) {
      this.isBeingSpecialized = a;
    };

    b.prototype.getRootSymbol = function() {
      return this.rootSymbol ? this.rootSymbol : this;
    };

    b.prototype.setRootSymbol = function(a) {
      this.rootSymbol = a;
    };

    b.prototype.setIsBound = function(a) {
      this.isBound = !0;

      this.rebindingID = a;
    };

    b.prototype.getRebindingID = function() {
      return this.rebindingID;
    };

    b.prototype.getIsBound = function() {
      return this.isBound;
    };

    b.prototype.addCacheID = function(a) {
      if (!this.cachedPathIDs[a]) {
        this.cachedPathIDs[a] = !0;
      }
    };

    b.prototype.invalidateCachedIDs = function(a) {
      for (var b in this.cachedPathIDs) {
        if (a[b]) {
          a[b] = undefined;
        }
      }
    };

    b.prototype.addDeclaration = function(b) {
      a.Debug.assert( !! b);
      if (this.rootSymbol) return;
      this.declarations.addItem(b);

      if (this.cachedDeclarations) {
        this.cachedDeclarations[this.cachedDeclarations.length] = b;
      } else {
        this.cachedDeclarations = [b];
      }
    };

    b.prototype.getDeclarations = function() {
      return this.rootSymbol ? this.rootSymbol.getDeclarations() : (this.cachedDeclarations || (this.cachedDeclarations = []),
        this.cachedDeclarations);
    };

    b.prototype.removeDeclaration = function(a) {
      if (this.rootSymbol) return;
      this.declarations.remove(function(b) {
        return b === a;
      });

      this.cachedDeclarations = this.declarations.find(function(a) {
        return a;
      });
    };

    b.prototype.updateDeclarations = function(a, b) {
      if (this.rootSymbol) return;
      this.declarations.update(a, b);
    };

    b.prototype.addOutgoingLink = function(b, c) {
      var d = new a.PullSymbolLink(this, b, c);
      this.outgoingLinks.addItem(d);

      b.incomingLinks.addItem(d);

      return d;
    };

    b.prototype.findOutgoingLinks = function(a) {
      return this.outgoingLinks.find(a);
    };

    b.prototype.findIncomingLinks = function(a) {
      return this.incomingLinks.find(a);
    };

    b.prototype.removeOutgoingLink = function(a) {
      if (a) {
        this.outgoingLinks.remove(function(b) {
          return b === a;
        });
        if (a.end.incomingLinks) {
          a.end.incomingLinks.remove(function(b) {
            return b === a;
          });
        }
      }
    };

    b.prototype.updateOutgoingLinks = function(a, b) {
      if (this.outgoingLinks) {
        this.outgoingLinks.update(a, b);
      }
    };

    b.prototype.updateIncomingLinks = function(a, b) {
      if (this.incomingLinks) {
        this.incomingLinks.update(a, b);
      }
    };

    b.prototype.removeAllLinks = function() {
      var a = this;
      this.updateOutgoingLinks(function(b) {
        return a.removeOutgoingLink(b);
      }, null);

      this.updateIncomingLinks(function(a) {
        return a.start.removeOutgoingLink(a);
      }, null);
    };

    b.prototype.setContainer = function(a) {
      var b = this.addOutgoingLink(a, 10);
      this.cachedContainerLink = b;

      a.addContainedByLink(b);
    };

    b.prototype.getContainer = function() {
      if (this.cachedContainerLink) {
        return this.cachedContainerLink.end;
      }
      if (this.getIsSpecialized()) {
        var a = this.findIncomingLinks(function(a) {
          return a.kind == 21;
        });
        if (a.length == 1) {
          return a[0].start.getContainer();
        }
      }
      return null;
    };

    b.prototype.unsetContainer = function() {
      if (this.cachedContainerLink) {
        this.removeOutgoingLink(this.cachedContainerLink);
      }

      this.invalidate();
    };

    b.prototype.setType = function(a) {
      if (this.cachedTypeLink) {
        this.unsetType();
      }

      this.cachedTypeLink = this.addOutgoingLink(a, 0);
    };

    b.prototype.getType = function() {
      return this.cachedTypeLink ? this.cachedTypeLink.end : null;
    };

    b.prototype.unsetType = function() {
      var a = !1;
      if (this.cachedTypeLink) {
        this.removeOutgoingLink(this.cachedTypeLink);
        a = !0;
      }

      if (a) {
        this.invalidate();
      }
    };

    b.prototype.isTyped = function() {
      return this.getType() != null;
    };

    b.prototype.setResolved = function() {
      this.hasBeenResolved = !0;

      this.inResolution = !1;
    };

    b.prototype.isResolved = function() {
      return this.hasBeenResolved;
    };

    b.prototype.startResolving = function() {
      this.inResolution = !0;
    };

    b.prototype.isResolving = function() {
      return this.inResolution;
    };

    b.prototype.setUnresolved = function() {
      this.hasBeenResolved = !1;

      this.isBound = !1;

      this.inResolution = !1;
    };

    b.prototype.invalidate = function() {
      this.docComments = null;

      this.hasBeenResolved = !1;

      this.isBound = !1;

      this.declarations.update(function(a) {
        return a.resetErrors();
      }, null);
    };

    b.prototype.hasFlag = function(a) {
      var b = this.getDeclarations();
      for (var c = 0, d = b.length; c < d; c++)
        if ((b[c].getFlags() & a) !== 0) {
          return !0;
        }
      return !1;
    };

    b.prototype.allDeclsHaveFlag = function(a) {
      var b = this.getDeclarations();
      for (var c = 0, d = b.length; c < d; c++)
        if ((b[c].getFlags() & a) === 0) {
          return !1;
        }
      return !0;
    };

    b.prototype.pathToRoot = function() {
      var a = [];

      var b = this;
      while (b) {
        if (b.isType()) {
          var c = b.getAssociatedContainerType();
          if (c) {
            b = c;
          }
        }
        a[a.length] = b;

        b = b.getContainer();
      }
      return a;
    };

    b.prototype.findCommonAncestorPath = function(a) {
      var b = this.pathToRoot();
      if (b.length === 1) {
        return b;
      }
      var c;
      if (!a) {
        return b;
      }
      c = a.pathToRoot();
      var d = -1;
      for (var e = 0, f = b.length; e < f; e++) {
        var g = b[e];
        for (var h = 0, i = c.length; h < i; h++) {
          var j = c[h];
          if (g === j) {
            var k = null;
            if (e > 0) {
              var l = b[e - 1].getDeclarations();
              if (l.length) {
                k = l[0].getParentDecl();
              }
            }
            var m = null;
            if (h > 0) {
              var l = c[h - 1].getDeclarations();
              if (l.length) {
                m = l[0].getParentDecl();
              }
            }
            if (!k || !m || k == m) {
              d = e;
              break;
            }
          }
        }
        if (d >= 0) break;
      }
      return d >= 0 ? b.slice(0, d) : b;
    };

    b.prototype.toString = function(a) {
      var b = this.getNameAndTypeName();
      return b;
    };

    b.prototype.getNamePartForFullName = function() {
      return this.getDisplayName(null, !0);
    };

    b.prototype.fullName = function(b) {
      var c = this.pathToRoot();

      var d = "";

      var e = this.getAliasedSymbol(b);
      if (e) {
        return e.getDisplayName();
      }
      for (var f = 1; f < c.length; f++) {
        e = c[f].getAliasedSymbol(b);
        if (e) {
          d = e.getDisplayName() + "." + d;
          break;
        }
        var g = c[f].getNamePartForFullName();
        if (c[f].getKind() == 32 && !a.isQuoted(g)) break;
        if (g === "") break;
        d = g + "." + d;
      }
      d += this.getNamePartForFullName();

      return d;
    };

    b.prototype.getScopedName = function(b, c) {
      var d = this.findCommonAncestorPath(b);

      var e = "";

      var f = this.getAliasedSymbol(b);
      if (f) {
        return f.getDisplayName();
      }
      for (var g = 1; g < d.length; g++) {
        var h = d[g].getKind();
        if (h !== 4 && h !== 32) break;
        f = d[g].getAliasedSymbol(b);
        if (f) {
          e = f.getDisplayName() + "." + e;
          break;
        }
        if (h !== 4) {
          var i = d[g].getDisplayName();
          if (a.isQuoted(i)) {
            e = i + "." + e;
          }
          break;
        }
        e = d[g].getDisplayName() + "." + e;
      }
      e += this.getDisplayName(b, c);

      return e;
    };

    b.prototype.getScopedNameEx = function(b, c, d, e) {
      var f = this.getScopedName(b, c);
      return a.MemberName.create(f);
    };

    b.prototype.getTypeName = function(a, b) {
      var c = this.getTypeNameEx(a, b);
      return c.toString();
    };

    b.prototype.getTypeNameEx = function(b, c) {
      var d = this.getType();
      if (d) {
        var e = c ? this.getTypeNameForFunctionSignature("", b, c) : null;
        e || (e = d.getScopedNameEx(b, !0, c));

        return e;
      }
      return a.MemberName.create("");
    };

    b.prototype.getTypeNameForFunctionSignature = function(b, c, e) {
      var f = this.getType();
      if (f && !f.isNamedTypeSymbol() && this.declKind != 4096 && this.declKind != 1024 && this.declKind != 2048) {
        var g = f.getCallSignatures();

        var h = new a.MemberNameArray;

        var i = d.getSignaturesTypeNameEx(g, b, !1, !1, c, e);
        h.addAll(i);

        return h;
      }
      return null;
    };

    b.prototype.getNameAndTypeName = function(a) {
      var b = this.getNameAndTypeNameEx(a);
      return b.toString();
    };

    b.prototype.getNameAndTypeNameEx = function(b) {
      var c = this.getType();

      var d = this.getScopedNameEx(b);
      if (c) {
        var e = d.toString() + (this.getIsOptional() ? "?" : "");

        var f = this.getTypeNameForFunctionSignature(e, b);
        if (!f) {
          var g = c.getScopedNameEx(b);
          f = a.MemberName.create(g, e + ": ", "");
        }
        return f;
      }
      return d;
    };

    b.getTypeParameterString = function(a, c, d) {
      return b.getTypeParameterStringEx(a, c, undefined, d).toString();
    };

    b.getTypeParameterStringEx = function(b, c, d, e) {
      var f = new a.MemberNameArray;
      f.prefix = "";
      if (b && b.length) {
        f.add(a.MemberName.create("<"));
        for (var g = 0; g < b.length; g++) {
          if (g) {
            f.add(a.MemberName.create(", "));
          }
          if (d) {
            f.add(new a.MemberName);
          }
          f.add(b[g].getScopedNameEx(c, e));
          if (d) {
            f.add(new a.MemberName);
          }
        }
        f.add(a.MemberName.create(">"));
      }
      return f;
    };

    b.getIsExternallyVisible = function(a, b, c) {
      if (c) {
        for (var d = 0; d < c.length; d++)
          if (c[d] === a) {
            return !0;
          }
      } else {
        c = [];
      }
      return b === a ? !0 : (c = c.concat(b), a.isExternallyVisible(c));
    };

    b.prototype.isExternallyVisible = function(a) {
      var c = this.getKind();
      if (c === 2) {
        return !0;
      }
      if (this.isType()) {
        var d = this.getAssociatedContainerType();
        if (d) {
          return b.getIsExternallyVisible(d, this, a);
        }
      }
      if (this.hasFlag(2)) {
        return !1;
      }
      var e = this.getContainer();
      if (e === null) {
        return !0;
      }
      if (e.getKind() == 32 || e.getAssociatedContainerType() && e.getAssociatedContainerType().getKind() == 32) {
        var f = e.getKind() == 32 ? e : e.getAssociatedContainerType();
        if (j.usedAsSymbol(f, this)) {
          return !0;
        }
      }
      return !this.hasFlag(1) && c != 4096 && c != 65536 ? !1 : b.getIsExternallyVisible(e, this, a);
    };

    return b;
  }();
  a.PullSymbol = b;
  var c = function(a) {
    function b() {
      a.call(this, "", 268435456);

      this.contributingSymbols = [];
    }
    __extends(b, a);

    b.prototype.addContributingSymbol = function(a) {
      var b = this.addOutgoingLink(a, 23);
      this.contributingSymbols[this.contributingSymbols.length] = a;
    };

    b.prototype.getContributingSymbols = function() {
      return this.contributingSymbols;
    };

    return b;
  }(b);
  a.PullExpressionSymbol = c;
  var d = function(c) {
    function d(a) {
      c.call(this, "", a);

      this.parameterLinks = null;

      this.typeParameterLinks = null;

      this.returnTypeLink = null;

      this.hasOptionalParam = !1;

      this.nonOptionalParamCount = 0;

      this.hasVarArgs = !1;

      this.specializationCache = {};

      this.memberTypeParameterNameCache = null;

      this.hasAGenericParameter = !1;

      this.stringConstantOverload = undefined;
    }
    __extends(d, c);

    d.prototype.isDefinition = function() {
      return !1;
    };

    d.prototype.hasVariableParamList = function() {
      return this.hasVarArgs;
    };

    d.prototype.setHasVariableParamList = function() {
      this.hasVarArgs = !0;
    };

    d.prototype.setHasGenericParameter = function() {
      this.hasAGenericParameter = !0;
    };

    d.prototype.hasGenericParameter = function() {
      return this.hasAGenericParameter;
    };

    d.prototype.isGeneric = function() {
      return this.hasAGenericParameter || this.typeParameterLinks && this.typeParameterLinks.length != 0;
    };

    d.prototype.addParameter = function(a, b) {
      if (typeof b == "undefined") {
        b = !1;
      }

      if (!this.parameterLinks) {
        this.parameterLinks = [];
      }
      var c = this.addOutgoingLink(a, 13);
      this.parameterLinks[this.parameterLinks.length] = c;

      this.hasOptionalParam = b;

      if (!b) {
        this.nonOptionalParamCount++;
      }
    };

    d.prototype.addSpecialization = function(a, b) {
      if (b && b.length) {
        this.specializationCache[y(b)] = a;
      }
    };

    d.prototype.getSpecialization = function(a) {
      if (a) {
        var b = this.specializationCache[y(a)];
        if (b) {
          return b;
        }
      }
      return null;
    };

    d.prototype.addTypeParameter = function(b) {
      if (!this.typeParameterLinks) {
        this.typeParameterLinks = [];
      }

      if (!this.memberTypeParameterNameCache) {
        this.memberTypeParameterNameCache = new a.BlockIntrinsics;
      }
      var c = this.addOutgoingLink(b, 18);
      this.typeParameterLinks[this.typeParameterLinks.length] = c;

      this.memberTypeParameterNameCache[c.end.getName()] = c.end;
    };

    d.prototype.getNonOptionalParameterCount = function() {
      return this.nonOptionalParamCount;
    };

    d.prototype.setReturnType = function(a) {
      if (a) {
        if (this.returnTypeLink) {
          this.removeOutgoingLink(this.returnTypeLink);
        }
        this.returnTypeLink = this.addOutgoingLink(a, 14);
      }
    };

    d.prototype.getParameters = function() {
      var a = [];
      if (this.parameterLinks)
        for (var b = 0; b < this.parameterLinks.length; b++) {
          a[a.length] = this.parameterLinks[b].end;
        }
      return a;
    };

    d.prototype.getTypeParameters = function() {
      var a = [];
      if (this.typeParameterLinks)
        for (var b = 0; b < this.typeParameterLinks.length; b++) {
          a[a.length] = this.typeParameterLinks[b].end;
        }
      return a;
    };

    d.prototype.findTypeParameter = function(b) {
      var c;
      if (!this.memberTypeParameterNameCache) {
        this.memberTypeParameterNameCache = new a.BlockIntrinsics;
        if (this.typeParameterLinks)
          for (var d = 0; d < this.typeParameterLinks.length; d++) {
            this.memberTypeParameterNameCache[this.typeParameterLinks[d].end.getName()] = this.typeParameterLinks[d].end;
          }
      }
      c = this.memberTypeParameterNameCache[b];

      return c;
    };

    d.prototype.removeParameter = function(a) {
      var b;
      if (this.parameterLinks)
        for (var c = 0; c < this.parameterLinks.length; c++)
          if (a === this.parameterLinks[c].end) {
            b = this.parameterLinks[c];

            this.removeOutgoingLink(b);
            break;
          }
      this.invalidate();
    };

    d.prototype.mimicSignature = function(a, c) {
      var d = a.getTypeParameters();

      var e;
      if (d)
        for (var f = 0; f < d.length; f++) {
          this.addTypeParameter(d[f]);
        }
      var g = a.getParameters();

      var h;
      if (g)
        for (var i = 0; i < g.length; i++) {
          h = new b(g[i].getName(), 2048);
          h.setRootSymbol(g[i]);
          if (g[i].getIsOptional()) {
            h.setIsOptional();
          }
          if (g[i].getIsVarArg()) {
            h.setIsVarArg();
            this.setHasVariableParamList();
          }
          this.addParameter(h);
        }
      var j = a.getReturnType();
      if (!c.isTypeArgumentOrWrapper(j)) {
        this.setReturnType(j);
      }
    };

    d.prototype.getReturnType = function() {
      if (this.returnTypeLink) {
        return this.returnTypeLink.end;
      }
      var a = this.findOutgoingLinks(function(a) {
        return a.kind === 14;
      });
      return a.length ? (this.returnTypeLink = a[0], this.returnTypeLink.end) : null;
    };

    d.prototype.parametersAreFixed = function() {
      if (!this.isGeneric()) {
        return !0;
      }
      if (this.parameterLinks) {
        var a;
        for (var b = 0; b < this.parameterLinks.length; b++) {
          a = this.parameterLinks[b].end.getType();
          if (a && !a.isFixed()) {
            return !1;
          }
        }
      }
      return !0;
    };

    d.prototype.isFixed = function() {
      if (!this.isGeneric()) {
        return !0;
      }
      if (this.parameterLinks) {
        var a = null;
        for (var b = 0; b < this.parameterLinks.length; b++) {
          a = this.parameterLinks[b].end.getType();
          if (a && !a.isFixed()) {
            return !1;
          }
        }
      }
      if (this.returnTypeLink) {
        var c = this.returnTypeLink.end;
        return c.isFixed();
      }
      return !0;
    };

    d.prototype.invalidate = function() {
      this.parameterLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 13;
      });

      this.nonOptionalParamCount = 0;

      this.hasOptionalParam = !1;

      this.hasAGenericParameter = !1;

      this.stringConstantOverload = undefined;
      if (this.parameterLinks)
        for (var a = 0; a < this.parameterLinks.length; a++) {
          this.parameterLinks[a].end.invalidate();
          if ( !! this.parameterLinks[a].end.getIsOptional()) {
            this.hasOptionalParam;
            break;
          }
          this.nonOptionalParamCount++;
        }
      c.prototype.invalidate.call(this);
    };

    d.prototype.isStringConstantOverloadSignature = function() {
      if (this.stringConstantOverload === undefined) {
        var a = this.getParameters();
        this.stringConstantOverload = !1;
        for (var b = 0; b < a.length; b++) {
          var c = a[b].getType();
          if (c && c.isPrimitive() && c.isStringConstant()) {
            this.stringConstantOverload = !0;
          }
        }
      }
      return this.stringConstantOverload;
    };

    d.getSignatureTypeMemberName = function(b, c, e) {
      var f = new a.MemberNameArray;

      var g = d.getSignaturesTypeNameEx(c, "", !1, !1, e, !0, b);
      f.addAll(g);

      return f;
    };

    d.getSignaturesTypeNameEx = function(b, c, d, e, f, g, h) {
      var i = [];

      var j = b.length;
      if (!g && j > 1) {
        d = !1;
      }
      var k = !1;
      if (h && h.isDefinition() && j > 1) {
        h = null;
      }
      for (var l = 0; l < j; l++) {
        if (j > 1 && b[l].isDefinition()) {
          k = !0;
          continue;
        }
        var m = b[l];
        if (g && h) {
          m = h;
        }

        i.push(m.getSignatureTypeNameEx(c, d, e, f));
        if (g) break;
      }
      if (g && i.length && j > 1) {
        var n = i[i.length - 1];
        for (var l = l + 1; l < j; l++)
          if (b[l].isDefinition()) {
            k = !0;
            break;
          }
        var o = " (+ " + (k ? j - 2 : j - 1) + " overload(s))";
        n.add(a.MemberName.create(o));
      }
      return i;
    };

    d.prototype.toString = function(a) {
      var b = this.getSignatureTypeNameEx(this.getScopedNameEx().toString(), !1, !1, undefined, undefined, a).toString();
      return b;
    };

    d.prototype.getSignatureTypeNameEx = function(c, d, e, f, g, h) {
      var i = new a.MemberNameArray;
      i.add(b.getTypeParameterStringEx(this.getTypeParameters(), f, h, !0));

      if (e) {
        i.add(a.MemberName.create("["));
      } else {
        i.add(a.MemberName.create("("));
      }
      var j = new a.MemberNameArray;
      j.prefix = c;

      if (h) {
        j.prefix = c;
        j.addAll(i.entries);
      } else {
        j.prefix = c + i.toString();
      }
      var k = this.getParameters();

      var l = k.length;
      for (var m = 0; m < l; m++) {
        var n = k[m].getType();

        var o = n ? ": " : "";

        var p = k[m].getIsVarArg();

        var q = p ? "..." : "";

        var r = !p && k[m].getIsOptional() ? "?" : "";
        if (g) {
          j.add(new a.MemberName);
        }

        j.add(a.MemberName.create(q + k[m].getScopedNameEx(f).toString() + r + o));

        if (n) {
          j.add(n.getScopedNameEx(f));
        }

        if (g) {
          j.add(new a.MemberName);
        }

        if (m < l - 1) {
          j.add(a.MemberName.create(", "));
        }
      }
      if (d) {
        if (e) {
          j.add(a.MemberName.create("] => "));
        } else {
          j.add(a.MemberName.create(") => "));
        }
      } else {
        if (e) {
          j.add(a.MemberName.create("]: "));
        } else {
          j.add(a.MemberName.create("): "));
        }
      }
      var s = this.getReturnType();
      s ? j.add(s.getScopedNameEx(f)) : j.add(a.MemberName.create("any"));

      return j;
    };

    return d;
  }(b);
  a.PullSignatureSymbol = d;
  var e = function(c) {
    function e() {
      c.apply(this, arguments);

      this.memberLinks = null;

      this.typeParameterLinks = null;

      this.specializationLinks = null;

      this.containedByLinks = null;

      this.memberNameCache = null;

      this.memberTypeNameCache = null;

      this.memberTypeParameterNameCache = null;

      this.containedMemberCache = null;

      this.typeArguments = null;

      this.specializedTypeCache = null;

      this.memberCache = null;

      this.implementedTypeLinks = null;

      this.extendedTypeLinks = null;

      this.callSignatureLinks = null;

      this.constructSignatureLinks = null;

      this.indexSignatureLinks = null;

      this.arrayType = null;

      this.hasGenericSignature = !1;

      this.hasGenericMember = !1;

      this.knownBaseTypeCount = 0;

      this._hasBaseTypeConflict = !1;

      this.invalidatedSpecializations = !1;

      this.associatedContainerTypeSymbol = null;

      this.constructorMethod = null;

      this.hasDefaultConstructor = !1;
    }
    __extends(e, c);

    e.prototype.getKnownBaseTypeCount = function() {
      return this.knownBaseTypeCount;
    };

    e.prototype.resetKnownBaseTypeCount = function() {
      this.knownBaseTypeCount = 0;
    };

    e.prototype.incrementKnownBaseCount = function() {
      this.knownBaseTypeCount++;
    };

    e.prototype.setHasBaseTypeConflict = function() {
      this._hasBaseTypeConflict = !0;
    };

    e.prototype.hasBaseTypeConflict = function() {
      return this._hasBaseTypeConflict;
    };

    e.prototype.setUnresolved = function() {
      c.prototype.setUnresolved.call(this);
      var a = this.getKnownSpecializations();
      for (var b = 0; b < a.length; b++) {
        a[b].setUnresolved();
      }
    };

    e.prototype.isType = function() {
      return !0;
    };

    e.prototype.isClass = function() {
      return this.getKind() == 8 || this.constructorMethod != null;
    };

    e.prototype.hasMembers = function() {
      var a = this.memberLinks && this.memberLinks.length != 0;
      if (a) {
        return !0;
      }
      var b = this.getExtendedTypes();
      for (var c = 0; c < b.length; c++)
        if (b[c].hasMembers()) {
          return !0;
        }
      return !1;
    };

    e.prototype.isFunction = function() {
      return !1;
    };

    e.prototype.isConstructor = function() {
      return !1;
    };

    e.prototype.isTypeParameter = function() {
      return !1;
    };

    e.prototype.isTypeVariable = function() {
      return !1;
    };

    e.prototype.isError = function() {
      return !1;
    };

    e.prototype.setHasGenericSignature = function() {
      this.hasGenericSignature = !0;
    };

    e.prototype.getHasGenericSignature = function() {
      return this.hasGenericSignature;
    };

    e.prototype.setHasGenericMember = function() {
      this.hasGenericMember = !0;
    };

    e.prototype.getHasGenericMember = function() {
      return this.hasGenericMember;
    };

    e.prototype.setAssociatedContainerType = function(a) {
      this.associatedContainerTypeSymbol = a;
    };

    e.prototype.getAssociatedContainerType = function() {
      return this.associatedContainerTypeSymbol;
    };

    e.prototype.getType = function() {
      return this;
    };

    e.prototype.getArrayType = function() {
      return this.arrayType;
    };

    e.prototype.getElementType = function() {
      var a = this.findOutgoingLinks(function(a) {
        return a.kind === 4;
      });
      return a.length ? a[0].end : null;
    };

    e.prototype.setArrayType = function(a) {
      this.arrayType = a;

      a.addOutgoingLink(this, 4);
    };

    e.prototype.addContainedByLink = function(b) {
      if (!this.containedByLinks) {
        this.containedByLinks = [];
      }

      if (!this.containedMemberCache) {
        this.containedMemberCache = new a.BlockIntrinsics;
      }

      this.containedByLinks[this.containedByLinks.length] = b;

      this.containedMemberCache[b.start.getName()] = b.start;
    };

    e.prototype.findContainedMember = function(b) {
      if (!this.containedByLinks) {
        this.containedByLinks = this.findIncomingLinks(function(a) {
          return a.kind === 10;
        });

        this.containedMemberCache = new a.BlockIntrinsics;
        for (var c = 0; c < this.containedByLinks.length; c++) {
          this.containedMemberCache[this.containedByLinks[c].start.getName()] = this.containedByLinks[c].start;
        }
      }
      return this.containedMemberCache[b];
    };

    e.prototype.addMember = function(b, c, d) {
      var e = this.addOutgoingLink(b, c);
      if (!d) {
        b.setContainer(this);
      }

      if (!this.memberLinks) {
        this.memberLinks = [];
      }

      if (!this.memberCache || !this.memberNameCache) {
        this.populateMemberCache();
      }

      if (b.isType()) {
        if (b.isTypeParameter()) {
          if (!this.typeParameterLinks) {
            this.typeParameterLinks = [];
          }
          if (!this.memberTypeParameterNameCache) {
            this.memberTypeParameterNameCache = new a.BlockIntrinsics;
          }
          this.typeParameterLinks[this.typeParameterLinks.length] = e;
          this.memberTypeParameterNameCache[b.getName()] = b;
        } else {
          if (!this.memberTypeNameCache) {
            this.memberTypeNameCache = new a.BlockIntrinsics;
          }
          this.memberLinks[this.memberLinks.length] = e;
          this.memberTypeNameCache[b.getName()] = b;
          this.memberCache[this.memberCache.length] = b;
        }
      } else {
        this.memberLinks[this.memberLinks.length] = e;
        this.memberCache[this.memberCache.length] = b;
        if (!this.memberNameCache) {
          this.populateMemberCache();
        }
        this.memberNameCache[b.getName()] = b;
      }
    };

    e.prototype.removeMember = function(a) {
      var b;

      var c;

      var d = a.isType() && a.isTypeParameter() ? this.typeParameterLinks : this.memberLinks;
      if (d)
        for (var e = 0; e < d.length; e++)
          if (a === d[e].end) {
            b = d[e];

            c = b.end;

            c.unsetContainer();

            this.removeOutgoingLink(b);
            break;
          }
      this.invalidate();
    };

    e.prototype.getMembers = function() {
      if (this.memberCache) {
        return this.memberCache;
      }
      var a = [];
      if (this.memberLinks)
        for (var b = 0; b < this.memberLinks.length; b++) {
          a[a.length] = this.memberLinks[b].end;
        }
      a.length && (this.memberCache = a);

      return a;
    };

    e.prototype.setHasDefaultConstructor = function(a) {
      if (typeof a == "undefined") {
        a = !0;
      }

      this.hasDefaultConstructor = a;
    };

    e.prototype.getHasDefaultConstructor = function() {
      return this.hasDefaultConstructor;
    };

    e.prototype.getConstructorMethod = function() {
      return this.constructorMethod;
    };

    e.prototype.setConstructorMethod = function(a) {
      this.constructorMethod = a;
    };

    e.prototype.getTypeParameters = function() {
      var a = [];
      if (this.typeParameterLinks)
        for (var b = 0; b < this.typeParameterLinks.length; b++) {
          a[a.length] = this.typeParameterLinks[b].end;
        }
      return a;
    };

    e.prototype.isGeneric = function() {
      return this.typeParameterLinks && this.typeParameterLinks.length != 0 || this.hasGenericSignature || this.hasGenericMember ||
        this.typeArguments && this.typeArguments.length;
    };

    e.prototype.isFixed = function() {
      if (!this.isGeneric()) {
        return !0;
      }
      if (this.typeParameterLinks && this.typeArguments) {
        if (!this.typeArguments.length || this.typeArguments.length < this.typeParameterLinks.length) {
          return !1;
        }
        for (var a = 0; a < this.typeArguments.length; a++)
          if (!this.typeArguments[a].isFixed()) {
            return !1;
          }
        return !0;
      }
      return !1;
    };

    e.prototype.addSpecialization = function(b, c) {
      if (!c || !c.length) return;
      if (!this.specializedTypeCache) {
        this.specializedTypeCache = new a.BlockIntrinsics;
      }

      if (!this.specializationLinks) {
        this.specializationLinks = [];
      }

      this.specializationLinks[this.specializationLinks.length] = this.addOutgoingLink(b, 21);

      this.specializedTypeCache[y(c)] = b;
    };

    e.prototype.getSpecialization = function(b) {
      if (!b || !b.length) {
        return null;
      }
      if (!this.specializedTypeCache) {
        this.specializedTypeCache = new a.BlockIntrinsics;
        return null;
      }
      var c = this.specializedTypeCache[y(b)];
      return c ? c : null;
    };

    e.prototype.getKnownSpecializations = function() {
      var a = [];
      if (this.specializedTypeCache)
        for (var b in this.specializedTypeCache) {
          if (this.specializedTypeCache[b]) {
            a[a.length] = this.specializedTypeCache[b];
          }
        }
      return a;
    };

    e.prototype.invalidateSpecializations = function() {
      if (this.invalidatedSpecializations) return;
      var a = this.getKnownSpecializations();
      for (var b = 0; b < a.length; b++) {
        a[b].invalidate();
      }
      if (this.specializationLinks && this.specializationLinks.length)
        for (var b = 0; b < this.specializationLinks.length; b++) {
          this.removeOutgoingLink(this.specializationLinks[b]);
        }
      this.specializationLinks = null;

      this.specializedTypeCache = null;

      this.invalidatedSpecializations = !0;
    };

    e.prototype.removeSpecialization = function(a) {
      if (this.specializationLinks && this.specializationLinks.length)
        for (var b = 0; b < this.specializationLinks.length; b++)
          if (this.specializationLinks[b].end === a) {
            this.removeOutgoingLink(this.specializationLinks[b]);
            break;
          }
      if (this.specializedTypeCache)
        for (var c in this.specializedTypeCache) {
          if (this.specializedTypeCache[c] === a) {
            this.specializedTypeCache[c] = undefined;
          }
        }
    };

    e.prototype.getTypeArguments = function() {
      return this.typeArguments;
    };

    e.prototype.setTypeArguments = function(a) {
      this.typeArguments = a;
    };

    e.prototype.addCallSignature = function(a) {
      if (!this.callSignatureLinks) {
        this.callSignatureLinks = [];
      }
      var b = this.addOutgoingLink(a, 15);
      this.callSignatureLinks[this.callSignatureLinks.length] = b;

      if (a.isGeneric()) {
        this.hasGenericSignature = !0;
      }
    };

    e.prototype.addCallSignatures = function(a) {
      if (!this.callSignatureLinks) {
        this.callSignatureLinks = [];
      }
      for (var b = 0; b < a.length; b++) {
        this.addCallSignature(a[b]);
      }
    };

    e.prototype.addConstructSignature = function(a) {
      if (!this.constructSignatureLinks) {
        this.constructSignatureLinks = [];
      }
      var b = this.addOutgoingLink(a, 16);
      this.constructSignatureLinks[this.constructSignatureLinks.length] = b;

      if (a.isGeneric()) {
        this.hasGenericSignature = !0;
      }
    };

    e.prototype.addConstructSignatures = function(a) {
      if (!this.constructSignatureLinks) {
        this.constructSignatureLinks = [];
      }
      for (var b = 0; b < a.length; b++) {
        this.addConstructSignature(a[b]);
      }
    };

    e.prototype.addIndexSignature = function(a) {
      if (!this.indexSignatureLinks) {
        this.indexSignatureLinks = [];
      }
      var b = this.addOutgoingLink(a, 17);
      this.indexSignatureLinks[this.indexSignatureLinks.length] = b;

      if (a.isGeneric()) {
        this.hasGenericSignature = !0;
      }
    };

    e.prototype.addIndexSignatures = function(a) {
      if (!this.indexSignatureLinks) {
        this.indexSignatureLinks = [];
      }
      for (var b = 0; b < a.length; b++) {
        this.addIndexSignature(a[b]);
      }
    };

    e.prototype.hasOwnCallSignatures = function() {
      return !!this.callSignatureLinks;
    };

    e.prototype.getCallSignatures = function(a) {
      if (typeof a == "undefined") {
        a = !0;
      }
      var b = [];
      if (this.callSignatureLinks)
        for (var c = 0; c < this.callSignatureLinks.length; c++) {
          b[b.length] = this.callSignatureLinks[c].end;
        }
      if (a) {
        var d = this.getExtendedTypes();
        for (var c = 0; c < d.length; c++) {
          if (d[c].hasBase(this)) continue;
          b = b.concat(d[c].getCallSignatures());
        }
      }
      return b;
    };

    e.prototype.hasOwnConstructSignatures = function() {
      return !!this.constructSignatureLinks;
    };

    e.prototype.getConstructSignatures = function(a) {
      if (typeof a == "undefined") {
        a = !0;
      }
      var b = [];
      if (this.constructSignatureLinks)
        for (var c = 0; c < this.constructSignatureLinks.length; c++) {
          b[b.length] = this.constructSignatureLinks[c].end;
        }
      if (a && this.getKind() != 33554432) {
        var d = this.getExtendedTypes();
        for (var c = 0; c < d.length; c++) {
          if (d[c].hasBase(this)) continue;
          b = b.concat(d[c].getConstructSignatures());
        }
      }
      return b;
    };

    e.prototype.hasOwnIndexSignatures = function() {
      return !!this.indexSignatureLinks;
    };

    e.prototype.getIndexSignatures = function(a) {
      if (typeof a == "undefined") {
        a = !0;
      }
      var b = [];
      if (this.indexSignatureLinks)
        for (var c = 0; c < this.indexSignatureLinks.length; c++) {
          b[b.length] = this.indexSignatureLinks[c].end;
        }
      if (a) {
        var d = this.getExtendedTypes();
        for (var c = 0; c < d.length; c++) {
          if (d[c].hasBase(this)) continue;
          b = b.concat(d[c].getIndexSignatures());
        }
      }
      return b;
    };

    e.prototype.removeCallSignature = function(a, b) {
      if (typeof b == "undefined") {
        b = !0;
      }
      var c;
      if (this.callSignatureLinks)
        for (var d = 0; d < this.callSignatureLinks.length; d++)
          if (a === this.callSignatureLinks[d].end) {
            c = this.callSignatureLinks[d];

            this.removeOutgoingLink(c);
            break;
          }
      if (b) {
        this.invalidate();
      }
    };

    e.prototype.recomputeCallSignatures = function() {
      this.callSignatureLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 15;
      });
    };

    e.prototype.removeConstructSignature = function(a, b) {
      if (typeof b == "undefined") {
        b = !0;
      }
      var c;
      if (this.constructSignatureLinks)
        for (var d = 0; d < this.constructSignatureLinks.length; d++)
          if (a === this.constructSignatureLinks[d].end) {
            c = this.constructSignatureLinks[d];

            this.removeOutgoingLink(c);
            break;
          }
      if (b) {
        this.invalidate();
      }
    };

    e.prototype.recomputeConstructSignatures = function() {
      this.constructSignatureLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 16;
      });
    };

    e.prototype.removeIndexSignature = function(a, b) {
      if (typeof b == "undefined") {
        b = !0;
      }
      var c;
      if (this.indexSignatureLinks)
        for (var d = 0; d < this.indexSignatureLinks.length; d++)
          if (a === this.indexSignatureLinks[d].end) {
            c = this.indexSignatureLinks[d];

            this.removeOutgoingLink(c);
            break;
          }
      if (b) {
        this.invalidate();
      }
    };

    e.prototype.recomputeIndexSignatures = function() {
      this.indexSignatureLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 17;
      });
    };

    e.prototype.addImplementedType = function(a) {
      if (!this.implementedTypeLinks) {
        this.implementedTypeLinks = [];
      }
      var b = this.addOutgoingLink(a, 12);
      this.implementedTypeLinks[this.implementedTypeLinks.length] = b;
    };

    e.prototype.getImplementedTypes = function() {
      var a = [];
      if (this.implementedTypeLinks)
        for (var b = 0; b < this.implementedTypeLinks.length; b++) {
          a[a.length] = this.implementedTypeLinks[b].end;
        }
      return a;
    };

    e.prototype.removeImplementedType = function(a) {
      var b;
      if (this.implementedTypeLinks)
        for (var c = 0; c < this.implementedTypeLinks.length; c++)
          if (a === this.implementedTypeLinks[c].end) {
            b = this.implementedTypeLinks[c];

            this.removeOutgoingLink(b);
            break;
          }
      this.invalidate();
    };

    e.prototype.addExtendedType = function(a) {
      if (!this.extendedTypeLinks) {
        this.extendedTypeLinks = [];
      }
      var b = this.addOutgoingLink(a, 11);
      this.extendedTypeLinks[this.extendedTypeLinks.length] = b;
    };

    e.prototype.getExtendedTypes = function() {
      var a = [];
      if (this.extendedTypeLinks)
        for (var b = 0; b < this.extendedTypeLinks.length; b++) {
          a[a.length] = this.extendedTypeLinks[b].end;
        }
      return a;
    };

    e.prototype.hasBase = function(a, b) {
      if (typeof b == "undefined") {
        b = null;
      }
      if (this === a) {
        return !0;
      }
      if (!b || this !== b && this.getRootSymbol() !== b) {
        if (!b) {
          b = this;
        }
        var c = this.getExtendedTypes();
        for (var d = 0; d < c.length; d++)
          if (c[d].hasBase(a, b)) {
            return !0;
          }
        var e = this.getImplementedTypes();
        for (var d = 0; d < e.length; d++)
          if (e[d].hasBase(a, b)) {
            return !0;
          }
        return !1;
      }
      return !0;
    };

    e.prototype.isValidBaseKind = function(a, b) {
      if (a.isError()) {
        return !1;
      }
      var c = this.isClass();
      if (b) {
        if (c) {
          return a.getKind() === 8;
        }
      } else if (!c) {
        return !1;
      }
      return !!(a.getKind() & 152);
    };

    e.prototype.removeExtendedType = function(a) {
      var b;
      if (this.extendedTypeLinks)
        for (var c = 0; c < this.extendedTypeLinks.length; c++)
          if (a === this.extendedTypeLinks[c].end) {
            b = this.extendedTypeLinks[c];

            this.removeOutgoingLink(b);
            break;
          }
      this.invalidate();
    };

    e.prototype.findMember = function(a, b) {
      if (typeof b == "undefined") {
        b = !0;
      }
      var c;
      if (!this.memberNameCache) {
        this.populateMemberCache();
      }

      c = this.memberNameCache[a];
      if (!b) {
        return c;
      }
      if (c) {
        return c;
      }
      if (!c && this.extendedTypeLinks)
        for (var d = 0; d < this.extendedTypeLinks.length; d++) {
          c = this.extendedTypeLinks[d].end.findMember(a);
          if (c) {
            return c;
          }
        }
      return this.findNestedType(a);
    };

    e.prototype.findNestedType = function(a, b) {
      if (typeof b == "undefined") {
        b = 0;
      }
      var c;
      this.memberTypeNameCache || this.populateMemberTypeCache();

      c = this.memberTypeNameCache[a];

      c && b != 0 && (c = (c.getKind() & b) != 0 ? c : null);

      return c;
    };

    e.prototype.populateMemberCache = function() {
      if (!this.memberNameCache || !this.memberCache) {
        this.memberNameCache = new a.BlockIntrinsics;

        this.memberCache = [];
        if (this.memberLinks)
          for (var b = 0; b < this.memberLinks.length; b++) {
            this.memberNameCache[this.memberLinks[b].end.getName()] = this.memberLinks[b].end;
            this.memberCache[this.memberCache.length] = this.memberLinks[b].end;
          }
      }
    };

    e.prototype.populateMemberTypeCache = function() {
      if (!this.memberTypeNameCache) {
        this.memberTypeNameCache = new a.BlockIntrinsics;
        var b = !1;
        if (!this.memberCache) {
          this.memberCache = [];
          this.memberNameCache = new a.BlockIntrinsics;
          b = !0;
        }
        if (this.memberLinks)
          for (var c = 0; c < this.memberLinks.length; c++) {
            if (this.memberLinks[c].end.isType()) {
              this.memberTypeNameCache[this.memberLinks[c].end.getName()] = this.memberLinks[c].end;
              this.memberCache[this.memberCache.length] = this.memberLinks[c].end;
            } else {
              if (b) {
                this.memberNameCache[this.memberLinks[c].end.getName()] = this.memberLinks[c].end;
                this.memberCache[this.memberCache.length] = this.memberLinks[c].end;
              }
            }
          }
      }
    };

    e.prototype.getAllMembers = function(a, b) {
      var c = [];

      var d = 0;

      var e = 0;

      var f = 0;

      var g = 0;
      if (!this.memberCache) {
        this.populateMemberCache();
      }

      if (!this.memberTypeNameCache) {
        this.populateMemberTypeCache();
      }

      if (!this.memberNameCache) {
        this.populateMemberCache();
      }
      for (var d = 0, g = this.memberCache.length; d < g; d++) {
        var h = this.memberCache[d];
        if (h.getKind() & a && (b || !h.hasFlag(2))) {
          c[c.length] = h;
        }
      }
      if (this.extendedTypeLinks)
        for (var d = 0, g = this.extendedTypeLinks.length; d < g; d++) {
          var i = this.extendedTypeLinks[d].end.getAllMembers(a, b);
          for (var e = 0, f = i.length; e < f; e++) {
            var j = i[e];
            if (!this.memberNameCache[j.getName()]) {
              c[c.length] = j;
            }
          }
        }
      return c;
    };

    e.prototype.findTypeParameter = function(b) {
      var c;
      if (!this.memberTypeParameterNameCache) {
        this.memberTypeParameterNameCache = new a.BlockIntrinsics;
        if (this.typeParameterLinks)
          for (var d = 0; d < this.typeParameterLinks.length; d++) {
            this.memberTypeParameterNameCache[this.typeParameterLinks[d].end.getName()] = this.typeParameterLinks[d].end;
          }
      }
      c = this.memberTypeParameterNameCache[b];

      return c;
    };

    e.prototype.cleanTypeParameters = function() {
      if (this.typeParameterLinks)
        for (var a = 0; a < this.typeParameterLinks.length; a++) {
          this.removeOutgoingLink(this.typeParameterLinks[a]);
        }
      this.typeParameterLinks = null;

      this.memberTypeParameterNameCache = null;
    };

    e.prototype.setResolved = function() {
      this.invalidatedSpecializations = !0;

      c.prototype.setResolved.call(this);
    };

    e.prototype.invalidate = function() {
      if (this.constructorMethod) {
        this.constructorMethod.invalidate();
      }

      this.memberNameCache = null;

      this.memberCache = null;

      this.memberTypeNameCache = null;

      this.containedMemberCache = null;

      this.invalidatedSpecializations = !1;

      this.containedByLinks = null;

      this.memberLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 6 || a.kind === 5;
      });

      this.typeParameterLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 18;
      });

      this.callSignatureLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 15;
      });

      this.constructSignatureLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 16;
      });

      this.indexSignatureLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 17;
      });

      this.implementedTypeLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 12;
      });

      this.extendedTypeLinks = this.findOutgoingLinks(function(a) {
        return a.kind === 11;
      });

      this.knownBaseTypeCount = 0;

      c.prototype.invalidate.call(this);
    };

    e.prototype.getNamePartForFullName = function() {
      var a = c.prototype.getNamePartForFullName.call(this);

      var d = this.getTypeArguments();
      if (!d || !d.length) {
        d = this.getTypeParameters();
      }
      var e = b.getTypeParameterString(d, this, !0);
      return a + e;
    };

    e.prototype.getScopedName = function(a, b) {
      return this.getScopedNameEx(a, b).toString();
    };

    e.prototype.isNamedTypeSymbol = function() {
      var a = this.getKind();
      return a === 2 || a === 8 || a === 4 || a === 32 || a === 256 || a === 64 || a === 8192 || (a === 16 || a ===
        8388608) && this.getName() != "" ? !0 : !1;
    };

    e.prototype.toString = function(a) {
      var b = this.getScopedNameEx(null, a).toString();
      return b;
    };

    e.prototype.getScopedNameEx = function(d, e, f, g) {
      if (!this.isNamedTypeSymbol()) {
        return this.getMemberTypeNameEx(!0, d, f);
      }
      var h = new a.MemberNameArray;
      h.prefix = c.prototype.getScopedName.call(this, d, e);
      var i = this.getTypeArguments();
      if (!i || !i.length) {
        i = this.getTypeParameters();
      }
      h.add(b.getTypeParameterStringEx(i, this, g, e));

      return h;
    };

    e.prototype.hasOnlyOverloadCallSignatures = function() {
      var a = this.getMembers();

      var b = this.getCallSignatures();

      var c = this.getConstructSignatures();
      return a.length === 0 && c.length === 0 && b.length > 1;
    };

    e.prototype.getMemberTypeNameEx = function(b, c, e) {
      var f = this.getMembers();

      var g = this.getCallSignatures();

      var h = this.getConstructSignatures();

      var i = this.getIndexSignatures();
      if (f.length > 0 || g.length > 0 || h.length > 0 || i.length > 0) {
        var j = new a.MemberNameArray;

        var k = !b || i.length != 0;

        var l = "; ";
        for (var m = 0; m < f.length; m++) {
          var n = f[m].getNameAndTypeNameEx(c);
          if (n.isArray() && n.delim === l) {
            j.addAll(n.entries);
          } else {
            j.add(n);
          }

          k = !0;
        }
        var o = e && !k && this.hasOnlyOverloadCallSignatures();

        var p = g.length + h.length + i.length;
        if (p != 0 || f.length != 0) {
          var q = !k && p === 1;

          var r;
          g.length > 0 && (r = d.getSignaturesTypeNameEx(g, "", q, !1, c, o), j.addAll(r));

          h.length > 0 && (r = d.getSignaturesTypeNameEx(h, "new", q, !1, c), j.addAll(r));

          i.length > 0 && (r = d.getSignaturesTypeNameEx(i, "", q, !0, c), j.addAll(r));

          k || !o && p > 1 && b ? (j.prefix = "{ ", j.suffix = "}", j.delim = l) : j.entries.length > 1 && (j.delim =
            l);

          return j;
        }
      }
      return a.MemberName.create("{}");
    };

    e.prototype.isExternallyVisible = function(a) {
      var d = c.prototype.isExternallyVisible.call(this, a);
      if (d) {
        var e = this.getTypeArguments();
        if (!e || !e.length) {
          e = this.getTypeParameters();
        }
        if (e)
          for (var f = 0; f < e.length; f++) {
            d = b.getIsExternallyVisible(e[f], this, a);
            if (!d) break;
          }
      }
      return d;
    };

    e.prototype.setType = function(b) {
      a.Debug.assert(!1, "tried to set type of type");
    };

    return e;
  }(b);
  a.PullTypeSymbol = e;
  var f = function(a) {
    function b(b) {
      a.call(this, b, 2);
    }
    __extends(b, a);

    b.prototype.isResolved = function() {
      return !0;
    };

    b.prototype.isStringConstant = function() {
      return !1;
    };

    b.prototype.isFixed = function() {
      return !0;
    };

    b.prototype.invalidate = function() {};

    return b;
  }(e);
  a.PullPrimitiveTypeSymbol = f;
  var g = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);

    b.prototype.isStringConstant = function() {
      return !0;
    };

    return b;
  }(f);
  a.PullStringConstantTypeSymbol = g;
  var h = function(a) {
    function b(b, c, d) {
      if (typeof d == "undefined") {
        d = null;
      }

      a.call(this, "error");

      this.diagnostic = b;

      this.delegateType = c;

      this._data = d;
    }
    __extends(b, a);

    b.prototype.isError = function() {
      return !0;
    };

    b.prototype.getDiagnostic = function() {
      return this.diagnostic;
    };

    b.prototype.getName = function(a, b) {
      return this.delegateType.getName(a, b);
    };

    b.prototype.getDisplayName = function(a, b) {
      return this.delegateType.getDisplayName(a, b);
    };

    b.prototype.toString = function() {
      return this.delegateType.toString();
    };

    b.prototype.isResolved = function() {
      return !1;
    };

    b.prototype.setData = function(a) {
      this._data = a;
    };

    b.prototype.getData = function() {
      return this._data;
    };

    return b;
  }(f);
  a.PullErrorTypeSymbol = h;
  var i = function(a) {
    function b(b) {
      a.call(this, b, 8);
    }
    __extends(b, a);

    return b;
  }(e);
  a.PullClassTypeSymbol = i;
  var j = function(a) {
    function b(b, c) {
      if (typeof c == "undefined") {
        c = 4;
      }

      a.call(this, b, c);

      this.instanceSymbol = null;

      this._exportAssignedValueSymbol = null;

      this._exportAssignedTypeSymbol = null;

      this._exportAssignedContainerSymbol = null;
    }
    __extends(b, a);

    b.prototype.isContainer = function() {
      return !0;
    };

    b.prototype.setInstanceSymbol = function(a) {
      this.instanceSymbol = a;
    };

    b.prototype.getInstanceSymbol = function() {
      return this.instanceSymbol;
    };

    b.prototype.invalidate = function() {
      if (this.instanceSymbol) {
        this.instanceSymbol.invalidate();
      }

      a.prototype.invalidate.call(this);
    };

    b.prototype.setExportAssignedValueSymbol = function(a) {
      this._exportAssignedValueSymbol = a;
    };

    b.prototype.getExportAssignedValueSymbol = function() {
      return this._exportAssignedValueSymbol;
    };

    b.prototype.setExportAssignedTypeSymbol = function(a) {
      this._exportAssignedTypeSymbol = a;
    };

    b.prototype.getExportAssignedTypeSymbol = function() {
      return this._exportAssignedTypeSymbol;
    };

    b.prototype.setExportAssignedContainerSymbol = function(a) {
      this._exportAssignedContainerSymbol = a;
    };

    b.prototype.getExportAssignedContainerSymbol = function() {
      return this._exportAssignedContainerSymbol;
    };

    b.prototype.resetExportAssignedSymbols = function() {
      this._exportAssignedContainerSymbol = null;

      this._exportAssignedTypeSymbol = null;

      this._exportAssignedValueSymbol = null;
    };

    b.usedAsSymbol = function(a, c) {
      if (!a || !a.isContainer()) {
        return !1;
      }
      if (a.getType() == c) {
        return !0;
      }
      var d = a;

      var e = d.getExportAssignedValueSymbol();

      var f = d.getExportAssignedTypeSymbol();

      var g = d.getExportAssignedContainerSymbol();
      return e || f || g ? e == c || f == c || g == c || b.usedAsSymbol(g, c) : !1;
    };

    return b;
  }(e);
  a.PullContainerTypeSymbol = j;
  var k = function(b) {
    function c(a) {
      b.call(this, a, 256);

      this.typeAliasLink = null;

      this.isUsedAsValue = !1;

      this.typeUsedExternally = !1;

      this.retrievingExportAssignment = !1;
    }
    __extends(c, b);

    c.prototype.isAlias = function() {
      return !0;
    };

    c.prototype.isContainer = function() {
      return !0;
    };

    c.prototype.setAliasedType = function(b) {
      a.Debug.assert(!b.isError(), "Attempted to alias an error");

      if (this.typeAliasLink) {
        this.removeOutgoingLink(this.typeAliasLink);
      }

      this.typeAliasLink = this.addOutgoingLink(b, 8);
    };

    c.prototype.getExportAssignedValueSymbol = function() {
      if (!this.typeAliasLink) {
        return null;
      }
      if (this.retrievingExportAssignment) {
        return null;
      }
      if (this.typeAliasLink.end.isContainer()) {
        this.retrievingExportAssignment = !0;
        var a = this.typeAliasLink.end.getExportAssignedValueSymbol();
        this.retrievingExportAssignment = !1;

        return a;
      }
      return null;
    };

    c.prototype.getExportAssignedTypeSymbol = function() {
      if (!this.typeAliasLink) {
        return null;
      }
      if (this.retrievingExportAssignment) {
        return null;
      }
      if (this.typeAliasLink.end.isContainer()) {
        this.retrievingExportAssignment = !0;
        var a = this.typeAliasLink.end.getExportAssignedTypeSymbol();
        this.retrievingExportAssignment = !1;

        return a;
      }
      return null;
    };

    c.prototype.getExportAssignedContainerSymbol = function() {
      if (!this.typeAliasLink) {
        return null;
      }
      if (this.retrievingExportAssignment) {
        return null;
      }
      if (this.typeAliasLink.end.isContainer()) {
        this.retrievingExportAssignment = !0;
        var a = this.typeAliasLink.end.getExportAssignedContainerSymbol();
        this.retrievingExportAssignment = !1;

        return a;
      }
      return null;
    };

    c.prototype.getType = function() {
      return this.typeAliasLink ? this.typeAliasLink.end : null;
    };

    c.prototype.setType = function(a) {
      this.setAliasedType(a);
    };

    c.prototype.setIsUsedAsValue = function() {
      this.isUsedAsValue = !0;
    };

    c.prototype.getIsUsedAsValue = function() {
      return this.isUsedAsValue;
    };

    c.prototype.setIsTypeUsedExternally = function() {
      this.typeUsedExternally = !0;
    };

    c.prototype.getTypeUsedExternally = function() {
      return this.typeUsedExternally;
    };

    c.prototype.getMembers = function() {
      return this.typeAliasLink ? this.typeAliasLink.end.getMembers() : [];
    };

    c.prototype.getCallSignatures = function() {
      return this.typeAliasLink ? this.typeAliasLink.end.getCallSignatures() : [];
    };

    c.prototype.getConstructSignatures = function() {
      return this.typeAliasLink ? this.typeAliasLink.end.getConstructSignatures() : [];
    };

    c.prototype.getIndexSignatures = function() {
      return this.typeAliasLink ? this.typeAliasLink.end.getIndexSignatures() : [];
    };

    c.prototype.findMember = function(a) {
      return this.typeAliasLink ? this.typeAliasLink.end.findMember(a) : null;
    };

    c.prototype.findNestedType = function(a) {
      return this.typeAliasLink ? this.typeAliasLink.end.findNestedType(a) : null;
    };

    c.prototype.getAllMembers = function(a, b) {
      return this.typeAliasLink ? this.typeAliasLink.end.getAllMembers(a, b) : [];
    };

    c.prototype.invalidate = function() {
      this.isUsedAsValue = !1;

      b.prototype.invalidate.call(this);
    };

    return c;
  }(e);
  a.PullTypeAliasSymbol = k;
  var l = function(a) {
    function b() {
      a.apply(this, arguments);
    }
    __extends(b, a);

    b.prototype.isDefinition = function() {
      return !0;
    };

    return b;
  }(d);
  a.PullDefinitionSignatureSymbol = l;
  var m = function(a) {
    function b() {
      a.call(this, "", 16777216);

      this.definitionSignature = null;
    }
    __extends(b, a);

    b.prototype.isFunction = function() {
      return !0;
    };

    b.prototype.invalidate = function() {
      var b = this.getCallSignatures();
      if (b.length)
        for (var c = 0; c < b.length; c++) {
          b[c].invalidate();
        }
      this.definitionSignature = null;

      a.prototype.invalidate.call(this);
    };

    b.prototype.addSignature = function(a) {
      this.addCallSignature(a);

      if (a.isDefinition()) {
        this.definitionSignature = a;
      }
    };

    b.prototype.getDefinitionSignature = function() {
      return this.definitionSignature;
    };

    return b;
  }(e);
  a.PullFunctionTypeSymbol = m;
  var n = function(a) {
    function b() {
      a.call(this, "", 33554432);

      this.definitionSignature = null;
    }
    __extends(b, a);

    b.prototype.isFunction = function() {
      return !0;
    };

    b.prototype.isConstructor = function() {
      return !0;
    };

    b.prototype.invalidate = function() {
      this.definitionSignature = null;

      a.prototype.invalidate.call(this);
    };

    b.prototype.addSignature = function(a) {
      this.addConstructSignature(a);

      if (a.isDefinition()) {
        this.definitionSignature = a;
      }
    };

    b.prototype.addTypeParameter = function(a, b) {
      this.addMember(a, 18, b);
      var c = this.getConstructSignatures();
      for (var d = 0; d < c.length; d++) {
        c[d].addTypeParameter(a);
      }
    };

    b.prototype.getDefinitionSignature = function() {
      return this.definitionSignature;
    };

    return b;
  }(e);
  a.PullConstructorTypeSymbol = n;
  var o = function(a) {
    function c(b, c) {
      a.call(this, b, 8192);

      this._isFunctionTypeParameter = c;

      this.constraintLink = null;
    }
    __extends(c, a);

    c.prototype.isTypeParameter = function() {
      return !0;
    };

    c.prototype.isFunctionTypeParameter = function() {
      return this._isFunctionTypeParameter;
    };

    c.prototype.isFixed = function() {
      return !1;
    };

    c.prototype.setConstraint = function(a) {
      if (this.constraintLink) {
        this.removeOutgoingLink(this.constraintLink);
      }

      this.constraintLink = this.addOutgoingLink(a, 22);
    };

    c.prototype.getConstraint = function() {
      return this.constraintLink ? this.constraintLink.end : null;
    };

    c.prototype.isGeneric = function() {
      return !0;
    };

    c.prototype.fullName = function(a) {
      var b = this.getDisplayName(a);

      var c = this.getContainer();
      if (c) {
        var d = c.fullName(a);
        b = b + " in " + d;
      }
      return b;
    };

    c.prototype.getName = function(b, c) {
      var d = a.prototype.getName.call(this, b);
      return this.isPrinting ? d : (this.isPrinting = !0, c && this.constraintLink && (d += " extends " + this.constraintLink
        .end.toString()), this.isPrinting = !1, d);
    };

    c.prototype.getDisplayName = function(b, c) {
      var d = a.prototype.getDisplayName.call(this, b, c);
      return this.isPrinting ? d : (this.isPrinting = !0, c && this.constraintLink && (d += " extends " + this.constraintLink
        .end.toString()), this.isPrinting = !1, d);
    };

    c.prototype.isExternallyVisible = function(a) {
      var c = this.getConstraint();
      return c ? b.getIsExternallyVisible(c, this, a) : !0;
    };

    return c;
  }(e);
  a.PullTypeParameterSymbol = o;
  var p = function(b) {
    function c(c, d) {
      b.call(this, c, d);

      this.tyvarID = a.globalTyvarID++;
    }
    __extends(c, b);

    c.prototype.isTypeParameter = function() {
      return !0;
    };

    c.prototype.isTypeVariable = function() {
      return !0;
    };

    return c;
  }(o);
  a.PullTypeVariableSymbol = p;
  var q = function(a) {
    function b(b) {
      a.call(this, b, 4096);

      this.getterSymbolLink = null;

      this.setterSymbolLink = null;
    }
    __extends(b, a);

    b.prototype.isAccessor = function() {
      return !0;
    };

    b.prototype.setSetter = function(a) {
      this.setterSymbolLink = this.addOutgoingLink(a, 25);
    };

    b.prototype.getSetter = function() {
      var a = null;
      this.setterSymbolLink && (a = this.setterSymbolLink.end);

      return a;
    };

    b.prototype.removeSetter = function() {
      if (this.setterSymbolLink) {
        this.removeOutgoingLink(this.setterSymbolLink);
      }
    };

    b.prototype.setGetter = function(a) {
      this.getterSymbolLink = this.addOutgoingLink(a, 24);
    };

    b.prototype.getGetter = function() {
      var a = null;
      this.getterSymbolLink && (a = this.getterSymbolLink.end);

      return a;
    };

    b.prototype.removeGetter = function() {
      if (this.getterSymbolLink) {
        this.removeOutgoingLink(this.getterSymbolLink);
      }
    };

    b.prototype.invalidate = function() {
      if (this.getterSymbolLink) {
        this.getterSymbolLink.end.invalidate();
      }

      if (this.setterSymbolLink) {
        this.setterSymbolLink.end.invalidate();
      }

      a.prototype.invalidate.call(this);
    };

    return b;
  }(b);
  a.PullAccessorSymbol = q;
  var r = function(b) {
    function c() {
      b.call(this, "Array", 128);

      this.elementType = null;
    }
    __extends(c, b);

    c.prototype.isArray = function() {
      return !0;
    };

    c.prototype.getElementType = function() {
      return this.elementType;
    };

    c.prototype.isGeneric = function() {
      return !0;
    };

    c.prototype.setElementType = function(a) {
      this.elementType = a;
    };

    c.prototype.getScopedNameEx = function(b, c, d, e) {
      var f = this.elementType ? this.elementType.isArray() || this.elementType.isNamedTypeSymbol() ? this.elementType
        .getScopedNameEx(b, !1, d, e) : this.elementType.getMemberTypeNameEx(!1, b, d) : a.MemberName.create("any");
      return a.MemberName.create(f, "", "[]");
    };

    c.prototype.getMemberTypeNameEx = function(b, c, d) {
      var e = this.elementType ? this.elementType.getMemberTypeNameEx(!1, c, d) : a.MemberName.create("any");
      return a.MemberName.create(e, "", "[]");
    };

    return c;
  }(e);
  a.PullArrayTypeSymbol = r;

  a.specializeToArrayType = s;

  a.typeWrapsTypeParameter = t;

  a.getRootType = u;

  a.nSpecializationsCreated = 0;

  a.nSpecializedSignaturesCreated = 0;

  a.shouldSpecializeTypeParameterForTypeParameter = v;

  a.specializeType = w;

  a.specializeSignature = x;

  a.getIDForTypeSubstitutions = y;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(b, c) {
      this.semanticInfoChain = b;

      this.scriptName = c;

      this.parentChain = [];

      this.declPath = [];

      this.reBindingAfterChange = !1;

      this.startingDeclForRebind = a.pullDeclID;

      this.semanticInfo = this.semanticInfoChain.getUnit(this.scriptName);
    }
    b.prototype.getParent = function(a) {
      typeof a == "undefined" && (a = 0);

      return this.parentChain ? this.parentChain[this.parentChain.length - 1 - a] : null;
    };

    b.prototype.getDeclPath = function() {
      return this.declPath;
    };

    b.prototype.pushParent = function(a) {
      if (a) {
        this.parentChain[this.parentChain.length] = a;
        this.declPath[this.declPath.length] = a.getName();
      }
    };

    b.prototype.popParent = function() {
      if (this.parentChain.length) {
        this.parentChain.length--;
        this.declPath.length--;
      }
    };

    return b;
  }();
  a.PullSymbolBindingContext = b;

  a.time_in_findSymbol = 0;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {
      this.typeParameter = null;

      this.isFixed = !1;

      this.inferenceCandidates = [];
    }
    a.prototype.addCandidate = function(a) {
      if (!this.isFixed) {
        this.inferenceCandidates[this.inferenceCandidates.length] = a;
      }
    };

    return a;
  }();
  a.CandidateInferenceInfo = b;
  var c = function() {
    function c() {
      this.inferenceCache = {};

      this.candidateCache = {};
    }
    c.prototype.alreadyRelatingTypes = function(a, b) {
      var c = a.getSymbolID().toString() + "#" + b.getSymbolID().toString();
      return this.inferenceCache[c] ? !0 : (this.inferenceCache[c] = !0, !1);
    };

    c.prototype.resetRelationshipCache = function() {
      this.inferenceCache = {};
    };

    c.prototype.addInferenceRoot = function(a) {
      var c = this.candidateCache[a.getSymbolID().toString()];
      if (!c) {
        c = new b;
        c.typeParameter = a;
        this.candidateCache[a.getSymbolID().toString()] = c;
      }
    };

    c.prototype.getInferenceInfo = function(a) {
      return this.candidateCache[a.getSymbolID().toString()];
    };

    c.prototype.addCandidateForInference = function(a, b, c) {
      var d = this.getInferenceInfo(a);
      if (d) {
        if (b) {
          d.addCandidate(b);
        }
        if (!d.isFixed) {
          d.isFixed = c;
        }
      }
    };

    c.prototype.getInferenceCandidates = function() {
      var a = [];

      var b;

      var c;
      for (var d in this.candidateCache) {
        b = this.candidateCache[d];
        for (var e = 0; e < b.inferenceCandidates.length; e++) {
          c = {};
          c[b.typeParameter.getSymbolID().toString()] = b.inferenceCandidates[e];
          a[a.length] = c;
        }
      }
      return a;
    };

    c.prototype.inferArgumentTypes = function(b, c) {
      var d = null;

      var e;

      var f;

      var g = [];

      var h = !1;
      for (var i in this.candidateCache) {
        d = this.candidateCache[i];
        if (!d.inferenceCandidates.length) {
          g[g.length] = {
            param: d.typeParameter,
            type: b.semanticInfoChain.anyTypeSymbol
          };
          continue;
        }
        e = {
          getLength: function() {
            return d.inferenceCandidates.length;
          },
          setTypeAtIndex: function(a, b) {},
          getTypeAtIndex: function(a) {
            return d.inferenceCandidates[a].getType();
          }
        };

        f = b.widenType(b.findBestCommonType(d.inferenceCandidates[0], null, e, c, new a.TypeComparisonInfo));
        if (!f) {
          h = !0;
        } else
          for (var j = 0; j < g.length; j++) {
            if (g[j].type == d.typeParameter) {
              g[j].type = f;
            }
          }
        g[g.length] = {
          param: d.typeParameter,
          type: f
        };
      }
      return {
        results: g,
        unfit: h
      };
    };

    return c;
  }();
  a.ArgumentInferenceContext = c;
  var d = function() {
    function a(a, b, c) {
      this.contextualType = a;

      this.provisional = b;

      this.substitutions = c;

      this.provisionallyTypedSymbols = [];

      this.provisionalDiagnostic = [];
    }
    a.prototype.recordProvisionallyTypedSymbol = function(a) {
      this.provisionallyTypedSymbols[this.provisionallyTypedSymbols.length] = a;
    };

    a.prototype.invalidateProvisionallyTypedSymbols = function() {
      for (var a = 0; a < this.provisionallyTypedSymbols.length; a++) {
        this.provisionallyTypedSymbols[a].invalidate();
      }
    };

    a.prototype.postDiagnostic = function(a) {
      this.provisionalDiagnostic[this.provisionalDiagnostic.length] = a;
    };

    a.prototype.hadProvisionalErrors = function() {
      return this.provisionalDiagnostic.length > 0;
    };

    return a;
  }();
  a.PullContextualTypeContext = d;
  var e = function() {
    function b() {
      this.contextStack = [];

      this.typeSpecializationStack = [];

      this.genericASTResolutionStack = [];

      this.resolvingTypeReference = !1;

      this.resolvingNamespaceMemberAccess = !1;

      this.resolveAggressively = !1;

      this.canUseTypeSymbol = !1;

      this.specializingToAny = !1;

      this.specializingToObject = !1;

      this.isResolvingClassExtendedType = !1;

      this.isSpecializingSignatureAtCallSite = !1;

      this.isSpecializingConstructorMethod = !1;

      this.isComparingSpecializedSignatures = !1;

      this.inSpecialization = !1;

      this.suppressErrors = !1;

      this.inBaseTypeResolution = !1;
    }
    b.prototype.pushContextualType = function(a, b, c) {
      this.contextStack.push(new d(a, b, c));
    };

    b.prototype.popContextualType = function() {
      var a = this.contextStack.pop();
      a.invalidateProvisionallyTypedSymbols();

      return a;
    };

    b.prototype.findSubstitution = function(a) {
      var b = null;
      if (this.contextStack.length)
        for (var c = this.contextStack.length - 1; c >= 0; c--)
          if (this.contextStack[c].substitutions) {
            b = this.contextStack[c].substitutions[a.getSymbolID().toString()];
            if (b) break;
          }
      return b;
    };

    b.prototype.getContextualType = function() {
      var a = this.contextStack.length ? this.contextStack[this.contextStack.length - 1] : null;
      if (a) {
        var b = a.contextualType;
        if (!b) {
          return null;
        }
        if (b.isTypeParameter() && b.getConstraint()) {
          b = b.getConstraint();
        }
        var c = this.findSubstitution(b);
        return c ? c : b;
      }
      return null;
    };

    b.prototype.inProvisionalResolution = function() {
      return this.contextStack.length ? this.contextStack[this.contextStack.length - 1].provisional : !1;
    };

    b.prototype.isInBaseTypeResolution = function() {
      return this.inBaseTypeResolution;
    };

    b.prototype.startBaseTypeResolution = function() {
      var a = this.inBaseTypeResolution;
      this.inBaseTypeResolution = !0;

      return a;
    };

    b.prototype.doneBaseTypeResolution = function(a) {
      this.inBaseTypeResolution = a;
    };

    b.prototype.setTypeInContext = function(a, b) {
      var c = this.findSubstitution(b);
      a.setType(c ? c : b);

      if (this.contextStack.length && this.inProvisionalResolution()) {
        this.contextStack[this.contextStack.length - 1].recordProvisionallyTypedSymbol(a);
      }
    };

    b.prototype.pushTypeSpecializationCache = function(a) {
      this.typeSpecializationStack[this.typeSpecializationStack.length] = a;
    };

    b.prototype.popTypeSpecializationCache = function() {
      if (this.typeSpecializationStack.length) {
        this.typeSpecializationStack.length--;
      }
    };

    b.prototype.findSpecializationForType = function(a) {
      var b = null;
      for (var c = this.typeSpecializationStack.length - 1; c >= 0; c--) {
        b = this.typeSpecializationStack[c][a.getSymbolID().toString()];
        if (b) {
          return b;
        }
      }
      return a;
    };

    b.prototype.postError = function(b, c, d, e, f, g, h) {
      if (typeof f == "undefined") {
        f = null;
      }

      if (typeof g == "undefined") {
        g = null;
      }

      if (typeof h == "undefined") {
        h = !1;
      }
      var i = new a.SemanticDiagnostic(b, c, d, e, f);
      this.postDiagnostic(i, g, h);

      return i;
    };

    b.prototype.postDiagnostic = function(a, b, c) {
      if (this.inProvisionalResolution()) {
        this.contextStack[this.contextStack.length - 1].postDiagnostic(a);
      } else {
        if (!this.suppressErrors && b && c) {
          b.addDiagnostic(a);
        }
      }
    };

    b.prototype.startResolvingTypeArguments = function(a) {
      this.genericASTResolutionStack[this.genericASTResolutionStack.length] = a;
    };

    b.prototype.isResolvingTypeArguments = function(a) {
      for (var b = 0; b < this.genericASTResolutionStack.length; b++)
        if (this.genericASTResolutionStack[b].getID() === a.getID()) {
          return !0;
        }
      return !1;
    };

    b.prototype.doneResolvingTypeArguments = function() {
      this.genericASTResolutionStack.length--;
    };

    return b;
  }();
  a.PullTypeResolutionContext = e;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a, b, c) {
      this.symbol = a;

      this.symbolAlias = b;

      this.diagnostics = c;
    }
    b.create = function(a, c) {
      return new b(a, null, c);
    };

    b.empty = function() {
      return b._empty;
    };

    b.fromSymbol = function(a) {
      return new b(a, null, null);
    };

    b.fromAlias = function(a, c) {
      return new b(a, c, null);
    };

    b.prototype.addDiagnostic = function(c) {
      a.Debug.assert(this !== b._empty);

      if (this.diagnostics === null) {
        this.diagnostics = [];
      }

      this.diagnostics.push(c);
    };

    b.prototype.withoutDiagnostics = function() {
      return this.diagnostics ? b.fromSymbol(this.symbol) : this;
    };

    b._empty = new b(null, null, null);

    return b;
  }();
  a.SymbolAndDiagnostics = b;
  var c = function() {
    function a() {
      this.cacheSize = 16;

      this.rdCache = [];

      this.nextUp = 0;
      for (var a = 0; a < this.cacheSize; a++) {
        this.rdCache[a] = {
          actuals: [],
          exactCandidates: [],
          conversionCandidates: [],
          id: a
        };
      }
    }
    a.prototype.getResolutionData = function() {
      var a = null;
      this.nextUp < this.cacheSize && (a = this.rdCache[this.nextUp]);

      a === null && (this.cacheSize++, a = {
        actuals: [],
        exactCandidates: [],
        conversionCandidates: [],
        id: this.cacheSize
      }, this.rdCache[this.cacheSize] = a);

      this.nextUp++;

      return a;
    };

    a.prototype.returnResolutionData = function(a) {
      a.actuals.length = 0;

      a.exactCandidates.length = 0;

      a.conversionCandidates.length = 0;

      this.nextUp = a.id;
    };

    return a;
  }();
  a.PullResolutionDataCache = c;
  var d = function() {
    function a() {
      this.targetSymbol = null;

      this.targetTypeSymbol = null;

      this.resolvedSignatures = null;

      this.candidateSignature = null;

      this.actualParametersContextTypeSymbols = null;
    }
    return a;
  }();
  a.PullAdditionalCallResolutionData = d;
  var e = function() {
    function a() {
      this.membersContextTypeSymbols = null;
    }
    return a;
  }();
  a.PullAdditionalObjectLiteralResolutionData = e;
  var f = function() {
    function d(b, d, e) {
      this.compilationSettings = b;

      this.semanticInfoChain = d;

      this.unitPath = e;

      this._cachedArrayInterfaceType = null;

      this._cachedNumberInterfaceType = null;

      this._cachedStringInterfaceType = null;

      this._cachedBooleanInterfaceType = null;

      this._cachedObjectInterfaceType = null;

      this._cachedFunctionInterfaceType = null;

      this._cachedIArgumentsInterfaceType = null;

      this._cachedRegExpInterfaceType = null;

      this.cachedFunctionArgumentsSymbol = null;

      this.assignableCache = {};

      this.subtypeCache = {};

      this.identicalCache = {};

      this.resolutionDataCache = new c;

      this.currentUnit = null;

      this.cachedFunctionArgumentsSymbol = new a.PullSymbol("arguments", 1024);

      this.cachedFunctionArgumentsSymbol.setType(this.cachedIArgumentsInterfaceType() ? this.cachedIArgumentsInterfaceType() :
        this.semanticInfoChain.anyTypeSymbol);

      this.cachedFunctionArgumentsSymbol.setResolved();
      var f = new a.PullDecl("arguments", "arguments", 2048, 0, new a.TextSpan(0, 0), e);
      f.setSymbol(this.cachedFunctionArgumentsSymbol);

      this.cachedFunctionArgumentsSymbol.addDeclaration(f);

      this.currentUnit = this.semanticInfoChain.getUnit(e);
    }
    d.prototype.cleanCachedGlobals = function() {
      this._cachedArrayInterfaceType = null;

      this._cachedNumberInterfaceType = null;

      this._cachedStringInterfaceType = null;

      this._cachedBooleanInterfaceType = null;

      this._cachedObjectInterfaceType = null;

      this._cachedFunctionInterfaceType = null;

      this._cachedIArgumentsInterfaceType = null;

      this._cachedRegExpInterfaceType = null;

      this.cachedFunctionArgumentsSymbol = null;

      this.identicalCache = {};

      this.subtypeCache = {};

      this.assignableCache = {};
    };

    d.prototype.cachedArrayInterfaceType = function() {
      this._cachedArrayInterfaceType || (this._cachedArrayInterfaceType = this.getSymbolFromDeclPath("Array", [], 16));

      this._cachedArrayInterfaceType || (this._cachedArrayInterfaceType = this.semanticInfoChain.anyTypeSymbol);

      this._cachedArrayInterfaceType.isResolved() || this.resolveDeclaredSymbol(this._cachedArrayInterfaceType, null,
        new a.PullTypeResolutionContext);

      return this._cachedArrayInterfaceType;
    };

    d.prototype.getCachedArrayType = function() {
      return this.cachedArrayInterfaceType();
    };

    d.prototype.cachedNumberInterfaceType = function() {
      this._cachedNumberInterfaceType || (this._cachedNumberInterfaceType = this.getSymbolFromDeclPath("Number", [],
        16));

      this._cachedNumberInterfaceType && !this._cachedNumberInterfaceType.isResolved() && this.resolveDeclaredSymbol(
        this._cachedNumberInterfaceType, null, new a.PullTypeResolutionContext);

      return this._cachedNumberInterfaceType;
    };

    d.prototype.cachedStringInterfaceType = function() {
      this._cachedStringInterfaceType || (this._cachedStringInterfaceType = this.getSymbolFromDeclPath("String", [],
        16));

      this._cachedStringInterfaceType && !this._cachedStringInterfaceType.isResolved() && this.resolveDeclaredSymbol(
        this._cachedStringInterfaceType, null, new a.PullTypeResolutionContext);

      return this._cachedStringInterfaceType;
    };

    d.prototype.cachedBooleanInterfaceType = function() {
      this._cachedBooleanInterfaceType || (this._cachedBooleanInterfaceType = this.getSymbolFromDeclPath("Boolean", [],
        16));

      this._cachedBooleanInterfaceType && !this._cachedBooleanInterfaceType.isResolved() && this.resolveDeclaredSymbol(
        this._cachedBooleanInterfaceType, null, new a.PullTypeResolutionContext);

      return this._cachedBooleanInterfaceType;
    };

    d.prototype.cachedObjectInterfaceType = function() {
      this._cachedObjectInterfaceType || (this._cachedObjectInterfaceType = this.getSymbolFromDeclPath("Object", [],
        16));

      this._cachedObjectInterfaceType || (this._cachedObjectInterfaceType = this.semanticInfoChain.anyTypeSymbol);

      this._cachedObjectInterfaceType.isResolved() || this.resolveDeclaredSymbol(this._cachedObjectInterfaceType,
        null, new a.PullTypeResolutionContext);

      return this._cachedObjectInterfaceType;
    };

    d.prototype.cachedFunctionInterfaceType = function() {
      this._cachedFunctionInterfaceType || (this._cachedFunctionInterfaceType = this.getSymbolFromDeclPath("Function", [],
        16));

      this._cachedFunctionInterfaceType && !this._cachedFunctionInterfaceType.isResolved() && this.resolveDeclaredSymbol(
        this._cachedFunctionInterfaceType, null, new a.PullTypeResolutionContext);

      return this._cachedFunctionInterfaceType;
    };

    d.prototype.cachedIArgumentsInterfaceType = function() {
      this._cachedIArgumentsInterfaceType || (this._cachedIArgumentsInterfaceType = this.getSymbolFromDeclPath(
        "IArguments", [], 16));

      this._cachedIArgumentsInterfaceType && !this._cachedIArgumentsInterfaceType.isResolved() && this.resolveDeclaredSymbol(
        this._cachedIArgumentsInterfaceType, null, new a.PullTypeResolutionContext);

      return this._cachedIArgumentsInterfaceType;
    };

    d.prototype.cachedRegExpInterfaceType = function() {
      this._cachedRegExpInterfaceType || (this._cachedRegExpInterfaceType = this.getSymbolFromDeclPath("RegExp", [],
        16));

      this._cachedRegExpInterfaceType.isResolved() || this.resolveDeclaredSymbol(this._cachedRegExpInterfaceType,
        null, new a.PullTypeResolutionContext);

      return this._cachedRegExpInterfaceType;
    };

    d.prototype.getUnitPath = function() {
      return this.unitPath;
    };

    d.prototype.setUnitPath = function(a) {
      this.unitPath = a;

      this.currentUnit = this.semanticInfoChain.getUnit(a);
    };

    d.prototype.getDeclForAST = function(a) {
      return this.semanticInfoChain.getDeclForAST(a, this.unitPath);
    };

    d.prototype.getSymbolAndDiagnosticsForAST = function(a) {
      return this.semanticInfoChain.getSymbolAndDiagnosticsForAST(a, this.unitPath);
    };

    d.prototype.setSymbolAndDiagnosticsForAST = function(a, b, c) {
      if (c && (c.inProvisionalResolution() || c.inSpecialization)) return;
      this.semanticInfoChain.setSymbolAndDiagnosticsForAST(a, b, this.unitPath);
    };

    d.prototype.getASTForSymbol = function(a) {
      return this.semanticInfoChain.getASTForSymbol(a, this.unitPath);
    };

    d.prototype.getASTForDecl = function(a) {
      return this.semanticInfoChain.getASTForDecl(a);
    };

    d.prototype.getNewErrorTypeSymbol = function(b, c) {
      return new a.PullErrorTypeSymbol(b, this.semanticInfoChain.anyTypeSymbol, c);
    };

    d.prototype.getEnclosingDecl = function(b) {
      var c = a.getPathToDecl(b);
      return c.length ? c.length > 1 && c[c.length - 1] === b ? c[c.length - 2] : c[c.length - 1] : null;
    };

    d.prototype.getExportedMemberSymbol = function(b, c) {
      if (!(b.getKind() & 69632)) {
        var d = c.isContainer() ? c : c.getAssociatedContainerType();
        if (d && d.isContainer() && !a.PullHelpers.symbolIsEnum(c)) {
          return b.hasFlag(1) ? b : null;
        }
      }
      return b;
    };

    d.prototype.getMemberSymbol = function(b, c, d, e) {
      if (typeof e == "undefined") {
        e = !1;
      }
      var f = null;
      if (c & a.PullElementKind.SomeValue) {
        f = d.findMember(b);
      } else {
        f = d.findNestedType(b);
      }
      if (f) {
        return this.getExportedMemberSymbol(f, d);
      }
      var g = d.getAssociatedContainerType();
      if (g) {
        if (g.isClass()) {
          return null;
        }
        d = g;
      }
      if (c & a.PullElementKind.SomeValue) {
        f = d.findMember(b);
      } else {
        f = d.findNestedType(b);
      }
      if (f) {
        return this.getExportedMemberSymbol(f, d);
      }
      var h = d.getDeclarations();

      var i = null;
      for (var j = 0; j < h.length; j++) {
        i = h[j].searchChildDecls(b, c);
        if (i.length) {
          return this.getExportedMemberSymbol(i[0].getSymbol(), d);
        }
      }
    };

    d.prototype.getSymbolFromDeclPath = function(b, c, d) {
      var e = null;

      var f = null;

      var g;

      var h = null;

      var i;

      var j;

      var k = null;

      var l;

      var m = null;

      var n = null;

      var o = null;
      for (var p = c.length - 1; p >= 0; p--) {
        f = c[p];

        j = f.getKind();
        if (f.getFlags() & 2097152) {
          return this.semanticInfoChain.anyTypeSymbol;
        }
        if (j & 36) {
          g = f.searchChildDecls(b, d);
          if (g.length) {
            return g[0].getSymbol();
          }
          if (d & a.PullElementKind.SomeValue) {
            g = f.searchChildDecls(b, d);
            if (g.length) {
              k = g[0];
              if (k) {
                return k.getSymbol();
              }
            }
            m = f.getSymbol().getInstanceSymbol();
            if (m) {
              n = m.getType();

              o = this.getMemberSymbol(b, d, n);
              if (o && o.getKind() & d) {
                return o;
              }
            }
            g = f.searchChildDecls(b, 256);
            if (g.length) {
              var q = g[0].getSymbol();
              if (q.isAlias()) {
                return q;
              }
            }
            k = f.getValueDecl();

            if (k) {
              f = k;
            }
          }
          h = f.getSymbol().getType();
          var o = this.getMemberSymbol(b, d, h);
          if (o) {
            return o;
          }
        } else if (d & (a.PullElementKind.SomeType | a.PullElementKind.SomeContainer) || !(j & 8)) {
          var r = null;
          if (j === 131072 && b === f.getFunctionExpressionName()) {
            r = f.getSymbol();
          }

          g = f.searchChildDecls(b, d);
          if (g.length) {
            f.getKind() & a.PullElementKind.SomeFunction && f.ensureSymbolIsBound();
            return g[0].getSymbol();
          }
          if (r) {
            return r;
          }
          if (d & a.PullElementKind.SomeValue) {
            g = f.searchChildDecls(b, 256);
            if (g.length) {
              var q = g[0].getSymbol();
              if (q.isAlias()) {
                return q;
              }
            }
          }
        }
      }
      e = this.semanticInfoChain.findSymbol([b], d);

      return e;
    };

    d.prototype.getVisibleDeclsFromDeclPath = function(a, b) {
      var c = [];

      var d = null;

      var e;

      var f;

      var g;
      for (var h = a.length - 1; h >= 0; h--) {
        d = a[h];

        f = d.getKind();
        var i = d.getSymbol();

        var j = d.getKind();
        if (j !== 8 && j !== 16) {
          this.addFilteredDecls(d.getChildDecls(), b, c);
        }
        switch (j) {
          case 4:
          case 32:
            if (i) {
              var k = i.getDeclarations();
              for (var l = 0, m = k.length; l < m; l++) {
                var n = k[l];
                if (n === d) continue;
                var o = n.getChildDecls();
                for (var p = 0, q = o.length; p < q; p++) {
                  var r = o[p];
                  if (r.getFlags() & 1 && r.getKind() & b) {
                    c.push(r);
                  }
                }
              }
            }
            break;
          case 8:
          case 16:
            if (i && i.isGeneric()) {
              g = i.getTypeParameters();
              for (var p = 0; p < g.length; p++) {
                c.push(g[p].getDeclarations()[0]);
              }
            }
            break;
          case 131072:
            var s = d.getFunctionExpressionName();
            if (i && s) {
              c.push(i.getDeclarations()[0]);
            }
          case 16384:
          case 32768:
          case 65536:
            if (i) {
              var t = i.getType();
              if (t.getHasGenericSignature()) {
                var u = f === 32768 ? t.getConstructSignatures() : t.getCallSignatures();
                if (u && u.length)
                  for (var l = 0; l < u.length; l++) {
                    var v = u[l];
                    if (v.isGeneric()) {
                      g = v.getTypeParameters();
                      for (var p = 0; p < g.length; p++) {
                        c.push(g[p].getDeclarations()[0]);
                      }
                    }
                  }
              }
            }
        }
      }
      var w = this.semanticInfoChain.units;
      for (var h = 0, x = w.length; h < x; h++) {
        var y = w[h];
        if (y === this.currentUnit && a.length != 0) continue;
        var z = y.getTopLevelDecls();
        if (z.length)
          for (var l = 0, m = z.length; l < m; l++) {
            var A = z[l];
            if (A.getKind() === 1 || A.getKind() === 0) {
              this.addFilteredDecls(A.getChildDecls(), b, c);
            }
          }
      }
      return c;
    };

    d.prototype.addFilteredDecls = function(a, b, c) {
      if (a.length)
        for (var d = 0, e = a.length; d < e; d++) {
          var f = a[d];
          if (f.getKind() & b) {
            c.push(f);
          }
        }
    };

    d.prototype.getVisibleDecls = function(b, c) {
      var d = b !== null ? a.getPathToDecl(b) : [];
      if (b && !d.length) {
        d = [b];
      }
      var e = a.PullElementKind.SomeType | a.PullElementKind.SomeContainer | a.PullElementKind.SomeValue;
      return this.getVisibleDeclsFromDeclPath(d, e);
    };

    d.prototype.getVisibleContextSymbols = function(b, c) {
      var d = c.getContextualType();
      if (!d || this.isAnyOrEquivalent(d)) {
        return null;
      }
      var e = a.PullElementKind.SomeType | a.PullElementKind.SomeContainer | a.PullElementKind.SomeValue;

      var f = d.getAllMembers(e, !1);
      for (var g = 0; g < f.length; g++) {
        f[g].setUnresolved();
      }
      return f;
    };

    d.prototype.getVisibleMembersFromExpression = function(b, c, d) {
      var e = d.canUseTypeSymbol;
      d.canUseTypeSymbol = !0;
      var f = this.resolveAST(b, !1, c, d).symbol;
      d.canUseTypeSymbol = e;
      var g = f.getType();
      if (!g) {
        return null;
      }
      if (this.isAnyOrEquivalent(g)) {
        return null;
      }
      if (!g.isResolved()) {
        this.resolveDeclaredSymbol(g, c, d);
      }
      var h = !1;

      var i = g;
      if (i.getKind() === 33554432) {
        i = i.getConstructSignatures()[0].getReturnType();
      }
      if (i && i.isClass()) {
        var j = a.getPathToDecl(c);
        if (j && j.length) {
          var k = i.getDeclarations();
          for (var l = 0, m = k.length; l < m; l++) {
            var n = k[l];
            if (j.indexOf(n) >= 0) {
              h = !0;
              break;
            }
          }
        }
      }
      var o = a.PullElementKind.SomeType | a.PullElementKind.SomeContainer | a.PullElementKind.SomeValue;

      var p = [];
      if (g.isContainer() && g.getExportAssignedContainerSymbol()) {
        g = g.getExportAssignedContainerSymbol();
      }
      if (g.isTypeParameter()) {
        var q = g.getConstraint();
        if (q) {
          g = q;
          p = g.getAllMembers(o, !1);
        }
      } else {
        if (f.getKind() == 67108864) {
          g = this.semanticInfoChain.numberTypeSymbol;
        }

        if (g === this.semanticInfoChain.numberTypeSymbol && this.cachedNumberInterfaceType()) {
          g = this.cachedNumberInterfaceType();
        } else {
          if (g === this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType()) {
            g = this.cachedStringInterfaceType();
          } else {
            if (g === this.semanticInfoChain.booleanTypeSymbol && this.cachedBooleanInterfaceType()) {
              g = this.cachedBooleanInterfaceType();
            }
          }
        }
        if (!g.isResolved()) {
          var r = this.resolveDeclaredSymbol(g, c, d);
          if (r != g) {
            if (!f.isType()) {
              d.setTypeInContext(f, r);
            }
            g = r;
          }
        }
        p = g.getAllMembers(o, h);
        if (g.isContainer()) {
          var s = g.getInstanceSymbol();
          if (s) {
            var t = s.getType();
            if (!t.isResolved()) {
              this.resolveDeclaredSymbol(t, c, d);
            }
            var u = t.getAllMembers(o, h);
            p = p.concat(u);
          }
        } else if (g.isConstructor()) {
          var v = "prototype";

          var w = new a.PullSymbol(v, 4096);

          var x = g.getDeclarations()[0];

          var y = new a.PullDecl(v, v, x.getKind(), x.getFlags(), x.getSpan(), x.getScriptName());
          this.currentUnit.addSynthesizedDecl(y);

          y.setParentDecl(x);

          w.addDeclaration(y);

          p.push(w);
        } else {
          var z = g.getAssociatedContainerType();
          if (z) {
            var A = z.getType();
            if (!A.isResolved()) {
              this.resolveDeclaredSymbol(A, c, d);
            }
            var B = A.getAllMembers(o, h);
            p = p.concat(B);
          }
        }
      }
      if (g.getCallSignatures().length && this.cachedFunctionInterfaceType()) {
        p = p.concat(this.cachedFunctionInterfaceType().getAllMembers(o, !1));
      }
      for (var l = 0; l < p.length; l++) {
        if (!p[l].isResolved()) {
          this.resolveDeclaredSymbol(p[l], c, d);
        }
        p[l].setUnresolved();
      }
      return p;
    };

    d.prototype.isAnyOrEquivalent = function(a) {
      return a === this.semanticInfoChain.anyTypeSymbol || a.isError();
    };

    d.prototype.isNumberOrEquivalent = function(a) {
      return a === this.semanticInfoChain.numberTypeSymbol || this.cachedNumberInterfaceType() && a === this.cachedNumberInterfaceType();
    };

    d.prototype.isTypeArgumentOrWrapper = function(a) {
      if (!a) {
        return !1;
      }
      if (!a.isGeneric()) {
        return !1;
      }
      if (a.isTypeParameter()) {
        return !0;
      }
      if (a.isArray()) {
        return this.isTypeArgumentOrWrapper(a.getElementType());
      }
      var b = a.getTypeArguments();
      if (!b) {
        return !0;
      }
      for (var c = 0; c < b.length; c++)
        if (this.isTypeArgumentOrWrapper(b[c])) {
          return !0;
        }
      return !1;
    };

    d.prototype.isArrayOrEquivalent = function(a) {
      return a.isArray() && a.getElementType() || a == this.cachedArrayInterfaceType();
    };

    d.prototype.findTypeSymbolForDynamicModule = function(b, c, d) {
      var e = b;

      var f = d(b);
      if (f === null) {
        if (!f) {
          b = a.swapQuotes(e);
          f = d(b);
        }

        if (!f) {
          b = a.stripQuotes(e) + ".ts";
          f = d(b);
        }

        if (!f) {
          b = a.stripQuotes(e) + ".d.ts";
          f = d(b);
        }
        if (!f && !a.isRelative(e)) {
          b = e;
          var g = a.stripQuotes(b);

          var h = a.getRootFilePath(a.switchToForwardSlashes(c));
          while (f === null && h != "") {
            b = a.normalizePath(h + g + ".ts");
            f = d(b);
            if (f === null) {
              b = a.changePathToDTS(b);
              f = d(b);
            }
            if (f === null) {
              if (h === "/") {
                h = "";
              } else {
                h = a.normalizePath(h + "..");
                h = h && h != "/" ? h + "/" : h;
              }
            }
          }
        }
      }
      return f;
    };

    d.prototype.resolveDeclaredSymbol = function(a, b, c) {
      var d = c.resolvingTypeReference;
      c.resolvingTypeReference = !1;
      var e = this.resolveDeclaredSymbolWorker(a, b, c);
      c.resolvingTypeReference = d;

      return e;
    };

    d.prototype.resolveDeclaredSymbolWorker = function(b, c, d) {
      if (!b || b.isResolved()) {
        return b;
      }
      if (b.isResolving() && !b.currentlyBeingSpecialized()) {
        b.isType() || b.setType(this.semanticInfoChain.anyTypeSymbol);
        return b;
      }
      var e = this.unitPath;

      var f = b.getDeclarations();

      var g = null;
      for (var h = 0; h < f.length; h++) {
        var i = f[h];
        g = this.semanticInfoChain.getASTForDecl(i);
        if (!g || g.nodeType === 80) {
          this.setUnitPath(e);
          return b;
        }
        this.setUnitPath(i.getScriptName());

        this.resolveAST(g, !1, c, d);
      }
      var j = b.isType() ? b.getTypeArguments() : null;
      if (j && j.length) {
        var k = b.getTypeParameters();

        var l = {};
        for (var h = 0; h < k.length; h++) {
          l[k[h].getSymbolID().toString()] = j[h];
        }
        d.pushTypeSpecializationCache(l);
        var m = a.getRootType(b.getType());

        var n = a.specializeType(m, j, this, c, d, g);
        d.popTypeSpecializationCache();

        b = n;
      }
      this.setUnitPath(e);

      return b;
    };

    d.prototype.resolveModuleDeclaration = function(a, b) {
      var c = this.getDeclForAST(a);

      var d = c.getSymbol();
      if (d.isResolved()) {
        return d;
      }
      d.setResolved();
      var e = d.getDeclarations();
      for (var f = 0; f < e.length; f++) {
        var g = e[f].getChildDecls();
        for (var h = 0; h < g.length; h++) {
          g[h].ensureSymbolIsBound();
        }
      }
      if (c.getKind() != 64) {
        var i = d.getInstanceSymbol();
        if (i) {
          this.resolveDeclaredSymbol(i, c.getParentDecl(), b);
        }
        var j = a.members.members;
        for (var f = 0; f < j.length; f++)
          if (j[f].nodeType == 87) {
            this.resolveExportAssignmentStatement(j[f], c, b);
            break;
          }
      }
      return d;
    };

    d.prototype.isTypeRefWithoutTypeArgs = function(a) {
      if (a.nodeType != 11) {
        return !1;
      }
      if (a.term.nodeType == 20) {
        return !0;
      }
      if (a.term.nodeType == 32) {
        var b = a.term;
        if (b.operand2.nodeType == 20) {
          return !0;
        }
      }
      return !1;
    };

    d.prototype.resolveReferenceTypeDeclaration = function(c, d) {
      var e = this.getDeclForAST(c);

      var f = this.getEnclosingDecl(e);

      var g = e.getSymbol();

      var h = c.nodeType === 13;

      var i = this.getSymbolAndDiagnosticsForAST(c) != null;

      var j = [];

      var k = [];
      if (g.isResolved() && i || g.isResolving() && !d.isInBaseTypeResolution()) {
        return g;
      }
      var l = g.isResolving();
      g.startResolving();
      if (!g.isResolved()) {
        var m = g.getTypeParameters();
        for (var n = 0; n < m.length; n++) {
          this.resolveDeclaredSymbol(m[n], e, d);
        }
      }
      var o = g.getDeclarations();
      for (var n = 0; n < o.length; n++) {
        var p = o[n].getChildDecls();
        for (var q = 0; q < p.length; q++) {
          p[q].ensureSymbolIsBound();
        }
      }
      var r = d.startBaseTypeResolution();
      if (!h && !i) {
        g.resetKnownBaseTypeCount();
      }
      if (c.extendsList) {
        var s = d.isResolvingClassExtendedType;
        if (h) {
          d.isResolvingClassExtendedType = !0;
        }
        for (var n = g.getKnownBaseTypeCount(); n < c.extendsList.members.length; n = g.getKnownBaseTypeCount()) {
          g.incrementKnownBaseCount();
          var t = this.resolveTypeReference(new a.TypeReference(c.extendsList.members[n], 0), e, d).symbol;
          if (g.isValidBaseKind(t, !0)) {
            var u = t;
            j[j.length] = t;

            if (t.isGeneric() && t.isResolved() && !t.getIsSpecialized()) {
              t = this.specializeTypeToAny(t, f, d);
              e.addDiagnostic(new a.Diagnostic(e.getScriptName(), c.minChar, c.getLength(), 239));
            }
            if (!g.hasBase(t)) {
              this.setSymbolAndDiagnosticsForAST(c.extendsList.members[n], b.fromSymbol(u), d);

              g.addExtendedType(t);
              var v = g.getKnownSpecializations();
              for (var q = 0; q < v.length; q++) {
                v[q].addExtendedType(t);
              }
            }
          }
        }
        d.isResolvingClassExtendedType = s;
      }
      if (!g.isResolved() && !l) {
        var w = g.getExtendedTypes();
        for (var n = 0; n < w.length; n++) {
          var x = w[n];
          for (var q = 0; q < j.length; q++)
            if (x == j[q]) break;
          if (q == j.length) {
            g.removeExtendedType(x);
          }
        }
      }
      if (c.implementsList && h) {
        var y = c.extendsList ? c.extendsList.members.length : 0;
        for (var n = g.getKnownBaseTypeCount(); n - y >= 0 && n - y < c.implementsList.members.length; n = g.getKnownBaseTypeCount()) {
          g.incrementKnownBaseCount();
          var z = this.resolveTypeReference(new a.TypeReference(c.implementsList.members[n - y], 0), e, d).symbol;
          if (g.isValidBaseKind(z, !1)) {
            var A = z;
            k[k.length] = z;

            if (z.isGeneric() && z.isResolved() && !z.getIsSpecialized()) {
              z = this.specializeTypeToAny(z, f, d);
              e.addDiagnostic(new a.Diagnostic(e.getScriptName(), c.minChar, c.getLength(), 239));
              this.setSymbolAndDiagnosticsForAST(c.implementsList.members[n - y], b.fromSymbol(z), d);
              g.addImplementedType(z);
            } else {
              if (!g.hasBase(z)) {
                this.setSymbolAndDiagnosticsForAST(c.implementsList.members[n - y], b.fromSymbol(A), d);
                g.addImplementedType(z);
              }
            }
          }
        }
      }
      if (!g.isResolved() && !l) {
        var w = g.getImplementedTypes();
        for (var n = 0; n < w.length; n++) {
          var x = w[n];
          for (var q = 0; q < k.length; q++)
            if (x == k[q]) break;
          if (q == k.length) {
            g.removeImplementedType(x);
          }
        }
      }
      d.doneBaseTypeResolution(r);
      if (r && (c.implementsList || c.extendsList)) {
        return g;
      }
      if (!g.isResolved()) {
        var B = g.getMembers();
        for (var n = 0; n < B.length; n++) {
          this.resolveDeclaredSymbol(B[n], e, d);
        }
        if (!h) {
          var C = g.getCallSignatures();
          for (var n = 0; n < C.length; n++) {
            this.resolveDeclaredSymbol(C[n], e, d);
          }
          var D = g.getConstructSignatures();
          for (var n = 0; n < D.length; n++) {
            this.resolveDeclaredSymbol(D[n], e, d);
          }
          var E = g.getIndexSignatures();
          for (var n = 0; n < E.length; n++) {
            this.resolveDeclaredSymbol(E[n], e, d);
          }
        }
      }
      this.setSymbolAndDiagnosticsForAST(c.name, b.fromSymbol(g), d);

      this.setSymbolAndDiagnosticsForAST(c, b.fromSymbol(g), d);

      g.setResolved();

      return g;
    };

    d.prototype.resolveClassDeclaration = function(b, c) {
      var d = this.getDeclForAST(b);

      var e = d.getSymbol();
      if (e.isResolved()) {
        return e;
      }
      this.resolveReferenceTypeDeclaration(b, c);
      var f = e.getConstructorMethod();

      var g = e.getExtendedTypes();

      var h = g.length ? g[0] : null;
      if (f) {
        var i = f.getType();

        var j = i.getConstructSignatures();
        if (!j.length) {
          var k;
          if (h) {
            var l = h;

            var m = l.getConstructorMethod();

            var n = m.getType();

            var o = n.getConstructSignatures();

            var p;

            var q;
            for (var r = 0; r < o.length; r++) {
              p = o[r];

              q = p.getParameters();

              k = p.isDefinition() ? new a.PullDefinitionSignatureSymbol(2097152) : new a.PullSignatureSymbol(2097152);

              k.setReturnType(e);
              for (var s = 0; s < q.length; s++) {
                k.addParameter(q[s], q[s].getIsOptional());
              }
              var t = i.getTypeParameters();
              for (var s = 0; s < t.length; s++) {
                k.addTypeParameter(t[s]);
              }
              i.addConstructSignature(k);

              k.addDeclaration(d);
            }
          } else {
            k = new a.PullSignatureSymbol(2097152);

            k.setReturnType(e);

            i.addConstructSignature(k);

            k.addDeclaration(d);
            var t = i.getTypeParameters();
            for (var r = 0; r < t.length; r++) {
              k.addTypeParameter(t[r]);
            }
          }
        }
        if (!e.isResolved()) {
          return e;
        }
        var u = i.getMembers();
        this.resolveDeclaredSymbol(f, d, c);
        for (var r = 0; r < u.length; r++) {
          this.resolveDeclaredSymbol(u[r], d, c);
        }
        if (h) {
          var v = h.getConstructorMethod();

          var w = v.getType();
          if (!i.hasBase(w)) {
            i.addExtendedType(w);
          }
        }
      }
      return e;
    };

    d.prototype.resolveInterfaceDeclaration = function(a, b) {
      var c = this.getDeclForAST(a);

      var d = c.getSymbol();
      this.resolveReferenceTypeDeclaration(a, b);

      return d;
    };

    d.prototype.resolveImportDeclaration = function(c, d) {
      var e = this;

      var f = this.getDeclForAST(c);

      var g = this.getEnclosingDecl(f);

      var h = f.getSymbol();

      var i = c.id.text;

      var j = null;
      if (h.isResolved()) {
        return h;
      }
      h.startResolving();
      if (c.alias.nodeType === 11) {
        j = this.resolveTypeReference(c.alias, g, d).symbol;
      } else if (c.alias.nodeType === 20) {
        var k = c.alias.actualText;
        if (!a.isQuoted(k)) {
          j = this.resolveTypeReference(new a.TypeReference(c.alias, 0), g, d).symbol;
        } else {
          var l = c.alias.actualText;

          var m = a.getPathToDecl(g);
          c.isDynamicImport = !0;

          j = this.findTypeSymbolForDynamicModule(l, f.getScriptName(), function(b) {
            return e.getSymbolFromDeclPath(b, m, a.PullElementKind.SomeContainer);
          });

          if (!j) {
            f.addDiagnostic(new a.SemanticDiagnostic(this.currentUnit.getPath(), c.minChar, c.getLength(), 140, [k]));
            j = this.semanticInfoChain.anyTypeSymbol;
          }
        }
      }
      j && (j.isContainer() ? j.getExportAssignedValueSymbol() && h.setIsUsedAsValue() : (f.addDiagnostic(new a.Diagnostic(
        this.currentUnit.getPath(), c.minChar, c.getLength(), 141)), j = this.semanticInfoChain.anyTypeSymbol), h.setAliasedType(
        j), h.setResolved(), this.semanticInfoChain.setSymbolAndDiagnosticsForAST(c.alias, b.fromSymbol(j), this.unitPath));

      return h;
    };

    d.prototype.resolveExportAssignmentStatement = function(c, d, e) {
      var f = c.id.text;

      var g = null;

      var h = null;

      var i = null;

      var j = d.getSymbol();
      if (!j.isType() && j.isContainer()) {
        d.addDiagnostic(new a.Diagnostic(d.getScriptName(), c.minChar, c.getLength(), 230));
        return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
      }
      var k = d !== null ? [d] : [];
      i = this.getSymbolFromDeclPath(f, k, a.PullElementKind.SomeContainer);
      var l = !0;
      if (i) {
        l = (i.getKind() & a.PullElementKind.AcceptableAlias) != 0;
      }
      if (!l && i && i.getKind() == 256) {
        if (!i.isResolved()) {
          this.resolveDeclaredSymbol(i, d, e);
        }
        var m = i.getType();
        if (m.getKind() != 32) {
          l = !0;
        } else {
          var n = i.getExportAssignedValueSymbol();

          var o = i.getExportAssignedTypeSymbol();

          var p = i.getExportAssignedContainerSymbol();
          if (n || o || p) {
            if (n) {
              g = n;
            }
            if (o) {
              h = o;
            }
            if (p) {
              i = p;
            }
            l = !0;
          }
        }
      }
      return l ? (g || (g = this.getSymbolFromDeclPath(f, k, a.PullElementKind.SomeValue)), h || (h = this.getSymbolFromDeclPath(
        f, k, a.PullElementKind.SomeType)), !g && !h && !i ? b.create(this.semanticInfoChain.voidTypeSymbol, [e.postError(
        d.getScriptName(), c.minChar, c.getLength(), 164, [f])]) : (g && (g.isResolved() || this.resolveDeclaredSymbol(
        g, d, e), j.setExportAssignedValueSymbol(g)), h && (h.isResolved() || this.resolveDeclaredSymbol(h, d, e),
        j.setExportAssignedTypeSymbol(h)), i && (i.isResolved() || this.resolveDeclaredSymbol(i, d, e), j.setExportAssignedContainerSymbol(
        i)), b.fromSymbol(this.semanticInfoChain.voidTypeSymbol))) : (d.addDiagnostic(new a.Diagnostic(d.getScriptName(),
        c.minChar, c.getLength(), 231)), b.fromSymbol(this.semanticInfoChain.voidTypeSymbol));
    };

    d.prototype.resolveFunctionTypeSignature = function(b, c, d) {
      var e = null;

      var f = this.getDeclForAST(b);
      if (!f || !f.hasSymbol()) {
        var g = this.semanticInfoChain.getUnit(this.unitPath);

        var h = new a.DeclCollectionContext(g);
        h.scriptName = this.unitPath;

        if (c) {
          h.pushParent(c);
        }

        a.getAstWalkerFactory().walk(b, a.preCollectDecls, a.postCollectDecls, null, h);

        f = this.getDeclForAST(b);

        this.currentUnit.addSynthesizedDecl(f);
        var i = new a.PullSymbolBinder(this.semanticInfoChain);
        i.setUnit(this.unitPath);

        if (f.getKind() === 33554432) {
          i.bindConstructorTypeDeclarationToPullSymbol(f);
        } else {
          i.bindFunctionTypeDeclarationToPullSymbol(f);
        }
      }
      e = f.getSymbol();
      var j = e.getKind() === 33554432 ? e.getConstructSignatures()[0] : e.getCallSignatures()[0];
      if (b.returnTypeAnnotation) {
        var k = this.resolveTypeReference(b.returnTypeAnnotation, c, d).symbol;
        j.setReturnType(k);

        if (this.isTypeArgumentOrWrapper(k)) {
          j.setHasGenericParameter();
          if (e) {
            e.getType().setHasGenericSignature();
          }
        }
      } else {
        j.setReturnType(this.semanticInfoChain.anyTypeSymbol);
      }
      if (b.arguments)
        for (var l = 0; l < b.arguments.members.length; l++) {
          this.resolveFunctionTypeSignatureParameter(b.arguments.members[l], j, c, d);
        }
      e && j.hasGenericParameter() && e.getType().setHasGenericSignature();

      j.hasGenericParameter() && e && e.getType().setHasGenericSignature();

      e.setResolved();

      return e;
    };

    d.prototype.resolveFunctionTypeSignatureParameter = function(b, c, d, e) {
      var f = this.getDeclForAST(b);

      var g = f.getSymbol();
      if (b.typeExpr) {
        var h = this.resolveTypeReference(b.typeExpr, d, e).symbol;
        if (g.getIsVarArg() && !h.isArray() && h != this.cachedArrayInterfaceType()) {
          var i = e.postError(this.unitPath, b.minChar, b.getLength(), 228, null, d);
          h = this.getNewErrorTypeSymbol(i);
        }
        e.setTypeInContext(g, h);

        if (this.isTypeArgumentOrWrapper(h)) {
          c.setHasGenericParameter();
        }
      } else {
        if (g.getIsVarArg() && g.getType()) {
          if (this.cachedArrayInterfaceType()) {
            e.setTypeInContext(g, a.specializeToArrayType(this.cachedArrayInterfaceType(), g.getType(), this, e));
          } else {
            e.setTypeInContext(g, g.getType());
          }
        } else {
          e.setTypeInContext(g, this.semanticInfoChain.anyTypeSymbol);
        }
      }
      g.setResolved();
    };

    d.prototype.resolveFunctionExpressionParameter = function(b, c, d, e) {
      var f = this.getDeclForAST(b);

      var g = f.getSymbol();
      if (b.typeExpr) {
        var h = this.resolveTypeReference(b.typeExpr, d, e).symbol;
        if (g.getIsVarArg() && !h.isArray() && h != this.cachedArrayInterfaceType()) {
          var i = e.postError(this.unitPath, b.minChar, b.getLength(), 228, null, d);
          h = this.getNewErrorTypeSymbol(i);
        }
        e.setTypeInContext(g, h);
      } else {
        if (g.getIsVarArg() && g.getType()) {
          if (this.cachedArrayInterfaceType()) {
            e.setTypeInContext(g, a.specializeToArrayType(this.cachedArrayInterfaceType(), g.getType(), this, e));
          } else {
            e.setTypeInContext(g, g.getType());
          }
        } else {
          if (c) {
            e.setTypeInContext(g, c.getType());
          } else {
            e.setTypeInContext(g, this.semanticInfoChain.anyTypeSymbol);
          }
        }
      }
      g.setResolved();
    };

    d.prototype.resolveInterfaceTypeReference = function(b, c, d) {
      var e = null;

      var f = this.getDeclForAST(b);
      if (!f) {
        var g = this.semanticInfoChain.getUnit(this.unitPath);

        var h = new a.DeclCollectionContext(g);
        h.scriptName = this.unitPath;

        if (c) {
          h.pushParent(c);
        }

        a.getAstWalkerFactory().walk(b, a.preCollectDecls, a.postCollectDecls, null, h);
        var f = this.getDeclForAST(b);
        this.currentUnit.addSynthesizedDecl(f);
        var i = new a.PullSymbolBinder(this.semanticInfoChain);
        i.setUnit(this.unitPath);

        i.bindObjectTypeDeclarationToPullSymbol(f);
      }
      e = f.getSymbol();
      if (b.members) {
        var j = null;

        var k = null;

        var l = null;

        var m = b.members;
        for (var n = 0; n < m.members.length; n++) {
          j = this.getDeclForAST(m.members[n]);
          k = j.getKind() & a.PullElementKind.SomeSignature ? j.getSignatureSymbol() : j.getSymbol();
          this.resolveDeclaredSymbol(k, c, d);
          l = k.getType();
          if (l && l.isGeneric() || k.isSignature() && k.isGeneric()) {
            e.setHasGenericMember();
          }
        }
      }
      e.setResolved();

      return e;
    };

    d.prototype.resolveTypeReference = function(a, b, c) {
      if (a === null) {
        return null;
      }
      var d = this.getSymbolAndDiagnosticsForAST(a);
      d || (d = this.computeTypeReferenceSymbol(a, b, c), d.symbol.isGeneric() || this.setSymbolAndDiagnosticsForAST(
        a, d, c));

      return d;
    };

    d.prototype.computeTypeReferenceSymbol = function(c, d, e) {
      var f = null;

      var g = null;

      var h = null;
      if (c.term.nodeType === 20) {
        var i = e.resolvingTypeReference;
        e.resolvingTypeReference = !0;

        h = this.resolveTypeNameExpression(c.term, d, e);

        f = h.symbol;

        e.resolvingTypeReference = i;
      } else if (c.term.nodeType === 12) {
        f = this.resolveFunctionTypeSignature(c.term, d, e);
      } else if (c.term.nodeType === 14) {
        f = this.resolveInterfaceTypeReference(c.term, d, e);
      } else if (c.term.nodeType === 10) {
        h = this.resolveGenericTypeReference(c.term, d, e);
        f = h.symbol;
      } else if (c.term.nodeType === 32) {
        var j = c.term;
        i = e.resolvingTypeReference;

        h = this.resolveDottedTypeNameExpression(j, d, e);

        f = h.symbol;

        e.resolvingTypeReference = i;
      } else if (c.term.nodeType === 5) {
        var k = c.term;
        f = new a.PullStringConstantTypeSymbol(k.actualText);
        var l = new a.PullDecl(k.actualText, k.actualText, f.getKind(), null, new a.TextSpan(k.minChar, k.getLength()),
          d.getScriptName());
        this.currentUnit.addSynthesizedDecl(l);

        f.addDeclaration(l);
      }
      if (!f) {
        return b.create(this.getNewErrorTypeSymbol(null), [e.postError(this.unitPath, c.term.minChar, c.term.getLength(),
          146)]);
      }
      if (f.isError()) {
        return b.fromSymbol(f);
      }
      if (c.arrayCount) {
        var m = f.getArrayType();
        if (!m) {
          if (!this.cachedArrayInterfaceType().isResolved()) {
            this.resolveDeclaredSymbol(this.cachedArrayInterfaceType(), d, e);
          }
          if (f.isNamedTypeSymbol() && f.isGeneric() && !f.isTypeParameter() && f.isResolved() && !f.getIsSpecialized() &&
            f.getTypeParameters().length && f.getTypeArguments() == null && !this.isArrayOrEquivalent(f) && this.isTypeRefWithoutTypeArgs(
              c)) {
            e.postError(this.unitPath, c.minChar, c.getLength(), 239, null, d, !0);
            f = this.specializeTypeToAny(f, d, e);
          }
          m = a.specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, f, this, e);
          if (!m) {
            m = this.semanticInfoChain.anyTypeSymbol;
          }
        }
        if (c.arrayCount > 1)
          for (var n = c.arrayCount - 1; n > 0; n--) {
            var o = m.getArrayType();
            if (o) {
              m = o;
            } else {
              m = a.specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, m, this, e);
            }
          }
        f = m;
      }
      return b.fromSymbol(f);
    };

    d.prototype.resolveVariableDeclaration = function(b, c, d) {
      var e = this.getDeclForAST(b);
      if (d && e.getKind() == 2048) {
        d.ensureSymbolIsBound();
      }
      var f = e.getSymbol();

      var g = e.getValueDecl() ? e.getValueDecl().getSymbol() : null;
      if (f.isResolved()) {
        var h = f.getType();

        var i = e.getValueDecl();
        if (i) {
          var j = i.getSymbol();
          if (j && !j.isResolved()) {
            j.setType(h);
            j.setResolved();
          }
        }
        return h;
      }
      if (f.isResolving() && !c.inSpecialization) {
        f.setType(this.semanticInfoChain.anyTypeSymbol);
        f.setResolved();
        return f;
      }
      f.startResolving();
      var k = this.getEnclosingDecl(e);
      k = k ? k : d;
      var l = null;
      if (b.typeExpr) {
        var m = this.resolveTypeReference(b.typeExpr, k, c).symbol;
        if (!m) {
          l = c.postError(this.unitPath, b.minChar, b.getLength(), 147, [b.id.actualText], e);
          f.setType(this.getNewErrorTypeSymbol(l));
          if (g) {
            c.setTypeInContext(g, this.semanticInfoChain.anyTypeSymbol);
          }
        } else if (m.isError()) {
          c.setTypeInContext(f, m);
        } else {
          if (m.isNamedTypeSymbol() && m.isGeneric() && !m.isTypeParameter() && m.isResolved() && !m.getIsSpecialized() &&
            m.getTypeParameters().length && m.getTypeArguments() == null && !this.isArrayOrEquivalent(m) && this.isTypeRefWithoutTypeArgs(
              b.typeExpr)) {
            c.postError(this.unitPath, b.typeExpr.minChar, b.typeExpr.getLength(), 239, null, d, !0);
            m = this.specializeTypeToAny(m, d, c);
          }
          if (m.isContainer()) {
            var n = m.getExportAssignedTypeSymbol();
            if (n) {
              m = n;
            } else {
              var o = m.getType().getInstanceSymbol();
              if (!o || !a.PullHelpers.symbolIsEnum(o)) {
                m = this.getNewErrorTypeSymbol(l);
              } else {
                m = o.getType();
              }
            }
          } else if (f.getIsVarArg() && !m.isArray() && m != this.cachedArrayInterfaceType()) {
            var l = c.postError(this.unitPath, b.minChar, b.getLength(), 228, null, d);
            m = this.getNewErrorTypeSymbol(l);
          }
          c.setTypeInContext(f, m);

          if (g) {
            g.setType(m);
          }
          if (b.nodeType === 19 && d && (m.isGeneric() && !m.isArray() || this.isTypeArgumentOrWrapper(m))) {
            var p = d.getSpecializingSignatureSymbol();
            if (p) {
              p.setHasGenericParameter();
            }
          }
        }
      } else if (b.init) {
        var q = this.resolveAST(b.init, !1, k, c);

        var r = q && q.symbol;
        if (r) {
          c.setTypeInContext(f, this.widenType(r.getType()));
          r.addOutgoingLink(f, 2);
          if (g) {
            c.setTypeInContext(g, r.getType());
            r.addOutgoingLink(g, 2);
          }
        } else {
          l = c.postError(this.unitPath, b.minChar, b.getLength(), 147, [b.id.actualText], e);
          c.setTypeInContext(f, this.getNewErrorTypeSymbol(l));
          if (g) {
            c.setTypeInContext(g, this.semanticInfoChain.anyTypeSymbol);
          }
        }
      } else if (f.getKind() === 4) {
        o = f.getInstanceSymbol();
        var s = o.getType();
        if (s) {
          c.setTypeInContext(f, s);
        } else {
          c.setTypeInContext(f, this.semanticInfoChain.anyTypeSymbol);
        }
      } else {
        var t = this.semanticInfoChain.anyTypeSymbol;
        if (f.getIsVarArg()) {
          t = a.specializeToArrayType(this.cachedArrayInterfaceType(), t, this, c);
        }

        c.setTypeInContext(f, t);

        if (g) {
          g.setType(t);
        }
      }
      f.setResolved();

      g && g.setResolved();

      return f;
    };

    d.prototype.resolveTypeParameterDeclaration = function(a, b) {
      var c = this.getDeclForAST(a);

      var d = c.getSymbol();
      if (d.isResolved() || d.isResolving()) {
        return d;
      }
      d.startResolving();
      if (a.constraint) {
        var e = this.getEnclosingDecl(c);

        var f = this.resolveTypeReference(a.constraint, e, b).symbol;
        if (f.isNamedTypeSymbol() && f.isGeneric() && !f.isTypeParameter() && f.getTypeParameters().length && f.getTypeArguments() ==
          null && !this.isArrayOrEquivalent(f) && f.isResolved() && this.isTypeRefWithoutTypeArgs(a.constraint)) {
          b.postError(this.unitPath, a.constraint.minChar, a.constraint.getLength(), 239, null, e, !0);
          f = this.specializeTypeToAny(f, e, b);
        }

        if (f) {
          d.setConstraint(f);
        }
      }
      d.setResolved();

      return d;
    };

    d.prototype.resolveFunctionBodyReturnTypes = function(b, c, d, e, f) {
      var g = this;

      var h = [];

      var i = [e];

      var j = function(a, b, c) {
        var d = !0;
        switch (a.nodeType) {
          case 12:
            d = !1;
            break;
          case 93:
            var e = a;
            h[h.length] = {
              returnStatement: e,
              enclosingDecl: i[i.length - 1]
            };

            d = !1;
            break;
          case 101:
          case 99:
            i[i.length] = g.getDeclForAST(a);
            break;
          default:
        }
        c.options.goChildren = d;

        return a;
      };

      var k = function(a, b, c) {
        switch (a.nodeType) {
          case 101:
          case 99:
            i.length--;
            break;
          default:
        }
        c.options.goChildren = !0;

        return a;
      };
      a.getAstWalkerFactory().walk(b.block, j, k);
      if (!h.length) {
        c.setReturnType(this.semanticInfoChain.voidTypeSymbol);
      } else {
        var l = [];

        var m;
        for (var n = 0; n < h.length; n++)
          if (h[n].returnStatement.returnExpression) {
            m = this.resolveAST(h[n].returnStatement.returnExpression, d, h[n].enclosingDecl, f).symbol.getType();
            if (m.isError()) {
              c.setReturnType(m);
              return;
            }
            l[l.length] = m;
          }
        if (!l.length) {
          c.setReturnType(this.semanticInfoChain.voidTypeSymbol);
        } else {
          var o = {
            getLength: function() {
              return l.length;
            },
            setTypeAtIndex: function(a, b) {},
            getTypeAtIndex: function(a) {
              return l[a].getType();
            }
          };
          m = this.findBestCommonType(l[0], null, o, f, new a.TypeComparisonInfo);
          if (d && m == this.semanticInfoChain.anyTypeSymbol) {
            var p = f.getContextualType();
            if (p) {
              m = p;
            }
          }
          c.setReturnType(m ? this.widenType(m) : this.semanticInfoChain.anyTypeSymbol);
          if (this.isTypeArgumentOrWrapper(m)) {
            var q = this.getDeclForAST(b);

            var r = q.getSymbol();
            if (r) {
              r.getType().setHasGenericSignature();
            }
          }
          for (var n = 0; n < l.length; n++) {
            l[n].addOutgoingLink(c, 2);
          }
        }
      }
    };

    d.prototype.resolveFunctionDeclaration = function(b, c) {
      var d = this.getDeclForAST(b);

      var e = d.getSymbol();

      var f = d.getSpecializingSignatureSymbol();

      var g = !1;

      var h = b.isConstructor || a.hasFlag(b.getFunctionFlags(), 1024);
      if (f) {
        if (f.isResolved()) {
          return e;
        }
        if (h && !f.isResolving()) {
          var i = b.classDecl;
          if (i) {
            var j = this.getDeclForAST(i);

            var k = j.getSymbol();
            if (!k.isResolved() && !k.isResolving()) {
              this.resolveDeclaredSymbol(k, this.getEnclosingDecl(j), c);
            }
          }
        }
        var l;
        if (f.isResolving()) {
          if (b.returnTypeAnnotation) {
            var m = this.resolveTypeReference(b.returnTypeAnnotation, d, c).symbol;
            if (m) {
              if (this.isTypeArgumentOrWrapper(m)) {
                f.setHasGenericParameter();
                if (e) {
                  e.getType().setHasGenericSignature();
                }
              }
              f.setReturnType(m);
              if (h && m === this.semanticInfoChain.voidTypeSymbol) {
                c.postError(this.unitPath, b.minChar, b.getLength(), 198, null, d, !0);
              }
            } else {
              l = c.postError(this.unitPath, b.returnTypeAnnotation.minChar, b.returnTypeAnnotation.getLength(), 197,
                null, d);
              f.setReturnType(this.getNewErrorTypeSymbol(l));
              g = !0;
            }
          } else {
            f.setReturnType(this.semanticInfoChain.anyTypeSymbol);
          }
          f.setResolved();

          return e;
        }
        f.startResolving();
        if (b.typeArguments)
          for (var n = 0; n < b.typeArguments.members.length; n++) {
            this.resolveTypeParameterDeclaration(b.typeArguments.members[n], c);
          }
        if (b.arguments)
          for (var n = 0; n < b.arguments.members.length; n++) {
            this.resolveVariableDeclaration(b.arguments.members[n], c, d);
          }
        if (f.isGeneric() && e) {
          e.getType().setHasGenericSignature();
        }
        if (b.returnTypeAnnotation) {
          var o = f.getReturnType();
          m = this.resolveTypeReference(b.returnTypeAnnotation, d, c).symbol;

          if (m) {
            if (!(this.isTypeArgumentOrWrapper(m) && o && !this.isTypeArgumentOrWrapper(o))) {
              if (this.isTypeArgumentOrWrapper(m)) {
                f.setHasGenericParameter();
                if (e) {
                  e.getType().setHasGenericSignature();
                }
              }
              f.setReturnType(m);
              if (h && m === this.semanticInfoChain.voidTypeSymbol) {
                c.postError(this.unitPath, b.minChar, b.getLength(), 198, null, d, !0);
              }
            }
          } else {
            l = c.postError(this.unitPath, b.returnTypeAnnotation.minChar, b.returnTypeAnnotation.getLength(), 197,
              null, d);
            f.setReturnType(this.getNewErrorTypeSymbol(l));
            g = !0;
          }
        } else {
          if (!b.isConstructor) {
            if (b.isSignature()) {
              f.setReturnType(this.semanticInfoChain.anyTypeSymbol);
            } else {
              this.resolveFunctionBodyReturnTypes(b, f, !1, d, c);
            }
          }
        }
        if (!g) {
          f.setResolved();
        }
      }
      return e;
    };

    d.prototype.resolveGetAccessorDeclaration = function(a, b) {
      var c = this.getDeclForAST(a);

      var d = c.getSymbol();

      var e = d.getGetter();

      var f = e.getType();

      var g = f.getCallSignatures()[0];

      var h = !1;

      var i;
      if (g) {
        if (g.isResolved()) {
          return d;
        }
        if (g.isResolving()) {
          g.setReturnType(this.semanticInfoChain.anyTypeSymbol);
          g.setResolved();
          return d;
        }
        g.startResolving();
        if (a.arguments)
          for (var j = 0; j < a.arguments.members.length; j++) {
            this.resolveVariableDeclaration(a.arguments.members[j], b, c);
          }
        if (g.hasGenericParameter() && e) {
          f.setHasGenericSignature();
        }
        if (a.returnTypeAnnotation) {
          var k = this.resolveTypeReference(a.returnTypeAnnotation, c, b).symbol;
          if (k) {
            if (this.isTypeArgumentOrWrapper(k)) {
              g.setHasGenericParameter();
              if (e) {
                f.setHasGenericSignature();
              }
            }
            g.setReturnType(k);
          } else {
            i = b.postError(this.unitPath, a.returnTypeAnnotation.minChar, a.returnTypeAnnotation.getLength(), 197,
              null, c);
            g.setReturnType(this.getNewErrorTypeSymbol(i));
            h = !0;
          }
        } else {
          if (a.isSignature()) {
            g.setReturnType(this.semanticInfoChain.anyTypeSymbol);
          } else {
            this.resolveFunctionBodyReturnTypes(a, g, !1, c, b);
          }
        }
        if (!h) {
          g.setResolved();
        }
      }
      var l = g.getReturnType();

      var m = d.getSetter();
      if (m) {
        var n = m.getType();

        var o = n.getCallSignatures()[0];
        if (o.isResolved()) {
          var p = o.getParameters();
          if (p.length) {
            var q = p[0];

            var r = q.getType();
            if (!this.typesAreIdentical(l, r)) {
              i = b.postError(this.unitPath, a.minChar, a.getLength(), 165, null, this.getEnclosingDecl(c));
              d.setType(this.getNewErrorTypeSymbol(i));
            }
          }
        } else {
          d.setType(l);
        }
      } else {
        d.setType(l);
      }
      return d;
    };

    d.prototype.resolveSetAccessorDeclaration = function(a, b) {
      var c = this.getDeclForAST(a);

      var d = c.getSymbol();

      var e = d.getSetter();

      var f = e.getType();

      var g = f.getCallSignatures()[0];

      var h = !1;
      if (g) {
        if (g.isResolved()) {
          return d;
        }
        if (g.isResolving()) {
          g.setReturnType(this.semanticInfoChain.anyTypeSymbol);
          g.setResolved();
          return d;
        }
        g.startResolving();
        if (a.arguments)
          for (var i = 0; i < a.arguments.members.length; i++) {
            this.resolveVariableDeclaration(a.arguments.members[i], b, c);
          }
        if (g.hasGenericParameter() && e) {
          f.setHasGenericSignature();
        }

        if (!h) {
          g.setResolved();
        }
      }
      var j = g.getParameters();

      var k = d.getGetter();

      var l = j.length ? j[0].getType() : k ? k.getType() : this.semanticInfoChain.undefinedTypeSymbol;
      if (k) {
        var m = k.getType();

        var n = m.getCallSignatures()[0];
        if (l == this.semanticInfoChain.undefinedTypeSymbol) {
          l = m;
        }
        if (n.isResolved()) {
          var o = n.getReturnType();
          if (!this.typesAreIdentical(l, o))
            if (this.isAnyOrEquivalent(l)) {
              d.setType(o);
              if (!l.isError()) {
                j[0].setType(o);
              }
            } else {
              var p = b.postError(this.unitPath, a.minChar, a.getLength(), 165, null, this.getEnclosingDecl(c));
              d.setType(this.getNewErrorTypeSymbol(p));
            }
        } else {
          d.setType(l);
        }
      } else {
        d.setType(l);
      }
      return d;
    };

    d.prototype.resolveAST = function(c, d, e, f) {
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      switch (c.nodeType) {
        case 101:
        case 99:
        case 2:
          return b.fromSymbol(null);
        case 15:
          return b.fromSymbol(this.resolveModuleDeclaration(c, f));
        case 14:
          return b.fromSymbol(this.resolveInterfaceDeclaration(c, f));
        case 13:
          return b.fromSymbol(this.resolveClassDeclaration(c, f));
        case 17:
        case 19:
          return b.fromSymbol(this.resolveVariableDeclaration(c, f, e));
        case 9:
          return b.fromSymbol(this.resolveTypeParameterDeclaration(c, f));
        case 16:
          return b.fromSymbol(this.resolveImportDeclaration(c, f));
        case 22:
          return this.resolveObjectLiteralExpression(c, d, e, f);
        case 10:
          return this.resolveGenericTypeReference(c, e, f);
        case 20:
          return f.resolvingTypeReference ? this.resolveTypeNameExpression(c, e, f) : this.resolveNameExpression(c, e,
            f);
        case 32:
          return f.resolvingTypeReference ? this.resolveDottedTypeNameExpression(c, e, f) : this.resolveDottedNameExpression(
            c, e, f);
        case 10:
          return this.resolveGenericTypeReference(c, e, f);
        case 12:
          var g = c;
          return g.isGetAccessor() ? b.fromSymbol(this.resolveGetAccessorDeclaration(g, f)) : g.isSetAccessor() ? b.fromSymbol(
            this.resolveSetAccessorDeclaration(g, f)) : d || g.getFunctionFlags() & 8192 || g.getFunctionFlags() &
            2048 || g.getFunctionFlags() & 16384 ? b.fromSymbol(this.resolveFunctionExpression(g, d, e, f)) : b.fromSymbol(
              this.resolveFunctionDeclaration(g, f));
        case 21:
          return this.resolveArrayLiteralExpression(c, d, e, f);
        case 29:
          return this.resolveThisExpression(c, e, f);
        case 30:
          return this.resolveSuperExpression(c, e, f);
        case 36:
          return this.resolveCallExpression(c, d, e, f);
        case 37:
          return this.resolveNewExpression(c, d, e, f);
        case 78:
          return this.resolveTypeAssertionExpression(c, d, e, f);
        case 11:
          return this.resolveTypeReference(c, e, f);
        case 87:
          return this.resolveExportAssignmentStatement(c, e, f);
        case 7:
          return b.fromSymbol(this.semanticInfoChain.numberTypeSymbol);
        case 5:
          return b.fromSymbol(this.semanticInfoChain.stringTypeSymbol);
        case 8:
          return b.fromSymbol(this.semanticInfoChain.nullTypeSymbol);
        case 3:
        case 4:
          return b.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);
        case 24:
          return b.fromSymbol(this.semanticInfoChain.voidTypeSymbol);
        case 38:
          return this.resolveAssignmentStatement(c, d, e, f);
        case 73:
        case 57:
        case 56:
        case 58:
        case 59:
        case 60:
        case 61:
        case 63:
        case 62:
          return b.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);
        case 64:
        case 39:
          return this.resolveArithmeticExpression(c, d, e, f);
        case 40:
        case 42:
        case 41:
        case 43:
        case 46:
        case 44:
        case 72:
        case 65:
        case 66:
        case 67:
        case 68:
        case 53:
        case 55:
        case 26:
        case 27:
        case 76:
        case 74:
        case 77:
        case 75:
          return b.fromSymbol(this.semanticInfoChain.numberTypeSymbol);
        case 69:
        case 70:
        case 71:
        case 47:
        case 48:
        case 49:
          return b.fromSymbol(this.semanticInfoChain.numberTypeSymbol);
        case 35:
          return this.resolveIndexExpression(c, d, e, f);
        case 51:
          return this.resolveLogicalOrExpression(c, d, e, f);
        case 52:
          return this.resolveLogicalAndExpression(c, d, e, f);
        case 34:
          return b.fromSymbol(this.semanticInfoChain.stringTypeSymbol);
        case 95:
          return b.fromSymbol(this.semanticInfoChain.voidTypeSymbol);
        case 28:
          return b.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);
        case 50:
          return this.resolveConditionalExpression(c, e, f);
        case 6:
          return this.resolveRegularExpressionLiteral();
        case 79:
          return this.resolveParenthesizedExpression(c, e, f);
        case 88:
          return this.resolveExpressionStatement(c, d, e, f);
        case 33:
          return b.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);
      }
      return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
    };

    d.prototype.resolveRegularExpressionLiteral = function() {
      return this.cachedRegExpInterfaceType() ? b.fromSymbol(this.cachedRegExpInterfaceType()) : b.fromSymbol(this.semanticInfoChain
        .anyTypeSymbol);
    };

    d.prototype.isNameOrMemberAccessExpression = function(a) {
      var b = a;
      while (b)
        if (b.nodeType === 88) {
          b = b.expression;
        } else {
          if (b.nodeType !== 79) {
            return b.nodeType === 20 ? !0 : b.nodeType === 32 ? !0 : !1;
          }
          b = b.expression;
        }
    };

    d.prototype.resolveNameSymbol = function(b, c) {
      b && !c.canUseTypeSymbol && b != this.semanticInfoChain.undefinedTypeSymbol && b != this.semanticInfoChain.nullTypeSymbol &&
        (b.isPrimitive() || !(b.getKind() & a.PullElementKind.SomeValue)) && (b = null);

      return b;
    };

    d.prototype.resolveNameExpression = function(a, b, c) {
      var d = this.getSymbolAndDiagnosticsForAST(a);

      var e = d != null;
      if (!e) {
        d = this.computeNameExpression(a, b, c);
      }
      var f = d.symbol;
      f.isResolved() || this.resolveDeclaredSymbol(f, b, c);

      !e && !this.isAnyOrEquivalent(f.getType()) && this.setSymbolAndDiagnosticsForAST(a, d, c);

      return d;
    };

    d.prototype.computeNameExpression = function(c, d, e) {
      if (c.isMissing()) {
        return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
      }
      var f = c.text;

      var g = d !== null ? a.getPathToDecl(d) : [];
      if (d && !g.length) {
        g = [d];
      }
      var h = null;

      var i = this.getSymbolFromDeclPath(f, g, a.PullElementKind.SomeValue);
      if (!i && f === "arguments" && d && d.getKind() & a.PullElementKind.SomeFunction) {
        i = this.cachedFunctionArgumentsSymbol;
        if (this.cachedIArgumentsInterfaceType() && !this.cachedIArgumentsInterfaceType().isResolved()) {
          this.resolveDeclaredSymbol(this.cachedIArgumentsInterfaceType(), d, e);
        }
      }
      if (!i) {
        return b.create(this.getNewErrorTypeSymbol(null, f), [e.postError(this.unitPath, c.minChar, c.getLength(),
          164, [c.actualText])]);
      }
      if (i.isType() && i.isAlias()) {
        h = i;

        h.setIsUsedAsValue();

        if (!i.isResolved()) {
          this.resolveDeclaredSymbol(i, d, e);
        }
        var j = i.getExportAssignedValueSymbol();
        if (j) {
          i = j;
        } else {
          h = null;
        }
      }
      return b.fromAlias(i, h);
    };

    d.prototype.resolveDottedNameExpression = function(a, b, c) {
      var d = this.getSymbolAndDiagnosticsForAST(a);

      var e = d != null;
      if (!e) {
        d = this.computeDottedNameExpressionSymbol(a, b, c);
      }
      var f = d && d.symbol;
      f && !f.isResolved() && this.resolveDeclaredSymbol(f, b, c);

      !e && !this.isAnyOrEquivalent(f.getType()) && (this.setSymbolAndDiagnosticsForAST(a, d, c), this.setSymbolAndDiagnosticsForAST(
        a.operand2, d, c));

      return d;
    };

    d.prototype.isPrototypeMember = function(a, b, c) {
      var d = a.operand2.text;
      if (d === "prototype") {
        var e = c.canUseTypeSymbol;
        c.canUseTypeSymbol = !0;
        var f = this.resolveAST(a.operand1, !1, b, c).symbol.getType();
        c.canUseTypeSymbol = e;
        if (f) {
          if (f.isClass() || f.isConstructor()) {
            return !0;
          }
          var g = f.getAssociatedContainerType();
          if (g && g.isClass()) {
            return !0;
          }
        }
      }
      return !1;
    };

    d.prototype.computeDottedNameExpressionSymbol = function(c, d, e) {
      if (c.operand2.isMissing()) {
        return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
      }
      var f = c.operand2.text;

      var g = e.canUseTypeSymbol;
      e.canUseTypeSymbol = !0;
      var h = this.resolveAST(c.operand1, !1, d, e).symbol;
      e.canUseTypeSymbol = g;
      var i = h.getType();
      if (h.isAlias()) {
        h.setIsUsedAsValue();
      }
      if (this.isAnyOrEquivalent(i)) {
        return b.fromSymbol(i);
      }
      if (!i) {
        return b.create(this.getNewErrorTypeSymbol(null), [e.postError(this.unitPath, c.operand2.minChar, c.operand2.getLength(),
          162, [c.operand2.actualText])]);
      }
      if (i !== this.semanticInfoChain.numberTypeSymbol && h.getKind() != 67108864 || !this.cachedNumberInterfaceType()) {
        if (i === this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType()) {
          i = this.cachedStringInterfaceType();
        } else {
          if (i === this.semanticInfoChain.booleanTypeSymbol && this.cachedBooleanInterfaceType()) {
            i = this.cachedBooleanInterfaceType();
          }
        }
      } else {
        i = this.cachedNumberInterfaceType();
      }
      if (!i.isResolved()) {
        var j = this.resolveDeclaredSymbol(i, d, e);
        if (j != i) {
          if (!h.isType()) {
            e.setTypeInContext(h, j);
          }
          i = j;
        }
      }
      if (i.isContainer() && !i.isAlias()) {
        var k = i.getInstanceSymbol();
        if (k) {
          i = k.getType();
        }
      }
      if (this.isPrototypeMember(c, d, e)) {
        if (i.isClass()) {
          return b.fromSymbol(i);
        }
        var l = i.getAssociatedContainerType();
        if (l && l.isClass()) {
          return b.fromSymbol(l);
        }
      }
      if (i.isTypeParameter()) {
        i = this.substituteUpperBoundForType(i);
      }
      var m = null;
      if (!(h.isType() && h.isClass() && this.isNameOrMemberAccessExpression(c.operand1)) && !m) {
        m = this.getMemberSymbol(f, a.PullElementKind.SomeValue, i);
        m = this.resolveNameSymbol(m, e);
      }
      if (!m) {
        if (i.isClass()) {
          var n = i.getConstructorMethod().getType();
          m = this.getMemberSymbol(f, a.PullElementKind.SomeValue, n);

          if (!m) {
            m = this.getMemberSymbol(f, a.PullElementKind.SomeValue, i);
          }
        } else if ((i.getCallSignatures().length || i.getConstructSignatures().length) && this.cachedFunctionInterfaceType()) {
          m = this.getMemberSymbol(f, a.PullElementKind.SomeValue, this.cachedFunctionInterfaceType());
        } else if (i.isContainer()) {
          var o = i.isAlias() ? i.getType() : i;

          var p = o.getInstanceSymbol();
          if (p) {
            var q = p.getType();
            m = this.getMemberSymbol(f, a.PullElementKind.SomeValue, q);
          }
        } else {
          var r = i.getAssociatedContainerType();
          if (r && !r.isClass()) {
            m = this.getMemberSymbol(f, a.PullElementKind.SomeValue, r);
          }
        }
        m = this.resolveNameSymbol(m, e);

        if (!m && !i.isPrimitive() && this.cachedObjectInterfaceType()) {
          m = this.getMemberSymbol(f, a.PullElementKind.SomeValue, this.cachedObjectInterfaceType());
        }
        if (!m) {
          return b.create(this.getNewErrorTypeSymbol(null, f), [e.postError(this.unitPath, c.operand2.minChar, c.operand2
            .getLength(), 163, [c.operand2.actualText, i.getDisplayName()])]);
        }
      }
      return b.fromSymbol(m);
    };

    d.prototype.resolveTypeNameExpression = function(c, d, e) {
      var f = this.getSymbolAndDiagnosticsForAST(c);
      if (!f || !f.symbol.isType()) {
        f = this.computeTypeNameExpression(c, d, e);
        this.setSymbolAndDiagnosticsForAST(c, f, e);
      }
      var g = f && f.symbol;
      if (!g.isResolved()) {
        var h = e.resolvingNamespaceMemberAccess;
        e.resolvingNamespaceMemberAccess = !1;

        this.resolveDeclaredSymbol(g, d, e);

        e.resolvingNamespaceMemberAccess = h;
      }
      if (g && !(g.isTypeParameter() && g.isFunctionTypeParameter() && e.isSpecializingSignatureAtCallSite && !e.isSpecializingConstructorMethod)) {
        var i = e.findSpecializationForType(g);
        if (g.isTypeParameter() && i != g && a.shouldSpecializeTypeParameterForTypeParameter(i, g)) {
          g = i;
        }
        if (g != f.symbol) {
          return b.fromSymbol(g);
        }
      }
      return f;
    };

    d.prototype.computeTypeNameExpression = function(c, d, e) {
      if (c.isMissing()) {
        return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
      }
      var f = c.text;
      if (f === "any") {
        return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
      }
      if (f === "string") {
        return b.fromSymbol(this.semanticInfoChain.stringTypeSymbol);
      }
      if (f === "number") {
        return b.fromSymbol(this.semanticInfoChain.numberTypeSymbol);
      }
      if (f === "bool") {
        return this.compilationSettings.disallowBool && !this.currentUnit.getProperties().unitContainsBool ? (this.currentUnit
          .getProperties().unitContainsBool = !0, b.create(this.semanticInfoChain.booleanTypeSymbol, [e.postError(
            this.unitPath, c.minChar, c.getLength(), 167)])) : b.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);
      }
      if (f === "boolean") {
        return b.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);
      }
      if (f === "void") {
        return b.fromSymbol(this.semanticInfoChain.voidTypeSymbol);
      }
      var g = d !== null ? a.getPathToDecl(d) : [];
      if (d && !g.length) {
        g = [d];
      }
      var h = e.resolvingNamespaceMemberAccess ? a.PullElementKind.SomeContainer : a.PullElementKind.SomeType;

      var i = e.resolvingNamespaceMemberAccess ? a.PullElementKind.SomeType : a.PullElementKind.SomeContainer;

      var j = this.getSymbolFromDeclPath(f, g, h);
      if (!j) {
        j = this.getSymbolFromDeclPath(f, g, i);
      }
      if (!j) {
        return b.create(this.getNewErrorTypeSymbol(null, f), [e.postError(this.unitPath, c.minChar, c.getLength(),
          164, [c.actualText])]);
      }
      if (j.isAlias()) {
        if (!j.isResolved()) {
          var k = e.resolvingNamespaceMemberAccess;
          e.resolvingNamespaceMemberAccess = !1;

          this.resolveDeclaredSymbol(j, d, e);

          e.resolvingNamespaceMemberAccess = k;
        }
        var l = j.getType();
        if (l && !l.isResolved()) {
          this.resolveDeclaredSymbol(l, d, e);
        }
        var m = j.getExportAssignedTypeSymbol();
        if (m) {
          j = m;
        }
      }
      if (j.isTypeParameter() && d && d.getKind() & a.PullElementKind.SomeFunction && d.getFlags() & 16) {
        var n = j.getDeclarations()[0].getParentDecl();
        if (n.getKind() == 8) {
          return b.create(this.getNewErrorTypeSymbol(null), [e.postError(this.unitPath, c.minChar, c.getLength(), 226)]);
        }
      }
      return b.fromSymbol(j);
    };

    d.prototype.addDiagnostic = function(a, b) {
      a || (a = []);

      a.push(b);

      return a;
    };

    d.prototype.resolveGenericTypeReference = function(c, d, e) {
      var f = e.resolvingTypeReference;
      e.resolvingTypeReference = !0;
      var g = this.resolveAST(c.name, !1, d, e).symbol.getType();
      e.resolvingTypeReference = f;
      if (g.isError()) {
        return b.fromSymbol(g);
      }
      if (!g.isResolving() && !g.isResolved()) {
        this.resolveDeclaredSymbol(g, d, e);
      }
      var h = [];
      if (!e.isResolvingTypeArguments(c)) {
        e.startResolvingTypeArguments(c);
        if (c.typeArguments && c.typeArguments.members.length)
          for (var i = 0; i < c.typeArguments.members.length; i++) {
            var j = this.resolveTypeReference(c.typeArguments.members[i], d, e).symbol;
            if (j.isNamedTypeSymbol() && j.isGeneric() && !j.isTypeParameter() && j.isResolved() && !j.getIsSpecialized() &&
              j.getTypeParameters().length && j.getTypeArguments() == null && !this.isArrayOrEquivalent(j) && this.isTypeRefWithoutTypeArgs(
                c.typeArguments.members[i])) {
              e.postError(this.unitPath, c.typeArguments.members[i].minChar, c.typeArguments.members[i].getLength(),
                239, null, d, !0);
              j = this.specializeTypeToAny(j, d, e);
            }

            h[i] = e.findSpecializationForType(j);
          }
        e.doneResolvingTypeArguments();
      }
      var k = g.getTypeParameters();
      if (h.length && h.length != k.length) {
        return b.create(this.getNewErrorTypeSymbol(null), [e.postError(this.unitPath, c.minChar, c.getLength(), 159, [
          g.toString(), g.getTypeParameters().length
        ])]);
      }
      var l = a.specializeType(g, h, this, d, e, c);

      var m = null;

      var n = null;

      var o = null;
      for (var p = 0; p < h.length && p < k.length; p++) {
        j = h[p];

        m = k[p].getConstraint();
        if (m) {
          if (m.isTypeParameter())
            for (var q = 0; q < k.length && q < h.length; q++) {
              if (k[q] == m) {
                m = h[q];
              }
            }
          if (j.isTypeParameter()) {
            n = j.getConstraint();
            if (n) {
              j = n;
            }
          }
          if (j.isResolving()) {
            return b.fromSymbol(l);
          }
          if (!this.sourceIsAssignableToTarget(j, m, e)) {
            o = this.addDiagnostic(o, e.postError(this.unitPath, c.minChar, c.getLength(), 155, [j.toString(!0), m.toString(!
              0), k[p].toString(!0)]));
          }
        }
      }
      return b.create(l, o);
    };

    d.prototype.resolveDottedTypeNameExpression = function(a, b, c) {
      var d = this.getSymbolAndDiagnosticsForAST(a);
      if (!d) {
        d = this.computeDottedTypeNameExpression(a, b, c);
        this.setSymbolAndDiagnosticsForAST(a, d, c);
      }
      var e = d.symbol;
      e.isResolved() || this.resolveDeclaredSymbol(e, b, c);

      return d;
    };

    d.prototype.computeDottedTypeNameExpression = function(c, d, e) {
      if (c.operand2.isMissing()) {
        return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
      }
      var f = c.operand2.text;

      var g = e.resolvingTypeReference;

      var h = e.resolvingNamespaceMemberAccess;
      e.resolvingNamespaceMemberAccess = !0;

      e.resolvingTypeReference = !0;
      var i = this.resolveAST(c.operand1, !1, d, e).symbol;
      e.resolvingTypeReference = g;

      e.resolvingNamespaceMemberAccess = h;
      var j = i.getType();
      if (e.isResolvingClassExtendedType && i.isAlias()) {
        i.setIsUsedAsValue();
      }
      if (this.isAnyOrEquivalent(j)) {
        return b.fromSymbol(j);
      }
      if (!j) {
        return b.create(this.getNewErrorTypeSymbol(null), [e.postError(this.unitPath, c.operand2.minChar, c.operand2.getLength(),
          162, [c.operand2.actualText])]);
      }
      var k = this.getMemberSymbol(f, a.PullElementKind.SomeType, j);
      if (!k && j.isContainer()) {
        var l = j.getExportAssignedContainerSymbol();
        if (l) {
          k = this.getMemberSymbol(f, a.PullElementKind.SomeType, l);
        }
      }
      if (!k && d) {
        var m = d;
        while (m) {
          if (m.getKind() & a.PullElementKind.SomeContainer) break;
          m = m.getParentDecl();
        }
        if (m) {
          var n = m.getSymbol().getType();
          if (n === j) {
            k = this.getMemberSymbol(f, a.PullElementKind.SomeType, j);
          }
        }
      }
      return k ? b.fromSymbol(k) : b.create(this.getNewErrorTypeSymbol(null, f), [e.postError(this.unitPath, c.operand2
        .minChar, c.operand2.getLength(), 163, [c.operand2.actualText, j.getName()])]);
    };

    d.prototype.resolveFunctionExpression = function(b, c, d, e) {
      var f = null;

      var g = this.getDeclForAST(b);
      if (g && g.hasSymbol()) {
        f = g.getSymbol();
        if (f.isResolved()) {
          return f;
        }
      }
      var h = c;

      var i = null;

      var j = null;
      if (b.returnTypeAnnotation) {
        h = !1;
      }
      if (h && b.arguments)
        for (var k = 0; k < b.arguments.members.length; k++)
          if (b.arguments.members[k].typeExpr) {
            h = !1;
            break;
          }
      if (h) {
        i = e.getContextualType();
        if (i) {
          this.resolveDeclaredSymbol(i, d, e);
          if (i) {
            j = i.getCallSignatures()[0];
          }
        }
      }
      var l = this.semanticInfoChain.getUnit(this.unitPath);

      var m = new a.DeclCollectionContext(l);
      m.scriptName = this.unitPath;

      if (d) {
        m.pushParent(d);
      }

      a.getAstWalkerFactory().walk(b, a.preCollectDecls, a.postCollectDecls, null, m);
      var g = this.getDeclForAST(b);
      this.currentUnit.addSynthesizedDecl(g);
      var n = new a.PullSymbolBinder(this.semanticInfoChain);
      n.setUnit(this.unitPath);

      n.bindFunctionExpressionToPullSymbol(g);

      f = g.getSymbol();
      var o = f.getType().getCallSignatures()[0];
      if (b.arguments) {
        var p = [];

        var q = null;
        if (j) {
          p = j.getParameters();
        }
        for (var k = 0; k < b.arguments.members.length; k++) {
          if (k < p.length && !p[k].getIsVarArg()) {
            q = p[k];
          } else {
            if (p.length && p[p.length - 1].getIsVarArg()) {
              q = p[p.length - 1].getType().getElementType();
            }
          }
          this.resolveFunctionExpressionParameter(b.arguments.members[k], q, g, e);
        }
      }
      if (b.returnTypeAnnotation) {
        var r = this.resolveTypeReference(b.returnTypeAnnotation, g, e).symbol;
        o.setReturnType(r);
      } else if (j) {
        var s = j.getReturnType();
        if (s) {
          e.pushContextualType(s, e.inProvisionalResolution(), null);
          this.resolveFunctionBodyReturnTypes(b, o, !0, g, e);
          e.popContextualType();
        } else {
          o.setReturnType(this.semanticInfoChain.anyTypeSymbol);
        }
      } else {
        this.resolveFunctionBodyReturnTypes(b, o, !1, g, e);
      }
      i && f.addOutgoingLink(i, 1);

      f.setResolved();

      return f;
    };

    d.prototype.resolveThisExpression = function(a, b, c) {
      var d = this.getSymbolAndDiagnosticsForAST(a);
      d || (d = this.computeThisExpressionSymbol(a, b, c), this.setSymbolAndDiagnosticsForAST(a, d, c));

      return d;
    };

    d.prototype.computeThisExpressionSymbol = function(c, d, e) {
      if (d) {
        var f = d.getKind();

        var g;
        if (f === 4) {
          return b.create(this.getNewErrorTypeSymbol(null), [e.postError(this.currentUnit.getPath(), c.minChar, c.getLength(),
            176)]);
        }
        if (!(f & (a.PullElementKind.SomeFunction | 1 | a.PullElementKind.SomeBlock))) {
          return b.create(this.getNewErrorTypeSymbol(null), [e.postError(this.currentUnit.getPath(), c.minChar, c.getLength(),
            177)]);
        }
        var h = a.getPathToDecl(d);
        if (h.length)
          for (var i = h.length - 1; i >= 0; i--) {
            var j = h[i];

            var k = j.getKind();

            var l = j.getFlags();
            if (l & 16) break;
            if (k === 131072 && !a.hasFlag(l, 8192)) break;
            if (k === 16384) break;
            if (k === 8) {
              var m = j.getSymbol();
              return b.fromSymbol(m);
            }
          }
      }
      return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
    };

    d.prototype.resolveSuperExpression = function(c, d, e) {
      if (!d) {
        return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
      }
      var f = d !== null ? a.getPathToDecl(d) : [];

      var g = null;
      if (f.length)
        for (var h = f.length - 1; h >= 0; h--) {
          var i = f[h];

          var j = i.getFlags();
          if (i.getKind() === 131072 && !(j & 8192)) break;
          if (j & 16) break;
          if (i.getKind() === 8) {
            g = i.getSymbol();
            break;
          }
        }
      if (g) {
        if (!g.isResolved()) {
          this.resolveDeclaredSymbol(g, d, e);
        }
        var k = g.getExtendedTypes();
        if (k.length) {
          return b.fromSymbol(k[0]);
        }
      }
      return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
    };

    d.prototype.resolveObjectLiteralExpression = function(a, b, c, d, e) {
      var f = this.getSymbolAndDiagnosticsForAST(a);
      if (!f || e) {
        f = this.computeObjectLiteralExpression(a, b, c, d, e);
        this.setSymbolAndDiagnosticsForAST(a, f, d);
      }
      return f;
    };

    d.prototype.computeObjectLiteralExpression = function(c, d, e, f, g) {
      var h = c;

      var i = a.TextSpan.fromBounds(h.minChar, h.limChar);

      var j = new a.PullDecl("", "", 512, 0, i, this.unitPath);
      this.currentUnit.addSynthesizedDecl(j);

      if (e) {
        j.setParentDecl(e);
      }

      this.currentUnit.setDeclForAST(h, j);

      this.currentUnit.setASTForDecl(j, h);
      var k = new a.PullTypeSymbol("", 16);
      k.addDeclaration(j);

      j.setSymbol(k);
      var l = h.operand;

      var m = null;
      if (d) {
        m = f.getContextualType();
        this.resolveDeclaredSymbol(m, e, f);
      }
      if (l) {
        var n;

        var o;

        var p = null;

        var q = !1;
        if (g) {
          g.membersContextTypeSymbols = [];
        }
        for (var r = 0, s = l.members.length; r < s; r++) {
          n = l.members[r];
          var t = n.operand1;

          var u;

          var v;
          if (t.nodeType === 20) {
            v = t.actualText;
            u = t.text;
          } else {
            if (t.nodeType !== 5) {
              return b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
            }
            v = t.actualText;

            u = t.text;
          }
          i = a.TextSpan.fromBounds(n.minChar, n.limChar);
          var w = new a.PullDecl(u, v, 4096, 4, i, this.unitPath);
          this.currentUnit.addSynthesizedDecl(w);

          j.addChildDecl(w);

          w.setParentDecl(j);

          this.semanticInfoChain.getUnit(this.unitPath).setDeclForAST(n, w);

          this.semanticInfoChain.getUnit(this.unitPath).setASTForDecl(w, n);

          o = new a.PullSymbol(u, 4096);

          o.addDeclaration(w);

          w.setSymbol(o);

          if (m) {
            p = this.getMemberSymbol(u, a.PullElementKind.SomeValue, m);
            if (p) {
              this.resolveDeclaredSymbol(p, e, f);
              f.pushContextualType(p.getType(), f.inProvisionalResolution(), null);
              q = !0;
              if (g) {
                g.membersContextTypeSymbols[r] = p.getType();
              }
            }
          }
          if (n.operand2.nodeType === 12) {
            var x = n.operand2;
            if (x.isAccessor()) {
              var y = this.semanticInfoChain.getUnit(this.unitPath);

              var z = new a.DeclCollectionContext(y);
              z.scriptName = this.unitPath;

              z.pushParent(j);

              a.getAstWalkerFactory().walk(x, a.preCollectDecls, a.postCollectDecls, null, z);
              var A = this.getDeclForAST(x);
              this.currentUnit.addSynthesizedDecl(A);
              var B = new a.PullSymbolBinder(this.semanticInfoChain);
              B.setUnit(this.unitPath);

              if (x.isGetAccessor()) {
                B.bindGetAccessorDeclarationToPullSymbol(A);
              } else {
                B.bindSetAccessorDeclarationToPullSymbol(A);
              }
            }
          }
          var C = this.resolveAST(n.operand2, p != null, e, f).symbol;
          if (q) {
            f.popContextualType();
            q = !1;
          }

          f.setTypeInContext(o, C.getType());

          o.setResolved();

          this.setSymbolAndDiagnosticsForAST(n.operand1, b.fromSymbol(o), f);

          k.addMember(o, 5);
        }
      }
      k.setResolved();

      return b.fromSymbol(k);
    };

    d.prototype.resolveArrayLiteralExpression = function(a, b, c, d) {
      var e = this.getSymbolAndDiagnosticsForAST(a);
      e || (e = this.computeArrayLiteralExpressionSymbol(a, b, c, d), this.setSymbolAndDiagnosticsForAST(a, e, d));

      return e;
    };

    d.prototype.computeArrayLiteralExpressionSymbol = function(c, d, e, f) {
      var g = c.operand;

      var h = this.semanticInfoChain.anyTypeSymbol;

      var i = [];

      var j = new a.TypeComparisonInfo;

      var k = null;
      j.onlyCaptureFirstError = !0;
      if (d) {
        var l = f.getContextualType();
        this.resolveDeclaredSymbol(l, e, f);

        if (l && l.isArray()) {
          k = l.getElementType();
        }
      }
      if (g) {
        if (d) {
          f.pushContextualType(k, f.inProvisionalResolution(), null);
        }
        for (var m = 0; m < g.members.length; m++) {
          i[i.length] = this.resolveAST(g.members[m], d, e, f).symbol.getType();
        }
        if (d) {
          f.popContextualType();
        }
      }
      if (k && !k.isTypeParameter()) {
        h = k;
        for (var m = 0; m < i.length; m++) {
          var j = new a.TypeComparisonInfo;

          var n = i[m];

          var o = g.members[m];
          if (!this.sourceIsAssignableToTarget(n, k, f, j)) {
            var p;
            j.message ? p = f.postError(this.getUnitPath(), o.minChar, o.getLength(), 81, [n.toString(), k.toString(),
              j.message
            ]) : p = f.postError(this.getUnitPath(), o.minChar, o.getLength(), 80, [n.toString(), k.toString()]);

            return b.create(this.getNewErrorTypeSymbol(null), [p]);
          }
        }
      } else {
        if (i.length) {
          h = i[0];
        } else {
          if (k) {
            h = k;
          }
        }
        var q = {
          getLength: function() {
            return g.members.length;
          },
          setTypeAtIndex: function(a, b) {
            i[a] = b;
          },
          getTypeAtIndex: function(a) {
            return i[a];
          }
        };
        h = this.findBestCommonType(h, null, q, f, j);
        if (h === this.semanticInfoChain.undefinedTypeSymbol || h === this.semanticInfoChain.nullTypeSymbol) {
          h = this.semanticInfoChain.anyTypeSymbol;
        }
        if (h) {
          if (l && !l.isTypeParameter() && this.sourceIsAssignableToTarget(h, l, f)) {
            h = l;
          }
        } else {
          h = this.semanticInfoChain.anyTypeSymbol;
        }
      }
      var r = h.getArrayType();
      r || (this.cachedArrayInterfaceType().isResolved() || this.resolveDeclaredSymbol(this.cachedArrayInterfaceType(),
        e, f), r = a.specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, h, this, f), r || (r = this.semanticInfoChain
        .anyTypeSymbol));

      return b.fromSymbol(r);
    };

    d.prototype.resolveIndexExpression = function(a, b, c, d) {
      var e = this.getSymbolAndDiagnosticsForAST(a);
      e || (e = this.computeIndexExpressionSymbol(a, b, c, d), this.setSymbolAndDiagnosticsForAST(a, e, d));

      return e;
    };

    d.prototype.computeIndexExpressionSymbol = function(c, d, e, f) {
      var g = this.resolveAST(c.operand1, d, e, f).symbol;

      var h = g.getType();
      if (this.isAnyOrEquivalent(h)) {
        return b.fromSymbol(h);
      }
      var i = h.getElementType();

      var j = this.resolveAST(c.operand2, d, e, f).symbol.getType();

      var k = j === this.semanticInfoChain.numberTypeSymbol || a.PullHelpers.symbolIsEnum(j);
      if (i && k) {
        return b.fromSymbol(i);
      }
      if (c.operand2.nodeType === 5 || c.operand2.nodeType === 7) {
        var l = c.operand2.nodeType === 5 ? a.stripQuotes(c.operand2.actualText) : a.quoteStr(c.operand2.value.toString());

        var m = this.getMemberSymbol(l, a.PullElementKind.SomeValue, h);
        if (m) {
          return b.fromSymbol(m.getType());
        }
      }
      var n = h.getIndexSignatures();

      var o = null;

      var p = null;

      var q = null;

      var r;

      var s;
      for (var t = 0; t < n.length; t++) {
        if (o && p) break;
        q = n[t];

        r = q.getParameters();
        if (r.length) {
          s = r[0].getType();
          if (s === this.semanticInfoChain.stringTypeSymbol) {
            o = n[t];
            continue;
          }
          if (s === this.semanticInfoChain.numberTypeSymbol || s.getKind() === 64) {
            p = n[t];
            continue;
          }
        }
      }
      if (p && (k || j === this.semanticInfoChain.anyTypeSymbol)) {
        var u = p.getReturnType();
        u || (u = this.semanticInfoChain.anyTypeSymbol);

        return b.fromSymbol(u);
      }
      if (o && (k || j === this.semanticInfoChain.anyTypeSymbol || j === this.semanticInfoChain.stringTypeSymbol)) {
        var u = o.getReturnType();
        u || (u = this.semanticInfoChain.anyTypeSymbol);

        return b.fromSymbol(u);
      }
      if (k || j === this.semanticInfoChain.anyTypeSymbol || j === this.semanticInfoChain.stringTypeSymbol) {
        var u = this.semanticInfoChain.anyTypeSymbol;
        return b.fromSymbol(u);
      }
      return b.create(this.getNewErrorTypeSymbol(null), [f.postError(this.getUnitPath(), c.minChar, c.getLength(), 77, [
        h.toString(!1), j.toString(!1)
      ])]);
    };

    d.prototype.resolveBitwiseOperator = function(a, b, c, d) {
      var e = a;

      var f = this.resolveAST(e.operand1, b, c, d).symbol.getType();

      var g = this.resolveAST(e.operand2, b, c, d).symbol.getType();
      if (this.sourceIsSubtypeOfTarget(f, this.semanticInfoChain.numberTypeSymbol, d) && this.sourceIsSubtypeOfTarget(
        g, this.semanticInfoChain.numberTypeSymbol, d)) {
        return this.semanticInfoChain.numberTypeSymbol;
      }
      if (f === this.semanticInfoChain.booleanTypeSymbol && g === this.semanticInfoChain.booleanTypeSymbol) {
        return this.semanticInfoChain.booleanTypeSymbol;
      }
      if (this.isAnyOrEquivalent(f)) {
        if (this.isAnyOrEquivalent(g) || g === this.semanticInfoChain.numberTypeSymbol || g === this.semanticInfoChain
          .booleanTypeSymbol) {
          return this.semanticInfoChain.anyTypeSymbol;
        }
      } else if (this.isAnyOrEquivalent(g))
        if (f === this.semanticInfoChain.numberTypeSymbol || f === this.semanticInfoChain.booleanTypeSymbol) {
          return this.semanticInfoChain.anyTypeSymbol;
        }
      return this.semanticInfoChain.anyTypeSymbol;
    };

    d.prototype.resolveArithmeticExpression = function(a, c, d, e) {
      var f = this.resolveAST(a.operand1, c, d, e).symbol.getType();

      var g = this.resolveAST(a.operand2, c, d, e).symbol.getType();
      this.isNullOrUndefinedType(f) && (f = g);

      this.isNullOrUndefinedType(g) && (g = f);

      f = this.widenType(f);

      g = this.widenType(g);

      return a.nodeType === 64 || a.nodeType === 39 ? f === this.semanticInfoChain.stringTypeSymbol || g === this.semanticInfoChain
        .stringTypeSymbol ? b.fromSymbol(this.semanticInfoChain.stringTypeSymbol) : f === this.semanticInfoChain.numberTypeSymbol &&
        g === this.semanticInfoChain.numberTypeSymbol ? b.fromSymbol(this.semanticInfoChain.numberTypeSymbol) : this.sourceIsSubtypeOfTarget(
          f, this.semanticInfoChain.numberTypeSymbol, e) && this.sourceIsSubtypeOfTarget(g, this.semanticInfoChain.numberTypeSymbol,
          e) ? b.fromSymbol(this.semanticInfoChain.numberTypeSymbol) : b.fromSymbol(this.semanticInfoChain.anyTypeSymbol) :
        f === this.semanticInfoChain.numberTypeSymbol && g === this.semanticInfoChain.numberTypeSymbol ? b.fromSymbol(
          this.semanticInfoChain.numberTypeSymbol) : this.sourceIsSubtypeOfTarget(f, this.semanticInfoChain.numberTypeSymbol,
          e) && this.sourceIsSubtypeOfTarget(g, this.semanticInfoChain.numberTypeSymbol, e) ? b.fromSymbol(this.semanticInfoChain
          .numberTypeSymbol) : this.isAnyOrEquivalent(f) || this.isAnyOrEquivalent(g) ? b.fromSymbol(this.semanticInfoChain
          .numberTypeSymbol) : b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
    };

    d.prototype.resolveLogicalOrExpression = function(a, b, c, d) {
      var e = this.getSymbolAndDiagnosticsForAST(a);
      e || (e = this.computeLogicalOrExpressionSymbol(a, b, c, d), this.setSymbolAndDiagnosticsForAST(a, e, d));

      return e;
    };

    d.prototype.computeLogicalOrExpressionSymbol = function(a, c, d, e) {
      var f = this.resolveAST(a.operand1, c, d, e).symbol.getType();

      var g = this.resolveAST(a.operand2, c, d, e).symbol.getType();
      return this.isAnyOrEquivalent(f) || this.isAnyOrEquivalent(g) ? b.fromSymbol(this.semanticInfoChain.anyTypeSymbol) :
        f === this.semanticInfoChain.booleanTypeSymbol ? g === this.semanticInfoChain.booleanTypeSymbol ? b.fromSymbol(
          this.semanticInfoChain.booleanTypeSymbol) : b.fromSymbol(this.semanticInfoChain.anyTypeSymbol) : f === this
        .semanticInfoChain.numberTypeSymbol ? g === this.semanticInfoChain.numberTypeSymbol ? b.fromSymbol(this.semanticInfoChain
          .numberTypeSymbol) : b.fromSymbol(this.semanticInfoChain.anyTypeSymbol) : f === this.semanticInfoChain.stringTypeSymbol ?
        g === this.semanticInfoChain.stringTypeSymbol ? b.fromSymbol(this.semanticInfoChain.stringTypeSymbol) : b.fromSymbol(
          this.semanticInfoChain.anyTypeSymbol) : this.sourceIsSubtypeOfTarget(f, g, e) ? b.fromSymbol(g) : this.sourceIsSubtypeOfTarget(
          g, f, e) ? b.fromSymbol(f) : b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
    };

    d.prototype.resolveLogicalAndExpression = function(a, c, d, e) {
      return b.fromSymbol(this.resolveAST(a.operand2, c, d, e).symbol.getType());
    };

    d.prototype.resolveConditionalExpression = function(a, b, c) {
      var d = this.getSymbolAndDiagnosticsForAST(a);
      d || (d = this.computeConditionalExpressionSymbol(a, b, c), this.setSymbolAndDiagnosticsForAST(a, d, c));

      return d;
    };

    d.prototype.computeConditionalExpressionSymbol = function(a, c, d) {
      var e = this.resolveAST(a.operand2, !1, c, d).symbol.getType();

      var f = this.resolveAST(a.operand3, !1, c, d).symbol.getType();

      var g = null;
      if (this.typesAreIdentical(e, f)) {
        g = e;
      } else if (this.sourceIsSubtypeOfTarget(e, f, d) || this.sourceIsSubtypeOfTarget(f, e, d)) {
        var h = {
          getLength: function() {
            return 2;
          },
          setTypeAtIndex: function(a, b) {},
          getTypeAtIndex: function(a) {
            return f;
          }
        };

        var i = this.findBestCommonType(e, null, h, d);
        if (i) {
          g = i;
        }
      }
      return g ? b.fromSymbol(g) : b.create(this.getNewErrorTypeSymbol(null), [d.postError(this.getUnitPath(), a.minChar,
        a.getLength(), 160, [e.toString(!1), f.toString(!1)])]);
    };

    d.prototype.resolveParenthesizedExpression = function(a, b, c) {
      return this.resolveAST(a.expression, !1, b, c).withoutDiagnostics();
    };

    d.prototype.resolveExpressionStatement = function(a, b, c, d) {
      return this.resolveAST(a.expression, b, c, d).withoutDiagnostics();
    };

    d.prototype.resolveCallExpression = function(a, b, c, d, e) {
      if (e) {
        return this.computeCallExpressionSymbol(a, b, c, d, e);
      }
      var f = this.getSymbolAndDiagnosticsForAST(a);
      if (!f || !f.symbol.isResolved()) {
        f = this.computeCallExpressionSymbol(a, b, c, d, null);
        this.setSymbolAndDiagnosticsForAST(a, f, d);
      }
      return f;
    };

    d.prototype.computeCallExpressionSymbol = function(c, d, e, f, g) {
      var h = this.resolveAST(c.target, d, e, f).symbol;

      var i = this.getLastIdentifierInTarget(c);

      var j = h.getType();
      if (this.isAnyOrEquivalent(j)) {
        return c.typeArguments ? b.create(this.getNewErrorTypeSymbol(null), [f.postError(this.unitPath, i.minChar, i.getLength(),
          223)]) : b.fromSymbol(this.semanticInfoChain.anyTypeSymbol);
      }
      var k = [];

      var l = !1;
      if (c.target.nodeType === 30) {
        l = !0;
        if (!j.isClass()) {
          k = this.addDiagnostic(k, f.postError(this.unitPath, i.minChar, i.getLength(), 158));
          return b.create(this.getNewErrorTypeSymbol(null), k);
        }
        h = j.getConstructorMethod();

        j = h.getType();
      }
      var m = l ? j.getConstructSignatures() : j.getCallSignatures();
      if (!m.length && j.getKind() == 33554432) {
        k = this.addDiagnostic(k, f.postError(this.unitPath, i.minChar, i.getLength(), 227, [j.toString()]));
      }
      var n = null;

      var o = null;

      var p = !1;

      var q;
      if (c.typeArguments) {
        n = [];
        if (c.typeArguments && c.typeArguments.members.length)
          for (var r = 0; r < c.typeArguments.members.length; r++) {
            var s = this.resolveTypeReference(c.typeArguments.members[r], e, f).symbol;
            n[r] = f.findSpecializationForType(s);
          }
      } else {
        if (l && j.isGeneric()) {
          n = j.getTypeArguments();
        }
      }
      if (j.isGeneric()) {
        var t = [];

        var u;

        var v;

        var w;

        var x = null;

        var y = f.specializingToAny;

        var z = f.isSpecializingSignatureAtCallSite;

        var A = m;

        var B;
        for (var r = 0; r < m.length; r++) {
          w = m[r].getTypeParameters();

          q = !1;

          B = !1;
          if (m[r].isGeneric() && w.length && !m[r].isFixed()) {
            if (n) {
              u = n;
            } else {
              if (c.arguments) {
                u = this.inferArgumentTypesForSignature(m[r], c.arguments, new a.TypeComparisonInfo, e, f);
                B = !0;
              }
            }
            if (u) {
              o = {};
              if (u.length) {
                if (u.length != w.length) continue;
                for (var C = 0; C < w.length; C++) {
                  o[w[C].getSymbolID().toString()] = u[C];
                }
                for (var C = 0; C < w.length; C++) {
                  x = w[C].getConstraint();
                  if (x) {
                    if (x.isTypeParameter())
                      for (var D = 0; D < w.length && D < u.length; D++) {
                        if (w[D] == x) {
                          x = u[D];
                        }
                      }
                    if (x.isTypeParameter()) {
                      f.pushTypeSpecializationCache(o);
                      x = a.specializeType(x, null, this, e, f);
                      f.popTypeSpecializationCache();
                    }

                    f.isComparingSpecializedSignatures = !0;

                    if (!this.sourceIsAssignableToTarget(u[C], x, f)) {
                      k = this.addDiagnostic(k, f.postError(this.unitPath, i.minChar, i.getLength(), 155, [u[C].toString(!
                        0), x.toString(!0), w[C].toString(!0)]));
                      q = !0;
                    }

                    f.isComparingSpecializedSignatures = !1;
                    if (q) break;
                  }
                }
              } else {
                if (B) {
                  if (!m[r].parametersAreFixed()) continue;
                  if (m[r].hasGenericParameter()) {
                    f.specializingToAny = !0;
                  } else {
                    t[t.length] = m[r];
                  }
                }
                f.specializingToAny = !0;
              }
              if (q) continue;
              f.isSpecializingSignatureAtCallSite = !0;

              v = a.specializeSignature(m[r], !1, o, u, this, e, f);

              f.isSpecializingSignatureAtCallSite = z;

              f.specializingToAny = y;

              if (v) {
                t[t.length] = v;
              }
            }
          } else if (!c.typeArguments || !c.typeArguments.members.length) {
            t[t.length] = m[r];
          }
        }
        if (m.length && !t.length) {
          p = !0;
        }

        m = t;
      }
      var E = null;
      if (!m.length) {
        if (g) {
          g.targetSymbol = h;
          g.targetTypeSymbol = j;
          g.resolvedSignatures = A;
          g.candidateSignature = A && A.length ? A[0] : null;
          g.actualParametersContextTypeSymbols = N;
        }
        if (!p) {
          if (this.cachedFunctionInterfaceType() && this.sourceIsSubtypeOfTarget(j, this.cachedFunctionInterfaceType(),
            f)) {
            return b.create(this.semanticInfoChain.anyTypeSymbol, k);
          }
          k = this.addDiagnostic(k, f.postError(this.unitPath, c.minChar, c.getLength(), 157));

          E = this.getNewErrorTypeSymbol(null);
        } else {
          k = this.addDiagnostic(k, f.postError(this.unitPath, c.minChar, c.getLength(), 156));
          E = this.getNewErrorTypeSymbol(null);
        }
        return b.create(E, k);
      }
      var F = this.resolveOverloads(c, m, e, c.typeArguments != null, f, k);

      var G = F == null;
      if (!F) {
        k = this.addDiagnostic(k, f.postError(this.unitPath, i.minChar, i.getLength(), 156));

        E = this.getNewErrorTypeSymbol(null);
        if (!m.length) {
          return b.create(E, k);
        }
        F = m[0];
        if (c.arguments)
          for (var D = 0, H = c.arguments.members.length; D < H; D++) {
            var I = c.arguments.members[D];

            var J = this.getSymbolAndDiagnosticsForAST(I);

            var K = J && J.symbol;
            if (K) {
              var L = K.getType();
              if (I.nodeType === 12 && !this.canApplyContextualTypeToFunction(L, I, !0)) continue;
              K.invalidate();
            }
          }
      }
      if (!F.isGeneric() && c.typeArguments) {
        k = this.addDiagnostic(k, f.postError(this.unitPath, i.minChar, i.getLength(), 224));
      }
      var M = F.getReturnType();

      var N = [];
      if (c.arguments) {
        var O = c.arguments.members.length;

        var P = F.getParameters();

        var Q = null;

        var R = F.getDeclarations()[0];
        for (var r = 0; r < O; r++) {
          if (P.length) {
            if (r < P.length - 1 || r < P.length && !F.hasVariableParamList()) {
              if (o) {
                f.pushTypeSpecializationCache(o);
              }
              this.resolveDeclaredSymbol(P[r], R, f);
              if (o) {
                f.popTypeSpecializationCache();
              }
              Q = P[r].getType();
            } else {
              if (F.hasVariableParamList()) {
                Q = P[P.length - 1].getType();
                if (Q.isArray()) {
                  Q = Q.getElementType();
                }
              }
            }
          }
          if (Q) {
            f.pushContextualType(Q, f.inProvisionalResolution(), null);
            N[r] = Q;
          }
          this.resolveAST(c.arguments.members[r], Q != null, e, f);
          if (Q) {
            f.popContextualType();
            Q = null;
          }
        }
      }
      g && (g.targetSymbol = h, g.targetTypeSymbol = j, G && A ? (g.resolvedSignatures = A, g.candidateSignature = A[
        0]) : (g.resolvedSignatures = m, g.candidateSignature = F), g.actualParametersContextTypeSymbols = N);

      return E ? b.create(E, k) : (M || (M = this.semanticInfoChain.anyTypeSymbol), b.fromSymbol(M));
    };

    d.prototype.resolveNewExpression = function(a, b, c, d, e) {
      if (e) {
        return this.computeNewExpressionSymbol(a, b, c, d, e);
      }
      var f = this.getSymbolAndDiagnosticsForAST(a);
      if (!f || !f.symbol.isResolved()) {
        f = this.computeNewExpressionSymbol(a, b, c, d, null);
        this.setSymbolAndDiagnosticsForAST(a, f, d);
      }
      return f;
    };

    d.prototype.computeNewExpressionSymbol = function(c, d, e, f, g) {
      var h = null;

      var i = this.resolveAST(c.target, d, e, f).symbol;

      var j = i.isType() ? i : i.getType();

      var k = this.getLastIdentifierInTarget(c);
      if (j.isClass()) {
        j = j.getConstructorMethod().getType();
      }
      var l = j.getConstructSignatures();

      var m = null;

      var n = null;

      var o = !1;

      var p;
      if (this.isAnyOrEquivalent(j)) {
        return b.fromSymbol(j);
      }
      if (!l.length) {
        l = j.getCallSignatures();
        o = !0;
      }
      var q = [];
      if (l.length) {
        if (c.typeArguments) {
          m = [];
          if (c.typeArguments && c.typeArguments.members.length)
            for (var r = 0; r < c.typeArguments.members.length; r++) {
              var s = this.resolveTypeReference(c.typeArguments.members[r], e, f).symbol;
              m[r] = f.findSpecializationForType(s);
            }
        }
        if (j.isGeneric()) {
          var t = [];

          var u;

          var v;

          var w;

          var x = null;

          var y = f.specializingToAny;

          var z = f.isSpecializingSignatureAtCallSite = !0;

          var A;
          for (var r = 0; r < l.length; r++) {
            p = !1;
            if (l[r].isGeneric() && !l[r].isFixed()) {
              if (m) {
                u = m;
              } else {
                if (c.arguments) {
                  u = this.inferArgumentTypesForSignature(l[r], c.arguments, new a.TypeComparisonInfo, e, f);
                  A = !0;
                }
              }
              if (u) {
                w = l[r].getTypeParameters();

                n = {};
                if (u.length) {
                  if (u.length < w.length) continue;
                  for (var B = 0; B < w.length; B++) {
                    n[w[B].getSymbolID().toString()] = u[B];
                  }
                  for (var B = 0; B < w.length; B++) {
                    x = w[B].getConstraint();
                    if (x) {
                      if (x.isTypeParameter())
                        for (var C = 0; C < w.length && C < u.length; C++) {
                          if (w[C] == x) {
                            x = u[C];
                          }
                        }
                      if (x.isTypeParameter()) {
                        f.pushTypeSpecializationCache(n);
                        x = a.specializeType(x, null, this, e, f);
                        f.popTypeSpecializationCache();
                      }

                      f.isComparingSpecializedSignatures = !0;

                      if (!this.sourceIsAssignableToTarget(u[B], x, f)) {
                        q = this.addDiagnostic(q, f.postError(this.unitPath, k.minChar, k.getLength(), 155, [u[B].toString(!
                          0), x.toString(!0), w[B].toString(!0)]));
                        p = !0;
                      }

                      f.isComparingSpecializedSignatures = !1;
                      if (p) break;
                    }
                  }
                } else {
                  if (A) {
                    if (!l[r].parametersAreFixed()) continue;
                    if (l[r].hasGenericParameter()) {
                      f.specializingToAny = !0;
                    } else {
                      t[t.length] = l[r];
                    }
                  }
                  f.specializingToAny = !0;
                }
                if (p) continue;
                f.isSpecializingSignatureAtCallSite = !0;

                v = a.specializeSignature(l[r], !1, n, u, this, e, f);

                f.specializingToAny = y;

                f.isSpecializingSignatureAtCallSite = z;

                if (v) {
                  t[t.length] = v;
                }
              }
            } else if (!c.typeArguments || !c.typeArguments.members.length) {
              t[t.length] = l[r];
            }
          }
          l = t;
        }
        var D = this.resolveOverloads(c, l, e, c.typeArguments != null, f, q);
        if (g) {
          g.targetSymbol = i;
          g.targetTypeSymbol = j;
          g.resolvedSignatures = l;
          g.candidateSignature = D;
          g.actualParametersContextTypeSymbols = [];
        }
        if (!l.length && q) {
          var E = this.getNewErrorTypeSymbol(null);
          return b.create(E, q);
        }
        var F = null;
        if (!D) {
          q = this.addDiagnostic(q, f.postError(this.unitPath, k.minChar, k.getLength(), 154));

          F = this.getNewErrorTypeSymbol(null);
          if (!l.length) {
            return b.create(F, q);
          }
          D = l[0];
          if (c.arguments)
            for (var C = 0, G = c.arguments.members.length; C < G; C++) {
              var H = c.arguments.members[C];

              var I = this.getSymbolAndDiagnosticsForAST(H);

              var J = I && I.symbol;
              if (J) {
                var K = J.getType();
                if (H.nodeType === 12 && !this.canApplyContextualTypeToFunction(K, H, !0)) continue;
                J.invalidate();
              }
            }
        }
        h = D.getReturnType();

        if (h && !D.isGeneric() && h.isGeneric() && !h.getIsSpecialized()) {
          if (m && m.length) {
            h = a.specializeType(h, m, this, e, f, c);
          } else {
            h = this.specializeTypeToAny(h, e, f);
          }
        }
        if (o) {
          if (h != this.semanticInfoChain.voidTypeSymbol) {
            q = this.addDiagnostic(q, f.postError(this.unitPath, k.minChar, k.getLength(), 153));
            return b.create(this.getNewErrorTypeSymbol(null), q);
          }
          h = this.semanticInfoChain.anyTypeSymbol;
        }
        if (!h) {
          h = D.getReturnType();
          if (!h) {
            h = j;
          }
        }
        var L = [];
        if (c.arguments) {
          var M = c.arguments.members.length;

          var N = D.getParameters();

          var O = null;

          var P = D.getDeclarations()[0];
          for (var r = 0; r < M; r++) {
            if (N.length) {
              if (r < N.length - 1 || r < N.length && !D.hasVariableParamList()) {
                if (n) {
                  f.pushTypeSpecializationCache(n);
                }
                this.resolveDeclaredSymbol(N[r], P, f);
                if (n) {
                  f.popTypeSpecializationCache();
                }
                O = N[r].getType();
              } else {
                if (D.hasVariableParamList()) {
                  O = N[N.length - 1].getType();
                  if (O.isArray()) {
                    O = O.getElementType();
                  }
                }
              }
            }
            if (O) {
              f.pushContextualType(O, f.inProvisionalResolution(), null);
              L[r] = O;
            }
            this.resolveAST(c.arguments.members[r], O != null, e, f);
            if (O) {
              f.popContextualType();
              O = null;
            }
          }
        }
        g && (g.targetSymbol = i, g.targetTypeSymbol = j, g.resolvedSignatures = l, g.candidateSignature = D, g.actualParametersContextTypeSymbols =
          L);

        return F ? b.create(F, q) : (h || (h = this.semanticInfoChain.anyTypeSymbol), b.fromSymbol(h));
      }
      return j.isClass() ? b.fromSymbol(h) : (q = this.addDiagnostic(q, f.postError(this.unitPath, k.minChar, k.getLength(),
        152)), b.create(this.getNewErrorTypeSymbol(null), q));
    };

    d.prototype.resolveTypeAssertionExpression = function(a, b, c, d) {
      return this.resolveTypeReference(a.castTerm, c, d);
    };

    d.prototype.resolveAssignmentStatement = function(a, b, c, d) {
      var e = this.getSymbolAndDiagnosticsForAST(a);
      e || (e = this.computeAssignmentStatementSymbol(a, b, c, d), this.setSymbolAndDiagnosticsForAST(a, e, d));

      return e;
    };

    d.prototype.computeAssignmentStatementSymbol = function(a, c, d, e) {
      var f = this.resolveAST(a.operand1, c, d, e).symbol.getType();
      e.pushContextualType(f, e.inProvisionalResolution(), null);

      this.resolveAST(a.operand2, !0, d, e);

      e.popContextualType();

      return b.fromSymbol(f);
    };

    d.prototype.resolveBoundDecls = function(a, b) {
      if (!a) return;
      switch (a.getKind()) {
        case 1:
          var c = a.getChildDecls();
          for (var d = 0; d < c.length; d++) {
            this.resolveBoundDecls(c[d], b);
          }
          break;
        case 32:
        case 4:
        case 64:
          var e = this.semanticInfoChain.getASTForDecl(a);
          this.resolveModuleDeclaration(e, b);
          break;
        case 16:
          var f = this.semanticInfoChain.getASTForDecl(a);
          this.resolveInterfaceDeclaration(f, b);
          break;
        case 8:
          var g = this.semanticInfoChain.getASTForDecl(a);
          this.resolveClassDeclaration(g, b);
          break;
        case 65536:
        case 16384:
          var h = this.semanticInfoChain.getASTForDecl(a);
          this.resolveFunctionDeclaration(h, b);
          break;
        case 262144:
          h = this.semanticInfoChain.getASTForDecl(a);

          this.resolveGetAccessorDeclaration(h, b);
          break;
        case 524288:
          h = this.semanticInfoChain.getASTForDecl(a);

          this.resolveSetAccessorDeclaration(h, b);
          break;
        case 4096:
        case 1024:
        case 2048:
          var i = this.semanticInfoChain.getASTForDecl(a);
          if (i) {
            this.resolveVariableDeclaration(i, b);
          }
      }
    };

    d.prototype.mergeOrdered = function(b, c, d, e) {
      if (this.isAnyOrEquivalent(b) || this.isAnyOrEquivalent(c)) {
        return this.semanticInfoChain.anyTypeSymbol;
      }
      if (b === c) {
        return b;
      }
      if (c === this.semanticInfoChain.nullTypeSymbol && b != this.semanticInfoChain.nullTypeSymbol) {
        return b;
      }
      if (b === this.semanticInfoChain.nullTypeSymbol && c != this.semanticInfoChain.nullTypeSymbol) {
        return c;
      }
      if (b !== this.semanticInfoChain.voidTypeSymbol || c !== this.semanticInfoChain.voidTypeSymbol && c !== this.semanticInfoChain
        .undefinedTypeSymbol && c !== this.semanticInfoChain.nullTypeSymbol) {
        if (b === this.semanticInfoChain.voidTypeSymbol && c === this.semanticInfoChain.anyTypeSymbol) {
          return c;
        }
        if (c === this.semanticInfoChain.undefinedTypeSymbol && b != this.semanticInfoChain.voidTypeSymbol) {
          return b;
        }
        if (b === this.semanticInfoChain.undefinedTypeSymbol && c != this.semanticInfoChain.undefinedTypeSymbol) {
          return c;
        }
        if (b.isTypeParameter() && !c.isTypeParameter()) {
          return c;
        }
        if (!b.isTypeParameter() && c.isTypeParameter()) {
          return b;
        }
        if (b.isArray() && c.isArray()) {
          if (b.getElementType() === c.getElementType()) {
            return b;
          }
          var f = this.mergeOrdered(b.getElementType(), c.getElementType(), d, e);
          if (f) {
            var g = f.getArrayType();
            g || (g = a.specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, f, this, d));

            return g;
          }
        } else {
          if (this.sourceIsSubtypeOfTarget(b, c, d, e)) {
            return c;
          }
          if (this.sourceIsSubtypeOfTarget(c, b, d, e)) {
            return b;
          }
        }
        return null;
      }
      return b;
    };

    d.prototype.widenType = function(a) {
      return a === this.semanticInfoChain.undefinedTypeSymbol || a === this.semanticInfoChain.nullTypeSymbol || a.isError() ?
        this.semanticInfoChain.anyTypeSymbol : a;
    };

    d.prototype.isNullOrUndefinedType = function(a) {
      return a === this.semanticInfoChain.nullTypeSymbol || a === this.semanticInfoChain.undefinedTypeSymbol;
    };

    d.prototype.canApplyContextualType = function(b) {
      if (!b) {
        return !0;
      }
      var c = b.getKind();
      return (c & 8388608) != 0 ? !0 : (c & 16) != 0 ? !0 : (c & a.PullElementKind.SomeFunction) != 0 ? this.canApplyContextualTypeToFunction(
        b, this.semanticInfoChain.getASTForDecl(b.getDeclarations[0]), !0) : (c & 128) != 0 ? !0 : b == this.semanticInfoChain
        .anyTypeSymbol || c != 2 ? !0 : !1;
    };

    d.prototype.findBestCommonType = function(b, c, d, e, f) {
      var g = d.getLength();

      var h = 0;

      var i = b;
      if (c && this.canApplyContextualType(i)) {
        if (i) {
          i = this.mergeOrdered(i, c, e);
        } else {
          i = c;
        }
      }
      var j = i;
      while (h < g) {
        for (var k = 0; k < g; k++) {
          if (k === h) continue;
          if (j && (i = this.mergeOrdered(j, d.getTypeAtIndex(k), e, f))) {
            j = i;
          }
          if (i === null || this.isAnyOrEquivalent(i)) break;
          if (c && !i.isTypeParameter() && !c.isTypeParameter()) {
            d.setTypeAtIndex(k, c);
          }
        }
        if (j && i) break;
        h++;

        if (h < g) {
          j = d.getTypeAtIndex(h);
        }
      }
      if (!i) {
        var l = new a.PullDecl("{}", "{}", 8388608, 0, new a.TextSpan(0, 0), this.currentUnit.getPath());

        var m = new a.PullTypeSymbol("{}", 8388608);
        l.setSymbol(m);

        m.addDeclaration(l);

        i = m;
      }
      return i;
    };

    d.prototype.typesAreIdentical = function(b, c, d) {
      if (b === c) {
        return !0;
      }
      if (!b || !c) {
        return !1;
      }
      if (d && b.isPrimitive() && b.isStringConstant() && c === this.semanticInfoChain.stringTypeSymbol) {
        return d.nodeType === 5 && a.stripQuotes(d.actualText) === a.stripQuotes(b.getName());
      }
      if (d && c.isPrimitive() && c.isStringConstant() && c === this.semanticInfoChain.stringTypeSymbol) {
        return d.nodeType === 5 && a.stripQuotes(d.actualText) === a.stripQuotes(c.getName());
      }
      if (b.isPrimitive() && b.isStringConstant() && c.isPrimitive() && c.isStringConstant()) {
        return a.stripQuotes(b.getName()) === a.stripQuotes(c.getName());
      }
      if (b.isPrimitive() || c.isPrimitive()) {
        return !1;
      }
      if (b.isClass()) {
        return !1;
      }
      if (b.isError() && c.isError()) {
        return !0;
      }
      if (b.isTypeParameter()) {
        if (!c.isTypeParameter()) {
          return !1;
        }
        var e = b.getDeclarations()[0].getParentDecl();

        var f = c.getDeclarations()[0].getParentDecl();
        return e === f ? this.symbolsShareDeclaration(b, c) : !0;
      }
      var g = c.getSymbolID().toString() + "#" + b.getSymbolID().toString();
      if (this.identicalCache[g] != undefined) {
        return !0;
      }
      if (b.getKind() & 64 || c.getKind() & 64) {
        return b.getAssociatedContainerType() === c || c.getAssociatedContainerType() === b;
      }
      if (b.isArray() || c.isArray()) {
        if (!b.isArray() || !c.isArray()) {
          return !1;
        }
        this.identicalCache[g] = !1;
        var h = this.typesAreIdentical(b.getElementType(), c.getElementType());
        h ? this.identicalCache[g] = !0 : this.identicalCache[g] = undefined;

        return h;
      }
      if (b.isPrimitive() != c.isPrimitive()) {
        return !1;
      }
      this.identicalCache[g] = !1;
      if (b.hasMembers() && c.hasMembers()) {
        var i = b.getMembers();

        var j = c.getMembers();
        if (i.length != j.length) {
          this.identicalCache[g] = undefined;
          return !1;
        }
        var k = null;

        var l = null;

        var m = null;

        var n = null;
        for (var o = 0; o < i.length; o++) {
          k = i[o];

          l = this.getMemberSymbol(k.getName(), a.PullElementKind.SomeValue, c);
          if (!l || k.getIsOptional() != l.getIsOptional()) {
            this.identicalCache[g] = undefined;
            return !1;
          }
          m = k.getType();

          n = l.getType();
          if (m && n && this.identicalCache[n.getSymbolID().toString() + "#" + m.getSymbolID().toString()] !=
            undefined) continue;
          if (!this.typesAreIdentical(m, n)) {
            this.identicalCache[g] = undefined;
            return !1;
          }
        }
      } else if (b.hasMembers() || c.hasMembers()) {
        this.identicalCache[g] = undefined;
        return !1;
      }
      var p = b.getCallSignatures();

      var q = c.getCallSignatures();

      var r = b.getConstructSignatures();

      var s = c.getConstructSignatures();

      var t = b.getIndexSignatures();

      var u = c.getIndexSignatures();
      return this.signatureGroupsAreIdentical(p, q) ? this.signatureGroupsAreIdentical(r, s) ? this.signatureGroupsAreIdentical(
        t, u) ? (this.identicalCache[g] = !0, !0) : (this.identicalCache[g] = undefined, !1) : (this.identicalCache[g] =
        undefined, !1) : (this.identicalCache[g] = undefined, !1);
    };

    d.prototype.signatureGroupsAreIdentical = function(a, b) {
      if (a === b) {
        return !0;
      }
      if (!a || !b) {
        return !1;
      }
      if (a.length != b.length) {
        return !1;
      }
      var c = null;

      var d = null;

      var e = !1;
      for (var f = 0; f < a.length; f++) {
        c = a[f];
        for (var g = 0; g < b.length; g++) {
          d = b[g];
          if (this.signaturesAreIdentical(c, d)) {
            e = !0;
            break;
          }
        }
        if (e) {
          e = !1;
          continue;
        }
        return !1;
      }
      return !0;
    };

    d.prototype.signaturesAreIdentical = function(a, b) {
      if (a.hasVariableParamList() != b.hasVariableParamList()) {
        return !1;
      }
      if (a.getNonOptionalParameterCount() != b.getNonOptionalParameterCount()) {
        return !1;
      }
      var c = a.getParameters();

      var d = b.getParameters();
      if (c.length != d.length) {
        return !1;
      }
      if (!this.typesAreIdentical(a.getReturnType(), b.getReturnType())) {
        return !1;
      }
      for (var e = 0; e < c.length; e++)
        if (!this.typesAreIdentical(c[e].getType(), d[e].getType())) {
          return !1;
        }
      return !0;
    };

    d.prototype.substituteUpperBoundForType = function(a) {
      if (!a || !a.isTypeParameter()) {
        return a;
      }
      var b = a.getConstraint();
      return b ? this.substituteUpperBoundForType(b) : this.cachedObjectInterfaceType() ? this.cachedObjectInterfaceType() :
        a;
    };

    d.prototype.symbolsShareDeclaration = function(a, b) {
      var c = a.getDeclarations();

      var d = b.getDeclarations();
      return c.length && d.length ? c[0].isEqual(d[0]) : !1;
    };

    d.prototype.sourceIsSubtypeOfTarget = function(a, b, c, d) {
      return this.sourceIsRelatableToTarget(a, b, !1, this.subtypeCache, c, d);
    };

    d.prototype.sourceMembersAreSubtypeOfTargetMembers = function(a, b, c, d) {
      return this.sourceMembersAreRelatableToTargetMembers(a, b, !1, this.subtypeCache, c, d);
    };

    d.prototype.sourcePropertyIsSubtypeOfTargetProperty = function(a, b, c, d, e, f) {
      return this.sourcePropertyIsRelatableToTargetProperty(a, b, c, d, !1, this.subtypeCache, e, f);
    };

    d.prototype.sourceCallSignaturesAreSubtypeOfTargetCallSignatures = function(a, b, c, d) {
      return this.sourceCallSignaturesAreRelatableToTargetCallSignatures(a, b, !1, this.subtypeCache, c, d);
    };

    d.prototype.sourceConstructSignaturesAreSubtypeOfTargetConstructSignatures = function(a, b, c, d) {
      return this.sourceConstructSignaturesAreRelatableToTargetConstructSignatures(a, b, !1, this.subtypeCache, c, d);
    };

    d.prototype.sourceIndexSignaturesAreSubtypeOfTargetIndexSignatures = function(a, b, c, d) {
      return this.sourceIndexSignaturesAreRelatableToTargetIndexSignatures(a, b, !1, this.subtypeCache, c, d);
    };

    d.prototype.typeIsSubtypeOfFunction = function(a, b) {
      var c = a.getCallSignatures();
      if (c.length) {
        return !0;
      }
      var d = a.getConstructSignatures();
      return d.length ? !0 : this.cachedFunctionInterfaceType() ? this.sourceIsSubtypeOfTarget(a, this.cachedFunctionInterfaceType(),
        b) : !1;
    };

    d.prototype.signatureGroupIsSubtypeOfTarget = function(a, b, c, d) {
      return this.signatureGroupIsRelatableToTarget(a, b, !1, this.subtypeCache, c, d);
    };

    d.prototype.signatureIsSubtypeOfTarget = function(a, b, c, d) {
      return this.signatureIsRelatableToTarget(a, b, !1, this.subtypeCache, c, d);
    };

    d.prototype.sourceIsAssignableToTarget = function(a, b, c, d, e) {
      if (typeof e == "undefined") {
        e = !1;
      }
      var f = e ? {} : this.assignableCache;
      return this.sourceIsRelatableToTarget(a, b, !0, f, c, d);
    };

    d.prototype.signatureGroupIsAssignableToTarget = function(a, b, c, d) {
      return this.signatureGroupIsRelatableToTarget(a, b, !0, this.assignableCache, c, d);
    };

    d.prototype.signatureIsAssignableToTarget = function(a, b, c, d) {
      return this.signatureIsRelatableToTarget(a, b, !0, this.assignableCache, c, d);
    };

    d.prototype.sourceIsRelatableToTarget = function(b, c, d, e, f, g) {
      if (b === c) {
        return !0;
      }
      if (!b || !c) {
        return !0;
      }
      if (f.specializingToAny && (c.isTypeParameter() || b.isTypeParameter())) {
        return !0;
      }
      if (f.specializingToObject) {
        if (c.isTypeParameter()) {
          c = this.cachedObjectInterfaceType();
        }
        if (b.isTypeParameter()) {
          c = this.cachedObjectInterfaceType();
        }
      }
      var h = b;
      if (b == this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType()) {
        if (!this.cachedStringInterfaceType().isResolved()) {
          this.resolveDeclaredSymbol(this.cachedStringInterfaceType(), null, f);
        }
        h = this.cachedStringInterfaceType();
      } else {
        if (b == this.semanticInfoChain.numberTypeSymbol && this.cachedNumberInterfaceType()) {
          if (!this.cachedNumberInterfaceType().isResolved()) {
            this.resolveDeclaredSymbol(this.cachedNumberInterfaceType(), null, f);
          }
          h = this.cachedNumberInterfaceType();
        } else {
          if (b == this.semanticInfoChain.booleanTypeSymbol && this.cachedBooleanInterfaceType()) {
            if (!this.cachedBooleanInterfaceType().isResolved()) {
              this.resolveDeclaredSymbol(this.cachedBooleanInterfaceType(), null, f);
            }
            h = this.cachedBooleanInterfaceType();
          } else {
            if (a.PullHelpers.symbolIsEnum(b) && this.cachedNumberInterfaceType()) {
              h = this.cachedNumberInterfaceType();
            } else {
              if (b.isTypeParameter()) {
                h = this.substituteUpperBoundForType(b);
              }
            }
          }
        }
      }
      var i = b.getSymbolID().toString() + "#" + c.getSymbolID().toString();
      if (e[i] != undefined) {
        return !0;
      }
      if (d) {
        if (this.isAnyOrEquivalent(b) || this.isAnyOrEquivalent(c)) {
          return !0;
        }
        if (b === this.semanticInfoChain.stringTypeSymbol && c.isPrimitive() && c.isStringConstant()) {
          return g && g.stringConstantVal && g.stringConstantVal.nodeType === 5 && a.stripQuotes(g.stringConstantVal.actualText) ===
            a.stripQuotes(c.getName());
        }
      } else {
        if (this.isAnyOrEquivalent(c)) {
          return !0;
        }
        if (c === this.semanticInfoChain.stringTypeSymbol && b.isPrimitive() && b.isStringConstant()) {
          return !0;
        }
      }
      if (b.isPrimitive() && b.isStringConstant() && c.isPrimitive() && c.isStringConstant()) {
        return a.stripQuotes(b.getName()) === a.stripQuotes(c.getName());
      }
      if (b === this.semanticInfoChain.undefinedTypeSymbol) {
        return !0;
      }
      if (b === this.semanticInfoChain.nullTypeSymbol && c != this.semanticInfoChain.undefinedTypeSymbol && c != this
        .semanticInfoChain.voidTypeSymbol) {
        return !0;
      }
      if (c == this.semanticInfoChain.voidTypeSymbol) {
        return b == this.semanticInfoChain.anyTypeSymbol || b == this.semanticInfoChain.undefinedTypeSymbol || b ==
          this.semanticInfoChain.nullTypeSymbol ? !0 : !1;
      }
      if (b == this.semanticInfoChain.voidTypeSymbol) {
        return c == this.semanticInfoChain.anyTypeSymbol ? !0 : !1;
      }
      if (c === this.semanticInfoChain.numberTypeSymbol && a.PullHelpers.symbolIsEnum(b)) {
        return !0;
      }
      if (b === this.semanticInfoChain.numberTypeSymbol && a.PullHelpers.symbolIsEnum(c)) {
        return !0;
      }
      if (a.PullHelpers.symbolIsEnum(c) && a.PullHelpers.symbolIsEnum(b)) {
        return this.symbolsShareDeclaration(c, b);
      }
      if (b.getKind() & 64 || c.getKind() & 64) {
        return !1;
      }
      if (b.isArray() && c.isArray()) {
        e[i] = !1;
        var j = this.sourceIsRelatableToTarget(b.getElementType(), c.getElementType(), d, e, f, g);
        j ? e[i] = !0 : e[i] = undefined;

        return j;
      }
      if (b.isArray() && c == this.cachedArrayInterfaceType()) {
        return !0;
      }
      if (c.isArray() && b == this.cachedArrayInterfaceType()) {
        return !0;
      }
      if (b.isPrimitive() && c.isPrimitive()) {
        return !1;
      }
      if (b.isPrimitive() != c.isPrimitive() && c.isPrimitive()) {
        return !1;
      }
      if (c.isTypeParameter()) {
        if (b.isTypeParameter() && b == h) {
          var k = c.getDeclarations()[0].getParentDecl();

          var l = b.getDeclarations()[0].getParentDecl();
          return k !== l ? this.symbolsShareDeclaration(c, b) : !0;
        }
        if (!f.isComparingSpecializedSignatures) {
          return !1;
        }
        c = this.substituteUpperBoundForType(c);
      }
      e[i] = !1;

      return h.hasBase(c) ? (e[i] = !0, !0) : this.cachedObjectInterfaceType() && c === this.cachedObjectInterfaceType() ? !
        0 : this.cachedFunctionInterfaceType() && (h.getCallSignatures().length || h.getConstructSignatures().length) &&
        c === this.cachedFunctionInterfaceType() ? !0 : c.hasMembers() && !this.sourceMembersAreRelatableToTargetMembers(
          h, c, d, e, f, g) ? (e[i] = undefined, !1) : this.sourceCallSignaturesAreRelatableToTargetCallSignatures(h,
          c, d, e, f, g) ? this.sourceConstructSignaturesAreRelatableToTargetConstructSignatures(h, c, d, e, f, g) ?
        this.sourceIndexSignaturesAreRelatableToTargetIndexSignatures(h, c, d, e, f, g) ? (e[i] = !0, !0) : (e[i] =
          undefined, !1) : (e[i] = undefined, !1) : (e[i] = undefined, !1);
    };

    d.prototype.sourceMembersAreRelatableToTargetMembers = function(b, c, d, e, f, g) {
      var h = c.getAllMembers(a.PullElementKind.SomeValue, !0);
      for (var i = 0; i < h.length; i++) {
        var j = h[i];

        var k = this.getMemberSymbol(j.getName(), a.PullElementKind.SomeValue, b);
        if (!j.isResolved()) {
          this.resolveDeclaredSymbol(j, null, f);
        }
        var l = j.getType();
        if (!k) {
          if (this.cachedObjectInterfaceType()) {
            k = this.getMemberSymbol(j.getName(), a.PullElementKind.SomeValue, this.cachedObjectInterfaceType());
          }
          if (!k) {
            if (this.cachedFunctionInterfaceType() && (l.getCallSignatures().length || l.getConstructSignatures().length)) {
              k = this.getMemberSymbol(j.getName(), a.PullElementKind.SomeValue, this.cachedFunctionInterfaceType());
            }
            if (!k) {
              if (!j.getIsOptional()) {
                g && (g.flags |= 2, g.addMessage(a.getDiagnosticMessage(240, [b.toString(), j.getScopedNameEx().toString(),
                  c.toString()
                ])));
                return !1;
              }
              continue;
            }
          }
        }
        if (!this.sourcePropertyIsRelatableToTargetProperty(b, c, k, j, d, e, f, g)) {
          return !1;
        }
      }
      return !0;
    };

    d.prototype.sourcePropertyIsRelatableToTargetProperty = function(b, c, d, e, f, g, h, i) {
      var j = e.hasFlag(2);

      var k = d.hasFlag(2);
      if (j != k) {
        i && (j ? i.addMessage(a.getDiagnosticMessage(244, [e.getScopedNameEx().toString(), d.getContainer().toString(),
          e.getContainer().toString()
        ])) : i.addMessage(a.getDiagnosticMessage(243, [e.getScopedNameEx().toString(), d.getContainer().toString(),
          e.getContainer().toString()
        ])), i.flags |= 128);
        return !1;
      }
      if (k && j) {
        var l = e.getDeclarations()[0];

        var m = d.getDeclarations()[0];
        if (!l.isEqual(m)) {
          i && (i.flags |= 128, i.addMessage(a.getDiagnosticMessage(245, [d.getContainer().toString(), e.getContainer()
            .toString(), e.getScopedNameEx().toString()
          ])));
          return !1;
        }
      }
      if (!d.isResolved()) {
        this.resolveDeclaredSymbol(d, null, h);
      }
      var n = d.getType();

      var o = e.getType();
      if (o && n && g[n.getSymbolID().toString() + "#" + o.getSymbolID().toString()] != undefined) {
        return !0;
      }
      var p = null;
      if (i && !i.onlyCaptureFirstError) {
        p = new a.TypeComparisonInfo(i);
      }
      if (!this.sourceIsRelatableToTarget(n, o, f, g, h, p)) {
        if (i) {
          i.flags |= 32;
          var q;
          if (p && p.message) {
            q = a.getDiagnosticMessage(242, [e.getScopedNameEx().toString(), b.toString(), c.toString(), p.message]);
          } else {
            q = a.getDiagnosticMessage(241, [e.getScopedNameEx().toString(), b.toString(), c.toString()]);
          }

          i.addMessage(q);
        }
        return !1;
      }
      return !0;
    };

    d.prototype.sourceCallSignaturesAreRelatableToTargetCallSignatures = function(b, c, d, e, f, g) {
      var h = c.getCallSignatures();
      if (h.length) {
        var i = null;
        if (g && !g.onlyCaptureFirstError) {
          i = new a.TypeComparisonInfo(g);
        }
        var j = b.getCallSignatures();
        if (!this.signatureGroupIsRelatableToTarget(j, h, d, e, f, i)) {
          if (g) {
            var k;
            if (j.length && h.length) {
              if (i && i.message) {
                k = a.getDiagnosticMessage(247, [b.toString(), c.toString(), i.message]);
              } else {
                k = a.getDiagnosticMessage(246, [b.toString(), c.toString()]);
              }
            } else {
              var l = h.length ? c.toString() : b.toString();

              var m = h.length ? b.toString() : c.toString();
              k = a.getDiagnosticMessage(248, [l, m]);
            }
            g.flags |= 4;

            g.addMessage(k);
          }
          return !1;
        }
      }
      return !0;
    };

    d.prototype.sourceConstructSignaturesAreRelatableToTargetConstructSignatures = function(b, c, d, e, f, g) {
      var h = c.getConstructSignatures();
      if (h.length) {
        var i = null;
        if (g && !g.onlyCaptureFirstError) {
          i = new a.TypeComparisonInfo(g);
        }
        var j = b.getConstructSignatures();
        if (!this.signatureGroupIsRelatableToTarget(j, h, d, e, f, i)) {
          if (g) {
            var k;
            if (j.length && h.length) {
              if (i && i.message) {
                k = a.getDiagnosticMessage(250, [b.toString(), c.toString(), i.message]);
              } else {
                k = a.getDiagnosticMessage(249, [b.toString(), c.toString()]);
              }
            } else {
              var l = h.length ? c.toString() : b.toString();

              var m = h.length ? b.toString() : c.toString();
              k = a.getDiagnosticMessage(251, [l, m]);
            }
            g.flags |= 4;

            g.addMessage(k);
          }
          return !1;
        }
      }
      return !0;
    };

    d.prototype.sourceIndexSignaturesAreRelatableToTargetIndexSignatures = function(b, c, d, e, f, g) {
      var h = c.getIndexSignatures();
      if (h.length) {
        var i = b.getIndexSignatures();

        var j = !h.length && this.cachedObjectInterfaceType() ? this.cachedObjectInterfaceType().getIndexSignatures() :
          h;

        var k = !i.length && this.cachedObjectInterfaceType() ? this.cachedObjectInterfaceType().getIndexSignatures() :
          i;

        var l = null;

        var m = null;

        var n = null;

        var o = null;

        var p;
        for (var q = 0; q < j.length; q++) {
          if (n && o) break;
          p = j[q].getParameters();
          if (p.length) {
            if (!n && p[0].getType() === this.semanticInfoChain.stringTypeSymbol) {
              n = j[q];
              continue;
            }
            if (!o && p[0].getType() === this.semanticInfoChain.numberTypeSymbol) {
              o = j[q];
              continue;
            }
          }
        }
        for (var q = 0; q < k.length; q++) {
          if (l && m) break;
          p = k[q].getParameters();
          if (p.length) {
            if (!l && p[0].getType() === this.semanticInfoChain.stringTypeSymbol) {
              l = k[q];
              continue;
            }
            if (!m && p[0].getType() === this.semanticInfoChain.numberTypeSymbol) {
              m = k[q];
              continue;
            }
          }
        }
        var r = !0;

        var s = null;
        if (g && !g.onlyCaptureFirstError) {
          s = new a.TypeComparisonInfo(g);
        }

        if (n) {
          if (l) {
            r = this.signatureIsAssignableToTarget(l, n, f, s);
          } else {
            r = !1;
          }
        }

        if (r && o) {
          if (m) {
            r = this.signatureIsAssignableToTarget(m, o, f, s);
          } else {
            if (l) {
              r = this.sourceIsAssignableToTarget(l.getReturnType(), o.getReturnType(), f, s);
            } else {
              r = !1;
            }
          }
        }
        if (!r) {
          if (g) {
            var t;
            if (s && s.message) {
              t = a.getDiagnosticMessage(253, [b.toString(), c.toString(), s.message]);
            } else {
              t = a.getDiagnosticMessage(252, [b.toString(), c.toString()]);
            }

            g.flags |= 4;

            g.addMessage(t);
          }
          return !1;
        }
      }
      if (n && !b.isNamedTypeSymbol() && b.hasMembers()) {
        var u = n.getReturnType();

        var v = b.getMembers();
        for (var q = 0; q < v.length; q++)
          if (!this.sourceIsRelatableToTarget(v[q].getType(), u, d, e, f, g)) {
            return !1;
          }
      }
      return !0;
    };

    d.prototype.signatureGroupIsRelatableToTarget = function(a, b, c, d, e, f) {
      if (a === b) {
        return !0;
      }
      if (!a.length || !b.length) {
        return !1;
      }
      var g = null;

      var h = null;

      var i = !1;
      for (var j = 0; j < b.length; j++) {
        g = b[j];
        if (g.isStringConstantOverloadSignature()) continue;
        for (var k = 0; k < a.length; k++) {
          h = a[k];
          if (h.isStringConstantOverloadSignature()) continue;
          if (this.signatureIsRelatableToTarget(h, g, c, d, e, f)) {
            i = !0;
            break;
          }
        }
        if (i) {
          i = !1;
          continue;
        }
        return !1;
      }
      return !0;
    };

    d.prototype.signatureIsRelatableToTarget = function(b, c, d, e, f, g) {
      var h = b.getParameters();

      var i = c.getParameters();
      if (!h || !i) {
        return !1;
      }
      var j = c.getNonOptionalParameterCount();

      var k = b.getNonOptionalParameterCount();
      if (k > j && !c.hasVariableParamList()) {
        g && (g.flags |= 3, g.addMessage(a.getDiagnosticMessage(254, [j])));
        return !1;
      }
      var l = b.getReturnType();

      var m = c.getReturnType();

      var n = f.specializingToObject;
      f.specializingToObject = !0;
      if (m != this.semanticInfoChain.voidTypeSymbol && !this.sourceIsRelatableToTarget(l, m, d, e, f, g)) {
        g && (g.flags |= 16);
        f.specializingToObject = n;
        return !1;
      }
      var o = k < j && (b.hasVariableParamList() || h.length > k) ? j : k;

      var p = null;

      var q = null;

      var r = "";

      var s = "";
      for (var t = 0, u = 0; t < o; t++, u++) {
        if (t < h.length && (!b.hasVariableParamList() || t < k)) {
          p = h[t].getType();
          r = h[t].getName();
        } else {
          if (t === k) {
            p = h[t].getType();
            if (p.isArray()) {
              p = p.getElementType();
            }
            r = h[t].getName();
          }
        }

        if (u < i.length && u < j) {
          q = i[u].getType();
          s = i[u].getName();
        } else {
          if (c.hasVariableParamList() && u === j) {
            q = i[u].getType();
            if (q.isArray()) {
              q = q.getElementType();
            }
            s = i[u].getName();
          }
        }

        if (p && p.isTypeParameter() && this.cachedObjectInterfaceType()) {
          p = this.cachedObjectInterfaceType();
        }

        if (q && q.isTypeParameter() && this.cachedObjectInterfaceType()) {
          q = this.cachedObjectInterfaceType();
        }
        if (!this.sourceIsRelatableToTarget(p, q, d, e, f, g) && !this.sourceIsRelatableToTarget(q, p, d, e, f, g)) {
          g && (g.flags |= 64);
          f.specializingToObject = n;
          return !1;
        }
      }
      f.specializingToObject = n;

      return !0;
    };

    d.prototype.resolveOverloads = function(b, c, d, e, f, g) {
      var h = this.resolutionDataCache.getResolutionData();

      var i = h.actuals;

      var j = h.exactCandidates;

      var k = h.conversionCandidates;

      var l = null;

      var m = c.length > 1;

      var n = new a.TypeComparisonInfo;

      var o = null;

      var p = null;
      if (b.nodeType === 36 || b.nodeType === 37) {
        var q = b;
        o = q.arguments;

        p = this.getLastIdentifierInTarget(q);
        if (q.arguments) {
          var r = q.arguments.members.length;
          for (var s = 0; s < r; s++) {
            var t = this.resolveAST(q.arguments.members[s], !1, d, f).symbol;
            i[s] = t.getType();
          }
        }
      } else if (b.nodeType === 35) {
        var u = b;
        p = u.operand1;

        o = new a.ASTList;

        o.members[0] = u.operand2;
        var t = this.resolveAST(o.members[0], !1, d, f).symbol;
        i[0] = t.getType();
      }
      var v;

      var w;

      var x;
      for (var y = 0, z = c.length; y < z; y++) {
        v = c[y];
        if (m && v.isDefinition() || e && !v.isGeneric()) continue;
        w = v.getReturnType();

        this.getCandidateSignatures(v, i, o, j, k, d, f, n);
      }
      if (j.length === 0) {
        var A = this.getApplicableSignaturesFromCandidates(k, o, n, d, f);
        if (A.length > 0) {
          x = this.findMostApplicableSignature(A, o, d, f);
          l = x.sig;
        } else {
          if (n.message) {
            g.push(f.postError(this.unitPath, p.minChar, p.getLength(), 151, [n.message]));
          } else {
            g.push(f.postError(this.unitPath, p.minChar, p.getLength(), 150, null));
          }
        }
      } else if (j.length > 1) {
        var B = [];
        for (var s = 0; s < j.length; s++) {
          B[s] = {
            signature: j[s],
            hadProvisionalErrors: !1
          };
        }
        x = this.findMostApplicableSignature(B, o, d, f);

        l = x.sig;
      } else {
        l = j[0];
      }
      this.resolutionDataCache.returnResolutionData(h);

      return l;
    };

    d.prototype.getLastIdentifierInTarget = function(a) {
      return a.target.nodeType === 32 ? a.target.operand2 : a.target;
    };

    d.prototype.getCandidateSignatures = function(a, b, c, d, e, f, g, h) {
      var i = a.getParameters();

      var j = a.getNonOptionalParameterCount();

      var k = i.length;

      var l = j;

      var m = !1;
      if (b.length >= j && (a.hasVariableParamList() || b.length <= k)) {
        l = a.hasVariableParamList() ? i.length : b.length;
        m = !0;
      }
      var n = null;
      if (m) {
        if (a.hasVariableParamList()) {
          l -= 1;
          n = i[l].getType();
          n = n.getElementType();
          m = b.length >= (l < j ? l : j);
        }
        var o = b.length;

        var p = m;

        var q = m;

        var r;

        var s;
        for (var t = 0; t < o; t++) {
          if (t < l) {
            r = i[t].getType();
          } else {
            r = n;
          }

          s = b[t];

          if (r && !r.isResolved()) {
            this.resolveDeclaredSymbol(r, f, g);
          }

          if (s && !s.isResolved()) {
            this.resolveDeclaredSymbol(s, f, g);
          }
          if (!r || !s || !this.typesAreIdentical(r, s, c.members[t])) {
            p = !1;
          }
          h.stringConstantVal = c.members[t];

          if (!this.sourceIsAssignableToTarget(s, r, g, h)) {
            q = !1;
          }

          h.stringConstantVal = null;
          if (!p && !q) break;
        }
        if (p) {
          d[d.length] = a;
        } else {
          if (q && d.length === 0) {
            e[e.length] = a;
          }
        }
      }
    };

    d.prototype.getApplicableSignaturesFromCandidates = function(b, c, d, e, f) {
      var g = [];

      var h = null;

      var i = !1;

      var j = null;

      var k = !1;

      var l;

      var m;

      var n;
      for (var o = 0; o < b.length; o++) {
        i = !1;

        m = b[o];

        l = m.getParameters();
        for (var p = 0; p < c.members.length; p++) {
          if (p >= l.length) continue;
          if (!l[p].isResolved()) {
            this.resolveDeclaredSymbol(l[p], e, f);
          }

          h = l[p].getType();

          if (m.hasVariableParamList() && p >= m.getNonOptionalParameterCount() && h.isArray()) {
            h = h.getElementType();
          }
          if (this.isAnyOrEquivalent(h)) continue;
          if (c.members[p].nodeType === 12) {
            if (this.cachedFunctionInterfaceType() && h === this.cachedFunctionInterfaceType()) continue;
            n = this.resolveFunctionExpression(c.members[p], !1, e, f);
            if (!this.canApplyContextualTypeToFunction(h, c.members[p], !0)) {
              if (!this.canApplyContextualTypeToFunction(h, c.members[p], !1)) break;
              if (!this.sourceIsAssignableToTarget(n.getType(), h, f, d, !0)) break;
            } else {
              n.invalidate();

              f.pushContextualType(h, !0, null);

              n = this.resolveFunctionExpression(c.members[p], !0, e, f);

              if (!this.sourceIsAssignableToTarget(n.getType(), h, f, d, !0)) {
                if (d) {
                  d.setMessage(a.getDiagnosticMessage(255, [h.toString(), p + 1, n.getTypeName()]));
                }
                i = !0;
              }

              n.invalidate();

              j = f.popContextualType();

              k = j.hadProvisionalErrors();
              if (i) break;
            }
          } else if (c.members[p].nodeType === 22) {
            if (this.cachedObjectInterfaceType() && h === this.cachedObjectInterfaceType()) continue;
            f.pushContextualType(h, !0, null);

            n = this.resolveObjectLiteralExpression(c.members[p], !0, e, f).symbol;

            if (!this.sourceIsAssignableToTarget(n.getType(), h, f, d, !0)) {
              if (d) {
                d.setMessage(a.getDiagnosticMessage(255, [h.toString(), p + 1, n.getTypeName()]));
              }
              i = !0;
            }

            n.invalidate();

            j = f.popContextualType();

            k = j.hadProvisionalErrors();
            if (i) break;
          } else if (c.members[p].nodeType === 21) {
            if (h === this.cachedArrayInterfaceType()) continue;
            f.pushContextualType(h, !0, null);
            var n = this.resolveArrayLiteralExpression(c.members[p], !0, e, f).symbol;
            if (!this.sourceIsAssignableToTarget(n.getType(), h, f, d, !0)) {
              if (d) {
                d.setMessage(a.getDiagnosticMessage(255, [h.toString(), p + 1, n.getTypeName()]));
              }
              break;
            }
            n.invalidate();

            j = f.popContextualType();

            k = j.hadProvisionalErrors();
            if (i) break;
          }
        }
        if (p === c.members.length) {
          g[g.length] = {
            signature: b[o],
            hadProvisionalErrors: k
          };
        }

        k = !1;
      }
      return g;
    };

    d.prototype.findMostApplicableSignature = function(b, c, d, e) {
      if (b.length === 1) {
        return {
          sig: b[0].signature,
          ambiguous: !1
        };
      }
      var f = b[0];

      var g = null;

      var h = null;

      var i = null;

      var j = null;

      var k = !1;

      var l;

      var m;
      for (var n = 1; n < b.length; n++) {
        g = b[n];
        for (var o = 0; c && o < c.members.length; o++) {
          var p = this.resolveAST(c.members[o], !1, d, e).symbol;
          h = p.getType();

          p.invalidate();

          l = f.signature.getParameters();

          m = g.signature.getParameters();

          i = o < l.length ? l[o].getType() : l[l.length - 1].getType().getElementType();

          j = o < m.length ? m[o].getType() : m[m.length - 1].getType().getElementType();
          if (this.typesAreIdentical(i, j) && (!j.isPrimitive() || !j.isStringConstant())) continue;
          if (i.isPrimitive() && i.isStringConstant() && c.members[o].nodeType === 5 && a.stripQuotes(c.members[o].actualText) ===
            a.stripQuotes(i.getName())) break;
          if (j.isPrimitive() && j.isStringConstant() && c.members[o].nodeType === 5 && a.stripQuotes(c.members[o].actualText) ===
            a.stripQuotes(j.getName())) {
            f = g;
          } else {
            if (this.typesAreIdentical(h, i)) break;
            if (this.typesAreIdentical(h, j)) {
              f = g;
              break;
            }
            if (this.sourceIsSubtypeOfTarget(i, j, e)) break;
            if (this.sourceIsSubtypeOfTarget(j, i, e)) {
              f = g;
              break;
            }
            if (g.hadProvisionalErrors) break;
            if (f.hadProvisionalErrors) {
              f = g;
              break;
            }
          }
        }
        if (!c || o === c.members.length) {
          var q = {
            getLength: function() {
              return 2;
            },
            setTypeAtIndex: function(a, b) {},
            getTypeAtIndex: function(a) {
              return a ? g.signature.getReturnType() : f.signature.getReturnType();
            }
          };

          var r = this.findBestCommonType(f.signature.getReturnType(), null, q, e);
          k = !r;
        } else {
          k = !1;
        }
      }
      return {
        sig: f.signature,
        ambiguous: k
      };
    };

    d.prototype.canApplyContextualTypeToFunction = function(a, b, c) {
      if (b.isMethod() || c && b.returnTypeAnnotation) {
        return !1;
      }
      c = c || this.cachedFunctionInterfaceType() === a;
      if (!c) {
        return !0;
      }
      var d = this.getDeclForAST(b).getSymbol();

      var e = d.getType().getCallSignatures()[0];

      var f = e.getParameters();

      var g = f.length;
      for (var h = 0; h < g; h++) {
        var i = f[h];

        var j = this.getASTForDecl(i.getDeclarations()[0]);
        if (c && j.typeExpr) {
          return !1;
        }
      }
      if (a.getConstructSignatures().length && a.getCallSignatures().length) {
        return !1;
      }
      var k = a.getConstructSignatures().length ? a.getConstructSignatures() : a.getCallSignatures();
      return !k || k.length > 1 ? !1 : !0;
    };

    d.prototype.inferArgumentTypesForSignature = function(b, c, d, e, f) {
      var g = null;

      var h = !1;

      var i = b.getParameters();

      var j = b.getTypeParameters();

      var k = new a.ArgumentInferenceContext;

      var l = null;
      for (var m = 0; m < j.length; m++) {
        k.addInferenceRoot(j[m]);
      }
      var n;

      var o;

      var p;
      for (var m = 0; m < c.members.length; m++) {
        if (m >= i.length) break;
        l = i[m].getType();

        if (b.hasVariableParamList() && m >= b.getNonOptionalParameterCount() - 1 && l.isArray()) {
          l = l.getElementType();
        }

        o = k.getInferenceCandidates();

        n = {};
        if (o.length)
          for (var q = 0; q < o.length; q++) {
            k.resetRelationshipCache();

            p = o[q];

            n = o[q];

            f.pushContextualType(l, !0, n);
            var r = this.resolveAST(c.members[m], !0, e, f).symbol;
            this.relateTypeToTypeParameters(r.getType(), l, !1, k, e, f);

            g = f.popContextualType();

            r.invalidate();

            h = g.hadProvisionalErrors();
          } else {
            f.pushContextualType(l, !0, {});
            var r = this.resolveAST(c.members[m], !0, e, f).symbol;
            this.relateTypeToTypeParameters(r.getType(), l, !1, k, e, f);

            g = f.popContextualType();

            r.invalidate();

            h = g.hadProvisionalErrors();
          }
      }
      h = !1;
      var s = k.inferArgumentTypes(this, f);
      if (s.unfit) {
        return null;
      }
      var t = [];
      for (var m = 0; m < j.length; m++)
        for (var q = 0; q < s.results.length; q++)
          if (s.results[q].param == j[m]) {
            t[t.length] = s.results[q].type;
            break;
          }
      if (!c.members.length && !t.length && j.length)
        for (var m = 0; m < j.length; m++) {
          t[t.length] = this.semanticInfoChain.anyTypeSymbol;
        } else if (t.length && t.length < j.length)
          for (var m = t.length; m < j.length; m++) {
            t[m] = this.semanticInfoChain.anyTypeSymbol;
          }
      return t;
    };

    d.prototype.relateTypeToTypeParameters = function(a, b, c, d, e, f) {
      if (!a || !b) return;
      if (a.isError()) {
        a = this.semanticInfoChain.anyTypeSymbol;
      }
      if (b === a) return;
      if (b.isTypeParameter()) {
        if (a.isGeneric() && !a.isFixed()) {
          a = this.specializeTypeToAny(a, e, f);
        }

        d.addCandidateForInference(b, a, c);
        return;
      }
      var g = b.getDeclarations();

      var h = a.getDeclarations();
      if (!b.isArray() && g.length && h.length && (g[0].isEqual(h[0]) || a.isGeneric() && b.isGeneric() && this.sourceIsSubtypeOfTarget(
        a, b, f, null)) && a.isGeneric()) {
        var i = b.getIsSpecialized() ? b.getTypeArguments() : b.getTypeParameters();

        var j = a.getTypeArguments();
        if (!j) {
          i = b.getTypeArguments();
          j = a.getIsSpecialized() ? a.getTypeArguments() : a.getTypeParameters();
        }
        if (i && j && i.length === j.length)
          for (var k = 0; k < i.length; k++) {
            if (j[k] != i[k]) {
              this.relateTypeToTypeParameters(j[k], i[k], !0, d, e, f);
            }
          }
      }
      var l = f.specializingToAny;
      f.specializingToAny = !0;
      if (!this.sourceIsAssignableToTarget(a, b, f)) {
        f.specializingToAny = l;
        return;
      }
      f.specializingToAny = l;
      if (a.isArray() && b.isArray()) {
        this.relateArrayTypeToTypeParameters(a, b, c, d, e, f);
        return;
      }
      this.relateObjectTypeToTypeParameters(a, b, c, d, e, f);
    };

    d.prototype.relateFunctionSignatureToTypeParameters = function(a, b, c, d, e) {
      var f = a.getParameters();

      var g = a.getReturnType();

      var h = b.getParameters();

      var i = b.getReturnType();

      var j = h.length < f.length ? h.length : f.length;
      for (var k = 0; k < j; k++) {
        this.relateTypeToTypeParameters(f[k].getType(), h[k].getType(), !0, c, d, e);
      }
      this.relateTypeToTypeParameters(g, i, !1, c, d, e);
    };

    d.prototype.relateObjectTypeToTypeParameters = function(b, c, d, e, f, g) {
      var h = c.getMembers();

      var i;

      var j;

      var k;

      var l;
      if (e.alreadyRelatingTypes(b, c)) return;
      var m = b.getTypeArguments();

      var n = c.getTypeParameters();
      if (m && m.length === n.length)
        for (var o = 0; o < m.length; o++) {
          e.addCandidateForInference(n[o], m[o], d);
        }
      for (var o = 0; o < h.length; o++) {
        k = this.getMemberSymbol(h[o].getName(), a.PullElementKind.SomeValue, b);
        if (k) {
          this.relateTypeToTypeParameters(k.getType(), h[o].getType(), d, e, f, g);
        }
      }
      i = c.getCallSignatures();

      l = b.getCallSignatures();
      for (var o = 0; o < i.length; o++) {
        j = i[o];
        for (var p = 0; p < l.length; p++) {
          this.relateFunctionSignatureToTypeParameters(l[p], j, e, f, g);
        }
      }
      i = c.getConstructSignatures();

      l = b.getConstructSignatures();
      for (var o = 0; o < i.length; o++) {
        j = i[o];
        for (var p = 0; p < l.length; p++) {
          this.relateFunctionSignatureToTypeParameters(l[p], j, e, f, g);
        }
      }
      i = c.getIndexSignatures();

      l = b.getIndexSignatures();
      for (var o = 0; o < i.length; o++) {
        j = i[o];
        for (var p = 0; p < l.length; p++) {
          this.relateFunctionSignatureToTypeParameters(l[p], j, e, f, g);
        }
      }
    };

    d.prototype.relateArrayTypeToTypeParameters = function(a, b, c, d, e, f) {
      var g = a.getElementType();

      var h = b.getElementType();
      this.relateTypeToTypeParameters(g, h, c, d, e, f);
    };

    d.prototype.specializeTypeToAny = function(b, c, d) {
      var e = d.specializingToAny;
      d.specializingToAny = !0;
      var f = a.getRootType(b);

      var g = a.specializeType(f, [], this, c, d);
      d.specializingToAny = e;

      return g;
    };

    d.prototype.specializeSignatureToAny = function(b, c, d) {
      var e = b.getTypeParameters();

      var f = {};

      var g = [];
      for (var h = 0; h < e.length; h++) {
        g[h] = this.semanticInfoChain.anyTypeSymbol;
        f[e[h].getSymbolID().toString()] = g[h];
      }
      if (!g.length) {
        g[0] = this.semanticInfoChain.anyTypeSymbol;
      }
      var i = d.specializingToAny;
      d.specializingToAny = !0;
      var j = a.specializeSignature(b, !1, f, g, this, c, d);
      d.specializingToAny = i;

      return j;
    };

    return d;
  }();
  a.PullTypeResolver = f;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function a() {}
    return a;
  }();
  a.PullTypeResolver2 = b;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(a) {
      this.onlyCaptureFirstError = !1;

      this.flags = 0;

      this.message = "";

      this.stringConstantVal = null;

      this.indent = 1;

      if (a) {
        this.flags = a.flags;
        this.onlyCaptureFirstError = a.onlyCaptureFirstError;
        this.stringConstantVal = a.stringConstantVal;
        this.indent = a.indent + 1;
      }
    }
    b.prototype.addMessage = function(b) {
      if (!this.onlyCaptureFirstError && this.message) {
        this.message = a.getDiagnosticMessage(2, [this.message, this.indent, b]);
      } else {
        this.message = a.getDiagnosticMessage(3, [this.indent, b]);
      }
    };

    b.prototype.setMessage = function(b) {
      this.message = a.getDiagnosticMessage(3, [this.indent, b]);
    };

    return b;
  }();
  a.TypeComparisonInfo = b;
  var c = function() {
    function b(a, b, c) {
      this.compiler = a;

      this.script = b;

      this.scriptName = c;

      this.enclosingDeclStack = [];

      this.enclosingDeclReturnStack = [];

      this.semanticInfo = null;

      this.inSuperConstructorCall = !1;

      this.inSuperConstructorTarget = !1;

      this.seenSuperConstructorCall = !1;

      this.inConstructorArguments = !1;

      this.inImportDeclaration = !1;
    }
    b.prototype.pushEnclosingDecl = function(a) {
      this.enclosingDeclStack[this.enclosingDeclStack.length] = a;

      this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length] = !1;
    };

    b.prototype.popEnclosingDecl = function() {
      this.enclosingDeclStack.length--;

      this.enclosingDeclReturnStack.length--;
    };

    b.prototype.getEnclosingDecl = function(b) {
      if (typeof b == "undefined") {
        b = a.PullElementKind.All;
      }
      for (var c = this.enclosingDeclStack.length - 1; c >= 0; c--) {
        var d = this.enclosingDeclStack[c];
        if (d.getKind() & b) {
          return d;
        }
      }
      return null;
    };

    b.prototype.getEnclosingNonLambdaDecl = function() {
      for (var a = this.enclosingDeclStack.length - 1; a >= 0; a--) {
        var b = this.enclosingDeclStack[a];
        if (!(b.getKind() === 131072 && b.getFlags() & 8192)) {
          return b;
        }
      }
      return null;
    };

    b.prototype.getEnclosingClassDecl = function() {
      return this.getEnclosingDecl(8);
    };

    b.prototype.getEnclosingDeclHasReturn = function() {
      return this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length - 1];
    };

    b.prototype.setEnclosingDeclHasReturn = function() {
      return this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length - 1] = !0;
    };

    return b;
  }();
  a.PullTypeCheckContext = c;
  var d = function() {
    function d(b, c) {
      this.compilationSettings = b;

      this.semanticInfoChain = c;

      this.resolver = null;

      this.context = new a.PullTypeResolutionContext;
    }
    d.prototype.setUnit = function(b) {
      this.resolver = new a.PullTypeResolver(this.compilationSettings, this.semanticInfoChain, b);
    };

    d.prototype.getScriptDecl = function(a) {
      return this.semanticInfoChain.getUnit(a).getTopLevelDecls()[0];
    };

    d.prototype.checkForResolutionError = function(a, b) {
      if (a && a.isError()) {
        b.addDiagnostic(a.getDiagnostic());
      }
    };

    d.prototype.postError = function(b, c, d, e, f, g) {
      g.addDiagnostic(new a.SemanticDiagnostic(d, b, c, e, f));
    };

    d.prototype.validateVariableDeclarationGroups = function(a, b) {
      var c = a.getVariableDeclGroups();

      var d;

      var e;

      var f;

      var g;
      for (var h = 0; h < c.length; h++)
        for (var i = 0; i < c[h].length; i++) {
          d = c[h][i];

          f = d.getSymbol();

          g = this.semanticInfoChain.getASTForDecl(d);

          this.resolver.resolveAST(g, !1, a, this.context);
          if (!i) {
            e = d.getSymbol();
            if (this.resolver.isAnyOrEquivalent(this.resolver.widenType(e.getType()))) return;
            continue;
          }
          if (!this.resolver.typesAreIdentical(f.getType(), e.getType())) {
            this.postError(g.minChar, g.getLength(), b.scriptName, 199, [f.getDisplayName(), e.getType().toString(),
              f.getType().toString()
            ], a);
          }
        }
    };

    d.prototype.typeCheckAST = function(a, b, c) {
      if (!a) {
        return null;
      }
      if (a.typeCheckPhase >= d.globalPullTypeCheckPhase) {
        return null;
      }
      a.typeCheckPhase = d.globalPullTypeCheckPhase;
      switch (a.nodeType) {
        case 1:
          return this.typeCheckList(a, b);
        case 17:
        case 19:
          return this.typeCheckBoundDecl(a, b);
        case 12:
          return this.typeCheckFunction(a, b, c);
        case 13:
          return this.typeCheckClass(a, b);
        case 14:
          return this.typeCheckInterface(a, b);
        case 15:
          return this.typeCheckModule(a, b);
        case 9:
          return this.typeCheckTypeParameter(a, b);
        case 16:
          return this.typeCheckImportDeclaration(a, b);
        case 38:
          return this.typeCheckAssignment(a, b);
        case 10:
          return this.typeCheckGenericType(a, b);
        case 22:
          return this.typeCheckObjectLiteral(a, b, c);
        case 21:
          return this.typeCheckArrayLiteral(a, b, c);
        case 29:
          return this.typeCheckThisExpression(a, b);
        case 30:
          return this.typeCheckSuperExpression(a, b);
        case 36:
          return this.typeCheckCallExpression(a, b);
        case 37:
          return this.typeCheckObjectCreationExpression(a, b);
        case 78:
          return this.typeCheckTypeAssertion(a, b);
        case 11:
          return this.typeCheckTypeReference(a, b);
        case 87:
          return this.typeCheckExportAssignment(a, b);
        case 57:
        case 56:
        case 58:
        case 59:
        case 60:
        case 61:
        case 63:
        case 62:
          return this.typeCheckLogicalOperation(a, b);
        case 25:
          return this.typeCheckCommaExpression(a, b);
        case 64:
        case 39:
          return this.typeCheckBinaryAdditionOperation(a, b);
        case 65:
        case 66:
        case 67:
        case 68:
        case 53:
        case 55:
        case 69:
        case 70:
        case 71:
        case 54:
        case 45:
        case 47:
        case 48:
        case 49:
        case 40:
        case 42:
        case 41:
        case 43:
        case 46:
        case 44:
          return this.typeCheckBinaryArithmeticOperation(a, b);
        case 26:
        case 27:
        case 72:
        case 76:
        case 74:
        case 77:
        case 75:
          return this.typeCheckUnaryArithmeticOperation(a, b, c);
        case 35:
          return this.typeCheckElementAccessExpression(a, b);
        case 73:
          return this.typeCheckLogicalNotExpression(a, b, c);
        case 51:
        case 52:
          return this.typeCheckLogicalAndOrExpression(a, b);
        case 34:
          return this.typeCheckTypeOf(a, b);
        case 50:
          return this.typeCheckConditionalExpression(a, b);
        case 24:
          return this.typeCheckVoidExpression(a, b);
        case 95:
          return this.typeCheckThrowStatement(a, b);
        case 28:
          return this.typeCheckDeleteExpression(a, b);
        case 6:
          return this.typeCheckRegExpExpression(a, b);
        case 31:
          return this.typeCheckInExpression(a, b);
        case 33:
          return this.typeCheckInstanceOfExpression(a, b);
        case 79:
          return this.typeCheckParenthesizedExpression(a, b);
        case 90:
          return this.typeCheckForStatement(a, b);
        case 89:
          return this.typeCheckForInStatement(a, b);
        case 98:
          return this.typeCheckWhileStatement(a, b);
        case 85:
          return this.typeCheckDoStatement(a, b);
        case 91:
          return this.typeCheckIfStatement(a, b);
        case 81:
          return this.typeCheckBlock(a, b);
        case 18:
          return this.typeCheckVariableDeclaration(a, b);
        case 97:
          return this.typeCheckVariableStatement(a, b);
        case 99:
          return this.typeCheckWithStatement(a, b);
        case 96:
          return this.typeCheckTryStatement(a, b);
        case 101:
          return this.typeCheckCatchClause(a, b);
        case 93:
          return this.typeCheckReturnStatement(a, b);
        case 20:
          return this.typeCheckNameExpression(a, b);
        case 32:
          return this.typeCheckMemberAccessExpression(a, b);
        case 94:
          return this.typeCheckSwitchStatement(a, b);
        case 88:
          return this.typeCheckExpressionStatement(a, b, c);
        case 100:
          return this.typeCheckCaseClause(a, b);
        case 92:
          return this.typeCheckLabeledStatement(a, b);
        case 7:
          return this.semanticInfoChain.numberTypeSymbol;
        case 5:
          return this.semanticInfoChain.stringTypeSymbol;
        case 8:
          return this.semanticInfoChain.nullTypeSymbol;
        case 3:
        case 4:
          return this.semanticInfoChain.booleanTypeSymbol;
        case 9:
          return this.typeCheckTypeParameter(a, b);
        default:
      }
      return null;
    };

    d.prototype.typeCheckScript = function(a, b, e) {
      var f = this.semanticInfoChain.getUnit(b);
      if (f.getTypeChecked()) return;
      var g = new c(e, a, b);
      this.setUnit(b);

      g.semanticInfo = g.compiler.semanticInfoChain.getUnit(g.scriptName);
      var h = g.semanticInfo.getTopLevelDecls()[0];
      g.pushEnclosingDecl(h);

      d.globalPullTypeCheckPhase++;

      this.typeCheckAST(a.moduleElements, g, !1);

      this.validateVariableDeclarationGroups(h, g);

      g.popEnclosingDecl();

      f.setTypeChecked();
    };

    d.prototype.typeCheckList = function(a, b) {
      if (!a) {
        return null;
      }
      for (var c = 0; c < a.members.length; c++) {
        this.typeCheckAST(a.members[c], b, !1);
      }
    };

    d.prototype.reportDiagnostics = function(a, b) {
      if (a && a.diagnostics)
        for (var c = 0, d = a.diagnostics.length; c < d; c++) {
          this.context.postDiagnostic(a.diagnostics[c], b, !0);
        }
    };

    d.prototype.resolveSymbolAndReportDiagnostics = function(a, b, c) {
      var d = this.resolver.resolveAST(a, b, c, this.context);
      this.reportDiagnostics(d, c);

      return d && d.symbol;
    };

    d.prototype.typeCheckBoundDecl = function(c, d) {
      var e = this;

      var f = c;

      var g = d.getEnclosingDecl();

      var h = null;
      if (f.typeExpr) {
        h = this.typeCheckAST(f.typeExpr, d, !1);
        if (h.isNamedTypeSymbol() && h.isGeneric() && !h.isTypeParameter() && !this.resolver.isArrayOrEquivalent(h) &&
          h.isResolved() && h.getTypeParameters().length && h.getTypeArguments() == null && !h.getIsSpecialized() &&
          this.resolver.isTypeRefWithoutTypeArgs(f.typeExpr)) {
          this.postError(f.typeExpr.minChar, f.typeExpr.getLength(), d.scriptName, 239, null, g);
          h = this.resolver.specializeTypeToAny(h, g, this.context);
        }
      }
      if (f.init) {
        if (h) {
          this.context.pushContextualType(h, this.context.inProvisionalResolution(), null);
        }
        var i = this.typeCheckAST(f.init, d, !! h);
        if (h) {
          this.context.popContextualType();
        }
        if (h && h.isContainer()) {
          var j = h.getExportAssignedTypeSymbol();
          if (j) {
            h = j;
          } else {
            var k = h.getType().getInstanceSymbol().getType();
            if (!k || !a.PullHelpers.symbolIsEnum(k)) {
              this.postError(f.minChar, f.getLength(), d.scriptName, 190, [h.toString()], g);
              h = null;
            } else {
              h = k.getType();
            }
          }
        }
        if (i && i.isContainer()) {
          k = i.getType().getInstanceSymbol().getType();
          if (k) {
            i = k.getType();
          } else {
            this.postError(f.minChar, f.getLength(), d.scriptName, 191, [i.toString()], g);
            i = null;
          }
        }
        if (i && h) {
          var l = new b;

          var m = this.resolver.sourceIsAssignableToTarget(i, h, this.context, l);
          if (!m) {
            if (l.message) {
              this.postError(f.minChar, f.getLength(), d.scriptName, 81, [i.toString(), h.toString(), l.message], g);
            } else {
              this.postError(f.minChar, f.getLength(), d.scriptName, 80, [i.toString(), h.toString()], g);
            }
          }
        }
      }
      var n = this.context.suppressErrors;
      this.context.suppressErrors = !0;
      var o = this.resolver.getDeclForAST(f);

      var p = this.resolveSymbolAndReportDiagnostics(f, !1, g).getType();
      if (h && h.isContainer() && p.isError()) {
        this.checkForResolutionError(p, o);
      }

      this.context.suppressErrors = n;
      var q = o.getSymbol();
      q.getKind() != 2048 && (q.getKind() != 4096 || q.getContainer().isNamedTypeSymbol()) && this.checkTypePrivacy(q,
        p, d, function(a) {
          return e.variablePrivacyErrorReporter(q, a, d);
        });

      return p;
    };

    d.prototype.typeCheckImportDeclaration = function(a, b) {
      var c = this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl());

      var d = b.inImportDeclaration;
      b.inImportDeclaration = !0;

      this.typeCheckAST(a.alias, b, !1);

      b.inImportDeclaration = d;

      return c;
    };

    d.prototype.typeCheckFunction = function(b, c, d) {
      if (b.isConstructor || a.hasFlag(b.getFunctionFlags(), 1024)) {
        return this.typeCheckConstructor(b, c, d);
      }
      if (a.hasFlag(b.getFunctionFlags(), 4096)) {
        return this.typeCheckIndexer(b, c, d);
      }
      if (b.isAccessor()) {
        return this.typeCheckAccessor(b, c, d);
      }
      var e = c.getEnclosingDecl();

      var f = this.resolveSymbolAndReportDiagnostics(b, d, e);

      var g = c.semanticInfo.getDeclForAST(b);
      c.pushEnclosingDecl(g);

      this.typeCheckAST(b.typeArguments, c, d);

      this.typeCheckAST(b.arguments, c, d);

      this.typeCheckAST(b.returnTypeAnnotation, c, !1);

      this.typeCheckAST(b.block, c, !1);
      var h = c.getEnclosingDeclHasReturn();
      this.validateVariableDeclarationGroups(g, c);

      c.popEnclosingDecl();
      var i = g.getSignatureSymbol();

      var j = i.getParameters();
      if (j.length)
        for (var k = 0; k < j.length; k++) {
          this.checkForResolutionError(j[k].getType(), e);
        }
      var l = i.getReturnType();
      this.checkForResolutionError(l, e);
      if (b.block && b.returnTypeAnnotation != null && !h) {
        var m = this.resolver.isAnyOrEquivalent(l) || l === this.semanticInfoChain.voidTypeSymbol;
        if (!m && !(b.block.statements.members.length > 0 && b.block.statements.members[0].nodeType === 95)) {
          var n = g.getDisplayName();
          n = n ? "'" + n + "'" : "expression";

          this.postError(b.returnTypeAnnotation.minChar, b.returnTypeAnnotation.getLength(), c.scriptName, 192, [n],
            c.getEnclosingDecl());
        }
      }
      this.typeCheckFunctionOverloads(b, c);

      this.checkFunctionTypePrivacy(b, d, c);

      return f ? f.getType() : null;
    };

    d.prototype.typeCheckFunctionOverloads = function(c, d, e, f) {
      if (!e) {
        var g = a.PullHelpers.getSignatureForFuncDecl(c, d.semanticInfo);
        e = g.signature;

        f = g.allSignatures;
      }
      var h = d.semanticInfo.getDeclForAST(c);

      var i = h.getSymbol();

      var j = null;
      for (var k = f.length - 1; k >= 0; k--)
        if (f[k].isDefinition()) {
          j = f[k];
          break;
        }
      if (!e.isDefinition())
        for (var k = 0; k < f.length; k++) {
          if (f[k] === e) break;
          if (this.resolver.signaturesAreIdentical(f[k], e)) {
            if (c.isConstructor) {
              this.postError(c.minChar, c.getLength(), d.scriptName, 210, null, d.getEnclosingDecl());
            } else {
              if (c.isConstructMember()) {
                this.postError(c.minChar, c.getLength(), d.scriptName, 212, null, d.getEnclosingDecl());
              } else {
                if (c.isCallMember()) {
                  this.postError(c.minChar, c.getLength(), d.scriptName, 211, null, d.getEnclosingDecl());
                } else {
                  this.postError(c.minChar, c.getLength(), d.scriptName, 209, [i.getScopedNameEx().toString()], d.getEnclosingDecl());
                }
              }
            }
            break;
          }
        }
      var l = e.isStringConstantOverloadSignature();
      if (l)
        if (e.isDefinition()) {
          this.postError(c.minChar, c.getLength(), d.scriptName, 229, null, d.getEnclosingDecl());
        } else {
          var m = new a.PullTypeResolutionContext;

          var n = !1;
          for (var k = 0; k < f.length; k++) {
            if (f[k].isDefinition() || f[k] === e) continue;
            if (!f[k].isResolved()) {
              this.resolver.resolveDeclaredSymbol(f[k], d.getEnclosingDecl(), m);
            }
            if (f[k].isStringConstantOverloadSignature()) continue;
            if (this.resolver.signatureIsSubtypeOfTarget(e, f[k], m)) {
              n = !0;
              break;
            }
          }
          if (!n) {
            this.postError(c.minChar, c.getLength(), d.scriptName, 219, null, d.getEnclosingDecl());
          }
        } else if (j && j != e) {
        var o = new b;

        var m = new a.PullTypeResolutionContext;
        if (!j.isResolved()) {
          this.resolver.resolveDeclaredSymbol(j, d.getEnclosingDecl(), m);
        }

        if (!this.resolver.signatureIsAssignableToTarget(j, e, m, o)) {
          if (o.message) {
            this.postError(c.minChar, c.getLength(), d.scriptName, 214, [o.message], d.getEnclosingDecl());
          } else {
            this.postError(c.minChar, c.getLength(), d.scriptName, 213, null, d.getEnclosingDecl());
          }
        }
      }
      var p = j;
      if (!j) {
        if (f[0] === e) return;
        p = f[0];
      }
      if (!c.isConstructor && !c.isConstructMember() && e != p) {
        var q;
        if (p.hasFlag(2) != e.hasFlag(2)) {
          q = 215;
        } else {
          if (p.hasFlag(1) != e.hasFlag(1)) {
            q = 216;
          } else {
            if (p.hasFlag(8) != e.hasFlag(8)) {
              q = 217;
            } else {
              if (p.hasFlag(128) != e.hasFlag(128)) {
                q = 218;
              }
            }
          }
        }

        if (q) {
          this.postError(c.minChar, c.getLength(), d.scriptName, q, null, d.getEnclosingDecl());
        }
      }
    };

    d.prototype.typeCheckTypeParameter = function(a, b) {
      if (a.constraint) {
        var c = this.typeCheckAST(a.constraint, b, !1);
        if (c && !c.isError() && c.isPrimitive()) {
          this.postError(a.constraint.minChar, a.constraint.getLength(), b.scriptName, 149, null, b.getEnclosingDecl());
        }
      }
      return this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl());
    };

    d.prototype.typeCheckAccessor = function(b, c, d) {
      var e = b;

      var f = c.getEnclosingDecl();

      var g = this.resolveSymbolAndReportDiagnostics(b, d, f);
      this.checkForResolutionError(g.getType(), f);
      var h = a.hasFlag(e.getFunctionFlags(), 32);

      var i = !h;

      var j = g.getGetter();

      var k = g.getSetter();

      var l = c.semanticInfo.getDeclForAST(e);
      c.pushEnclosingDecl(l);

      this.typeCheckAST(e.arguments, c, d);

      this.typeCheckAST(e.block, c, !1);
      var m = c.getEnclosingDeclHasReturn();
      this.validateVariableDeclarationGroups(l, c);

      c.popEnclosingDecl();
      var n = l.getSignatureSymbol();

      var o = n.getParameters();

      var p = n.getReturnType();
      this.checkForResolutionError(p, f);
      var q = e.name;
      if (h && !m) {
        if (!(e.block.statements.members.length > 0 && e.block.statements.members[0].nodeType === 95)) {
          this.postError(q.minChar, q.getLength(), c.scriptName, 193, null, c.getEnclosingDecl());
        }
      }
      if (j && k) {
        var r = j.getDeclarations()[0];

        var s = k.getDeclarations()[0];

        var t = r.getFlags() & 2;

        var u = s.getFlags() & 2;
        if (t != u) {
          this.postError(q.minChar, q.getLength(), c.scriptName, 194, null, c.getEnclosingDecl());
        }
      }
      this.checkFunctionTypePrivacy(e, d, c);

      return null;
    };

    d.prototype.typeCheckConstructor = function(a, b, c) {
      var d = b.getEnclosingDecl();

      var e = this.resolveSymbolAndReportDiagnostics(a, c, d);

      var f = b.semanticInfo.getDeclForAST(a);
      b.pushEnclosingDecl(f);

      this.typeCheckAST(a.typeArguments, b, c);

      b.inConstructorArguments = !0;

      this.typeCheckAST(a.arguments, b, c);

      b.inConstructorArguments = !1;

      b.seenSuperConstructorCall = !1;

      this.typeCheckAST(a.returnTypeAnnotation, b, !1);

      this.typeCheckAST(a.block, b, !1);

      this.validateVariableDeclarationGroups(f, b);

      b.popEnclosingDecl();
      var g = f.getSignatureSymbol();

      var h = g.getParameters();
      if (h.length)
        for (var i = 0, j = h.length; i < j; i++) {
          this.checkForResolutionError(h[i].getType(), d);
        }
      this.checkForResolutionError(g.getReturnType(), d);
      if (f.getSignatureSymbol() && f.getSignatureSymbol().isDefinition() && this.enclosingClassIsDerived(b))
        if (!b.seenSuperConstructorCall) {
          this.postError(a.minChar, 11, b.scriptName, 173, null, d);
        } else if (this.superCallMustBeFirstStatementInConstructor(f, d)) {
        var k = this.getFirstStatementFromFunctionDeclAST(a);
        if (!k || !this.isSuperCallNode(k)) {
          this.postError(a.minChar, 11, b.scriptName, 172, null, d);
        }
      }
      this.typeCheckFunctionOverloads(a, b);

      this.checkFunctionTypePrivacy(a, c, b);

      return e ? e.getType() : null;
    };

    d.prototype.typeCheckIndexer = function(c, d, e) {
      var f = d.getEnclosingDecl();
      this.resolver.resolveAST(c, e, f, this.context);
      var g = c;

      var h = d.semanticInfo.getDeclForAST(g);
      d.pushEnclosingDecl(h);

      this.typeCheckAST(g.arguments, d, !1);

      this.typeCheckAST(g.returnTypeAnnotation, d, !1);

      d.popEnclosingDecl();
      var i = h.getSignatureSymbol();

      var j = i.getParameters();
      if (j.length) {
        var k = null;
        for (var l = 0; l < j.length; l++) {
          this.checkForResolutionError(j[l].getType(), f);
        }
      }
      this.checkForResolutionError(i.getReturnType(), f);

      this.checkFunctionTypePrivacy(g, e, d);
      var m = j[0].getType() === this.semanticInfoChain.numberTypeSymbol;

      var n = f.getSymbol().getType().getIndexSignatures();
      for (var l = 0; l < n.length; l++) {
        if (!n[l].isResolved()) {
          this.resolver.resolveDeclaredSymbol(n[l], n[l].getDeclarations()[0].getParentDecl(), this.context);
        }
        if (n[l].getParameters()[0].getType() !== j[0].getType()) {
          var o;

          var p;
          if (m) {
            p = i;
            o = n[l];
          } else {
            p = n[l];

            o = i;
            if (f.getSymbol() === p.getDeclarations()[0].getParentDecl().getSymbol()) break;
          }
          var q = new b;

          var r = new a.PullTypeResolutionContext;
          if (!this.resolver.sourceIsSubtypeOfTarget(p.getReturnType(), o.getReturnType(), r, q)) {
            if (q.message) {
              this.postError(g.minChar, g.getLength(), d.scriptName, 234, [p.getReturnType().toString(), o.getReturnType()
                .toString(), q.message
              ], d.getEnclosingDecl());
            } else {
              this.postError(g.minChar, g.getLength(), d.scriptName, 233, [p.getReturnType().toString(), o.getReturnType()
                .toString()
              ], d.getEnclosingDecl());
            }
          }
          break;
        }
      }
      var s = f.getSymbol().getType().getAllMembers(a.PullElementKind.All, !0);
      for (var l = 0; l < s.length; l++) {
        var t = s[l].getName();
        if (t) {
          if (!s[l].isResolved()) {
            this.resolver.resolveDeclaredSymbol(s[l], s[l].getDeclarations()[0].getParentDecl(), this.context);
          }
          if (f.getSymbol() !== s[l].getContainer()) {
            var u = isFinite(+t);
            if (m === u) {
              this.checkThatMemberIsSubtypeOfIndexer(s[l], i, g, d, m);
            }
          }
        }
      }
      return null;
    };

    d.prototype.typeCheckMembersAgainstIndexer = function(b, c) {
      var d = b.getIndexSignatures();
      if (d.length > 0) {
        var e = c.getEnclosingDecl().getChildDecls();
        for (var f = 0; f < e.length; f++) {
          var g = e[f];
          if (!g.getName() || g.getKind() & a.PullElementKind.SomeSignature) continue;
          var h = isFinite(+g.getName());
          for (var i = 0; i < d.length; i++) {
            if (!d[i].isResolved()) {
              this.resolver.resolveDeclaredSymbol(d[i], d[i].getDeclarations()[0].getParentDecl(), this.context);
            }
            if (d[i].getParameters()[0].getType() === this.semanticInfoChain.numberTypeSymbol === h) {
              this.checkThatMemberIsSubtypeOfIndexer(g.getSymbol(), d[i], this.semanticInfoChain.getASTForDecl(g), c,
                h);
              break;
            }
          }
        }
      }
    };

    d.prototype.checkThatMemberIsSubtypeOfIndexer = function(c, d, e, f, g) {
      var h = new b;

      var i = new a.PullTypeResolutionContext;
      if (!this.resolver.sourceIsSubtypeOfTarget(c.getType(), d.getReturnType(), i, h)) {
        if (g) {
          if (h.message) {
            this.postError(e.minChar, e.getLength(), f.scriptName, 236, [d.getReturnType().toString(), h.message], f.getEnclosingDecl());
          } else {
            this.postError(e.minChar, e.getLength(), f.scriptName, 235, [d.getReturnType().toString()], f.getEnclosingDecl());
          }
        } else {
          if (h.message) {
            this.postError(e.minChar, e.getLength(), f.scriptName, 238, [d.getReturnType().toString(), h.message], f.getEnclosingDecl());
          } else {
            this.postError(e.minChar, e.getLength(), f.scriptName, 237, [d.getReturnType().toString()], f.getEnclosingDecl());
          }
        }
      }
    };

    d.prototype.typeCheckIfTypeMemberPropertyOkToOverride = function(b, c, d, e, f) {
      if (!b.isClass()) {
        return !0;
      }
      var g = d.getKind();

      var h = e.getKind();
      if (g === h) {
        return !0;
      }
      var i;
      if (g === 4096) {
        if (d.isAccessor()) {
          i = 256;
        } else {
          i = 257;
        }
      } else {
        if (g === 65536) {
          if (e.isAccessor()) {
            i = 258;
          } else {
            i = 259;
          }
        }
      }
      var j = a.getDiagnosticMessage(i, [b.toString(), d.getScopedNameEx().toString(), c.toString()]);
      f.addMessage(j);

      return !1;
    };

    d.prototype.typeCheckIfTypeExtendsType = function(c, d, e, f) {
      var g = d.getMembers();

      var h = new a.PullTypeResolutionContext;

      var i = new b;

      var j = !1;
      for (var k = 0; k < g.length; k++) {
        var l = g[k].getName();

        var m = e.findMember(l);
        if (m) {
          j = !this.typeCheckIfTypeMemberPropertyOkToOverride(d, e, g[k], m, i);

          if (!j) {
            j = !this.resolver.sourcePropertyIsSubtypeOfTargetProperty(d, e, g[k], m, h, i);
          }
          if (j) break;
        }
      }
      if (!j && d.hasOwnCallSignatures()) {
        j = !this.resolver.sourceCallSignaturesAreSubtypeOfTargetCallSignatures(d, e, h, i);
      }

      if (!j && d.hasOwnConstructSignatures()) {
        j = !this.resolver.sourceConstructSignaturesAreSubtypeOfTargetConstructSignatures(d, e, h, i);
      }

      if (!j && d.hasOwnIndexSignatures()) {
        j = !this.resolver.sourceIndexSignaturesAreSubtypeOfTargetIndexSignatures(d, e, h, i);
      }
      if (!j && d.isClass()) {
        var n = d.getConstructorMethod().getType();

        var o = n.getMembers();
        if (o.length) {
          var p = e.getConstructorMethod().getType();

          var q = new b(i);
          for (var k = 0; k < o.length; k++) {
            var l = o[k].getName();

            var r = p.findMember(l);
            if (r) {
              if (!r.isResolved()) {
                var s = f.semanticInfo.getASTForSymbol(e);

                var t = f.semanticInfo.getDeclForAST(s);
                this.resolver.resolveDeclaredSymbol(r, t, h);
              }
              var u = o[k].getType();

              var v = r.getType();
              if (!this.resolver.sourceIsSubtypeOfTarget(u, v, h, q)) {
                var w;
                if (q.message) {
                  w = a.getDiagnosticMessage(261, [r.getScopedNameEx().toString(), d.toString(), e.toString(), q.message]);
                } else {
                  w = a.getDiagnosticMessage(260, [r.getScopedNameEx().toString(), d.toString(), e.toString()]);
                }

                i.addMessage(w);

                j = !0;
                break;
              }
            }
          }
        }
      }
      if (j) {
        var x;
        if (d.isClass()) {
          x = 206;
        } else {
          if (e.isClass()) {
            x = 207;
          } else {
            x = 208;
          }
        }

        this.postError(c.name.minChar, c.name.getLength(), f.scriptName, x, [d.getScopedName(), e.getScopedName(), i.message],
          f.getEnclosingDecl());
      }
    };

    d.prototype.typeCheckIfClassImplementsType = function(c, d, e, f) {
      var g = new a.PullTypeResolutionContext;

      var h = new b;

      var i = !this.resolver.sourceMembersAreSubtypeOfTargetMembers(d, e, g, h);
      if (!i) {
        i = !this.resolver.sourceCallSignaturesAreSubtypeOfTargetCallSignatures(d, e, g, h);
        if (!i) {
          i = !this.resolver.sourceConstructSignaturesAreSubtypeOfTargetConstructSignatures(d, e, g, h);
          if (!i) {
            i = !this.resolver.sourceIndexSignaturesAreSubtypeOfTargetIndexSignatures(d, e, g, h);
          }
        }
      }
      if (i) {
        var j = e.isClass() ? 203 : 202;
        this.postError(c.name.minChar, c.name.getLength(), f.scriptName, j, [d.getScopedName(), e.getScopedName(), h.message],
          f.getEnclosingDecl());
      }
    };

    d.prototype.typeCheckBase = function(b, c, d, e, f) {
      var g = this;

      var h = f.semanticInfo.getDeclForAST(b);

      var i = new a.PullTypeResolutionContext;
      i.isResolvingClassExtendedType = !0;
      var j = this.typeCheckAST(new a.TypeReference(d, 0), f, !1);
      i.isResolvingClassExtendedType = !1;
      var k = c.isClass();
      if (!c.isValidBaseKind(j, e)) {
        if (j.isError()) {
          var l = j.getDiagnostic();
          if (l) {
            this.postError(d.minChar, d.getLength(), f.scriptName, l.diagnosticCode(), l.arguments(), f.getEnclosingDecl());
          }
        } else {
          if (e) {
            if (k) {
              this.postError(d.minChar, d.getLength(), f.scriptName, 142, null, f.getEnclosingDecl());
            } else {
              this.postError(d.minChar, d.getLength(), f.scriptName, 144, null, f.getEnclosingDecl());
            }
          } else {
            this.postError(d.minChar, d.getLength(), f.scriptName, 143, null, f.getEnclosingDecl());
          }
        }
        return;
      }
      if (j.getRootSymbol().hasBase(c.getRootSymbol())) {
        c.setHasBaseTypeConflict();

        j.setHasBaseTypeConflict();

        this.postError(b.name.minChar, b.name.getLength(), f.scriptName, k ? 168 : 169, [c.getScopedName()], f.getEnclosingDecl());
        return;
      }
      if (e) {
        this.typeCheckIfTypeExtendsType(b, c, j, f);
      } else {
        this.typeCheckIfClassImplementsType(b, c, j, f);
      }

      this.checkTypePrivacy(c, j, f, function(a) {
        return g.baseListPrivacyErrorReporter(b, c, d, e, a, f);
      });
    };

    d.prototype.typeCheckBases = function(a, b, c) {
      if (!a.extendsList && !a.implementsList) return;
      for (var d = 0; d < a.extendsList.members.length; d++) {
        this.typeCheckBase(a, b, a.extendsList.members[d], !0, c);
      }
      if (b.isClass())
        for (var d = 0; d < a.implementsList.members.length; d++) {
          this.typeCheckBase(a, b, a.implementsList.members[d], !1, c);
        } else {
          if (a.implementsList) {
            this.postError(a.implementsList.minChar, a.implementsList.getLength(), c.scriptName, 145, null, c.getEnclosingDecl());
          }
        }
    };

    d.prototype.typeCheckClass = function(a, b) {
      var c = a;

      var d = this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
      this.checkForResolutionError(d, b.getEnclosingDecl());

      this.typeCheckAST(c.typeParameters, b, !1);
      var e = b.semanticInfo.getDeclForAST(c);
      b.pushEnclosingDecl(e);

      this.typeCheckAST(c.typeParameters, b, !1);

      this.typeCheckBases(c, d, b);

      this.typeCheckAST(c.members, b, !1);

      d.hasBaseTypeConflict() || this.typeCheckMembersAgainstIndexer(d, b);

      b.popEnclosingDecl();

      return d;
    };

    d.prototype.typeCheckInterface = function(a, b) {
      var c = a;

      var d = this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
      this.checkForResolutionError(d, b.getEnclosingDecl());
      var e = b.semanticInfo.getDeclForAST(c);
      b.pushEnclosingDecl(e);

      this.typeCheckAST(c.typeParameters, b, !1);

      this.typeCheckBases(a, d, b);

      this.typeCheckAST(c.members, b, !1);

      d.hasBaseTypeConflict() || this.typeCheckMembersAgainstIndexer(d, b);

      b.popEnclosingDecl();

      return d;
    };

    d.prototype.typeCheckModule = function(b, c) {
      var d = b;

      var e = this.resolveSymbolAndReportDiagnostics(b, !1, c.getEnclosingDecl());
      this.checkForResolutionError(e, c.getEnclosingDecl());
      var f = c.semanticInfo.getDeclForAST(d);
      c.pushEnclosingDecl(f);
      var g = d.name.text;

      var h = a.isQuoted(g) || a.hasFlag(d.getModuleFlags(), 512);
      if (h && d.members && d.members.members)
        for (var i = d.members.members.length - 1; i >= 0; i--)
          if (d.members.members[i] && d.members.members[i].nodeType == 87) {
            this.typeCheckAST(d.members.members[i], c, !1);
            break;
          }
      this.typeCheckAST(d.members, c, !1);

      this.validateVariableDeclarationGroups(f, c);

      c.popEnclosingDecl();

      return e;
    };

    d.prototype.checkAssignability = function(a, c, d, e) {
      var f = new b;

      var g = this.resolver.sourceIsAssignableToTarget(c, d, this.context, f);
      if (!g) {
        var h = e.getEnclosingDecl();
        if (f.message) {
          this.postError(a.minChar, a.getLength(), e.scriptName, 81, [c.toString(), d.toString(), f.message], h);
        } else {
          this.postError(a.minChar, a.getLength(), e.scriptName, 80, [c.toString(), d.toString()], h);
        }
      }
    };

    d.prototype.isValidLHS = function(b, c) {
      var d = c.getType();
      return b.nodeType === 35 || this.resolver.isAnyOrEquivalent(d) ? !0 : !c.isType() || d.isArray() ? (c.getKind() &
        a.PullElementKind.SomeLHS) != 0 && !c.hasFlag(4096) : !1;
    };

    d.prototype.typeCheckAssignment = function(a, b) {
      var c = b.getEnclosingDecl();
      this.typeCheckAST(a.operand1, b, !1);
      var d = this.resolveSymbolAndReportDiagnostics(a.operand1, !1, b.getEnclosingDecl());

      var e = d.getType();
      this.checkForResolutionError(e, c);

      e = this.resolver.widenType(d.getType());

      this.context.pushContextualType(e, this.context.inProvisionalResolution(), null);
      var f = this.resolver.widenType(this.typeCheckAST(a.operand2, b, !0));
      this.context.popContextualType();

      this.isValidLHS(a.operand1, d) || this.postError(a.operand1.minChar, a.operand1.getLength(), b.scriptName, 195,
        null, c);

      this.checkAssignability(a.operand1, f, e, b);

      return f;
    };

    d.prototype.typeCheckGenericType = function(a, b) {
      var c = this.context.resolvingTypeReference;
      this.context.resolvingTypeReference = !0;

      this.typeCheckAST(a.name, b, !1);

      this.context.resolvingTypeReference = c;

      this.typeCheckAST(a.typeArguments, b, !1);

      return this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
    };

    d.prototype.typeCheckObjectLiteral = function(a, b, c) {
      var d = a;

      var e = b.getEnclosingDecl();

      var f = this.resolveSymbolAndReportDiagnostics(a, c, e).getType();

      var g = d.operand;

      var h = this.context.getContextualType();

      var i;
      if (g) {
        var j = null;
        for (var k = 0; k < g.members.length; k++) {
          var l = g.members[k];
          if (h) {
            var m;
            if (l.operand1.nodeType === 20) {
              m = l.operand1.text;
            } else {
              if (l.operand1.nodeType === 5) {
                m = l.operand1.text;
              }
            }

            j = h.findMember(m);

            if (j) {
              this.context.pushContextualType(j.getType(), this.context.inProvisionalResolution(), null);
            }
          }
          this.typeCheckAST(l.operand2, b, j != null);

          if (j) {
            this.context.popContextualType();
            j = null;
          }
        }
      }
      this.checkForResolutionError(f, e);

      return f;
    };

    d.prototype.typeCheckArrayLiteral = function(a, b, c) {
      var d = a;

      var e = b.getEnclosingDecl();

      var f = this.resolveSymbolAndReportDiagnostics(a, c, e).getType();

      var g = d.operand;

      var h = this.context.getContextualType();

      var i = null;
      if (h && h.isArray()) {
        i = h.getElementType();
      }
      if (g && g.members && g.members.length) {
        var j = [];
        if (i) {
          this.context.pushContextualType(i, this.context.inProvisionalResolution(), null);
        }
        for (var k = 0; k < g.members.length; k++) {
          j[j.length] = this.typeCheckAST(g.members[k], b, !1);
        }
        if (i) {
          this.context.popContextualType();
        }
      }
      this.checkForResolutionError(f, e);

      return f;
    };

    d.prototype.enclosingClassIsDerived = function(a) {
      var b = a.getEnclosingDecl(8);
      if (b) {
        var c = b.getSymbol();
        if (c.getExtendedTypes().length > 0) {
          return !0;
        }
      }
      return !1;
    };

    d.prototype.isSuperCallNode = function(a) {
      if (a && a.nodeType === 88) {
        var b = a;
        if (b.expression && b.expression.nodeType === 36) {
          var c = b.expression;
          if (c.target && c.target.nodeType === 30) {
            return !0;
          }
        }
      }
      return !1;
    };

    d.prototype.getFirstStatementFromFunctionDeclAST = function(a) {
      return a.block && a.block.statements && a.block.statements.members ? a.block.statements.members[0] : null;
    };

    d.prototype.superCallMustBeFirstStatementInConstructor = function(a, b) {
      if (a && b) {
        var c = b.getSymbol();
        if (c.getExtendedTypes().length === 0) {
          return !1;
        }
        var d = c.getMembers();
        for (var e = 0, f = d.length; e < f; e++) {
          var g = d[e];
          if (g.getKind() === 4096) {
            var h = g.getDeclarations();
            for (var i = 0, j = h.length; i < j; i++) {
              var k = h[i];

              var l = this.semanticInfoChain.getASTForDecl(k);
              if (l.nodeType === 19) {
                return !0;
              }
              if (l.nodeType === 17) {
                var m = l;
                if (m.init) {
                  return !0;
                }
              }
            }
          }
        }
      }
      return !1;
    };

    d.prototype.checkForThisOrSuperCaptureInArrowFunction = function(b, c) {
      var d = c.getEnclosingDecl();

      var e = c.enclosingDeclStack;
      if (e.length) {
        var f = !1;
        for (var g = e.length - 1; g >= 0; g--) {
          var h = e[g];

          var i = h.getKind();

          var j = h.getFlags();
          if (i === 131072 && a.hasFlag(j, 8192)) {
            f = !0;
            continue;
          }
          if (f)
            if (i === 16384 || i === 65536 || i === 32768 || i === 262144 || i === 524288 || i === 131072 || i === 8 ||
              i === 4 || i === 32 || i === 1) {
              h.setFlags(h.getFlags() | 262144);

              if (i === 8) {
                h.getChildDecls().filter(function(a) {
                  return a.getKind() === 32768;
                }).map(function(a) {
                  return a.setFlags(a.getFlags() | 262144);
                });
              }
              break;
            }
        }
      }
    };

    d.prototype.typeCheckThisExpression = function(a, b) {
      var c = b.getEnclosingDecl();

      var d = b.getEnclosingNonLambdaDecl();
      b.inSuperConstructorCall && this.superCallMustBeFirstStatementInConstructor(b.getEnclosingDecl(32768), b.getEnclosingDecl(
        8)) ? this.postError(a.minChar, a.getLength(), b.scriptName, 166, null, c) : d && (d.getKind() === 8 ? this.postError(
        a.minChar, a.getLength(), b.scriptName, 205, null, c) : d.getKind() === 4 || d.getKind() === 32 ? this.postError(
        a.minChar, a.getLength(), b.scriptName, 176, null, c) : b.inConstructorArguments && this.postError(a.minChar,
        a.getLength(), b.scriptName, 220, null, c));

      this.checkForThisOrSuperCaptureInArrowFunction(a, b);

      return this.resolveSymbolAndReportDiagnostics(a, !1, c).getType();
    };

    d.prototype.typeCheckSuperExpression = function(a, b) {
      var c = b.getEnclosingDecl();

      var d = b.getEnclosingNonLambdaDecl();

      var e = d.getKind();

      var f = b.inSuperConstructorTarget;
      f && c.getKind() !== 32768 ? this.postError(a.minChar, a.getLength(), b.scriptName, 174, null, c) : e !== 65536 &&
        e !== 262144 && e !== 524288 && e !== 32768 || (d.getFlags() & 16) !== 0 ? this.postError(a.minChar, a.getLength(),
          b.scriptName, 170, null, c) : this.enclosingClassIsDerived(b) || this.postError(a.minChar, a.getLength(), b
          .scriptName, 171, null, c);

      this.checkForThisOrSuperCaptureInArrowFunction(a, b);

      return this.resolveSymbolAndReportDiagnostics(a, !1, c).getType();
    };

    d.prototype.typeCheckCallExpression = function(b, c) {
      var d = c.getEnclosingDecl();

      var e = b.target.nodeType === 30;

      var f = new a.PullAdditionalCallResolutionData;

      var g = this.resolver.resolveCallExpression(b, !1, d, this.context, f);
      this.reportDiagnostics(g, d);
      var h = g.symbol.getType();
      this.typeCheckAST(b.typeArguments, c, !1);
      if (!h.isError()) {
        var i = c.inSuperConstructorTarget;
        if (e) {
          c.inSuperConstructorTarget = !0;
        }

        this.typeCheckAST(b.target, c, !1);

        c.inSuperConstructorTarget = i;
      }
      if (e && d.getKind() === 32768) {
        c.seenSuperConstructorCall = !0;
      }
      var j = c.inSuperConstructorCall;
      if (e) {
        c.inSuperConstructorCall = !0;
      }
      var k = f.actualParametersContextTypeSymbols;
      if (b.arguments) {
        var l = b.arguments.members;
        for (var m = 0, n = l.length; m < n; m++) {
          var o = l[m];
          if (k && k[m]) {
            this.context.pushContextualType(k[m], this.context.inProvisionalResolution(), null);
          }

          this.typeCheckAST(o, c, !1);

          if (k && k[m]) {
            this.context.popContextualType();
          }
        }
      }
      c.inSuperConstructorCall = j;

      return h;
    };

    d.prototype.typeCheckObjectCreationExpression = function(b, c) {
      var d = c.getEnclosingDecl();

      var e = new a.PullAdditionalCallResolutionData;

      var f = this.resolver.resolveNewExpression(b, !1, d, this.context, e);
      this.reportDiagnostics(f, c.getEnclosingDecl());
      var g = f.symbol.getType();
      this.typeCheckAST(b.target, c, !1);

      this.typeCheckAST(b.typeArguments, c, !1);
      var h = e.actualParametersContextTypeSymbols;
      if (b.arguments) {
        var i = b.arguments.members;
        for (var j = 0, k = i.length; j < k; j++) {
          var l = i[j];
          if (h && h[j]) {
            this.context.pushContextualType(h[j], this.context.inProvisionalResolution(), null);
          }

          this.typeCheckAST(l, c, !1);

          if (h && h[j]) {
            this.context.popContextualType();
          }
        }
      }
      return g;
    };

    d.prototype.typeCheckTypeAssertion = function(a, c) {
      var d = c.getEnclosingDecl();

      var e = this.resolveSymbolAndReportDiagnostics(a, !1, d).getType();
      if (e.isError()) {
        var f = e.getData();
        this.postError(a.minChar, a.getLength(), c.scriptName, 164, [f], c.getEnclosingDecl());
      }
      this.context.pushContextualType(e, this.context.inProvisionalResolution(), null);
      var g = this.typeCheckAST(a.operand, c, !0);
      this.context.popContextualType();
      var h = new b;

      var i = this.resolver.sourceIsAssignableToTarget(e, g, this.context, h) || this.resolver.sourceIsAssignableToTarget(
        g, e, this.context, h);
      if (!i) {
        var j;
        if (h.message) {
          this.postError(a.minChar, a.getLength(), c.scriptName, 81, [g.toString(), e.toString(), h.message], c.getEnclosingDecl());
        } else {
          this.postError(a.minChar, a.getLength(), c.scriptName, 80, [g.toString(), e.toString()], c.getEnclosingDecl());
        }
      }
      return e;
    };

    d.prototype.typeCheckLogicalOperation = function(c, d) {
      var e = this.typeCheckAST(c.operand1, d, !1);

      var f = this.typeCheckAST(c.operand2, d, !1);

      var g = new b;
      !this.resolver.sourceIsAssignableToTarget(e, f, this.context, g) && !this.resolver.sourceIsAssignableToTarget(f,
        e, this.context, g) && this.postError(c.minChar, c.getLength(), d.scriptName, 78, [a.BinaryExpression.getTextForBinaryToken(
        c.nodeType), e.toString(), f.toString()], d.getEnclosingDecl());

      return this.resolveSymbolAndReportDiagnostics(c, !1, d.getEnclosingDecl()).getType();
    };

    d.prototype.typeCheckLogicalAndOrExpression = function(a, b) {
      this.typeCheckAST(a.operand1, b, !1);

      this.typeCheckAST(a.operand2, b, !1);

      return this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
    };

    d.prototype.typeCheckCommaExpression = function(a, b) {
      this.typeCheckAST(a.operand1, b, !1);

      this.typeCheckAST(a.operand2, b, !1);

      return this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
    };

    d.prototype.typeCheckBinaryAdditionOperation = function(b, c) {
      var d = c.getEnclosingDecl();
      this.resolveSymbolAndReportDiagnostics(b, !1, d).getType();
      var e = this.typeCheckAST(b.operand1, c, !1);

      var f = this.typeCheckAST(b.operand2, c, !1);
      if (a.PullHelpers.symbolIsEnum(e)) {
        e = this.semanticInfoChain.numberTypeSymbol;
      } else if (e === this.semanticInfoChain.nullTypeSymbol || e === this.semanticInfoChain.undefinedTypeSymbol) {
        if (f != this.semanticInfoChain.nullTypeSymbol && f != this.semanticInfoChain.undefinedTypeSymbol) {
          e = f;
        } else {
          e = this.semanticInfoChain.anyTypeSymbol;
        }
      }
      if (a.PullHelpers.symbolIsEnum(f)) {
        f = this.semanticInfoChain.numberTypeSymbol;
      } else if (f === this.semanticInfoChain.nullTypeSymbol || f === this.semanticInfoChain.undefinedTypeSymbol) {
        if (e != this.semanticInfoChain.nullTypeSymbol && e != this.semanticInfoChain.undefinedTypeSymbol) {
          f = e;
        } else {
          f = this.semanticInfoChain.anyTypeSymbol;
        }
      }
      var g = null;
      if (e === this.semanticInfoChain.stringTypeSymbol || f === this.semanticInfoChain.stringTypeSymbol) {
        g = this.semanticInfoChain.stringTypeSymbol;
      } else {
        if (this.resolver.isAnyOrEquivalent(e) || this.resolver.isAnyOrEquivalent(f)) {
          g = this.semanticInfoChain.anyTypeSymbol;
        } else {
          if (f === this.semanticInfoChain.numberTypeSymbol && e === this.semanticInfoChain.numberTypeSymbol) {
            g = this.semanticInfoChain.numberTypeSymbol;
          }
        }
      }
      if (g) {
        if (b.nodeType === 39) {
          var h = this.resolveSymbolAndReportDiagnostics(b.operand1, !1, c.getEnclosingDecl());
          if (!this.isValidLHS(b.operand1, h)) {
            this.postError(b.operand1.minChar, b.operand1.getLength(), c.scriptName, 195, null, d);
          }

          this.checkAssignability(b.operand1, g, e, c);
        }
      } else {
        this.postError(b.operand1.minChar, b.operand1.getLength(), c.scriptName, 178, null, c.getEnclosingDecl());
        g = this.semanticInfoChain.anyTypeSymbol;
      }
      return g;
    };

    d.prototype.typeCheckBinaryArithmeticOperation = function(b, c) {
      var d = c.getEnclosingDecl();
      this.resolveSymbolAndReportDiagnostics(b, !1, d).getType();
      var e = this.typeCheckAST(b.operand1, c, !1);

      var f = this.typeCheckAST(b.operand2, c, !1);

      var g = this.resolver.isAnyOrEquivalent(e) || e === this.semanticInfoChain.numberTypeSymbol || a.PullHelpers.symbolIsEnum(
        e);

      var h = this.resolver.isAnyOrEquivalent(f) || f === this.semanticInfoChain.numberTypeSymbol || a.PullHelpers.symbolIsEnum(
        f);
      if (!h) {
        this.postError(b.operand1.minChar, b.operand1.getLength(), c.scriptName, 179, null, c.getEnclosingDecl());
      }

      if (!g) {
        this.postError(b.operand2.minChar, b.operand2.getLength(), c.scriptName, 180, null, c.getEnclosingDecl());
      }
      if (h && g) switch (b.nodeType) {
        case 47:
        case 48:
        case 49:
        case 40:
        case 42:
        case 41:
        case 43:
        case 46:
        case 44:
        case 45:
          var i = this.resolveSymbolAndReportDiagnostics(b.operand1, !1, c.getEnclosingDecl());
          if (!this.isValidLHS(b.operand1, i)) {
            this.postError(b.operand1.minChar, b.operand1.getLength(), c.scriptName, 195, null, d);
          }

          this.checkAssignability(b.operand1, f, e, c);
      }
      return this.semanticInfoChain.numberTypeSymbol;
    };

    d.prototype.typeCheckLogicalNotExpression = function(a, b, c) {
      this.typeCheckAST(a.operand, b, c);

      return this.semanticInfoChain.booleanTypeSymbol;
    };

    d.prototype.typeCheckUnaryArithmeticOperation = function(b, c, d) {
      var e = this.typeCheckAST(b.operand, c, d);
      switch (b.nodeType) {
        case 26:
        case 27:
        case 72:
          return this.semanticInfoChain.numberTypeSymbol;
      }
      var f = this.resolver.isAnyOrEquivalent(e) || e === this.semanticInfoChain.numberTypeSymbol || a.PullHelpers.symbolIsEnum(
        e);
      if (!f) {
        this.postError(b.operand.minChar, b.operand.getLength(), c.scriptName, 181, null, c.getEnclosingDecl());
      }
      switch (b.nodeType) {
        case 76:
        case 74:
        case 77:
        case 75:
          var g = this.resolveSymbolAndReportDiagnostics(b.operand, !1, c.getEnclosingDecl());
          if (!this.isValidLHS(b.operand, g)) {
            this.postError(b.operand.minChar, b.operand.getLength(), c.scriptName, 204, null, c.getEnclosingDecl());
          }
      }
      return e;
    };

    d.prototype.typeCheckElementAccessExpression = function(a, b) {
      this.typeCheckAST(a.operand1, b, !1);

      this.typeCheckAST(a.operand2, b, !1);

      return this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
    };

    d.prototype.typeCheckTypeOf = function(a, b) {
      this.typeCheckAST(a.operand, b, !1);

      return this.semanticInfoChain.stringTypeSymbol;
    };

    d.prototype.typeCheckTypeReference = function(b, c) {
      if (b.term.nodeType === 12) {
        this.typeCheckFunctionTypeSignature(b.term, c.getEnclosingDecl(), c);
      } else if (b.term.nodeType === 14) {
        this.typeCheckInterfaceTypeReference(b.term, c.getEnclosingDecl(), c);
      } else {
        var d = this.context.resolvingTypeReference;
        this.context.resolvingTypeReference = !0;
        var e = this.typeCheckAST(b.term, c, !1);
        if (e && !e.isError() && !c.inImportDeclaration && (e.getKind() & a.PullElementKind.SomeType) === 0) {
          if (e.getKind() & a.PullElementKind.SomeContainer) {
            this.postError(b.minChar, b.getLength(), c.scriptName, 262, [e.toString()], c.getEnclosingDecl());
          } else {
            this.postError(b.minChar, b.getLength(), c.scriptName, 263, null, c.getEnclosingDecl());
          }
        }

        this.context.resolvingTypeReference = d;
      }
      return this.resolveSymbolAndReportDiagnostics(b, !1, c.getEnclosingDecl()).getType();
    };

    d.prototype.typeCheckExportAssignment = function(a, b) {
      return this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
    };

    d.prototype.typeCheckFunctionTypeSignature = function(a, b, c) {
      var d = this.resolver.getSymbolAndDiagnosticsForAST(a);

      var e = d && d.symbol;
      if (!e) {
        e = this.resolver.resolveFunctionTypeSignature(a, b, this.context);
      }
      var f = c.semanticInfo.getDeclForAST(a);
      c.pushEnclosingDecl(f);

      this.typeCheckAST(a.arguments, c, !1);

      c.popEnclosingDecl();
      var g = e.getKind() === 33554432 ? e.getConstructSignatures()[0] : e.getCallSignatures()[0];

      var h = g.getParameters();
      for (var i = 0; i < h.length; i++) {
        this.checkForResolutionError(h[i].getType(), b);
      }
      if (a.returnTypeAnnotation) {
        var j = g.getReturnType();
        this.checkForResolutionError(j, b);
      }
      this.typeCheckFunctionOverloads(a, c, g, [g]);

      return e;
    };

    d.prototype.typeCheckInterfaceTypeReference = function(a, b, c) {
      var d = this.resolver.getSymbolAndDiagnosticsForAST(a);

      var e = d && d.symbol;
      if (!e) {
        e = this.resolver.resolveInterfaceTypeReference(a, b, this.context);
      }
      var f = c.semanticInfo.getDeclForAST(a);
      c.pushEnclosingDecl(f);

      this.typeCheckAST(a.members, c, !1);

      this.typeCheckMembersAgainstIndexer(e, c);

      c.popEnclosingDecl();

      return e;
    };

    d.prototype.typeCheckConditionalExpression = function(a, b) {
      this.typeCheckAST(a.operand1, b, !1);

      this.typeCheckAST(a.operand2, b, !1);

      this.typeCheckAST(a.operand3, b, !1);

      return this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
    };

    d.prototype.typeCheckThrowStatement = function(a, b) {
      this.typeCheckAST(a.expression, b, !1);
      var c = this.resolveSymbolAndReportDiagnostics(a.expression, !1, b.getEnclosingDecl()).getType();
      this.checkForResolutionError(c, b.getEnclosingDecl());

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckDeleteExpression = function(a, b) {
      this.typeCheckAST(a.operand, b, !1);
      var c = b.getEnclosingDecl();

      var d = this.resolveSymbolAndReportDiagnostics(a, !1, c).getType();
      this.checkForResolutionError(d, c);

      return d;
    };

    d.prototype.typeCheckVoidExpression = function(a, b) {
      this.typeCheckAST(a.operand, b, !1);
      var c = b.getEnclosingDecl();

      var d = this.resolveSymbolAndReportDiagnostics(a, !1, c).getType();
      this.checkForResolutionError(d, c);

      return d;
    };

    d.prototype.typeCheckRegExpExpression = function(a, b) {
      var c = this.resolveSymbolAndReportDiagnostics(a, !1, b.getEnclosingDecl()).getType();
      this.checkForResolutionError(c, b.getEnclosingDecl());

      return c;
    };

    d.prototype.typeCheckForStatement = function(a, b) {
      this.typeCheckAST(a.init, b, !1);

      this.typeCheckAST(a.cond, b, !1);

      this.typeCheckAST(a.body, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckForInStatement = function(a, b) {
      var c = a;

      var d = this.resolver.widenType(this.typeCheckAST(c.obj, b, !1));

      var e = c.lval;
      if (e.nodeType === 18) {
        var f = c.lval;

        var g = f.declarators.members[0];
        if (g.typeExpr) {
          this.postError(e.minChar, e.getLength(), b.scriptName, 182, null, b.getEnclosingDecl());
        }
      }
      var h = this.resolveSymbolAndReportDiagnostics(c.lval, !1, b.getEnclosingDecl());
      this.checkForResolutionError(h.getType(), b.getEnclosingDecl());
      var i = h.getType() === this.semanticInfoChain.stringTypeSymbol || this.resolver.isAnyOrEquivalent(h.getType());

      var j = d && (this.resolver.isAnyOrEquivalent(d) || !d.isPrimitive());
      i || this.postError(e.minChar, e.getLength(), b.scriptName, 183, null, b.getEnclosingDecl());

      j || this.postError(c.obj.minChar, c.obj.getLength(), b.scriptName, 184, null, b.getEnclosingDecl());

      this.typeCheckAST(c.body, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckInExpression = function(a, b) {
      var c = this.resolver.widenType(this.typeCheckAST(a.operand1, b, !1));

      var d = this.resolver.widenType(this.typeCheckAST(a.operand2, b, !1));

      var e = c.getType() === this.semanticInfoChain.stringTypeSymbol || this.resolver.isAnyOrEquivalent(c.getType()) ||
        this.resolver.isNumberOrEquivalent(c.getType());

      var f = d && (this.resolver.isAnyOrEquivalent(d) || !d.isPrimitive());
      e || this.postError(a.operand1.minChar, a.operand1.getLength(), b.scriptName, 185, null, b.getEnclosingDecl());

      f || this.postError(a.operand1.minChar, a.operand1.getLength(), b.scriptName, 186, null, b.getEnclosingDecl());

      return this.semanticInfoChain.booleanTypeSymbol;
    };

    d.prototype.typeCheckInstanceOfExpression = function(a, b) {
      var c = this.resolver.widenType(this.typeCheckAST(a.operand1, b, !1));

      var d = this.typeCheckAST(a.operand2, b, !1);

      var e = c && (this.resolver.isAnyOrEquivalent(c) || !c.isPrimitive());

      var f = d && (this.resolver.isAnyOrEquivalent(d) || d.isClass() || this.resolver.typeIsSubtypeOfFunction(d,
        this.context));
      e || this.postError(a.operand1.minChar, a.operand1.getLength(), b.scriptName, 187, null, b.getEnclosingDecl());

      f || this.postError(a.operand1.minChar, a.operand1.getLength(), b.scriptName, 188, null, b.getEnclosingDecl());

      return this.semanticInfoChain.booleanTypeSymbol;
    };

    d.prototype.typeCheckParenthesizedExpression = function(a, b) {
      return this.typeCheckAST(a.expression, b, !1);
    };

    d.prototype.typeCheckWhileStatement = function(a, b) {
      this.typeCheckAST(a.cond, b, !1);

      this.typeCheckAST(a.body, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckDoStatement = function(a, b) {
      this.typeCheckAST(a.cond, b, !1);

      this.typeCheckAST(a.body, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckIfStatement = function(a, b) {
      this.typeCheckAST(a.cond, b, !1);

      this.typeCheckAST(a.thenBod, b, !1);

      this.typeCheckAST(a.elseBod, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckBlock = function(a, b) {
      this.typeCheckAST(a.statements, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckVariableDeclaration = function(a, b) {
      this.typeCheckAST(a.declarators, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckVariableStatement = function(a, b) {
      this.typeCheckAST(a.declaration, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckWithStatement = function(a, b) {
      this.postError(a.expr.minChar, a.expr.getLength(), b.scriptName, 200, null, b.getEnclosingDecl());

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckTryStatement = function(a, b) {
      this.typeCheckAST(a.tryBody, b, !1);

      this.typeCheckAST(a.catchClause, b, !1);

      this.typeCheckAST(a.finallyBody, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckCatchClause = function(a, b) {
      var c = this.resolver.getDeclForAST(a);
      b.pushEnclosingDecl(c);

      this.typeCheckAST(a.body, b, !1);

      b.popEnclosingDecl();

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckReturnStatement = function(c, d) {
      d.setEnclosingDeclHasReturn();
      var e = c.returnExpression;

      var f = d.getEnclosingDecl();

      var g = !1;

      var h;
      if (f.getKind() & a.PullElementKind.SomeFunction) {
        h = this.resolver.getASTForDecl(f);
        if (h.returnTypeAnnotation) {
          var i = this.resolver.resolveTypeReference(h.returnTypeAnnotation, f, this.context).symbol;
          if (i) {
            g = !0;
            this.context.pushContextualType(i, this.context.inProvisionalResolution(), null);
          }
        } else {
          var j = this.context.getContextualType();
          if (j && j.isFunction()) {
            var k = j.getDeclarations()[0].getSignatureSymbol();

            var l = k.getReturnType();
            if (l) {
              g = !0;
              this.context.pushContextualType(l, this.context.inProvisionalResolution(), null);
            }
          }
        }
      }
      var m = this.typeCheckAST(e, d, g);
      if (g) {
        this.context.popContextualType();
      }

      if (f.getKind() === 524288 && e) {
        this.postError(e.minChar, e.getLength(), d.scriptName, 189, null, d.getEnclosingDecl());
      }
      if (f.getKind() & a.PullElementKind.SomeFunction) {
        h = this.resolver.getASTForDecl(f);
        if (h.returnTypeAnnotation) {
          var n = f.getSignatureSymbol();

          var o = n.getReturnType();
          if (m && o) {
            var p = new b;

            var q = null;
            if (m.isTypeParameter()) {
              q = m.getConstraint();
              if (q) {
                m = q;
              }
            }

            if (o.isTypeParameter()) {
              q = o.getConstraint();
              if (q) {
                o = q;
              }
            }

            if (!m.isResolved()) {
              this.resolver.resolveDeclaredSymbol(m, f, this.context);
            }

            if (!o.isResolved()) {
              this.resolver.resolveDeclaredSymbol(o, f, this.context);
            }
            var r = this.resolver.sourceIsAssignableToTarget(m, o, this.context, p);
            if (!r) {
              if (p.message) {
                this.postError(e.minChar, e.getLength(), d.scriptName, 81, [m.toString(), o.toString(), p.message], f);
              } else {
                this.postError(e.minChar, e.getLength(), d.scriptName, 80, [m.toString(), o.toString()], f);
              }
            }
          }
        }
      }
      return m;
    };

    d.prototype.typeCheckNameExpression = function(a, b) {
      var c = b.getEnclosingDecl();

      var d = this.resolveSymbolAndReportDiagnostics(a, !1, c).getType();
      this.checkForResolutionError(d, c);

      return d;
    };

    d.prototype.checkForSuperMemberAccess = function(a, b, c) {
      var d = b.getEnclosingDecl();
      return c && a.operand1.nodeType === 30 && !c.isError() && c.getKind() !== 65536 ? (this.postError(a.operand2.minChar,
        a.operand2.getLength(), b.scriptName, 232, [], d), !0) : !1;
    };

    d.prototype.checkForPrivateMemberAccess = function(a, b, c, d) {
      var e = b.getEnclosingDecl();
      if (d && d.hasFlag(2)) {
        var f = d.getContainer();
        if (f && f.getKind() === 33554432) {
          f = f.getAssociatedContainerType();
        }
        if (f && f.isClass()) {
          var g = b.getEnclosingClassDecl();
          if (!g || g.getSymbol() !== f) {
            var h = a.operand2;
            this.postError(h.minChar, h.getLength(), b.scriptName, 175, [f.toString(!1), h.actualText], e);

            return !0;
          }
        }
      }
      return !1;
    };

    d.prototype.checkForStaticMemberAccess = function(a, b, c, d) {
      if (c && d && !d.isError())
        if (c.isClass() || c.getKind() === 33554432) {
          var e = a.operand2;

          var f = b.getEnclosingDecl();
          if (d.hasFlag(16) || this.resolver.isPrototypeMember(a, f, this.context))
            if (c.getKind() !== 33554432) {
              var f = b.getEnclosingDecl();
              this.postError(e.minChar, e.getLength(), b.scriptName, 221, null, f);

              return !0;
            }
        }
      return !1;
    };

    d.prototype.typeCheckMemberAccessExpression = function(a, b) {
      var c = b.getEnclosingDecl();

      var d = this.resolveSymbolAndReportDiagnostics(a, !1, c);

      var e = d.getType();
      this.checkForResolutionError(e, c);
      var f = this.context.canUseTypeSymbol;
      this.context.canUseTypeSymbol = !0;
      var g = this.typeCheckAST(a.operand1, b, !1);
      this.context.canUseTypeSymbol = f;

      this.checkForSuperMemberAccess(a, b, d) || this.checkForPrivateMemberAccess(a, b, g, d) || this.checkForStaticMemberAccess(
        a, b, g, d);

      return e;
    };

    d.prototype.typeCheckSwitchStatement = function(a, b) {
      this.typeCheckAST(a.val, b, !1);

      this.typeCheckAST(a.caseList, b, !1);

      this.typeCheckAST(a.defaultCase, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckExpressionStatement = function(a, b, c) {
      return this.typeCheckAST(a.expression, b, c);
    };

    d.prototype.typeCheckCaseClause = function(a, b) {
      this.typeCheckAST(a.expr, b, !1);

      this.typeCheckAST(a.body, b, !1);

      return this.semanticInfoChain.voidTypeSymbol;
    };

    d.prototype.typeCheckLabeledStatement = function(a, b) {
      return this.typeCheckAST(a.statement, b, !1);
    };

    d.prototype.checkTypePrivacy = function(b, c, d, e) {
      if (!c || c.getKind() === 2) return;
      if (c.isArray()) {
        this.checkTypePrivacy(b, c.getElementType(), d, e);
        return;
      }
      if (!c.isNamedTypeSymbol()) {
        var f = c.getMembers();
        for (var g = 0; g < f.length; g++) {
          this.checkTypePrivacy(b, f[g].getType(), d, e);
        }
        this.checkTypePrivacyOfSignatures(b, c.getCallSignatures(), d, e);

        this.checkTypePrivacyOfSignatures(b, c.getConstructSignatures(), d, e);

        this.checkTypePrivacyOfSignatures(b, c.getIndexSignatures(), d, e);
        return;
      }
      if (b.isExternallyVisible()) {
        var h = c.isExternallyVisible();
        if (h) {
          var i = c.pathToRoot();
          if (i.length && i[i.length - 1].getKind() === 32) {
            var j = b.pathToRoot();
            if (j.length && j[j.length - 1] != i[i.length - 1]) {
              h = !1;
              for (var g = i.length - 1; g >= 0; g--) {
                var k = i[g].getAliasedSymbol(b);
                if (k) {
                  a.CompilerDiagnostics.assert(k.getKind() === 256,
                    "dynamic module need to be referenced by type alias");

                  k.setIsTypeUsedExternally();

                  h = !0;
                  break;
                }
              }
            }
          }
        }
        if (!h) {
          e(c);
        }
      }
    };

    d.prototype.checkTypePrivacyOfSignatures = function(a, b, c, d) {
      for (var e = 0; e < b.length; e++) {
        var f = b[e];
        if (b.length && f.isDefinition()) continue;
        var g = f.getTypeParameters();
        for (var h = 0; h < g.length; h++) {
          this.checkTypePrivacy(a, g[h], c, d);
        }
        var i = f.getParameters();
        for (var h = 0; h < i.length; h++) {
          var j = i[h].getType();
          this.checkTypePrivacy(a, j, c, d);
        }
        var k = f.getReturnType();
        this.checkTypePrivacy(a, k, c, d);
      }
    };

    d.prototype.baseListPrivacyErrorReporter = function(b, c, d, e, f, g) {
      var h = this.resolver.getDeclForAST(b);

      var i = g.getEnclosingDecl();

      var j;

      var k;

      var l = f.getScopedName();
      if (f.isContainer()) {
        if (!a.isQuoted(l)) {
          l = "'" + l + "'";
        }
        if (b.nodeType === 13) {
          if (e) {
            j = 90;
            k = [c.getScopedName(), l];
          } else {
            j = 91;
            k = [c.getScopedName(), l];
          }
        } else {
          j = 92;
          k = [c.getDisplayName(), l];
        }
      } else {
        if (b.nodeType === 13) {
          if (e) {
            j = 87;
            k = [c.getScopedName(), l];
          } else {
            j = 88;
            k = [c.getScopedName(), l];
          }
        } else {
          j = 89;
          k = [c.getDisplayName(), l];
        }
      }

      this.context.postError(g.scriptName, d.minChar, d.getLength(), j, k, i, !0);
    };

    d.prototype.variablePrivacyErrorReporter = function(b, c, d) {
      var e = this.resolver.getASTForSymbol(b);

      var f = d.getEnclosingDecl();

      var g = b.getKind() === 4096;

      var h = !1;

      var i = b.getContainer();
      if (i && (i.getKind() === 8 || i.getKind() === 32768)) {
        h = !0;
      }
      var j;

      var k;

      var l = c.getScopedName();
      if (c.isContainer()) {
        if (!a.isQuoted(l)) {
          l = "'" + l + "'";
        }
        if (b.hasFlag(16)) {
          j = 97;
          k = [b.getScopedName(), l];
        } else {
          if (g) {
            if (h) {
              j = 98;
              k = [b.getScopedName(), l];
            } else {
              j = 99;
              k = [b.getScopedName(), l];
            }
          } else {
            j = 100;
            k = [b.getScopedName(), l];
          }
        }
      } else {
        if (b.hasFlag(16)) {
          j = 93;
          k = [b.getScopedName(), l];
        } else {
          if (g) {
            if (h) {
              j = 94;
              k = [b.getScopedName(), l];
            } else {
              j = 95;
              k = [b.getScopedName(), l];
            }
          } else {
            j = 96;
            k = [b.getScopedName(), l];
          }
        }
      }

      this.context.postError(d.scriptName, e.minChar, e.getLength(), j, k, f, !0);
    };

    d.prototype.checkFunctionTypePrivacy = function(a, b, c) {
      var d = this;
      if (b || a.getFunctionFlags() & 8192 || a.getFunctionFlags() & 16384) return;
      var e = c.semanticInfo.getDeclForAST(a);

      var f = e.getSymbol();

      var g;

      var h = a.isGetAccessor();

      var i = a.isSetAccessor();
      if (h || i) {
        var j = f;
        g = (h ? j.getGetter() : j.getSetter()).getType().getCallSignatures()[0];
      } else {
        if (!f) {
          var k = e.getParentDecl();
          f = k.getSymbol();
          if (f && f.isType() && !f.isNamedTypeSymbol()) return;
        } else if (f.getKind() == 65536 && !f.getContainer().isNamedTypeSymbol()) return;
        g = e.getSignatureSymbol();
      }
      if (!h) {
        var l = g.getParameters();
        for (var m = 0; m < l.length; m++) {
          this.checkTypePrivacy(f, l[m].getType(), c, function(b) {
            return d.functionArgumentTypePrivacyErrorReporter(a, m, l[m], b, c);
          });
        }
      }
      if (!i) {
        this.checkTypePrivacy(f, g.getReturnType(), c, function(b) {
          return d.functionReturnTypePrivacyErrorReporter(a, g.getReturnType(), b, c);
        });
      }
    };

    d.prototype.functionArgumentTypePrivacyErrorReporter = function(b, c, d, e, f) {
      var g = this.resolver.getDeclForAST(b);

      var h = f.getEnclosingDecl();

      var i = b.isAccessor() && a.hasFlag(b.getFunctionFlags(), 32);

      var j = b.isAccessor() && a.hasFlag(b.getFunctionFlags(), 64);

      var k = (g.getFlags() & 16) === 16;

      var l = g.getKind() === 65536;

      var m = !1;

      var n = g.getParentDecl();
      if (n && (n.getKind() === 8 || n.getKind() === 32768)) {
        m = !0;
      }
      var o = b.arguments.members[c].minChar;

      var p = b.arguments.members[c].getLength();

      var q = e.getScopedName();
      if (e.isContainer()) {
        if (!a.isQuoted(q)) {
          q = "'" + q + "'";
        }
        if (b.isConstructor) {
          this.context.postError(f.scriptName, o, p, 110, [d.getScopedName(), q], h, !0);
        } else {
          if (j) {
            if (k) {
              this.context.postError(f.scriptName, o, p, 111, [d.getScopedName(), q], h, !0);
            } else {
              this.context.postError(f.scriptName, o, p, 112, [d.getScopedName(), q], h, !0);
            }
          } else {
            if (b.isConstructMember()) {
              this.context.postError(f.scriptName, o, p, 113, [d.getScopedName(), q], h, !0);
            } else {
              if (b.isCallMember()) {
                this.context.postError(f.scriptName, o, p, 114, [d.getScopedName(), q], h, !0);
              } else {
                if (l) {
                  if (k) {
                    this.context.postError(f.scriptName, o, p, 115, [d.getScopedName(), q], h, !0);
                  } else {
                    if (m) {
                      this.context.postError(f.scriptName, o, p, 116, [d.getScopedName(), q], h, !0);
                    } else {
                      this.context.postError(f.scriptName, o, p, 117, [d.getScopedName(), q], h, !0);
                    }
                  }
                } else {
                  if (!i) {
                    this.context.postError(f.scriptName, o, p, 118, [d.getScopedName(), q], h, !0);
                  }
                }
              }
            }
          }
        }
      } else {
        if (b.isConstructor) {
          this.context.postError(f.scriptName, o, p, 101, [d.getScopedName(), q], h, !0);
        } else {
          if (j) {
            if (k) {
              this.context.postError(f.scriptName, o, p, 102, [d.getScopedName(), q], h, !0);
            } else {
              this.context.postError(f.scriptName, o, p, 103, [d.getScopedName(), q], h, !0);
            }
          } else {
            if (b.isConstructMember()) {
              this.context.postError(f.scriptName, o, p, 104, [d.getScopedName(), q], h, !0);
            } else {
              if (b.isCallMember()) {
                this.context.postError(f.scriptName, o, p, 105, [d.getScopedName(), q], h, !0);
              } else {
                if (l) {
                  if (k) {
                    this.context.postError(f.scriptName, o, p, 106, [d.getScopedName(), q], h, !0);
                  } else {
                    if (m) {
                      this.context.postError(f.scriptName, o, p, 107, [d.getScopedName(), q], h, !0);
                    } else {
                      this.context.postError(f.scriptName, o, p, 108, [d.getScopedName(), q], h, !0);
                    }
                  }
                } else {
                  if (!i && !b.isIndexerMember()) {
                    this.context.postError(f.scriptName, o, p, 109, [d.getScopedName(), q], h, !0);
                  }
                }
              }
            }
          }
        }
      }
    };

    d.prototype.functionReturnTypePrivacyErrorReporter = function(b, c, d, e) {
      var f = this;

      var g = this.resolver.getDeclForAST(b);

      var h = e.getEnclosingDecl();

      var i = b.isAccessor() && a.hasFlag(b.getFunctionFlags(), 32);

      var j = b.isAccessor() && a.hasFlag(b.getFunctionFlags(), 64);

      var k = (g.getFlags() & 16) === 16;

      var l = g.getKind() === 65536;

      var m = !1;

      var n = g.getParentDecl();
      if (n && (n.getKind() === 8 || n.getKind() === 32768)) {
        m = !0;
      }
      var o = null;

      var p;

      var q = d.getScopedName();
      if (d.isContainer()) {
        if (!a.isQuoted(q)) {
          q = "'" + q + "'";
        }
        if (i) {
          if (k) {
            o = 128;
            p = [q];
          } else {
            o = 129;
            p = [q];
          }
        } else {
          if (b.isConstructMember()) {
            o = 130;
            p = [q];
          } else {
            if (b.isCallMember()) {
              o = 131;
              p = [q];
            } else {
              if (b.isIndexerMember()) {
                o = 132;
                p = [q];
              } else {
                if (l) {
                  if (k) {
                    o = 133;
                    p = [q];
                  } else {
                    if (m) {
                      o = 134;
                      p = [q];
                    } else {
                      o = 135;
                      p = [q];
                    }
                  }
                } else {
                  if (!j && !b.isConstructor) {
                    o = 136;
                    p = [q];
                  }
                }
              }
            }
          }
        }
      } else {
        if (i) {
          if (k) {
            o = 119;
            p = [q];
          } else {
            o = 120;
            p = [q];
          }
        } else {
          if (b.isConstructMember()) {
            o = 121;
            p = [q];
          } else {
            if (b.isCallMember()) {
              o = 122;
              p = [q];
            } else {
              if (b.isIndexerMember()) {
                o = 123;
                p = [q];
              } else {
                if (l) {
                  if (k) {
                    o = 124;
                    p = [q];
                  } else {
                    if (m) {
                      o = 125;
                      p = [q];
                    } else {
                      o = 126;
                      p = [q];
                    }
                  }
                } else {
                  if (!j && !b.isConstructor) {
                    o = 127;
                    p = [q];
                  }
                }
              }
            }
          }
        }
      }
      if (o) {
        var r = !1;

        var s = new a.PullTypeResolutionContext;
        if (b.returnTypeAnnotation) {
          var t = this.resolver.resolveTypeReference(b.returnTypeAnnotation, g, s);

          var u = t && t.symbol;
          if (u === c) {
            this.context.postError(e.scriptName, b.returnTypeAnnotation.minChar, b.returnTypeAnnotation.getLength(),
              o, p, h, !0);
          }
        }
        if (b.block) {
          var v = function(a, b, d) {
            var i = !0;
            switch (a.nodeType) {
              case 12:
                i = !1;
                break;
              case 93:
                var j = a;

                var k = f.resolver.resolveAST(j.returnExpression, !1, g, s).symbol.getType();
                if (k === c) {
                  f.context.postError(e.scriptName, j.minChar, j.getLength(), o, p, h, !0);
                } else {
                  r = !0;
                }

                i = !1;
                break;
              default:
            }
            d.options.goChildren = i;

            return a;
          };
          a.getAstWalkerFactory().walk(b.block, v);
        }
        if (r) {
          this.context.postError(e.scriptName, b.minChar, b.getLength(), o, p, h, !0);
        }
      }
    };

    d.globalPullTypeCheckPhase = 0;

    return d;
  }();
  a.PullTypeChecker = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    a[a.NoChanges = 0] = "NoChanges";

    a[a.DeclAdded = 1] = "DeclAdded";

    a[a.DeclRemoved = 2] = "DeclRemoved";

    a[a.DeclChanged = 3] = "DeclChanged";
  })(a.PullDeclEdit || (a.PullDeclEdit = {}));
  var b = a.PullDeclEdit;

  var c = function() {
    function a(a, b, c) {
      this.oldDecl = a;

      this.newDecl = b;

      this.kind = c;
    }
    return a;
  }();
  a.PullDeclDiff = c;
  var d = function() {
    function b(a, b) {
      this.oldSemanticInfo = a;

      this.newSemanticInfo = b;

      this.differences = [];
    }
    b.diffDecls = function(a, c, d, e) {
      var f = new b(c, e);
      f.diff(a, d);

      return f.differences;
    };

    b.prototype.diff = function(b, d) {
      a.Debug.assert(b.getName() === d.getName());

      a.Debug.assert(b.getKind() === d.getKind());
      var e = this.oldSemanticInfo.getASTForDecl(b);

      var f = this.newSemanticInfo.getASTForDecl(d);
      a.Debug.assert(e !== undefined);

      a.Debug.assert(f !== undefined);
      if (e === f) return;
      this.diff1(b, d, e, f, b.childDeclTypeCache, d.childDeclTypeCache);

      this.diff1(b, d, e, f, b.childDeclTypeParameterCache, d.childDeclTypeParameterCache);

      this.diff1(b, d, e, f, b.childDeclValueCache, d.childDeclValueCache);

      this.diff1(b, d, e, f, b.childDeclNamespaceCache, d.childDeclNamespaceCache);

      if (!this.isEquivalent(e, f)) {
        this.differences.push(new c(b, d, 3));
      }
    };

    b.prototype.diff1 = function(a, d, e, f, g, h) {
      var i;

      var j;

      var k;

      var l;
      for (var m in g) {
        i = g[m] || b.emptyDeclArray;

        j = h[m] || b.emptyDeclArray;
        for (var n = 0, o = i.length; n < o; n++) {
          k = i[n];
          switch (k.getKind()) {
            case 131072:
            case 512:
            case 8388608:
            case 16777216:
            case 33554432:
              continue;
          }
          if (n < j.length) {
            l = j[n];
            if (k.getKind() === l.getKind()) {
              this.diff(k, j[n]);
            } else {
              this.differences.push(new c(k, null, 2));
              this.differences.push(new c(a, l, 1));
            }
          } else {
            this.differences.push(new c(k, null, 2));
          }
        }
      }
      for (var m in h) {
        i = g[m] || b.emptyDeclArray;

        j = h[m] || b.emptyDeclArray;
        for (var n = i.length, o = j.length; n < o; n++) {
          l = j[n];
          this.differences.push(new c(a, l, 1));
        }
      }
    };

    b.prototype.isEquivalent = function(b, c) {
      a.Debug.assert(b !== null);

      a.Debug.assert(c !== null);

      a.Debug.assert(b !== c);
      if (b.nodeType !== c.nodeType || b.getFlags() !== c.getFlags()) {
        return !1;
      }
      switch (b.nodeType) {
        case 16:
          return this.importDeclarationIsEquivalent(b, c);
        case 15:
          return this.moduleDeclarationIsEquivalent(b, c);
        case 13:
          return this.classDeclarationIsEquivalent(b, c);
        case 14:
          return this.interfaceDeclarationIsEquivalent(b, c);
        case 19:
          return this.argumentDeclarationIsEquivalent(b, c);
        case 17:
          return this.variableDeclarationIsEquivalent(b, c);
        case 9:
          return this.typeParameterIsEquivalent(b, c);
        case 12:
          return this.functionDeclarationIsEquivalent(b, c);
        case 101:
          return this.catchClauseIsEquivalent(b, c);
        case 99:
          return this.withStatementIsEquivalent(b, c);
        case 2:
          return this.scriptIsEquivalent(b, c);
        default:
          throw a.Errors.invalidOperation();
      }
    };

    b.prototype.importDeclarationIsEquivalent = function(b, c) {
      return a.structuralEqualsNotIncludingPosition(b.alias, c.alias);
    };

    b.prototype.typeDeclarationIsEquivalent = function(b, c) {
      return b.getVarFlags() === c.getVarFlags() && a.structuralEqualsNotIncludingPosition(b.typeParameters, c.typeParameters) &&
        a.structuralEqualsNotIncludingPosition(b.extendsList, c.extendsList) && a.structuralEqualsNotIncludingPosition(
          b.implementsList, c.implementsList);
    };

    b.prototype.classDeclarationIsEquivalent = function(a, b) {
      return this.typeDeclarationIsEquivalent(a, b);
    };

    b.prototype.interfaceDeclarationIsEquivalent = function(a, b) {
      return this.typeDeclarationIsEquivalent(a, b);
    };

    b.prototype.typeParameterIsEquivalent = function(b, c) {
      return a.structuralEqualsNotIncludingPosition(b.constraint, c.constraint);
    };

    b.prototype.boundDeclarationIsEquivalent = function(b, c) {
      return b.getVarFlags() === c.getVarFlags() && a.structuralEqualsNotIncludingPosition(b.typeExpr, c.typeExpr) ?
        b.typeExpr === null ? a.structuralEqualsNotIncludingPosition(b.init, c.init) : !0 : !1;
    };

    b.prototype.argumentDeclarationIsEquivalent = function(a, b) {
      return this.boundDeclarationIsEquivalent(a, b) && a.isOptional === b.isOptional;
    };

    b.prototype.variableDeclarationIsEquivalent = function(a, b) {
      return this.boundDeclarationIsEquivalent(a, b);
    };

    b.prototype.functionDeclarationIsEquivalent = function(b, c) {
      return b.hint === c.hint && b.getFunctionFlags() === c.getFunctionFlags() && b.variableArgList === c.variableArgList &&
        b.isConstructor === c.isConstructor && a.structuralEqualsNotIncludingPosition(b.returnTypeAnnotation, c.returnTypeAnnotation) &&
        a.structuralEqualsNotIncludingPosition(b.typeArguments, c.typeArguments) && a.structuralEqualsNotIncludingPosition(
          b.arguments, c.arguments) ? b.returnTypeAnnotation === null ? a.structuralEqualsNotIncludingPosition(b.block,
          c.block) : !0 : !1;
    };

    b.prototype.catchClauseIsEquivalent = function(b, c) {
      return a.structuralEqualsNotIncludingPosition(b.param, c.param) && a.structuralEqualsNotIncludingPosition(b.body,
        c.body);
    };

    b.prototype.withStatementIsEquivalent = function(b, c) {
      return a.structuralEqualsNotIncludingPosition(b.expr, c.expr) && a.structuralEqualsNotIncludingPosition(b.body,
        c.body);
    };

    b.prototype.scriptIsEquivalent = function(a, b) {
      return !0;
    };

    b.prototype.moduleDeclarationIsEquivalent = function(b, c) {
      return b.getModuleFlags() === c.getModuleFlags() && c.prettyName === c.prettyName && a.ArrayUtilities.sequenceEquals(
        b.amdDependencies, c.amdDependencies, a.StringUtilities.stringEquals);
    };

    b.emptyDeclArray = [];

    return b;
  }();
  a.PullDeclDiffer = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  a.declCacheHit = 0;

  a.declCacheMiss = 0;

  a.symbolCacheHit = 0;

  a.symbolCacheMiss = 0;
  var b = function() {
    function b(b) {
      this.topLevelDecls = [];

      this.topLevelSynthesizedDecls = [];

      this.astDeclMap = new a.DataMap;

      this.declASTMap = new a.DataMap;

      this.syntaxElementDeclMap = new a.DataMap;

      this.declSyntaxElementMap = new a.DataMap;

      this.astSymbolMap = new a.DataMap;

      this.symbolASTMap = new a.DataMap;

      this.syntaxElementSymbolMap = new a.DataMap;

      this.symbolSyntaxElementMap = new a.DataMap;

      this.properties = new c;

      this.hasBeenTypeChecked = !1;

      this.compilationUnitPath = b;
    }
    b.prototype.addTopLevelDecl = function(a) {
      this.topLevelDecls[this.topLevelDecls.length] = a;
    };

    b.prototype.setTypeChecked = function() {
      this.hasBeenTypeChecked = !0;
    };

    b.prototype.getTypeChecked = function() {
      return this.hasBeenTypeChecked;
    };

    b.prototype.invalidate = function() {
      this.astSymbolMap = new a.DataMap;

      this.symbolASTMap = new a.DataMap;
    };

    b.prototype.getTopLevelDecls = function() {
      return this.topLevelDecls;
    };

    b.prototype.getPath = function() {
      return this.compilationUnitPath;
    };

    b.prototype.addSynthesizedDecl = function(a) {
      this.topLevelSynthesizedDecls[this.topLevelSynthesizedDecls.length] = a;
    };

    b.prototype.getSynthesizedDecls = function() {
      return this.topLevelSynthesizedDecls;
    };

    b.prototype.getDeclForAST = function(a) {
      return this.astDeclMap.read(a.getID().toString());
    };

    b.prototype.setDeclForAST = function(a, b) {
      this.astDeclMap.link(a.getID().toString(), b);
    };

    b.prototype.getDeclKey = function(a) {
      var b = a;
      b.__declKey || (b.__declKey = a.getDeclID().toString() + "-" + a.getKind().toString());

      return b.__declKey;
    };

    b.prototype.getASTForDecl = function(a) {
      return this.declASTMap.read(this.getDeclKey(a));
    };

    b.prototype.setASTForDecl = function(a, b) {
      this.declASTMap.link(this.getDeclKey(a), b);
    };

    b.prototype.setSymbolAndDiagnosticsForAST = function(a, b) {
      this.astSymbolMap.link(a.getID().toString(), b);

      this.symbolASTMap.link(b.symbol.getSymbolID().toString(), a);
    };

    b.prototype.getSymbolAndDiagnosticsForAST = function(a) {
      return this.astSymbolMap.read(a.getID().toString());
    };

    b.prototype.getASTForSymbol = function(a) {
      return this.symbolASTMap.read(a.getSymbolID().toString());
    };

    b.prototype.getSyntaxElementForDecl = function(a) {
      return this.declSyntaxElementMap.read(this.getDeclKey(a));
    };

    b.prototype.setSyntaxElementForDecl = function(a, b) {
      this.declSyntaxElementMap.link(this.getDeclKey(a), b);
    };

    b.prototype.getDeclForSyntaxElement = function(b) {
      return this.syntaxElementDeclMap.read(a.Collections.identityHashCode(b).toString());
    };

    b.prototype.setDeclForSyntaxElement = function(b, c) {
      this.syntaxElementDeclMap.link(a.Collections.identityHashCode(b).toString(), c);
    };

    b.prototype.getSyntaxElementForSymbol = function(a) {
      return this.symbolSyntaxElementMap.read(a.getSymbolID().toString());
    };

    b.prototype.getSymbolForSyntaxElement = function(b) {
      return this.syntaxElementSymbolMap.read(a.Collections.identityHashCode(b).toString());
    };

    b.prototype.setSymbolForSyntaxElement = function(b, c) {
      this.syntaxElementSymbolMap.link(a.Collections.identityHashCode(b).toString(), c);

      this.symbolSyntaxElementMap.link(c.getSymbolID().toString(), b);
    };

    b.prototype.getDiagnostics = function(b) {
      for (var c = 0; c < this.topLevelDecls.length; c++) {
        a.getDiagnosticsFromEnclosingDecl(this.topLevelDecls[c], b);
      }
    };

    b.prototype.getProperties = function() {
      return this.properties;
    };

    return b;
  }();
  a.SemanticInfo = b;
  var c = function() {
    function a() {
      this.unitContainsBool = !1;
    }
    return a;
  }();
  a.SemanticInfoProperties = c;
  var d = function() {
    function c() {
      this.units = [new b("")];

      this.declCache = new a.BlockIntrinsics;

      this.symbolCache = new a.BlockIntrinsics;

      this.unitCache = new a.BlockIntrinsics;

      this.declSymbolMap = new a.DataMap;

      this.anyTypeSymbol = null;

      this.booleanTypeSymbol = null;

      this.numberTypeSymbol = null;

      this.stringTypeSymbol = null;

      this.nullTypeSymbol = null;

      this.undefinedTypeSymbol = null;

      this.elementTypeSymbol = null;

      this.voidTypeSymbol = null;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this;
      }
      var c = this.getGlobalDecl();

      var d = this.units[0];
      d.addTopLevelDecl(c);
    }
    c.prototype.addPrimitiveType = function(b, c) {
      var d = new a.TextSpan(0, 0);

      var e = new a.PullDecl(b, b, 2, 0, d, "");

      var f = new a.PullPrimitiveTypeSymbol(b);
      f.addDeclaration(e);

      e.setSymbol(f);

      f.setResolved();

      c && c.addChildDecl(e);

      return f;
    };

    c.prototype.addPrimitiveValue = function(b, c, d) {
      var e = new a.TextSpan(0, 0);

      var f = new a.PullDecl(b, b, 1024, 8, e, "");

      var g = new a.PullSymbol(b, 1024);
      g.addDeclaration(f);

      f.setSymbol(g);

      g.setType(c);

      g.setResolved();

      d.addChildDecl(f);
    };

    c.prototype.getGlobalDecl = function() {
      var b = new a.TextSpan(0, 0);

      var c = new a.PullDecl("", "", 0, 0, b, "");
      this.anyTypeSymbol = this.addPrimitiveType("any", c);

      this.booleanTypeSymbol = this.addPrimitiveType("boolean", c);

      this.numberTypeSymbol = this.addPrimitiveType("number", c);

      this.stringTypeSymbol = this.addPrimitiveType("string", c);

      this.voidTypeSymbol = this.addPrimitiveType("void", c);

      this.elementTypeSymbol = this.addPrimitiveType("_element", c);

      this.nullTypeSymbol = this.addPrimitiveType("null", null);

      this.undefinedTypeSymbol = this.addPrimitiveType("undefined", null);

      this.addPrimitiveValue("undefined", this.undefinedTypeSymbol, c);

      this.addPrimitiveValue("null", this.nullTypeSymbol, c);

      return c;
    };

    c.prototype.addUnit = function(a) {
      this.units[this.units.length] = a;

      this.unitCache[a.getPath()] = a;
    };

    c.prototype.getUnit = function(a) {
      for (var b = 0; b < this.units.length; b++)
        if (this.units[b].getPath() === a) {
          return this.units[b];
        }
      return null;
    };

    c.prototype.updateUnit = function(a, b) {
      for (var c = 0; c < this.units.length; c++)
        if (this.units[c].getPath() === a.getPath()) {
          this.units[c] = b;

          this.unitCache[a.getPath()] = b;
          return;
        }
    };

    c.prototype.collectAllTopLevelDecls = function() {
      var a = [];

      var b;
      for (var c = 0; c < this.units.length; c++) {
        b = this.units[c].getTopLevelDecls();
        for (var d = 0; d < b.length; d++) {
          a[a.length] = b[d];
        }
      }
      return a;
    };

    c.prototype.collectAllSynthesizedDecls = function() {
      var a = [];

      var b;
      for (var c = 0; c < this.units.length; c++) {
        b = this.units[c].getSynthesizedDecls();
        for (var d = 0; d < b.length; d++) {
          a[a.length] = b[d];
        }
      }
      return a;
    };

    c.prototype.getDeclPathCacheID = function(a, b) {
      var c = "";
      for (var d = 0; d < a.length; d++) {
        c += "#" + a[d];
      }
      return c + "#" + b.toString();
    };

    c.prototype.findDecls = function(b, c) {
      var d = this.getDeclPathCacheID(b, c);
      if (b.length) {
        var e = this.declCache[d];
        if (e && e.length) {
          a.declCacheHit++;
          return e;
        }
      }
      a.declCacheMiss++;
      var f = this.collectAllTopLevelDecls();

      var g = [];

      var h;

      var i = [];

      var j = c & 4 || c & 16;
      for (var k = 0; k < b.length; k++) {
        h = b[k];

        g = [];
        for (var l = 0; l < f.length; l++) {
          i = f[l].searchChildDecls(h, c);
          for (var m = 0; m < i.length; m++) {
            g[g.length] = i[m];
          }
          if (i.length && !j) break;
        }
        f = g;
        if (!f) break;
      }
      g.length && (this.declCache[d] = g);

      return g;
    };

    c.prototype.findSymbol = function(b, c) {
      var d = this.getDeclPathCacheID(b, c);
      if (b.length) {
        var e = this.symbolCache[d];
        if (e) {
          a.symbolCacheHit++;
          return e;
        }
      }
      a.symbolCacheMiss++;
      var f = this.findDecls(b, c);

      var g = null;
      f.length && (g = f[0].getSymbol(), g && (this.symbolCache[d] = g, g.addCacheID(d)));

      return g;
    };

    c.prototype.cacheGlobalSymbol = function(a, b) {
      var c = this.getDeclPathCacheID([a.getName()], b);

      var d = this.getDeclPathCacheID([a.getName()], a.getKind());
      if (!this.symbolCache[c]) {
        this.symbolCache[c] = a;
        a.addCacheID(c);
      }

      if (!this.symbolCache[d]) {
        this.symbolCache[d] = a;
        a.addCacheID(d);
      }
    };

    c.prototype.cleanDecl = function(a) {
      a.setSymbol(null);

      a.setSignatureSymbol(null);

      a.setSpecializingSignatureSymbol(null);

      a.setIsBound(!1);
      var b = a.getChildDecls();
      for (var c = 0; c < b.length; c++) {
        this.cleanDecl(b[c]);
      }
      var d = a.getTypeParameters();
      for (var c = 0; c < d.length; c++) {
        this.cleanDecl(d[c]);
      }
      var e = a.getValueDecl();
      if (e) {
        this.cleanDecl(e);
      }
    };

    c.prototype.cleanAllDecls = function() {
      var a = this.collectAllTopLevelDecls();
      for (var b = 1; b < a.length; b++) {
        this.cleanDecl(a[b]);
      }
      var c = this.collectAllSynthesizedDecls();
      for (var b = 0; b < c.length; b++) {
        this.cleanDecl(c[b]);
      }
    };

    c.prototype.update = function() {
      this.declCache = new a.BlockIntrinsics;

      this.symbolCache = new a.BlockIntrinsics;

      this.units[0] = new b("");

      this.units[0].addTopLevelDecl(this.getGlobalDecl());

      this.cleanAllDecls();
      for (var c in this.unitCache) {
        if (this.unitCache[c]) {
          this.unitCache[c].invalidate();
        }
      }
    };

    c.prototype.invalidateUnit = function(a) {
      var b = this.unitCache[a];
      if (b) {
        b.invalidate();
      }
    };

    c.prototype.getDeclForAST = function(a, b) {
      var c = this.unitCache[b];
      return c ? c.getDeclForAST(a) : null;
    };

    c.prototype.getASTForDecl = function(a) {
      var b = this.unitCache[a.getScriptName()];
      return b ? b.getASTForDecl(a) : null;
    };

    c.prototype.getSymbolAndDiagnosticsForAST = function(a, b) {
      var c = this.unitCache[b];
      return c ? c.getSymbolAndDiagnosticsForAST(a) : null;
    };

    c.prototype.getASTForSymbol = function(a, b) {
      var c = this.unitCache[b];
      return c ? c.getASTForSymbol(a) : null;
    };

    c.prototype.setSymbolAndDiagnosticsForAST = function(a, b, c) {
      var d = this.unitCache[c];
      if (d) {
        d.setSymbolAndDiagnosticsForAST(a, b);
      }
    };

    c.prototype.setSymbolForDecl = function(a, b) {
      this.declSymbolMap.link(a.getDeclID().toString(), b);
    };

    c.prototype.getSymbolForDecl = function(a) {
      return this.declSymbolMap.read(a.getDeclID().toString());
    };

    c.prototype.removeSymbolFromCache = function(b) {
      var c = [b.getName()];

      var d = (b.getKind() & a.PullElementKind.SomeType) !== 0 ? a.PullElementKind.SomeType : a.PullElementKind.SomeValue;

      var e = this.getDeclPathCacheID(c, d);

      var f = this.getDeclPathCacheID(c, b.getKind());
      b.addCacheID(e);

      b.addCacheID(f);

      b.invalidateCachedIDs(this.symbolCache);
    };

    c.prototype.postDiagnostics = function() {
      var a = [];
      for (var b = 1; b < this.units.length; b++) {
        this.units[b].getDiagnostics(a);
      }
      return a;
    };

    return c;
  }();
  a.SemanticInfoChain = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function c(b, c, d) {
    var e = b;

    var f = 0;

    var g = a.TextSpan.fromBounds(e.minChar, e.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      f |= 2097152;
    }
    var i = new a.PullDecl(e.id.text, e.id.actualText, 256, f, g, d.scriptName);
    d.semanticInfo.setDeclForAST(b, i);

    d.semanticInfo.setASTForDecl(i, b);

    h.addChildDecl(i);

    i.setParentDecl(h);

    return !1;
  }

  function d(b, c, d) {
    var e = b;

    var f = 0;

    var g = e.name.text;

    var h = a.isQuoted(g) || a.hasFlag(e.getModuleFlags(), 512);

    var i = 4;
    if (a.hasFlag(e.getModuleFlags(), 8)) {
      f |= 8;
    }

    if (a.hasFlag(e.getModuleFlags(), 1)) {
      f |= 1;
    }

    if (a.hasFlag(e.getModuleFlags(), 128)) {
      f |= 135168;
      i = 64;
    } else {
      i = h ? 32 : 4;
    }
    var j = a.TextSpan.fromBounds(e.minChar, e.limChar);

    var k = new a.PullDecl(g, e.name.actualText, i, f, j, d.scriptName);
    d.semanticInfo.setDeclForAST(b, k);

    d.semanticInfo.setASTForDecl(k, b);
    var l = d.getParent();
    l.addChildDecl(k);

    k.setParentDecl(l);

    d.pushParent(k);

    return !0;
  }

  function e(b, c, d) {
    var e = 0;

    var f = 1024;
    if (a.hasFlag(b.getVarFlags(), 8)) {
      e |= 8;
    }

    if (a.hasFlag(b.getVarFlags(), 1)) {
      e |= 1;
    }
    var g = a.TextSpan.fromBounds(b.minChar, b.limChar);

    var h = new a.PullDecl(b.name.text, b.name.actualText, 8, e, g, d.scriptName);

    var i = new a.PullDecl(b.name.text, b.name.actualText, f, e | 16384, g, d.scriptName);
    h.setValueDecl(i);
    var j = d.getParent();
    j.addChildDecl(h);

    j.addChildDecl(i);

    h.setParentDecl(j);

    i.setParentDecl(j);

    d.pushParent(h);

    d.semanticInfo.setDeclForAST(b, h);

    d.semanticInfo.setASTForDecl(h, b);

    d.semanticInfo.setASTForDecl(i, b);

    return !0;
  }

  function f(b, c) {
    var d = 0;

    var e = a.TextSpan.fromBounds(b.minChar, b.limChar);

    var f = c.getParent();
    if (f && (f.getKind() === 536870912 || f.getFlags() & 2097152)) {
      d |= 2097152;
    }
    var g = new a.PullDecl("", "", 8388608, d, e, c.scriptName);
    c.semanticInfo.setDeclForAST(b, g);

    c.semanticInfo.setASTForDecl(g, b);

    f && (f.addChildDecl(g), g.setParentDecl(f));

    c.pushParent(g);

    return !0;
  }

  function g(b, c, d) {
    var e = 0;
    if (b.getFlags() & 8) {
      return f(b, d);
    }
    if (a.hasFlag(b.getVarFlags(), 1)) {
      e |= 1;
    }
    var g = a.TextSpan.fromBounds(b.minChar, b.limChar);

    var h = new a.PullDecl(b.name.text, b.name.actualText, 16, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(b, h);

    d.semanticInfo.setASTForDecl(h, b);
    var i = d.getParent();
    i && (i.addChildDecl(h), h.setParentDecl(i));

    d.pushParent(h);

    return !0;
  }

  function h(c, d, e) {
    var f = 0;
    if (a.hasFlag(c.getVarFlags(), 2)) {
      f |= 2;
    } else {
      f |= 4;
    }
    if (a.hasFlag(c.getFlags(), 4) || a.hasFlag(c.id.getFlags(), 4)) {
      f |= 128;
    }
    var g = e.getParent();
    if (g && (g.getKind() === 536870912 || g.getFlags() & 2097152)) {
      f |= 2097152;
    }
    var h = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var i = new a.PullDecl(c.id.text, c.id.actualText, 2048, f, h, e.scriptName);
    g.addChildDecl(i);

    i.setParentDecl(g);
    if (a.hasFlag(c.getVarFlags(), 256)) {
      var j = new a.PullDecl(c.id.text, c.id.actualText, 4096, f, h, e.scriptName);
      j.setValueDecl(i);

      e.parentChain[e.parentChain.length - 2].addChildDecl(j);

      j.setParentDecl(e.parentChain[e.parentChain.length - 2]);

      e.semanticInfo.setASTForDecl(i, c);

      e.semanticInfo.setASTForDecl(j, c);

      e.semanticInfo.setDeclForAST(c, j);
    } else {
      e.semanticInfo.setASTForDecl(i, c);
      e.semanticInfo.setDeclForAST(c, i);
    }
    if (c.typeExpr && (c.typeExpr.term.nodeType === 14 || c.typeExpr.term.nodeType === 12)) {
      var k = new b(e.semanticInfo);
      if (g) {
        k.pushParent(g);
      }

      k.scriptName = e.scriptName;

      a.getAstWalkerFactory().walk(c.typeExpr.term, B, F, null, k);
    }
    return !1;
  }

  function i(c, d, e) {
    var f = 0;

    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = e.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      f |= 2097152;
    }
    var i = new a.PullDecl(c.name.text, c.name.actualText, 8192, f, g, e.scriptName);
    e.semanticInfo.setASTForDecl(i, c);

    e.semanticInfo.setDeclForAST(c, i);

    h.addChildDecl(i);

    i.setParentDecl(h);
    if (c.constraint && (c.constraint.term.nodeType === 14 || c.constraint.term.nodeType === 12)) {
      var j = new b(e.semanticInfo);
      if (h) {
        j.pushParent(h);
      }

      j.scriptName = e.scriptName;

      a.getAstWalkerFactory().walk(c.constraint.term, B, F, null, j);
    }
    return !0;
  }

  function j(c, d) {
    var e = 4;

    var f = d.getParent();

    var g = f.getKind() === 64 ? 67108864 : 4096;
    if (a.hasFlag(c.id.getFlags(), 4)) {
      e |= 128;
    }

    if (a.hasFlag(c.getVarFlags(), 4096)) {
      e |= 524288;
    }
    var h = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var i = new a.PullDecl(c.id.text, c.id.actualText, g, e, h, d.scriptName);
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    f.addChildDecl(i);

    i.setParentDecl(f);
    if (c.typeExpr && (c.typeExpr.term.nodeType === 14 || c.typeExpr.term.nodeType === 12)) {
      var j = new b(d.semanticInfo);
      if (f) {
        j.pushParent(f);
      }

      j.scriptName = d.scriptName;

      a.getAstWalkerFactory().walk(c.typeExpr.term, B, F, null, j);
    }
    return !1;
  }

  function k(c, d) {
    var e = 0;

    var f = 4096;
    if (a.hasFlag(c.getVarFlags(), 2)) {
      e |= 2;
    } else {
      e |= 4;
    }

    if (a.hasFlag(c.getVarFlags(), 16)) {
      e |= 16;
    }
    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = new a.PullDecl(c.id.text, c.id.actualText, f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, h);

    d.semanticInfo.setASTForDecl(h, c);
    var i = d.getParent();
    i.addChildDecl(h);

    h.setParentDecl(i);
    if (c.typeExpr && (c.typeExpr.term.nodeType === 14 || c.typeExpr.term.nodeType === 12)) {
      var j = new b(d.semanticInfo);
      if (i) {
        j.pushParent(i);
      }

      j.scriptName = d.scriptName;

      a.getAstWalkerFactory().walk(c.typeExpr.term, B, F, null, j);
    }
    return !1;
  }

  function l(c, d) {
    var e = 0;

    var f = 1024;
    if (a.hasFlag(c.getVarFlags(), 8)) {
      e |= 8;
    }

    if (a.hasFlag(c.getVarFlags(), 1)) {
      e |= 1;
    }
    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl(c.id.text, c.id.actualText, f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    h.addChildDecl(i);

    i.setParentDecl(h);
    if (c.typeExpr && (c.typeExpr.term.nodeType === 14 || c.typeExpr.term.nodeType === 12)) {
      var j = new b(d.semanticInfo);
      if (h) {
        j.pushParent(h);
      }

      j.scriptName = d.scriptName;

      a.getAstWalkerFactory().walk(c.typeExpr.term, B, F, null, j);
    }
    return !1;
  }

  function m(b, c, d) {
    var e = b;

    var f = 0;

    var g = 1024;

    var h = !1;

    var i = !1;
    return a.hasFlag(e.getVarFlags(), 2048) ? k(e, d) : a.hasFlag(e.getVarFlags(), 256) ? j(e, d) : l(e, d);
  }

  function n(c, d) {
    var e = 2048;

    var f = 16777216;

    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl("", "", f, e, g, d.semanticInfo.getPath());
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    if (h) {
      h.addChildDecl(i);
      i.setParentDecl(h);
    }

    d.pushParent(i);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      if (h) {
        j.pushParent(h);
      }

      j.scriptName = d.scriptName;

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function o(c, d) {
    var e = 0;

    var f = 33554432;

    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl("{new}", "{new}", f, e, g, d.semanticInfo.getPath());
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    if (h) {
      h.addChildDecl(i);
      i.setParentDecl(h);
    }

    d.pushParent(i);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      if (h) {
        j.pushParent(h);
      }

      j.scriptName = d.scriptName;

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function p(c, d) {
    var e = 0;

    var f = 16384;
    if (a.hasFlag(c.getFunctionFlags(), 8)) {
      e |= 8;
    }

    if (a.hasFlag(c.getFunctionFlags(), 1)) {
      e |= 1;
    }

    if (!c.block) {
      e |= 2048;
    }
    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl(c.name.text, c.name.actualText, f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    if (h) {
      h.addChildDecl(i);
      i.setParentDecl(h);
    }

    d.pushParent(i);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      if (h) {
        j.pushParent(h);
      }

      j.scriptName = d.scriptName;

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function q(c, d) {
    var e = 0;
    if (a.hasFlag(c.getFunctionFlags(), 2048)) {
      e |= 8192;
    }
    var f = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var g = d.getParent();
    if (g && (g.getKind() === 536870912 || g.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var h = c.name ? c.name.actualText : "";

    var i = new a.PullFunctionExpressionDecl(h, e, f, d.scriptName);
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    if (g) {
      g.addChildDecl(i);
      i.setParentDecl(g);
    }

    d.pushParent(i);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      j.scriptName = d.scriptName;

      if (g) {
        j.pushParent(g);
      }

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function r(c, d) {
    var e = 0;

    var f = 65536;
    if (a.hasFlag(c.getFunctionFlags(), 16)) {
      e |= 16;
    }

    if (a.hasFlag(c.getFunctionFlags(), 2)) {
      e |= 2;
    } else {
      e |= 4;
    }

    if (!c.block) {
      e |= 2048;
    }

    if (a.hasFlag(c.name.getFlags(), 4)) {
      e |= 128;
    }
    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = new a.PullDecl(c.name.text, c.name.actualText, f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, h);

    d.semanticInfo.setASTForDecl(h, c);
    var i = d.getParent();
    if (i) {
      i.addChildDecl(h);
      h.setParentDecl(i);
    }

    d.pushParent(h);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      j.scriptName = d.scriptName;

      if (i) {
        j.pushParent(i);
      }

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function s(c, d) {
    var e = 3072;

    var f = 4194304;

    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl("[]", "[]", f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    if (h) {
      h.addChildDecl(i);
      i.setParentDecl(h);
    }

    d.pushParent(i);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      if (h) {
        j.pushParent(h);
      }

      j.scriptName = d.scriptName;

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function t(c, d) {
    var e = 2304;

    var f = 1048576;

    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl("()", "()", f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    if (h) {
      h.addChildDecl(i);
      i.setParentDecl(h);
    }

    d.pushParent(i);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      j.scriptName = d.scriptName;

      if (h) {
        j.pushParent(h);
      }

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function u(c, d) {
    var e = 2304;

    var f = 2097152;

    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl("new", "new", f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    if (h) {
      h.addChildDecl(i);
      i.setParentDecl(h);
    }

    d.pushParent(i);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      j.scriptName = d.scriptName;

      if (h) {
        j.pushParent(h);
      }

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function v(c, d) {
    var e = 512;

    var f = 32768;
    if (!c.block) {
      e |= 2048;
    }
    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h) {
      var i = h.getFlags();
      if (i & 1) {
        e |= 1;
      }
    }
    var j = new a.PullDecl(h.getName(), h.getDisplayName(), f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, j);

    d.semanticInfo.setASTForDecl(j, c);

    if (h) {
      h.addChildDecl(j);
      j.setParentDecl(h);
    }

    d.pushParent(j);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var k = new b(d.semanticInfo);
      k.scriptName = d.scriptName;

      if (h) {
        k.pushParent(h);
      }

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, k);
    }
    return !0;
  }

  function w(c, d) {
    var e = 4;

    var f = 262144;
    if (a.hasFlag(c.getFunctionFlags(), 16)) {
      e |= 16;
    }

    if (a.hasFlag(c.name.getFlags(), 4)) {
      e |= 128;
    }

    if (a.hasFlag(c.getFunctionFlags(), 2)) {
      e |= 2;
    } else {
      e |= 4;
    }
    var g = a.TextSpan.fromBounds(c.minChar, c.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl(c.name.text, c.name.actualText, f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(c, i);

    d.semanticInfo.setASTForDecl(i, c);

    if (h) {
      h.addChildDecl(i);
      i.setParentDecl(h);
    }

    d.pushParent(i);
    if (c.returnTypeAnnotation && (c.returnTypeAnnotation.term.nodeType === 14 || c.returnTypeAnnotation.term.nodeType ===
      12)) {
      var j = new b(d.semanticInfo);
      j.scriptName = d.scriptName;

      if (h) {
        j.pushParent(h);
      }

      a.getAstWalkerFactory().walk(c.returnTypeAnnotation.term, B, F, null, j);
    }
    return !0;
  }

  function x(b, c) {
    var d = 4;

    var e = 524288;
    if (a.hasFlag(b.getFunctionFlags(), 16)) {
      d |= 16;
    }

    if (a.hasFlag(b.name.getFlags(), 4)) {
      d |= 128;
    }

    if (a.hasFlag(b.getFunctionFlags(), 2)) {
      d |= 2;
    } else {
      d |= 4;
    }
    var f = a.TextSpan.fromBounds(b.minChar, b.limChar);

    var g = c.getParent();
    if (g && (g.getKind() === 536870912 || g.getFlags() & 2097152)) {
      d |= 2097152;
    }
    var h = new a.PullDecl(b.name.actualText, b.name.actualText, e, d, f, c.scriptName);
    c.semanticInfo.setDeclForAST(b, h);

    c.semanticInfo.setASTForDecl(h, b);

    g && (g.addChildDecl(h), h.setParentDecl(g));

    c.pushParent(h);

    return !0;
  }

  function y(b, c, d) {
    var e = 0;

    var f = 1073741824;

    var g = a.TextSpan.fromBounds(b.minChar, b.limChar);

    var h = d.getParent();
    if (h && (h.getKind() === 536870912 || h.getFlags() & 2097152)) {
      e |= 2097152;
    }
    var i = new a.PullDecl("", "", f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(b, i);

    d.semanticInfo.setASTForDecl(i, b);

    h && (h.addChildDecl(i), i.setParentDecl(h));

    d.pushParent(i);

    return !0;
  }

  function z(b, c, d) {
    var e = 0;

    var f = 536870912;

    var g = a.TextSpan.fromBounds(b.minChar, b.limChar);

    var h = d.getParent();

    var i = new a.PullDecl("", "", f, e, g, d.scriptName);
    d.semanticInfo.setDeclForAST(b, i);

    d.semanticInfo.setASTForDecl(i, b);

    h && (h.addChildDecl(i), i.setParentDecl(h));

    d.pushParent(i);

    return !0;
  }

  function A(b, c, d) {
    var e = b;
    return e.isConstructor ? v(e, d) : e.isGetAccessor() ? w(e, d) : e.isSetAccessor() ? x(e, d) : a.hasFlag(e.getFunctionFlags(),
      1024) ? a.hasFlag(e.getFlags(), 8) ? o(e, d) : u(e, d) : a.hasFlag(e.getFunctionFlags(), 512) ? t(e, d) : a.hasFlag(
      e.getFunctionFlags(), 4096) ? s(e, d) : a.hasFlag(e.getFlags(), 8) ? n(e, d) : a.hasFlag(e.getFunctionFlags(),
      256) ? r(e, d) : a.hasFlag(e.getFunctionFlags(), 26624) ? q(e, d) : p(e, d);
  }

  function B(b, f, j) {
    var k = j.state;

    var l = !1;
    if (b.nodeType === 2) {
      var n = b;

      var o = a.TextSpan.fromBounds(n.minChar, n.limChar);

      var p = new a.PullDecl(k.scriptName, k.scriptName, 1, 0, o, k.scriptName);
      k.semanticInfo.setDeclForAST(b, p);

      k.semanticInfo.setASTForDecl(p, b);

      k.pushParent(p);

      l = !0;
    } else {
      if (b.nodeType === 1) {
        l = !0;
      } else {
        if (b.nodeType === 81) {
          l = !0;
        } else {
          if (b.nodeType === 18) {
            l = !0;
          } else {
            if (b.nodeType === 97) {
              l = !0;
            } else {
              if (b.nodeType === 15) {
                l = d(b, f, k);
              } else {
                if (b.nodeType === 13) {
                  l = e(b, f, k);
                } else {
                  if (b.nodeType === 14) {
                    l = g(b, f, k);
                  } else {
                    if (b.nodeType === 19) {
                      l = h(b, f, k);
                    } else {
                      if (b.nodeType === 17) {
                        l = m(b, f, k);
                      } else {
                        if (b.nodeType === 12) {
                          l = A(b, f, k);
                        } else {
                          if (b.nodeType === 16) {
                            l = c(b, f, k);
                          } else {
                            if (b.nodeType === 9) {
                              l = i(b, f, k);
                            } else {
                              if (b.nodeType === 91) {
                                l = !0;
                              } else {
                                if (b.nodeType === 90) {
                                  l = !0;
                                } else {
                                  if (b.nodeType === 89) {
                                    l = !0;
                                  } else {
                                    if (b.nodeType === 98) {
                                      l = !0;
                                    } else {
                                      if (b.nodeType === 85) {
                                        l = !0;
                                      } else {
                                        if (b.nodeType === 25) {
                                          l = !0;
                                        } else {
                                          if (b.nodeType === 93) {
                                            l = !0;
                                          } else {
                                            if (b.nodeType === 94 || b.nodeType === 100) {
                                              l = !0;
                                            } else {
                                              if (b.nodeType === 36) {
                                                l = !0;
                                              } else {
                                                if (b.nodeType === 37) {
                                                  l = !0;
                                                } else {
                                                  if (b.nodeType === 96) {
                                                    l = !0;
                                                  } else {
                                                    if (b.nodeType === 92) {
                                                      l = !0;
                                                    } else {
                                                      if (b.nodeType === 101) {
                                                        l = y(b, f, k);
                                                      } else {
                                                        if (b.nodeType === 99) {
                                                          l = z(b, f, k);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    j.options.goChildren = l;

    return b;
  }

  function C(a) {
    return a.getKind() === 4 || a.getKind() === 32 || a.getKind() === 64;
  }

  function D(a) {
    return a.getKind() & 4 ? 32768 : a.getKind() & 64 ? 131072 : a.getKind() & 32 ? 65536 : 0;
  }

  function E(a) {
    var b = a.getKind();
    return b & 4 ? (a.getFlags() & 32768) !== 0 : b & 64 ? (a.getFlags() & 131072) != 0 : b & 32 ? (a.getFlags() &
      65536) !== 0 : !1;
  }

  function F(b, c, d) {
    var e = d.state;

    var f;

    var g = 0;
    if (b.nodeType === 15) {
      var h = e.getParent();
      e.popParent();

      f = e.getParent();
      if (E(h)) {
        if (f && C(f)) {
          g = D(f);
          f.setFlags(f.getFlags() | g);
        }
        var i = new a.PullDecl(h.getName(), h.getDisplayName(), 1024, h.getFlags(), h.getSpan(), e.scriptName);
        h.setValueDecl(i);

        e.semanticInfo.setASTForDecl(i, b);

        if (f) {
          f.addChildDecl(i);
          i.setParentDecl(f);
        }
      }
    } else {
      if (b.nodeType === 13) {
        e.popParent();
        f = e.getParent();
        if (f && C(f)) {
          g = D(f);
          f.setFlags(f.getFlags() | g);
        }
      } else {
        if (b.nodeType === 14) {
          e.popParent();
        } else {
          if (b.nodeType === 12) {
            e.popParent();
            f = e.getParent();
            if (f && C(f)) {
              g = D(f);
              f.setFlags(f.getFlags() | g);
            }
          } else {
            if (b.nodeType === 17) {
              f = e.getParent();
              if (f && C(f)) {
                g = D(f);
                f.setFlags(f.getFlags() | g);
              }
            } else {
              if (b.nodeType === 101) {
                f = e.getParent();
                if (f && C(f)) {
                  g = D(f);
                  f.setFlags(f.getFlags() | g);
                }
                e.popParent();
              } else {
                if (b.nodeType === 99) {
                  f = e.getParent();
                  if (f && C(f)) {
                    g = D(f);
                    f.setFlags(f.getFlags() | g);
                  }
                  e.popParent();
                }
              }
            }
          }
        }
      }
    }
    return b;
  }
  var b = function() {
    function a(a, b) {
      if (typeof b == "undefined") {
        b = "";
      }

      this.semanticInfo = a;

      this.scriptName = b;

      this.parentChain = [];

      this.foundValueDecl = !1;
    }
    a.prototype.getParent = function() {
      return this.parentChain ? this.parentChain[this.parentChain.length - 1] : null;
    };

    a.prototype.pushParent = function(a) {
      if (a) {
        this.parentChain[this.parentChain.length] = a;
      }
    };

    a.prototype.popParent = function() {
      this.parentChain.length--;
    };

    return a;
  }();
  a.DeclCollectionContext = b;

  a.preCollectImportDecls = c;

  a.preCollectModuleDecls = d;

  a.preCollectClassDecls = e;

  a.createObjectTypeDeclaration = f;

  a.preCollectInterfaceDecls = g;

  a.preCollectParameterDecl = h;

  a.preCollectTypeParameterDecl = i;

  a.createPropertySignature = j;

  a.createMemberVariableDeclaration = k;

  a.createVariableDeclaration = l;

  a.preCollectVarDecls = m;

  a.createFunctionTypeDeclaration = n;

  a.createConstructorTypeDeclaration = o;

  a.createFunctionDeclaration = p;

  a.createFunctionExpressionDeclaration = q;

  a.createMemberFunctionDeclaration = r;

  a.createIndexSignatureDeclaration = s;

  a.createCallSignatureDeclaration = t;

  a.createConstructSignatureDeclaration = u;

  a.createClassConstructorDeclaration = v;

  a.createGetAccessorDeclaration = w;

  a.createSetAccessorDeclaration = x;

  a.preCollectCatchDecls = y;

  a.preCollectWithDecls = z;

  a.preCollectFuncDecls = A;

  a.preCollectDecls = B;

  a.postCollectDecls = F;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function b(a) {
    if (!a) {
      return [];
    }
    var b = a.getParentPath();
    if (b) {
      return b;
    }
    b = [a];
    var c = a.getParentDecl();
    while (c) {
      if (c && b[b.length - 1] != c && !(c.getKind() & 512)) {
        b[b.length] = c;
      }
      c = c.getParentDecl();
    }
    b = b.reverse();

    a.setParentPath(b);

    return b;
  }

  function c(c, d, e) {
    var f = (new Date).getTime();

    var g = b(e);

    var h = [];

    var i = null;

    var j = 0;
    if (g.length) {
      for (var k = 0; k < g.length; k++) {
        h[h.length] = g[k].getName();
      }
      h[h.length] = c;
      while (h.length >= 2) {
        i = a.globalSemanticInfoChain.findSymbol(h, d);
        if (i) {
          j = (new Date).getTime();
          a.time_in_findSymbol += j - f;
          return i;
        }
        h.length -= 2;

        h[h.length] = c;
      }
    }
    i = a.globalSemanticInfoChain.findSymbol([c], d);

    j = (new Date).getTime();

    a.time_in_findSymbol += j - f;

    return i;
  }
  a.globalBindingPhase = 0;

  a.getPathToDecl = b;

  a.findSymbolInContext = c;
  var d = function() {
    function d(b) {
      this.semanticInfoChain = b;

      this.bindingPhase = a.globalBindingPhase++;

      this.functionTypeParameterCache = new a.BlockIntrinsics;

      this.reBindingAfterChange = !1;

      this.startingDeclForRebind = a.pullDeclID;

      this.startingSymbolForRebind = a.pullSymbolID;
    }
    d.prototype.findTypeParameterInCache = function(a) {
      return this.functionTypeParameterCache[a];
    };

    d.prototype.addTypeParameterToCache = function(a) {
      this.functionTypeParameterCache[a.getName()] = a;
    };

    d.prototype.resetTypeParameterCache = function() {
      this.functionTypeParameterCache = new a.BlockIntrinsics;
    };

    d.prototype.setUnit = function(a) {
      this.semanticInfo = this.semanticInfoChain.getUnit(a);
    };

    d.prototype.getParent = function(a, b) {
      if (typeof b == "undefined") {
        b = !1;
      }
      var c = a.getParentDecl();
      if (c.getKind() == 1) {
        return null;
      }
      var d = c.getSymbol();
      if (!d && c && !c.isBound()) {
        this.bindDeclToPullSymbol(c);
      }

      d = c.getSymbol();
      if (d) {
        if (b && d.isType() && d.isContainer()) {
          var e = d.getInstanceSymbol();
          if (e) {
            return e.getType();
          }
        }
        return d.getType();
      }
      return null;
    };

    d.prototype.findDeclsInContext = function(a, c, d) {
      if (!d) {
        var e = a.getParentDecl();
        return e.searchChildDecls(a.getName(), c);
      }
      var f = b(a);
      if (f.length) {
        var g = [];
        for (var h = 0; h < f.length; h++) {
          if (f[h].getKind() & 1) continue;
          g[g.length] = f[h].getName();
        }
        return this.semanticInfoChain.findDecls(g, c);
      }
      return this.semanticInfoChain.findDecls([name], c);
    };

    d.prototype.symbolIsRedeclaration = function(a) {
      var b = a.getSymbolID();
      return b >= this.startingSymbolForRebind || a.getRebindingID() === this.bindingPhase && b !== this.startingSymbolForRebind;
    };

    d.prototype.bindModuleDeclarationToPullSymbol = function(b) {
      var d = b.getName();

      var e = null;

      var f = null;

      var g = null;

      var h = b.getValueDecl();

      var i = b.getKind();

      var j = this.getParent(b);

      var k = this.getParent(b, !0);

      var l = b.getParentDecl();

      var m = this.semanticInfo.getASTForDecl(b);

      var n = b.getFlags() & 1;

      var o = (i & 64) != 0;

      var p = o ? 64 : a.PullElementKind.SomeContainer;

      var q = (b.getFlags() & a.PullElementFlags.SomeInitializedModule) != 0;

      var r = !1;
      if (j) {
        if (n) {
          e = j.findNestedType(d, p);
        } else {
          e = j.findContainedMember(d);
          if (e && !(e.getKind() & p)) {
            e = null;
          }
        }
      } else if (!n || b.getKind() === 32) {
        e = c(d, p, b);
      }
      if (e && e.getKind() !== i) {
        if (q) {
          b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), m.minChar, m.getLength(), 69, [b.getDisplayName()]));
        }
        e = null;
      }

      if (e) {
        f = e.getInstanceSymbol();
      } else {
        e = new a.PullContainerTypeSymbol(d, i);
        r = !0;
        if (!j) {
          this.semanticInfoChain.cacheGlobalSymbol(e, p);
        }
      }
      if (!f && q) {
        var s = null;
        if (!o)
          if (k) {
            if (n) {
              s = k.findMember(d, !1);
              if (!s) {
                s = k.findContainedMember(d);
              }
            } else {
              s = k.findContainedMember(d);
              if (!s) {
                s = k.findMember(d, !1);
              }
            }
            if (s) {
              var t = s.getDeclarations();
              if (t.length) {
                var u = t[0].getParentDecl();
                if (l !== u && (!this.reBindingAfterChange || u.getDeclID() >= this.startingDeclForRebind)) {
                  s = null;
                }
              }
            }
          } else if (!(b.getFlags() & 1)) {
          var v = l.getChildDecls();

          var w = null;
          for (var x = 0; x < v.length; x++) {
            if (v[x] == b) break;
            if (v[x].getName() == d && v[x].getKind() & (8 | a.PullElementKind.SomeFunction)) {
              w = v[x];
              break;
            }
          }
          if (w) {
            s = w.getSymbol();
            if (s && s.isType()) {
              s = s.getConstructorMethod();
            }
          }
        }
        if (s) {
          var y = s.getKind();

          var z = y == 16384 || y == 32768 || s.hasFlag(a.PullElementFlags.ImplicitVariable);
          if (z) {
            g = s.getType();
          } else {
            s = null;
          }
        }
        if (!g) {
          g = new a.PullTypeSymbol(d, 8388608);
        }

        g.addDeclaration(b);

        g.setAssociatedContainerType(e);

        if (s) {
          f = s;
        } else {
          f = new a.PullSymbol(d, 1024);
          f.setType(g);
        }

        e.setInstanceSymbol(f);
      }
      e.addDeclaration(b);

      b.setSymbol(e);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(m.name, a.SymbolAndDiagnostics.fromSymbol(e));

      this.semanticInfo.setSymbolAndDiagnosticsForAST(m, a.SymbolAndDiagnostics.fromSymbol(e));
      var A = e.getDeclarations();
      if (o && A.length > 1 && m.members.members.length > 0) {
        var B = a.ArrayUtilities.where(A, function(a) {
          return a.getKind() === 64;
        }).length > 1;
        if (B) {
          var C = m.members.members[0];

          var D = C.declaration.declarators.members[0];
          if (D.isImplicitlyInitialized) {
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), D.minChar, D.getLength(), 264, null));
          }
        }
      }
      if (r) {
        if (j) {
          var E = b.getFlags() & 1 ? 5 : 6;
          if (E === 5) {
            j.addMember(e, E);
          } else {
            e.setContainer(j);
          }
        }
      } else if (this.reBindingAfterChange) {
        var F = e.getDeclarations();

        var G = b.getScriptName();
        for (var x = 0; x < F.length; x++) {
          if (F[x].getScriptName() === G && F[x].getDeclID() < this.startingDeclForRebind) {
            e.removeDeclaration(F[x]);
          }
        }
        e.invalidate();

        f = e.getInstanceSymbol();
        if (f) {
          var g = f.getType();
          F = g.getDeclarations();
          for (var x = 0; x < F.length; x++) {
            if (F[x].getScriptName() === G && F[x].getDeclID() < this.startingDeclForRebind) {
              g.removeDeclaration(F[x]);
            }
          }
          g.addDeclaration(b);

          g.invalidate();
        }
      }
      if (o) {
        g = e.getInstanceSymbol().getType();
        if (this.reBindingAfterChange) {
          var H = g.getIndexSignatures();
          for (var x = 0; x < H.length; x++) {
            g.removeIndexSignature(H[x]);
          }
        }
        var I = new a.PullSignatureSymbol(4194304);

        var J = new a.PullSymbol("x", 2048);
        J.setType(this.semanticInfoChain.numberTypeSymbol);

        I.addParameter(J);

        I.setReturnType(this.semanticInfoChain.stringTypeSymbol);

        g.addIndexSignature(I);

        g.recomputeIndexSignatures();
      }
      var K = b.getValueDecl();
      if (K) {
        K.ensureSymbolIsBound();
      }
      var L = this.findDeclsInContext(b, b.getKind(), !0);
      if (L && L.length)
        for (var x = 0; x < L.length; x++) {
          L[x].ensureSymbolIsBound();
        }
    };

    d.prototype.bindImportDeclaration = function(b) {
      var d = b.getFlags();

      var e = b.getKind();

      var f = this.semanticInfo.getASTForDecl(b);

      var g = !1;

      var h = 6;

      var i = null;

      var j = b.getName();

      var k = !1;

      var l = this.getParent(b);
      if (l) {
        i = l.findMember(j, !1);
        if (!i) {
          i = l.findContainedMember(j);
          if (i) {
            var m = i.getDeclarations();
            if (m.length) {
              var n = m[0].getParentDecl();
              if (n !== b.getParentDecl() && (!this.reBindingAfterChange || n.getDeclID() >= this.startingDeclForRebind)) {
                i = null;
              }
            }
          }
        }
      } else {
        if (!(b.getFlags() & 1)) {
          i = c(j, a.PullElementKind.SomeContainer, b);
        }
      }
      if (i) {
        k = !0;
      }

      if (i && this.symbolIsRedeclaration(i)) {
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), f.minChar, f.getLength(), 69, [b.getDisplayName()]));
        i = null;
      }
      if (this.reBindingAfterChange && i) {
        var o = i.getDeclarations();

        var p = b.getScriptName();
        for (var q = 0; q < o.length; q++) {
          if (o[q].getScriptName() === p && o[q].getDeclID() < this.startingDeclForRebind) {
            i.removeDeclaration(o[q]);
          }
        }
        i.setUnresolved();
      }
      if (!i) {
        i = new a.PullTypeAliasSymbol(j);
        if (!l) {
          this.semanticInfoChain.cacheGlobalSymbol(i, a.PullElementKind.SomeContainer);
        }
      }

      i.addDeclaration(b);

      b.setSymbol(i);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(f, a.SymbolAndDiagnostics.fromSymbol(i));

      if (l && !k) {
        if (d & 1) {
          l.addMember(i, 5);
        } else {
          i.setContainer(l);
        }
      }

      i.setIsBound(this.bindingPhase);
    };

    d.prototype.cleanInterfaceSignatures = function(a) {
      var b = a.getCallSignatures();

      var c = a.getConstructSignatures();

      var d = a.getIndexSignatures();
      for (var e = 0; e < b.length; e++) {
        if (b[e].getSymbolID() < this.startingSymbolForRebind) {
          a.removeCallSignature(b[e], !1);
        }
      }
      for (var e = 0; e < c.length; e++) {
        if (c[e].getSymbolID() < this.startingSymbolForRebind) {
          a.removeConstructSignature(c[e], !1);
        }
      }
      for (var e = 0; e < d.length; e++) {
        if (d[e].getSymbolID() < this.startingSymbolForRebind) {
          a.removeIndexSignature(d[e], !1);
        }
      }
      a.recomputeCallSignatures();

      a.recomputeConstructSignatures();

      a.recomputeIndexSignatures();
    };

    d.prototype.cleanClassSignatures = function(a) {
      var b = a.getCallSignatures();

      var c = a.getConstructSignatures();

      var d = a.getIndexSignatures();
      for (var e = 0; e < b.length; e++) {
        a.removeCallSignature(b[e], !1);
      }
      for (var e = 0; e < c.length; e++) {
        a.removeConstructSignature(c[e], !1);
      }
      for (var e = 0; e < d.length; e++) {
        a.removeIndexSignature(d[e], !1);
      }
      a.recomputeCallSignatures();

      a.recomputeConstructSignatures();

      a.recomputeIndexSignatures();
      var f = a.getConstructorMethod();

      var g = f ? f.getType() : null;
      if (g) {
        c = g.getConstructSignatures();
        for (var e = 0; e < c.length; e++) {
          g.removeConstructSignature(c[e], !1);
        }
        g.recomputeConstructSignatures();

        g.invalidate();

        f.invalidate();
      }
      a.invalidate();
    };

    d.prototype.bindClassDeclarationToPullSymbol = function(b) {
      var d = b.getName();

      var e = null;

      var f = null;

      var g = null;

      var h = this.semanticInfo.getASTForDecl(b);

      var i = !1;

      var j = this.getParent(b);

      var k = b.getParentDecl();

      var l = !1;

      var m = b.getFlags() & 1;

      var n = !1;

      var o = 8;
      if (j)
        if (m) {
          e = j.findNestedType(d);
          if (!e) {
            e = j.findMember(d, !1);
          }
        } else {
          e = j.findContainedMember(d);
          if (e && e.getKind() & o) {
            var p = e.getDeclarations();
            if (p.length) {
              var q = p[0].getParentDecl();
              if (q !== k && (!this.reBindingAfterChange || q.getDeclID() >= this.startingDeclForRebind)) {
                e = null;
              }
            }
          } else {
            e = null;
          }
        } else {
          e = c(d, o, b);
        }
      if (e && (!(e.getKind() & o) || !this.reBindingAfterChange || this.symbolIsRedeclaration(e))) {
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), h.minChar, h.getLength(), 69, [b.getDisplayName()]));
        e = null;
      } else {
        if (e) {
          i = !0;
        }
      }
      var r;
      if (this.reBindingAfterChange && e) {
        r = e.getDeclarations();
        var s = b.getScriptName();
        for (var t = 0; t < r.length; t++) {
          if (r[t].getScriptName() === s && r[t].getDeclID() < this.startingDeclForRebind) {
            e.removeDeclaration(r[t]);
            l = !0;
          }
        }
        f = e.getConstructorMethod();

        g = f.getType();

        r = f.getDeclarations();
        for (var t = 0; t < r.length; t++) {
          if (r[t].getScriptName() === s && r[t].getDeclID() < this.startingDeclForRebind) {
            f.removeDeclaration(r[t]);
            l = !0;
          }
        }
        if (f.getIsSynthesized()) {
          e.setConstructorMethod(null);
        }
        if (e.isGeneric()) {
          n = !0;
          var u = e.getKnownSpecializations();

          var v = null;
          for (var w = 0; w < u.length; w++) {
            u[w].setUnresolved();
            u[w].invalidate();
          }
          e.cleanTypeParameters();

          g.cleanTypeParameters();
        }
        e.setUnresolved();

        f.setUnresolved();

        g.setUnresolved();
      }
      if (!i) {
        e = new a.PullClassTypeSymbol(d);
        if (!j) {
          this.semanticInfoChain.cacheGlobalSymbol(e, o);
        }
      }

      e.addDeclaration(b);

      b.setSymbol(e);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(h.name, a.SymbolAndDiagnostics.fromSymbol(e));

      this.semanticInfo.setSymbolAndDiagnosticsForAST(h, a.SymbolAndDiagnostics.fromSymbol(e));
      if (j && !i) {
        var x = b.getFlags() & 1 ? 5 : 6;
        if (x === 5) {
          j.addMember(e, x);
        } else {
          e.setContainer(j);
        }
      }
      if (i && l) {
        this.cleanClassSignatures(e);
        if (n) {
          u = e.getKnownSpecializations();
          for (var w = 0; w < u.length; w++) {
            this.cleanClassSignatures(u[w]);
          }
        }
      }
      this.resetTypeParameterCache();

      this.resetTypeParameterCache();

      f = e.getConstructorMethod();

      g = f ? f.getType() : null;

      if (!f) {
        f = new a.PullSymbol(d, 32768);
        g = new a.PullConstructorTypeSymbol;
        f.setIsSynthesized();
        f.setType(g);
        f.addDeclaration(b.getValueDecl());
        e.setConstructorMethod(f);
        g.addDeclaration(b);
        e.setHasDefaultConstructor();
      }

      g.setAssociatedContainerType(e);
      var y = b.getTypeParameters();

      var z;

      var A = null;
      for (var w = 0; w < y.length; w++) {
        z = e.findTypeParameter(y[w].getName());
        if (!z) {
          z = new a.PullTypeParameterSymbol(y[w].getName(), !1);
          e.addMember(z, 18);
          g.addTypeParameter(z, !0);
        } else {
          A = z.getDeclarations();
          if (this.symbolIsRedeclaration(z)) {
            var B = this.semanticInfoChain.getASTForDecl(A[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), B.minChar, B.getLength(), 69, [z.getName()]));
          }
          for (var t = 0; t < A.length; t++) {
            if (A[t].getDeclID() < this.startingDeclForRebind) {
              z.removeDeclaration(A[t]);
            }
          }
        }
        z.addDeclaration(y[w]);

        y[w].setSymbol(z);
      }
      var C = b.getValueDecl();
      if (C) {
        C.ensureSymbolIsBound();
      }

      e.setIsBound(this.bindingPhase);
    };

    d.prototype.bindInterfaceDeclarationToPullSymbol = function(b) {
      var d = b.getName();

      var e = c(d, a.PullElementKind.SomeType, b);

      var f = this.semanticInfo.getASTForDecl(b);

      var g = !1;

      var h = this.getParent(b);

      var i = 16;
      if (h) {
        e = h.findNestedType(d);
      } else {
        if (!(b.getFlags() & 1)) {
          e = c(d, i, b);
        }
      }

      if (e && !(e.getKind() & i)) {
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), f.minChar, f.getLength(), 69, [b.getDisplayName()]));
        e = null;
      }

      if (!e) {
        e = new a.PullTypeSymbol(d, 16);
        g = !0;
        if (!h) {
          this.semanticInfoChain.cacheGlobalSymbol(e, i);
        }
      }

      e.addDeclaration(b);

      b.setSymbol(e);
      if (g) {
        if (h) {
          var j = b.getFlags() & 1 ? 5 : 6;
          if (j === 5) {
            h.addMember(e, j);
          } else {
            e.setContainer(h);
          }
        }
      } else if (this.reBindingAfterChange) {
        var k = e.getDeclarations();

        var l = b.getScriptName();
        for (var m = 0; m < k.length; m++) {
          if (k[m].getScriptName() === l && k[m].getDeclID() < this.startingDeclForRebind) {
            e.removeDeclaration(k[m]);
          }
        }
        if (e.isGeneric()) {
          var n = e.getKnownSpecializations();

          var o = null;
          for (var m = 0; m < n.length; m++) {
            o = n[m];
            this.cleanInterfaceSignatures(o);
            o.invalidate();
          }
          e.cleanTypeParameters();
        }
        this.cleanInterfaceSignatures(e);

        e.invalidate();
      }
      this.resetTypeParameterCache();

      this.resetTypeParameterCache();
      var p = b.getTypeParameters();

      var q;

      var r = null;
      for (var m = 0; m < p.length; m++) {
        q = e.findTypeParameter(p[m].getName());
        if (!q) {
          q = new a.PullTypeParameterSymbol(p[m].getName(), !1);
          e.addMember(q, 18);
        } else {
          r = q.getDeclarations();
          if (this.symbolIsRedeclaration(q))
            for (var s = 0; s < r.length; s++) {
              var t = r[s].getParentDecl();
              if (t && t === b) {
                var u = this.semanticInfoChain.getASTForDecl(r[0]);
                b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), u.minChar, u.getLength(), 69, [
                  q.getName()
                ]));
                break;
              }
            }
          for (var s = 0; s < r.length; s++) {
            if (r[s].getDeclID() < this.startingDeclForRebind) {
              q.removeDeclaration(r[s]);
            }
          }
        }
        q.addDeclaration(p[m]);

        p[m].setSymbol(q);
      }
      var v = this.findDeclsInContext(b, b.getKind(), !0);
      if (v && v.length)
        for (var m = 0; m < v.length; m++) {
          v[m].ensureSymbolIsBound();
        }
    };

    d.prototype.bindObjectTypeDeclarationToPullSymbol = function(b) {
      var c = this.semanticInfo.getASTForDecl(b);

      var d = new a.PullTypeSymbol("", 8388608);
      d.addDeclaration(b);

      b.setSymbol(d);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(c, a.SymbolAndDiagnostics.fromSymbol(d));
      var e = b.getChildDecls();
      for (var f = 0; f < e.length; f++) {
        this.bindDeclToPullSymbol(e[f]);
      }
      var g = b.getTypeParameters();

      var h;

      var i = null;
      for (var f = 0; f < g.length; f++) {
        h = d.findTypeParameter(g[f].getName());
        if (!h) {
          h = new a.PullTypeParameterSymbol(g[f].getName(), !1);
          d.addMember(h, 18);
        } else {
          i = h.getDeclarations();
          if (this.symbolIsRedeclaration(h)) {
            var j = this.semanticInfoChain.getASTForDecl(i[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), j.minChar, j.getLength(), 69, [h.getName()]));
          }
          for (var k = 0; k < i.length; k++) {
            if (i[k].getDeclID() < this.startingDeclForRebind) {
              h.removeDeclaration(i[k]);
            }
          }
        }
        h.addDeclaration(g[f]);

        g[f].setSymbol(h);
      }
    };

    d.prototype.bindConstructorTypeDeclarationToPullSymbol = function(b) {
      var c = b.getKind();

      var d = b.getFlags();

      var e = this.semanticInfo.getASTForDecl(b);

      var f = new a.PullConstructorTypeSymbol;
      b.setSymbol(f);

      f.addDeclaration(b);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e, a.SymbolAndDiagnostics.fromSymbol(f));
      var g = new a.PullDefinitionSignatureSymbol(2097152);
      if (e.variableArgList) {
        g.setHasVariableParamList();
      }

      g.addDeclaration(b);

      b.setSignatureSymbol(g);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), f, g);

      f.addSignature(g);
      var h = b.getTypeParameters();

      var i;

      var j = null;
      for (var k = 0; k < h.length; k++) {
        i = f.findTypeParameter(h[k].getName());
        if (!i) {
          i = new a.PullTypeParameterSymbol(h[k].getName(), !1);
          f.addTypeParameter(i);
        } else {
          j = i.getDeclarations();
          if (this.symbolIsRedeclaration(i)) {
            var l = this.semanticInfoChain.getASTForDecl(j[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), l.minChar, l.getLength(), 69, [i.getName()]));
          }
          for (var m = 0; m < j.length; m++) {
            if (j[m].getDeclID() < this.startingDeclForRebind) {
              i.removeDeclaration(j[m]);
            }
          }
        }
        i.addDeclaration(h[k]);

        h[k].setSymbol(i);
      }
    };

    d.prototype.bindVariableDeclarationToPullSymbol = function(b) {
      var d = b.getFlags();

      var e = b.getKind();

      var f = this.semanticInfo.getASTForDecl(b);

      var g = (d & 1) !== 0;

      var h = 6;

      var i = null;

      var j = b.getName();

      var k = !1;

      var l = this.getParent(b, !0);

      var m = b.getParentDecl();

      var n = (d & a.PullElementFlags.ImplicitVariable) !== 0;

      var o = (d & (32768 | 65536 | 131072)) != 0;

      var p = (d & 131072) != 0;

      var q = (d & 16384) != 0;
      if (m && !n) {
        m.addVariableDeclToGroup(b);
      }
      if (l) {
        if (g) {
          i = l.findMember(j, !1);
        } else {
          i = l.findContainedMember(j);
        }
        if (i) {
          var r = i.getDeclarations();
          if (r.length) {
            var s = r[0].getParentDecl();
            if (m !== s && (!this.reBindingAfterChange || s.getDeclID() >= this.startingDeclForRebind)) {
              i = null;
            }
          }
        }
      } else {
        if (!(b.getFlags() & 1)) {
          i = c(j, a.PullElementKind.SomeValue, b);
        }
      }
      if (i && !i.isType()) {
        k = !0;
      }
      var t;

      var u;

      var v;

      var w;

      var x;
      if (i && this.symbolIsRedeclaration(i)) {
        var y = i.getKind();

        var z = i.hasFlag(8);

        var A = i.hasFlag(131072);

        var B = y == 32768;

        var C = i.hasFlag(98304);

        var D = (p || A) && (!p || !A);

        var E = (b.getFlags() & 8) != 0;

        var F = b.getKind() == 32768;

        var G = n && (!p && !q && y == 16384 || !o && C && E || !o && B || i.hasFlag(a.PullElementFlags.ImplicitVariable));
        if (G && B && !z && i.getDeclarations()[0].getScriptName() != b.getScriptName()) {
          G = !1;
        }
        if (!o && !F && !E || !G || D) {
          t = b.getSpan();
          if (!l || i.getIsSynthesized()) {
            var H = n ? i.getDeclarations()[0] : b;
            H.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), t.start(), t.length(), 69, [b.getDisplayName()]));
          }
          i = null;

          k = !1;
        }
      } else {
        if (i && i.getKind() !== 1024 && !n) {
          t = b.getSpan();
          b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), t.start(), t.length(), 69, [b.getDisplayName()]));
          i = null;
          k = !1;
        }
      }
      if (this.reBindingAfterChange && i && !i.isType()) {
        v = i.getDeclarations();
        var I = b.getScriptName();
        for (var J = 0; J < v.length; J++) {
          if (v[J].getScriptName() === I && v[J].getDeclID() < this.startingDeclForRebind) {
            i.removeDeclaration(v[J]);
          }
        }
        i.invalidate();
      }
      var K = !1;

      var L = null;
      if ((d & a.PullElementFlags.ImplicitVariable) === 0) {
        if (!i) {
          i = new a.PullSymbol(j, e);
        }
        i.addDeclaration(b);
        b.setSymbol(i);
        this.semanticInfo.setSymbolAndDiagnosticsForAST(f.id, a.SymbolAndDiagnostics.fromSymbol(i));
        this.semanticInfo.setSymbolAndDiagnosticsForAST(f, a.SymbolAndDiagnostics.fromSymbol(i));
      } else if (!k) {
        if (q) {
          var M = i;
          if (l) {
            x = l.getMembers();
            for (var N = 0; N < x.length; N++)
              if (x[N].getName() === j && x[N].getKind() === 8) {
                M = x[N];
                break;
              }
          }
          if (!M) {
            var m = b.getParentDecl();
            if (m) {
              var O = m.searchChildDecls(j, a.PullElementKind.SomeType);
              if (O.length)
                for (var N = 0; N < O.length; N++) {
                  if (O[N].getValueDecl() === b) {
                    M = O[N].getSymbol();
                  }
                }
            }
            if (!M) {
              M = c(j, a.PullElementKind.SomeType, b);
            }
          }
          if (M && M.getKind() !== 8) {
            M = null;
          }

          if (M && M.isClass()) {
            K = i && i.getIsSynthesized();
            if (K) {
              L = i;
            }
            i = M.getConstructorMethod();
            b.setSymbol(i);
            v = M.getDeclarations();
            if (v.length) {
              u = v[v.length - 1];
              w = this.semanticInfo.getASTForDecl(u);
              if (w) {
                this.semanticInfo.setASTForDecl(b, w);
              }
            }
          } else {
            if (!i) {
              i = new a.PullSymbol(j, e);
            }
            i.addDeclaration(b);
            b.setSymbol(i);
            i.setType(this.semanticInfoChain.anyTypeSymbol);
          }
        } else if (d & a.PullElementFlags.SomeInitializedModule) {
          var P = null;

          var Q = this.getParent(b);
          if (Q) {
            x = Q.getMembers();
            for (var N = 0; N < x.length; N++)
              if (x[N].getName() === j && x[N].isContainer()) {
                P = x[N];
                break;
              }
          }
          if (!P) {
            var m = b.getParentDecl();
            if (m) {
              var R = d & 98304 ? a.PullElementKind.SomeContainer : 64;

              var O = m.searchChildDecls(j, R);
              if (O.length)
                for (var N = 0; N < O.length; N++) {
                  if (O[N].getValueDecl() === b) {
                    P = O[N].getSymbol();
                  }
                }
            }
            if (!P) {
              P = c(j, a.PullElementKind.SomeContainer, b);
              if (!P) {
                P = c(j, 64, b);
              }
            }
          }
          if (P && !P.isContainer()) {
            P = null;
          }

          if (P) {
            i = P.getInstanceSymbol();
            i.addDeclaration(b);
            b.setSymbol(i);
            v = P.getDeclarations();
            if (v.length) {
              u = v[v.length - 1];
              w = this.semanticInfo.getASTForDecl(u);
              if (w) {
                this.semanticInfo.setASTForDecl(b, w);
              }
            }
          } else {
            a.Debug.assert(!1, "Attempted to bind invalid implicit variable symbol");
          }
        }
      } else {
        i.addDeclaration(b);
        b.setSymbol(i);
      }
      if (l && !k) {
        if (d & 1) {
          l.addMember(i, 5);
        } else {
          i.setContainer(l);
        }
      } else {
        if (K) {
          l.removeMember(L);
          l.addMember(i, h);
        }
      }

      i.setIsBound(this.bindingPhase);
    };

    d.prototype.bindPropertyDeclarationToPullSymbol = function(b) {
      var c = b.getFlags();

      var d = b.getKind();

      var e = this.semanticInfo.getASTForDecl(b);

      var f = !1;

      var g = !1;

      var h = 5;

      var i = null;
      if (a.hasFlag(c, 16)) {
        f = !0;
      }

      if (a.hasFlag(c, 2)) {
        h = 6;
      }

      if (a.hasFlag(c, 128)) {
        g = !0;
      }
      var j = b.getName();

      var k = !1;

      var l = this.getParent(b, !0);
      if (l.isClass() && f) {
        l = l.getConstructorMethod().getType();
      }

      i = l.findMember(j, !1);
      if (i && (!this.reBindingAfterChange || this.symbolIsRedeclaration(i))) {
        var m = b.getSpan();
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), m.start(), m.length(), 69, [b.getDisplayName()]));

        i = null;
      }
      if (i) {
        k = !0;
      }
      if (this.reBindingAfterChange && i) {
        var n = i.getDeclarations();

        var o = b.getScriptName();
        for (var p = 0; p < n.length; p++) {
          if (n[p].getScriptName() === o && n[p].getDeclID() < this.startingDeclForRebind) {
            i.removeDeclaration(n[p]);
          }
        }
        i.setUnresolved();
      }
      var q;
      if (!k) {
        i = new a.PullSymbol(j, d);
      }

      i.addDeclaration(b);

      b.setSymbol(i);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e.id, a.SymbolAndDiagnostics.fromSymbol(i));

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e, a.SymbolAndDiagnostics.fromSymbol(i));

      if (g) {
        i.setIsOptional();
      }

      if (l && !k) {
        if (l.isClass()) {
          q = l;
          q.addMember(i, h);
        } else {
          l.addMember(i, h);
        }
      }

      i.setIsBound(this.bindingPhase);
    };

    d.prototype.bindParameterSymbols = function(b, c, d) {
      var e = [];

      var f = null;

      var g = null;

      var h = null;

      var i = !1;

      var j = new a.BlockIntrinsics;
      if (b.arguments)
        for (var k = 0; k < b.arguments.members.length; k++) {
          g = b.arguments.members[k];

          f = this.semanticInfo.getDeclForAST(g);

          i = a.hasFlag(g.getVarFlags(), 256);

          h = new a.PullSymbol(g.id.text, 2048);

          if (b.variableArgList && k === b.arguments.members.length - 1) {
            h.setIsVarArg();
          }

          if (f.getFlags() & 128) {
            h.setIsOptional();
          }

          if (j[g.id.text]) {
            f.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), g.minChar, g.getLength(), 69, [g.id
              .actualText
            ]));
          } else {
            j[g.id.text] = !0;
          }
          if (f)
            if (i) {
              f.ensureSymbolIsBound();
              var l = f.getValueDecl();
              if (l) {
                l.setSymbol(h);
                h.addDeclaration(l);
              }
            } else {
              h.addDeclaration(f);
              f.setSymbol(h);
            }
          d.addParameter(h, h.getIsOptional());

          if (d.isDefinition()) {
            h.setContainer(c);
          }
        }
    };

    d.prototype.bindFunctionDeclarationToPullSymbol = function(b) {
      var d = b.getKind();

      var e = b.getFlags();

      var f = this.semanticInfo.getASTForDecl(b);

      var g = (e & 1) !== 0;

      var h = b.getName();

      var i = (e & 2048) !== 0;

      var j = this.getParent(b, !0);

      var k = b.getParentDecl();

      var l = !1;

      var m = !1;

      var n = null;

      var o = null;
      if (j) {
        n = j.findMember(h, !1);
        if (!n) {
          n = j.findContainedMember(h);
          if (n) {
            var p = n.getDeclarations();
            if (p.length) {
              var q = p[0].getParentDecl();
              if (k !== q && (!this.reBindingAfterChange || q.getDeclID() >= this.startingDeclForRebind)) {
                n = null;
              }
            }
          }
        }
      } else {
        if (!(b.getFlags() & 1)) {
          n = c(h, a.PullElementKind.SomeValue, b);
        }
      }
      if (n && (n.getKind() !== 16384 || this.symbolIsRedeclaration(n) && !i && !n.allDeclsHaveFlag(2048))) {
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), f.minChar, f.getLength(), 69, [b.getDisplayName()]));
        n = null;
      }

      if (n) {
        o = n.getType();
        l = !0;
      }
      if (this.reBindingAfterChange && n) {
        var r = n.getDeclarations();

        var s = b.getScriptName();

        var t = o.isGeneric();
        for (var u = 0; u < r.length; u++) {
          if (r[u].getScriptName() === s && r[u].getDeclID() < this.startingDeclForRebind) {
            n.removeDeclaration(r[u]);
            m = !0;
          }
        }
        r = o.getDeclarations();
        for (var u = 0; u < r.length; u++) {
          if (r[u].getScriptName() === s && r[u].getDeclID() < this.startingDeclForRebind) {
            o.removeDeclaration(r[u]);
            m = !0;
          }
        }
        if (t) {
          var v = o.getKnownSpecializations();
          for (var w = 0; w < v.length; w++) {
            v[w].invalidate();
          }
        }
        n.invalidate();

        o.invalidate();
      }
      if (!n) {
        n = new a.PullSymbol(h, 16384);
      }

      if (!o) {
        o = new a.PullFunctionTypeSymbol;
        n.setType(o);
      }

      b.setSymbol(n);

      n.addDeclaration(b);

      o.addDeclaration(b);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(f.name, a.SymbolAndDiagnostics.fromSymbol(n));

      this.semanticInfo.setSymbolAndDiagnosticsForAST(f, a.SymbolAndDiagnostics.fromSymbol(n));

      if (j && !l) {
        if (g) {
          j.addMember(n, 5);
        } else {
          n.setContainer(j);
        }
      }
      if (l && m) {
        var x = o.getCallSignatures();
        for (var w = 0; w < x.length; w++) {
          o.removeCallSignature(x[w], !1);
        }
        n.invalidate();

        o.invalidate();

        o.recomputeCallSignatures();
        if (t) {
          var v = o.getKnownSpecializations();
          for (var u = 0; u < v.length; u++) {
            x = v[u].getCallSignatures();
            for (var w = 0; w < x.length; w++) {
              x[w].invalidate();
            }
          }
        }
      }
      var y = i ? new a.PullSignatureSymbol(1048576) : new a.PullDefinitionSignatureSymbol(1048576);
      y.addDeclaration(b);

      b.setSignatureSymbol(y);

      if (f.variableArgList) {
        y.setHasVariableParamList();
      }

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), o, y);
      var z = b.getTypeParameters();

      var A;

      var B = null;
      for (var w = 0; w < z.length; w++) {
        A = y.findTypeParameter(z[w].getName());
        if (!A) {
          A = new a.PullTypeParameterSymbol(z[w].getName(), !0);
          y.addTypeParameter(A);
        } else {
          B = A.getDeclarations();
          if (this.symbolIsRedeclaration(A)) {
            var C = this.semanticInfoChain.getASTForDecl(B[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), C.minChar, C.getLength(), 69, [A.getName()]));
          }
          for (var u = 0; u < B.length; u++) {
            if (B[u].getDeclID() < this.startingDeclForRebind) {
              A.removeDeclaration(B[u]);
            }
          }
        }
        A.addDeclaration(z[w]);

        z[w].setSymbol(A);
      }
      o.addCallSignature(y);

      !! i;

      n.setIsBound(this.bindingPhase);
      var D = this.findDeclsInContext(b, b.getKind(), !1);
      if (D && D.length)
        for (var w = 0; w < D.length; w++) {
          D[w].ensureSymbolIsBound();
        }
    };

    d.prototype.bindFunctionExpressionToPullSymbol = function(b) {
      var c = b.getKind();

      var d = b.getFlags();

      var e = this.semanticInfo.getASTForDecl(b);

      var f = c == 131072 ? b.getFunctionExpressionName() : b.getName();

      var g = new a.PullSymbol(f, 16384);

      var h = new a.PullFunctionTypeSymbol;
      g.setType(h);

      b.setSymbol(g);

      g.addDeclaration(b);

      h.addDeclaration(b);

      if (e.name) {
        this.semanticInfo.setSymbolAndDiagnosticsForAST(e.name, a.SymbolAndDiagnostics.fromSymbol(g));
      }

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e, a.SymbolAndDiagnostics.fromSymbol(g));
      var i = new a.PullDefinitionSignatureSymbol(1048576);
      if (e.variableArgList) {
        i.setHasVariableParamList();
      }
      var j = b.getTypeParameters();

      var k;

      var l = null;
      for (var m = 0; m < j.length; m++) {
        k = i.findTypeParameter(j[m].getName());
        if (!k) {
          k = new a.PullTypeParameterSymbol(j[m].getName(), !0);
          i.addTypeParameter(k);
        } else {
          l = k.getDeclarations();
          if (this.symbolIsRedeclaration(k)) {
            var n = this.semanticInfoChain.getASTForDecl(l[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), n.minChar, n.getLength(), 69, [k.getName()]));
          }
          l = k.getDeclarations();
          for (var o = 0; o < l.length; o++) {
            if (l[o].getDeclID() < this.startingDeclForRebind) {
              k.removeDeclaration(l[o]);
            }
          }
        }
        k.addDeclaration(j[m]);

        j[m].setSymbol(k);
      }
      i.addDeclaration(b);

      b.setSignatureSymbol(i);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), h, i);

      h.addSignature(i);
    };

    d.prototype.bindFunctionTypeDeclarationToPullSymbol = function(b) {
      var c = b.getKind();

      var d = b.getFlags();

      var e = this.semanticInfo.getASTForDecl(b);

      var f = new a.PullFunctionTypeSymbol;
      b.setSymbol(f);

      f.addDeclaration(b);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e, a.SymbolAndDiagnostics.fromSymbol(f));
      var g = (d & 2048) !== 0;

      var h = g ? new a.PullSignatureSymbol(1048576) : new a.PullDefinitionSignatureSymbol(1048576);
      if (e.variableArgList) {
        h.setHasVariableParamList();
      }
      var i = b.getTypeParameters();

      var j;

      var k = null;
      for (var l = 0; l < i.length; l++) {
        j = h.findTypeParameter(i[l].getName());
        if (!j) {
          j = new a.PullTypeParameterSymbol(i[l].getName(), !0);
          h.addTypeParameter(j);
        } else {
          k = j.getDeclarations();
          if (this.symbolIsRedeclaration(j)) {
            var m = this.semanticInfoChain.getASTForDecl(k[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), m.minChar, m.getLength(), 69, [j.getName()]));
          }
          k = j.getDeclarations();
          for (var n = 0; n < k.length; n++) {
            if (k[n].getDeclID() < this.startingDeclForRebind) {
              j.removeDeclaration(k[n]);
            }
          }
        }
        j.addDeclaration(i[l]);

        i[l].setSymbol(j);
      }
      h.addDeclaration(b);

      b.setSignatureSymbol(h);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), f, h);

      f.addSignature(h);
    };

    d.prototype.bindMethodDeclarationToPullSymbol = function(b) {
      var c = b.getKind();

      var d = b.getFlags();

      var e = this.semanticInfo.getASTForDecl(b);

      var f = (d & 2) !== 0;

      var g = (d & 16) !== 0;

      var h = (d & 128) !== 0;

      var i = b.getName();

      var j = (d & 2048) !== 0;

      var k = this.getParent(b, !0);

      var l = !1;

      var m = !1;

      var n = null;

      var o = null;

      var p = f ? 6 : 5;
      if (k.isClass() && g) {
        k = k.getConstructorMethod().getType();
      }

      n = k.findMember(i, !1);

      if (n && (n.getKind() !== 65536 || this.symbolIsRedeclaration(n) && !j && !n.allDeclsHaveFlag(2048))) {
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), e.minChar, e.getLength(), 69, [b.getDisplayName()]));
        n = null;
      }

      if (n) {
        o = n.getType();
        l = !0;
      }
      if (this.reBindingAfterChange && n) {
        var q = n.getDeclarations();

        var r = b.getScriptName();

        var s = o.isGeneric();
        for (var t = 0; t < q.length; t++) {
          if (q[t].getScriptName() === r && q[t].getDeclID() < this.startingDeclForRebind) {
            n.removeDeclaration(q[t]);
            m = !0;
          }
        }
        q = o.getDeclarations();
        for (var t = 0; t < q.length; t++) {
          if (q[t].getScriptName() === r && q[t].getDeclID() < this.startingDeclForRebind) {
            o.removeDeclaration(q[t]);
            m = !0;
          }
        }
        if (s) {
          var u = o.getKnownSpecializations();
          for (var v = 0; v < u.length; v++) {
            u[v].invalidate();
          }
        }
        n.invalidate();

        o.invalidate();
      }
      if (!n) {
        n = new a.PullSymbol(i, 65536);
      }

      if (!o) {
        o = new a.PullFunctionTypeSymbol;
        n.setType(o);
      }

      b.setSymbol(n);

      n.addDeclaration(b);

      o.addDeclaration(b);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e.name, a.SymbolAndDiagnostics.fromSymbol(n));

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e, a.SymbolAndDiagnostics.fromSymbol(n));

      if (h) {
        n.setIsOptional();
      }

      if (!l) {
        k.addMember(n, p);
      }
      if (l && m) {
        var w = o.getCallSignatures();

        var x = o.getConstructSignatures();

        var y = o.getIndexSignatures();
        for (var v = 0; v < w.length; v++) {
          o.removeCallSignature(w[v], !1);
        }
        for (var v = 0; v < x.length; v++) {
          o.removeConstructSignature(x[v], !1);
        }
        for (var v = 0; v < y.length; v++) {
          o.removeIndexSignature(y[v], !1);
        }
        n.invalidate();

        o.invalidate();

        o.recomputeCallSignatures();

        o.recomputeConstructSignatures();

        o.recomputeIndexSignatures();
        if (s) {
          var u = o.getKnownSpecializations();
          for (var t = 0; t < u.length; t++) {
            w = u[t].getCallSignatures();
            for (var v = 0; v < w.length; v++) {
              w[v].invalidate();
            }
          }
        }
      }
      var z = 1048576;

      var A = j ? new a.PullSignatureSymbol(z) : new a.PullDefinitionSignatureSymbol(z);
      if (e.variableArgList) {
        A.setHasVariableParamList();
      }
      var B = b.getTypeParameters();

      var C;

      var D = null;

      var E;

      var F;
      for (var v = 0; v < B.length; v++) {
        E = B[v].getName();

        F = this.semanticInfo.getASTForDecl(B[v]);

        C = A.findTypeParameter(E);
        if (!C) {
          if (!F.constraint) {
            C = this.findTypeParameterInCache(E);
          }
          if (!C) {
            C = new a.PullTypeParameterSymbol(E, !0);
            if (!F.constraint) {
              this.addTypeParameterToCache(C);
            }
          }
          A.addTypeParameter(C);
        } else {
          D = C.getDeclarations();

          if (this.symbolIsRedeclaration(C)) {
            F = this.semanticInfoChain.getASTForDecl(D[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), F.minChar, F.getLength(), 69, [C.getName()]));
          }

          D = C.getDeclarations();
          for (var t = 0; t < D.length; t++) {
            if (D[t].getDeclID() < this.startingDeclForRebind) {
              C.removeDeclaration(D[t]);
            }
          }
        }
        C.addDeclaration(B[v]);

        B[v].setSymbol(C);
      }
      A.addDeclaration(b);

      b.setSignatureSymbol(A);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), o, A);

      o.addSignature(A);

      !! j;
      var G = this.findDeclsInContext(b, b.getKind(), !1);
      if (G && G.length)
        for (var v = 0; v < G.length; v++) {
          G[v].ensureSymbolIsBound();
        }
    };

    d.prototype.bindConstructorDeclarationToPullSymbol = function(b) {
      var c = b.getKind();

      var d = b.getFlags();

      var e = this.semanticInfo.getASTForDecl(b);

      var f = b.getName();

      var g = (d & 2048) !== 0;

      var h = this.getParent(b, !0);

      var i = !1;

      var j = !1;

      var k = h.getConstructorMethod();

      var l = null;

      var m = 7;
      if (k && (k.getKind() !== 32768 || !g && k.getType() && k.getType().hasOwnConstructSignatures() && k.getType().getDefinitionSignature() && !
        k.allDeclsHaveFlag(2048))) {
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), e.minChar, e.getLength(), 139, null));
        k = null;
      }
      if (k) {
        l = k.getType();
        if (this.reBindingAfterChange) {
          var n = k.getDeclarations();

          var o = b.getScriptName();

          var p = l.isGeneric();
          for (var q = 0; q < n.length; q++) {
            if (n[q].getScriptName() === o && n[q].getDeclID() < this.startingDeclForRebind) {
              k.removeDeclaration(n[q]);
              j = !0;
            }
          }
          n = l.getDeclarations();
          for (var q = 0; q < n.length; q++) {
            if (n[q].getScriptName() === o && n[q].getDeclID() < this.startingDeclForRebind) {
              l.removeDeclaration(n[q]);
              j = !0;
            }
          }
          if (p) {
            var r = l.getKnownSpecializations();
            for (var s = 0; s < r.length; s++) {
              r[s].invalidate();
            }
          }
          k.invalidate();

          l.invalidate();
        }
      }
      if (!k) {
        k = new a.PullSymbol(f, 32768);
        l = new a.PullConstructorTypeSymbol;
      }

      h.setConstructorMethod(k);

      k.setType(l);

      b.setSymbol(k);

      k.addDeclaration(b);

      l.addDeclaration(b);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e, a.SymbolAndDiagnostics.fromSymbol(k));
      if (i && j) {
        var t = l.getConstructSignatures();
        for (var s = 0; s < t.length; s++) {
          l.removeConstructSignature(t[s]);
        }
        k.invalidate();

        l.invalidate();

        l.recomputeConstructSignatures();
        if (p) {
          var r = l.getKnownSpecializations();
          for (var q = 0; q < r.length; q++) {
            t = r[q].getConstructSignatures();
            for (var s = 0; s < t.length; s++) {
              t[s].invalidate();
            }
          }
        }
      }
      var u = g ? new a.PullSignatureSymbol(2097152) : new a.PullDefinitionSignatureSymbol(2097152);
      u.setReturnType(h);

      u.addDeclaration(b);

      b.setSignatureSymbol(u);

      this.bindParameterSymbols(e, l, u);
      var v = l.getTypeParameters();
      for (var s = 0; s < v.length; s++) {
        u.addTypeParameter(v[s]);
      }
      if (e.variableArgList) {
        u.setHasVariableParamList();
      }

      l.addSignature(u);

      !! g;
      var w = this.findDeclsInContext(b, b.getKind(), !1);
      if (w && w.length)
        for (var s = 0; s < w.length; s++) {
          w[s].ensureSymbolIsBound();
        }
    };

    d.prototype.bindConstructSignatureDeclarationToPullSymbol = function(b) {
      var c = this.getParent(b, !0);

      var d = this.semanticInfo.getASTForDecl(b);

      var e = c.getConstructSignatures();
      for (var f = 0; f < e.length; f++) {
        if (e[f].getSymbolID() < this.startingSymbolForRebind) {
          c.removeConstructSignature(e[f], !1);
        }
      }
      c.recomputeConstructSignatures();
      var g = new a.PullSignatureSymbol(2097152);
      if (d.variableArgList) {
        g.setHasVariableParamList();
      }
      var h = b.getTypeParameters();

      var i;

      var j = null;
      for (var f = 0; f < h.length; f++) {
        i = g.findTypeParameter(h[f].getName());
        if (!i) {
          i = new a.PullTypeParameterSymbol(h[f].getName(), !0);
          g.addTypeParameter(i);
        } else {
          j = i.getDeclarations();
          if (this.symbolIsRedeclaration(i)) {
            var k = this.semanticInfoChain.getASTForDecl(j[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), k.minChar, k.getLength(), 69, [i.getName()]));
          }
          for (var l = 0; l < j.length; l++) {
            if (j[l].getDeclID() < this.startingDeclForRebind) {
              i.removeDeclaration(j[l]);
            }
          }
        }
        i.addDeclaration(h[f]);

        h[f].setSymbol(i);
      }
      g.addDeclaration(b);

      b.setSignatureSymbol(g);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), null, g);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(this.semanticInfo.getASTForDecl(b), a.SymbolAndDiagnostics.fromSymbol(
        g));

      c.addConstructSignature(g);
    };

    d.prototype.bindCallSignatureDeclarationToPullSymbol = function(b) {
      var c = this.getParent(b, !0);

      var d = this.semanticInfo.getASTForDecl(b);

      var e = c.getCallSignatures();
      for (var f = 0; f < e.length; f++) {
        if (e[f].getSymbolID() < this.startingSymbolForRebind) {
          c.removeCallSignature(e[f], !1);
        }
      }
      c.recomputeCallSignatures();
      var g = new a.PullSignatureSymbol(1048576);
      if (d.variableArgList) {
        g.setHasVariableParamList();
      }
      var h = b.getTypeParameters();

      var i;

      var j = null;
      for (var f = 0; f < h.length; f++) {
        i = g.findTypeParameter(h[f].getName());
        if (!i) {
          i = new a.PullTypeParameterSymbol(h[f].getName(), !0);
          g.addTypeParameter(i);
        } else {
          j = i.getDeclarations();
          if (this.symbolIsRedeclaration(i)) {
            var k = this.semanticInfoChain.getASTForDecl(j[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), k.minChar, k.getLength(), 69, [i.getName()]));
          }
          for (var l = 0; l < j.length; l++) {
            if (j[l].getDeclID() < this.startingDeclForRebind) {
              i.removeDeclaration(j[l]);
            }
          }
        }
        i.addDeclaration(h[f]);

        h[f].setSymbol(i);
      }
      g.addDeclaration(b);

      b.setSignatureSymbol(g);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), null, g);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(this.semanticInfo.getASTForDecl(b), a.SymbolAndDiagnostics.fromSymbol(
        g));

      c.addCallSignature(g);
    };

    d.prototype.bindIndexSignatureDeclarationToPullSymbol = function(b) {
      var c = this.getParent(b, !0);

      var d = c.getIndexSignatures();
      for (var e = 0; e < d.length; e++) {
        if (d[e].getSymbolID() < this.startingSymbolForRebind) {
          c.removeIndexSignature(d[e], !1);
        }
      }
      c.recomputeIndexSignatures();
      var f = new a.PullSignatureSymbol(4194304);

      var g = b.getTypeParameters();

      var h;

      var i = null;
      for (var e = 0; e < g.length; e++) {
        h = f.findTypeParameter(g[e].getName());
        if (!h) {
          h = new a.PullTypeParameterSymbol(g[e].getName(), !0);
          f.addTypeParameter(h);
        } else {
          i = h.getDeclarations();
          if (this.symbolIsRedeclaration(h)) {
            var j = this.semanticInfoChain.getASTForDecl(i[0]);
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), j.minChar, j.getLength(), 69, [h.getName()]));
          }
          i = h.getDeclarations();
          for (var k = 0; k < i.length; k++) {
            if (i[k].getDeclID() < this.startingDeclForRebind) {
              h.removeDeclaration(i[k]);
            }
          }
        }
        h.addDeclaration(g[e]);

        g[e].setSymbol(h);
      }
      f.addDeclaration(b);

      b.setSignatureSymbol(f);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), null, f);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(this.semanticInfo.getASTForDecl(b), a.SymbolAndDiagnostics.fromSymbol(
        f));

      c.addIndexSignature(f);
    };

    d.prototype.bindGetAccessorDeclarationToPullSymbol = function(b) {
      var c = b.getKind();

      var d = b.getFlags();

      var e = this.semanticInfo.getASTForDecl(b);

      var f = (d & 1) !== 0;

      var g = b.getName();

      var h = (d & 2048) !== 0;

      var i = !1;

      var j = 5;
      if (a.hasFlag(d, 16)) {
        i = !0;
      }

      if (a.hasFlag(d, 2)) {
        j = 6;
      }
      var k = this.getParent(b, !0);

      var l = !1;

      var m = !1;

      var n = null;

      var o = null;

      var p = null;
      if (i) {
        k = k.getConstructorMethod().getType();
      }

      n = k.findMember(g, !1);

      if (n) {
        if (n.isAccessor()) {
          o = n.getGetter();
          if (o && (!this.reBindingAfterChange || this.symbolIsRedeclaration(o))) {
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), e.minChar, e.getLength(), 84, [b.getDisplayName()]));
            n = null;
            o = null;
          }
        } else {
          b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), e.minChar, e.getLength(), 69, [b.getDisplayName()]));
          n = null;
        }
      }

      if (n) {
        l = !0;
      }

      if (n && o) {
        p = o.getType();
      }
      if (this.reBindingAfterChange && n) {
        var q = n.getDeclarations();

        var r = b.getScriptName();
        for (var s = 0; s < q.length; s++) {
          if (q[s].getScriptName() === r && q[s].getDeclID() < this.startingDeclForRebind) {
            n.removeDeclaration(q[s]);
            m = !0;
          }
        }
        if (o) {
          q = o.getDeclarations();
          for (var s = 0; s < q.length; s++) {
            if (q[s].getScriptName() === r && q[s].getDeclID() < this.startingDeclForRebind) {
              o.removeDeclaration(q[s]);
              m = !0;
            }
          }
        }
        n.invalidate();
      }
      if (!n) {
        n = new a.PullAccessorSymbol(g);
      }

      if (!o) {
        o = new a.PullSymbol(g, 16384);
        p = new a.PullFunctionTypeSymbol;
        o.setType(p);
        n.setGetter(o);
      }

      b.setSymbol(n);

      n.addDeclaration(b);

      o.addDeclaration(b);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e.name, a.SymbolAndDiagnostics.fromSymbol(o));

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e, a.SymbolAndDiagnostics.fromSymbol(o));

      if (!l) {
        k.addMember(n, j);
      }
      if (l && m) {
        var t = p.getCallSignatures();
        for (var u = 0; u < t.length; u++) {
          p.removeCallSignature(t[u], !1);
        }
        o.invalidate();

        p.invalidate();

        p.recomputeCallSignatures();
      }
      var v = h ? new a.PullSignatureSymbol(1048576) : new a.PullDefinitionSignatureSymbol(1048576);
      v.addDeclaration(b);

      b.setSignatureSymbol(v);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), p, v);
      var w = b.getTypeParameters();
      if (w.length) {
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), e.minChar, e.getLength(), 86, null));
      }

      p.addSignature(v);

      !! h;

      o.setIsBound(this.bindingPhase);
    };

    d.prototype.bindSetAccessorDeclarationToPullSymbol = function(b) {
      var c = b.getKind();

      var d = b.getFlags();

      var e = this.semanticInfo.getASTForDecl(b);

      var f = (d & 1) !== 0;

      var g = b.getName();

      var h = (d & 2048) !== 0;

      var i = !1;

      var j = 5;
      if (a.hasFlag(d, 16)) {
        i = !0;
      }

      if (a.hasFlag(d, 2)) {
        j = 6;
      }
      var k = this.getParent(b, !0);

      var l = !1;

      var m = !1;

      var n = null;

      var o = null;

      var p = null;
      if (i) {
        k = k.getConstructorMethod().getType();
      }

      n = k.findMember(g, !1);

      if (n) {
        if (n.isAccessor()) {
          o = n.getSetter();
          if (o && (!this.reBindingAfterChange || this.symbolIsRedeclaration(o))) {
            b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), e.minChar, e.getLength(), 85, [b.getDisplayName()]));
            n = null;
            o = null;
          }
        } else {
          b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), e.minChar, e.getLength(), 69, [b.getDisplayName()]));
          n = null;
        }
      }

      if (n) {
        l = !0;
      }

      if (n && o) {
        p = o.getType();
      }
      if (this.reBindingAfterChange && n) {
        var q = n.getDeclarations();

        var r = b.getScriptName();
        for (var s = 0; s < q.length; s++) {
          if (q[s].getScriptName() === r && q[s].getDeclID() < this.startingDeclForRebind) {
            n.removeDeclaration(q[s]);
            m = !0;
          }
        }
        if (o) {
          q = o.getDeclarations();
          for (var s = 0; s < q.length; s++) {
            if (q[s].getScriptName() === r && q[s].getDeclID() < this.startingDeclForRebind) {
              o.removeDeclaration(q[s]);
              m = !0;
            }
          }
        }
        n.invalidate();
      }
      if (!n) {
        n = new a.PullAccessorSymbol(g);
      }

      if (!o) {
        o = new a.PullSymbol(g, 16384);
        p = new a.PullFunctionTypeSymbol;
        o.setType(p);
        n.setSetter(o);
      }

      b.setSymbol(n);

      n.addDeclaration(b);

      o.addDeclaration(b);

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e.name, a.SymbolAndDiagnostics.fromSymbol(o));

      this.semanticInfo.setSymbolAndDiagnosticsForAST(e, a.SymbolAndDiagnostics.fromSymbol(o));

      if (!l) {
        k.addMember(n, j);
      }
      if (l && m) {
        var t = p.getCallSignatures();
        for (var u = 0; u < t.length; u++) {
          p.removeCallSignature(t[u], !1);
        }
        o.invalidate();

        p.invalidate();

        p.recomputeCallSignatures();
      }
      var v = h ? new a.PullSignatureSymbol(1048576) : new a.PullDefinitionSignatureSymbol(1048576);
      v.addDeclaration(b);

      b.setSignatureSymbol(v);

      this.bindParameterSymbols(this.semanticInfo.getASTForDecl(b), p, v);
      var w = b.getTypeParameters();
      if (w.length) {
        b.addDiagnostic(new a.SemanticDiagnostic(this.semanticInfo.getPath(), e.minChar, e.getLength(), 86, null));
      }

      p.addSignature(v);

      !! h;

      o.setIsBound(this.bindingPhase);
    };

    d.prototype.bindCatchBlockPullSymbols = function(a) {};

    d.prototype.bindWithBlockPullSymbols = function(a) {};

    d.prototype.bindDeclToPullSymbol = function(b, c) {
      if (typeof c == "undefined") {
        c = !1;
      }

      if (c) {
        this.startingDeclForRebind = a.lastBoundPullDeclId;
        this.startingSymbolForRebind = a.lastBoundPullSymbolID;
        this.reBindingAfterChange = !0;
      }
      if (b.isBound()) return;
      b.setIsBound(!0);
      switch (b.getKind()) {
        case 1:
          var d = b.getChildDecls();
          for (var e = 0; e < d.length; e++) {
            this.bindDeclToPullSymbol(d[e]);
          }
          break;
        case 64:
        case 32:
        case 4:
          this.bindModuleDeclarationToPullSymbol(b);
          break;
        case 16:
          this.bindInterfaceDeclarationToPullSymbol(b);
          break;
        case 8:
          this.bindClassDeclarationToPullSymbol(b);
          break;
        case 16384:
          this.bindFunctionDeclarationToPullSymbol(b);
          break;
        case 1024:
          this.bindVariableDeclarationToPullSymbol(b);
          break;
        case 67108864:
        case 4096:
          this.bindPropertyDeclarationToPullSymbol(b);
          break;
        case 65536:
          this.bindMethodDeclarationToPullSymbol(b);
          break;
        case 32768:
          this.bindConstructorDeclarationToPullSymbol(b);
          break;
        case 1048576:
          this.bindCallSignatureDeclarationToPullSymbol(b);
          break;
        case 2097152:
          this.bindConstructSignatureDeclarationToPullSymbol(b);
          break;
        case 4194304:
          this.bindIndexSignatureDeclarationToPullSymbol(b);
          break;
        case 262144:
          this.bindGetAccessorDeclarationToPullSymbol(b);
          break;
        case 524288:
          this.bindSetAccessorDeclarationToPullSymbol(b);
          break;
        case 8388608:
          this.bindObjectTypeDeclarationToPullSymbol(b);
          break;
        case 16777216:
          this.bindFunctionTypeDeclarationToPullSymbol(b);
          break;
        case 33554432:
          this.bindConstructorTypeDeclarationToPullSymbol(b);
          break;
        case 131072:
          this.bindFunctionExpressionToPullSymbol(b);
          break;
        case 256:
          this.bindImportDeclaration(b);
          break;
        case 2048:
        case 8192:
          break;
        case 1073741824:
          this.bindCatchBlockPullSymbols(b);
        case 536870912:
          this.bindWithBlockPullSymbols(b);
          break;
        default:
          throw new Error("Unrecognized type declaration");
      }
    };

    d.prototype.bindDeclsForUnit = function(a, b) {
      if (typeof b == "undefined") {
        b = !1;
      }

      this.setUnit(a);
      var c = this.semanticInfo.getTopLevelDecls();
      for (var d = 0; d < c.length; d++) {
        this.bindDeclToPullSymbol(c[d], b);
      }
    };

    return d;
  }();
  a.PullSymbolBinder = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function h(b, c) {
    var d = c.symbolToUpdate;

    var e = b.end;
    if (e.removeUpdateVersion === a.updateVersion || e.isPrimitive()) return;
    if (b.kind === 2) {
      c.updater.invalidateType(e);
    } else {
      if (b.kind === 21) {
        d.removeSpecialization(e);
        c.updater.removeSymbol(e);
        c.updater.invalidateType(e);
      } else {
        if (b.kind === 5) {
          c.updater.removeSymbol(e);
        } else {
          if (b.kind === 6) {
            c.updater.removeSymbol(e);
          } else {
            if (b.kind === 7) {
              c.updater.invalidateType(e);
            } else {
              if (b.kind === 10) {
                e.removeMember(d);
                c.updater.invalidateType(e);
              } else {
                if (b.kind === 13) {
                  c.updater.removeSymbol(e);
                } else {
                  if (b.kind === 15) {
                    c.updater.invalidateType(e);
                  } else {
                    if (b.kind === 16) {
                      c.updater.invalidateType(e);
                    } else {
                      if (b.kind === 17) {
                        c.updater.invalidateType(e);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    d.removeOutgoingLink(b);
  }

  function i(b, c) {
    var d = c.symbolToUpdate;

    var e = b.start;
    if (e.removeUpdateVersion === a.updateVersion || e.isPrimitive()) return;
    if (b.kind === 0) {
      c.updater.invalidateType(e);
    } else {
      if (b.kind === 1) {
        c.updater.invalidateType(e);
      } else {
        if (b.kind === 18) {
          c.updater.invalidateType(e);
        } else {
          if (b.kind === 19) {
            c.updater.invalidateType(e);
          } else {
            if (b.kind === 21) {
              e.removeSpecialization(d);
            } else {
              if (b.kind === 22) {
                c.updater.invalidateType(e);
              } else {
                if (b.kind === 5) {
                  e.removeMember(d);
                  c.updater.invalidateType(e);
                } else {
                  if (b.kind === 6) {
                    e.removeMember(d);
                    c.updater.invalidateType(e);
                  } else {
                    if (b.kind === 7) {
                      c.updater.invalidateType(e);
                    } else {
                      if (b.kind === 10) {
                        c.updater.invalidateType(e);
                      } else {
                        if (b.kind === 11) {
                          c.updater.invalidateType(e);
                        } else {
                          if (b.kind === 12) {
                            c.updater.invalidateType(e);
                          } else {
                            if (b.kind === 13) {
                              c.updater.invalidateType(e);
                            } else {
                              if (b.kind === 14) {
                                c.updater.invalidateType(e);
                              } else {
                                if (b.kind === 15) {
                                  c.updater.invalidateType(e);
                                } else {
                                  if (b.kind === 16) {
                                    c.updater.invalidateType(e);
                                  } else {
                                    if (b.kind === 17) {
                                      c.updater.invalidateType(e);
                                    } else {
                                      if (b.kind === 8) {
                                        c.updater.invalidateType(e);
                                      } else {
                                        if (b.kind === 9) {
                                          c.updater.invalidateType(e);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  function j(b, c) {
    var d = c.symbolToUpdate;

    var e = b.end;
    if (e.addUpdateVersion === a.updateVersion || e.isPrimitive()) return;
    if (b.kind === 10) {
      c.updater.invalidateType(e);
    } else {
      if (b.kind === 2) {
        c.updater.invalidateType(e);
      } else {
        if (b.kind === 18) {
          c.updater.invalidateType(e);
        } else {
          if (b.kind === 19) {
            c.updater.invalidateType(e);
          } else {
            if (b.kind === 21) {
              c.updater.invalidateType(e);
            } else {
              if (b.kind === 22) {
                c.updater.invalidateType(e);
              } else {
                if (b.kind === 5) {
                  c.updater.invalidateType(e);
                } else {
                  if (b.kind === 7) {
                    c.updater.invalidateType(e);
                  } else {
                    if (b.kind === 14) {
                      c.updater.invalidateType(e);
                    } else {
                      if (b.kind === 15) {
                        c.updater.invalidateType(e);
                      } else {
                        if (b.kind === 16) {
                          c.updater.invalidateType(e);
                        } else {
                          if (b.kind === 17) {
                            c.updater.invalidateType(e);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  function k(b, c) {
    var d = c.symbolToUpdate;

    var e = b.start;
    if (e.addUpdateVersion === a.updateVersion || e.isPrimitive()) return;
    if (b.kind === 0) {
      c.updater.invalidateType(e);
    } else {
      if (b.kind === 1) {
        c.updater.invalidateType(e);
      } else {
        if (b.kind === 18) {
          c.updater.invalidateType(e);
        } else {
          if (b.kind === 19) {
            c.updater.invalidateType(e);
          } else {
            if (b.kind === 22) {
              c.updater.invalidateType(e);
            } else {
              if (b.kind === 5) {
                c.updater.invalidateType(e);
              } else {
                if (b.kind === 7) {
                  c.updater.invalidateType(e);
                } else {
                  if (b.kind === 11) {
                    c.updater.invalidateType(e);
                  } else {
                    if (b.kind === 12) {
                      c.updater.invalidateType(e);
                    } else {
                      if (b.kind === 14) {
                        c.updater.invalidateType(e);
                      } else {
                        if (b.kind === 8) {
                          c.updater.invalidateType(e);
                        } else {
                          if (b.kind === 9) {
                            c.updater.invalidateType(e);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  function l(b, c) {
    var d = c.symbolToUpdate;

    var e = b.end;
    if (e.typeChangeUpdateVersion === a.updateVersion || e.isPrimitive()) return;
    if (b.kind === 2) {
      c.updater.invalidateType(e);
    } else {
      if (b.kind === 10) {
        c.updater.invalidateType(e);
      } else {
        if (b.kind === 18) {
          c.updater.invalidateType(e);
        } else {
          if (b.kind === 19) {
            c.updater.invalidateType(e);
          } else {
            if (b.kind === 21) {
              c.updater.invalidateType(e);
            } else {
              if (b.kind === 22) {
                c.updater.invalidateType(e);
              } else {
                if (b.kind === 5) {
                  c.updater.invalidateType(e);
                } else {
                  if (b.kind === 15) {
                    c.updater.invalidateType(e);
                  } else {
                    if (b.kind === 7) {
                      c.updater.invalidateType(e);
                    } else {
                      if (b.kind === 16) {
                        c.updater.invalidateType(e);
                      } else {
                        if (b.kind === 17) {
                          c.updater.invalidateType(e);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  function m(b, c) {
    var d = c.symbolToUpdate;

    var e = b.start;
    if (e.typeChangeUpdateVersion === a.updateVersion || e.isPrimitive()) return;
    if (b.kind === 0) {
      c.updater.invalidateType(e);
    } else {
      if (b.kind === 1) {
        c.updater.invalidateType(e);
      } else {
        if (b.kind === 18) {
          c.updater.invalidateType(e);
        } else {
          if (b.kind === 19) {
            c.updater.invalidateType(e);
          } else {
            if (b.kind === 22) {
              c.updater.invalidateType(e);
            } else {
              if (b.kind === 5) {
                c.updater.invalidateType(e);
              } else {
                if (b.kind === 17) {
                  c.updater.invalidateType(e);
                } else {
                  if (b.kind === 11) {
                    c.updater.invalidateType(e);
                  } else {
                    if (b.kind === 12) {
                      c.updater.invalidateType(e);
                    } else {
                      if (b.kind === 14) {
                        c.updater.invalidateType(e);
                      } else {
                        if (b.kind === 8) {
                          c.updater.invalidateType(e);
                        } else {
                          if (b.kind === 9) {
                            c.updater.invalidateType(e);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  a.linkID = 0;
  var b = function() {
    function a(a) {
      this.value = a;

      this.next = null;

      this.prev = null;
    }
    return a;
  }();
  a.IListItem = b;
  var c = function() {
    function a() {
      this.head = null;

      this.last = null;

      this.length = 0;
    }
    a.prototype.addItem = function(a) {
      if (this.head) {
        this.last.next = new b(a);
        this.last.next.prev = this.last;
        this.last = this.last.next;
      } else {
        this.head = new b(a);
        this.last = this.head;
      }

      this.length++;
    };

    a.prototype.find = function(a) {
      var b = this.head;

      var c = [];
      while (b) {
        if (a(b.value)) {
          c[c.length] = b.value;
        }
        b = b.next;
      }
      return c;
    };

    a.prototype.remove = function(a) {
      var b = this.head;

      var c = null;

      var d = null;
      while (b) {
        if (a(b.value)) {
          if (b === this.head) {
            if (this.last === this.head) {
              this.last = null;
            }
            this.head = this.head.next;
            if (this.head) {
              this.head.prev = null;
            }
          } else {
            c = b.prev;
            d = b.next;
            if (c) {
              c.next = d;
            }
            if (d) {
              d.prev = c;
            }
            if (b === this.last) {
              this.last = c;
            }
          }
          this.length--;
        }
        b = b.next;
      }
    };

    a.prototype.update = function(a, b) {
      var c = this.head;
      while (c) {
        a(c.value, b);
        c = c.next;
      }
    };

    return a;
  }();
  a.LinkList = c;
  var d = function() {
    function b(b, c, d) {
      this.start = b;

      this.end = c;

      this.kind = d;

      this.id = a.linkID++;
    }
    return b;
  }();
  a.PullSymbolLink = d;

  (function(a) {
    a[a.NoUpdate = 0] = "NoUpdate";

    a[a.SymbolRemoved = 1] = "SymbolRemoved";

    a[a.SymbolAdded = 2] = "SymbolAdded";

    a[a.TypeChanged = 3] = "TypeChanged";
  })(a.GraphUpdateKind || (a.GraphUpdateKind = {}));
  var e = a.GraphUpdateKind;

  var f = function() {
    function a(a, b, c) {
      this.updateKind = a;

      this.symbolToUpdate = b;

      this.updater = c;
    }
    return a;
  }();
  a.PullSymbolUpdate = f;

  a.updateVersion = 0;
  var g = function() {
    function b(a) {
      this.semanticInfoChain = a;
    }
    b.prototype.removeDecl = function(b) {
      var c = b.getSymbol();
      if (c) {
        c.removeDeclaration(b);
        var d = b.getChildDecls();
        for (var e = 0; e < d.length; e++) {
          this.removeDecl(d[e]);
        }
        var f = c.getDeclarations();
        if (f.length) {
          c.invalidate();
        } else {
          this.removeSymbol(c);
          this.semanticInfoChain.removeSymbolFromCache(c);
        }
      }
      var g = b.getValueDecl();
      if (g) {
        this.removeDecl(g);
      }

      a.updateVersion++;
    };

    b.prototype.addDecl = function(b) {
      var c = b.getSymbol();
      if (c) {
        this.addSymbol(c);
      }

      a.updateVersion++;
    };

    b.prototype.removeSymbol = function(b) {
      if (b.removeUpdateVersion === a.updateVersion) return;
      b.removeUpdateVersion = a.updateVersion;

      b.updateOutgoingLinks(h, new f(1, b, this));

      b.updateIncomingLinks(i, new f(1, b, this));

      b.unsetContainer();

      this.semanticInfoChain.removeSymbolFromCache(b);
      var c = b.getContainer();
      if (c) {
        c.removeMember(b);
        this.semanticInfoChain.removeSymbolFromCache(b);
      }
      if (b.isAccessor()) {
        var d = b.getGetter();

        var e = b.getSetter();
        if (d) {
          this.removeSymbol(d);
        }

        if (e) {
          this.removeSymbol(e);
        }
      }
      b.removeAllLinks();
    };

    b.prototype.addSymbol = function(b) {
      if (b.addUpdateVersion === a.updateVersion) return;
      b.addUpdateVersion = a.updateVersion;

      b.updateOutgoingLinks(j, new f(2, b, this));

      b.updateIncomingLinks(k, new f(2, b, this));
    };

    b.prototype.invalidateType = function(b) {
      if (!b) return;
      if (b.isPrimitive()) return;
      if (b.typeChangeUpdateVersion === a.updateVersion) return;
      b.typeChangeUpdateVersion = a.updateVersion;

      b.updateOutgoingLinks(l, new f(3, b, this));

      b.updateIncomingLinks(m, new f(3, b, this));
      if (b.getKind() === 4) {
        var c = b.getInstanceSymbol();
        this.invalidateType(c);
      }
      if (b.isResolved()) {
        b.invalidate();
      }

      this.invalidateUnitsForSymbol(b);
    };

    b.prototype.invalidateUnitsForSymbol = function(a) {
      var b = a.getDeclarations();
      for (var c = 0; c < b.length; c++) {
        this.semanticInfoChain.invalidateUnit(b[c].getScriptName());
      }
    };

    return b;
  }();
  a.PullSymbolGraphUpdater = g;

  a.propagateRemovalToOutgoingLinks = h;

  a.propagateRemovalToIncomingLinks = i;

  a.propagateAdditionToOutgoingLinks = j;

  a.propagateAdditionToIncomingLinks = k;

  a.propagateChangedTypeToOutgoingLinks = l;

  a.propagateChangedTypeToIncomingLinks = m;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function c(a, b) {
    var d = a.getDiagnostics();
    if (d)
      for (var e = 0; e < d.length; e++) {
        b[b.length] = d[e];
      }
    var f = a.getChildDecls();
    for (var e = 0; e < f.length; e++) {
      c(f[e], b);
    }
  }
  var b = function(b) {
    function c() {
      b.apply(this, arguments);
    }
    __extends(c, b);

    c.equals = function(b, c) {
      return a.Diagnostic.equals(b, c);
    };

    return c;
  }(a.Diagnostic);
  a.SemanticDiagnostic = b;

  a.getDiagnosticsFromEnclosingDecl = c;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    function b(a, b) {
      var c = b.getDeclForAST(a);

      var d = c.getSymbol();
      if (!d) {
        d = c.getSignatureSymbol();
      }
      var e = null;

      var f = null;
      if (d.isSignature()) {
        e = d;
        var g = c.getParentDecl();
        f = g.getSymbol().getType();
      } else {
        e = c.getSignatureSymbol();
        f = d.getType();
      }
      var h;
      a.isConstructor || a.isConstructMember() ? h = f.getConstructSignatures() : a.isIndexerMember() ? h = f.getIndexSignatures() :
        h = f.getCallSignatures();

      return {
        signature: e,
        allSignatures: h
      };
    }

    function c(a, b, c) {
      var d = b.getDeclForAST(a, c);

      var e = d.getSymbol();
      return e;
    }

    function d(b, c, d) {
      var e = a.getAccessorSymbol(b, c, d);

      var f = {
        getter: null,
        setter: null
      };

      var g = e.getGetter();
      if (g) {
        var h = g.getDeclarations()[0];
        f.getter = c.getASTForDecl(h);
      }
      var i = e.getSetter();
      if (i) {
        var j = i.getDeclarations()[0];
        f.setter = c.getASTForDecl(j);
      }
      return f;
    }

    function e(a) {
      return a && (a.getKind() & 67108928 || a.hasFlag(131072));
    }
    a.getSignatureForFuncDecl = b;

    a.getAccessorSymbol = c;

    a.getGetterAndSetterFunction = d;

    a.symbolIsEnum = e;
  })(a.PullHelpers || (a.PullHelpers = {}));
  var b = a.PullHelpers;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = !0;

  var c = function() {
    function b(b) {
      this.position = 0;

      this.elementToPosition = a.Collections.createHashTable(2048, a.Collections.identityHashCode);

      this.process(b);
    }
    b.prototype.process = function(a) {
      if (a !== null)
        if (a.isToken()) {
          this.elementToPosition.add(a, this.position);
          this.position += a.fullWidth();
        } else {
          if (a.isNode() || a.isList() && a.childCount() > 0 || a.isSeparatedList() && a.childCount() > 0) {
            this.elementToPosition.add(a, this.position);
          }
          for (var b = 0, c = a.childCount(); b < c; b++) {
            this.process(a.childAt(b));
          }
        }
    };

    b.create = function(a) {
      var c = new b(a);
      return c;
    };

    b.prototype.fullStart = function(a) {
      return this.elementToPosition.get(a);
    };

    b.prototype.start = function(a) {
      return this.fullStart(a) + a.leadingTriviaWidth();
    };

    b.prototype.end = function(a) {
      return this.start(a) + a.width();
    };

    b.prototype.fullEnd = function(a) {
      return this.fullStart(a) + a.fullWidth();
    };

    return b;
  }();
  a.SyntaxPositionMap = c;
  var d = function() {
    function d(b, c, d, e) {
      this.syntaxPositionMap = b;

      this.fileName = c;

      this.lineMap = d;

      this.compilationSettings = e;

      this.position = 0;

      this.requiresExtendsBlock = !1;

      this.previousTokenTrailingComments = null;

      this.isParsingAmbientModule = !1;

      this.containingModuleHasExportAssignment = !1;

      this.isParsingDeclareFile = a.isDTSFile(c);
    }
    d.visit = function(a, b, e) {
      var f = d.checkPositions ? c.create(a.sourceUnit()) : null;

      var g = new d(f, b, a.lineMap(), e);
      return a.sourceUnit().accept(g);
    };

    d.prototype.assertElementAtPosition = function(b) {
      if (d.checkPositions) {
        a.Debug.assert(this.position === this.syntaxPositionMap.fullStart(b));
      }
    };

    d.prototype.movePast = function(a) {
      if (a !== null) {
        this.assertElementAtPosition(a);
        this.position += a.fullWidth();
      }
    };

    d.prototype.moveTo = function(b, c) {
      if (c !== null) {
        this.position += a.Syntax.childOffset(b, c);
      }
    };

    d.prototype.applyDelta = function(b, c) {
      var d = this;
      if (c === 0) return;
      var e = function(a) {
        if (a.minChar !== -1) {
          a.minChar += c;
        }

        if (a.limChar !== -1) {
          a.limChar += c;
        }
      };

      var f = function(a) {
        if (a && a.length > 0)
          for (var b = 0; b < a.length; b++) {
            var c = a[b];
            e(c);

            c.minLine = d.lineMap.getLineNumberFromPosition(c.minChar);

            c.limLine = d.lineMap.getLineNumberFromPosition(c.limChar);
          }
      };

      var g = function(a, b, c) {
        e(a);

        f(a.preComments);

        f(a.postComments);

        return a;
      };
      a.getAstWalkerFactory().walk(b, g);
    };

    d.prototype.setSpan = function(a, b, c) {
      var d = b + c.leadingTriviaWidth();

      var e = d + c.width();
      this.setSpanExplicit(a, d, e);

      a.trailingTriviaWidth = c.trailingTriviaWidth();
    };

    d.prototype.setSpanExplicit = function(b, c, d) {
      if (b.minChar !== -1) {
        a.Debug.assert(b.limChar !== -1);

        a.Debug.assert(b.nodeType !== undefined);
        var e = c - b.minChar;
        this.applyDelta(b, e);

        b.limChar = d;

        a.Debug.assert(b.minChar === c);

        a.Debug.assert(b.limChar === d);
      } else {
        a.Debug.assert(b.limChar === -1);
        b.minChar = c;
        b.limChar = d;
      }
      a.Debug.assert(!isNaN(b.minChar));

      a.Debug.assert(!isNaN(b.limChar));

      a.Debug.assert(b.minChar !== -1);

      a.Debug.assert(b.limChar !== -1);
    };

    d.prototype.identifierFromToken = function(b, c, e) {
      this.assertElementAtPosition(b);
      var f = null;
      if (b.fullWidth() === 0) {
        f = new a.MissingIdentifier;
      } else {
        f = new a.Identifier(b.text());
        f.text = e ? b.valueText() : f.text;
        if (f.text == d.protoString) {
          f.text = d.protoSubstitutionString;
        }
      }

      if (c) {
        f.setFlags(f.getFlags() | 4);
      }
      var g = this.position + b.leadingTriviaWidth();
      this.setSpanExplicit(f, g, g + b.width());

      return f;
    };

    d.prototype.getAST = function(a) {
      if (this.previousTokenTrailingComments !== null) {
        return null;
      }
      if (b) {
        var c = a._ast;
        return c ? c : null;
      }
      return null;
    };

    d.prototype.setAST = function(a, c) {
      if (b) {
        a._ast = c;
      }
    };

    d.prototype.visitSyntaxList = function(b) {
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        d = new a.ASTList;
        for (var e = 0, f = b.childCount(); e < f; e++) {
          d.append(b.childAt(e).accept(this));
        }
        if (f > 0) {
          this.setAST(b, d);
        }
      }
      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitSeparatedSyntaxList = function(b) {
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        d = new a.ASTList;
        for (var e = 0, f = b.childCount(); e < f; e++)
          if (e % 2 === 0) {
            d.append(b.childAt(e).accept(this));
            this.previousTokenTrailingComments = null;
          } else {
            var g = b.childAt(e);
            this.previousTokenTrailingComments = this.convertTokenTrailingComments(g, this.position + g.leadingTriviaWidth() +
              g.width());

            this.movePast(g);
          }
        d.postComments = this.previousTokenTrailingComments;

        this.previousTokenTrailingComments = null;

        if (f > 0) {
          this.setAST(b, d);
        }
      }
      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.createRef = function(b, c) {
      var d = new a.Identifier(b);
      d.minChar = c;

      return d;
    };

    d.prototype.convertComment = function(b, c, d) {
      var e = new a.Comment(b.fullText(), b.kind() === 6, d);
      e.minChar = c;

      e.limChar = c + b.fullWidth();

      e.minLine = this.lineMap.getLineNumberFromPosition(e.minChar);

      e.limLine = this.lineMap.getLineNumberFromPosition(e.limChar);

      return e;
    };

    d.prototype.convertComments = function(a, b) {
      var c = [];
      for (var d = 0, e = a.count(); d < e; d++) {
        var f = a.syntaxTriviaAt(d);
        if (f.isComment()) {
          var g = d + 1 < e && a.syntaxTriviaAt(d + 1).isNewLine();
          c.push(this.convertComment(f, b, g));
        }
        b += f.fullWidth();
      }
      return c;
    };

    d.prototype.mergeComments = function(a, b) {
      return a === null ? b : b === null ? a : a.concat(b);
    };

    d.prototype.convertTokenLeadingComments = function(a, b) {
      if (a === null) {
        return null;
      }
      var c = a.hasLeadingComment() ? this.convertComments(a.leadingTrivia(), b) : null;

      var d = this.previousTokenTrailingComments;
      this.previousTokenTrailingComments = null;

      return this.mergeComments(d, c);
    };

    d.prototype.convertTokenTrailingComments = function(a, b) {
      return a === null || !a.hasTrailingComment() || a.hasTrailingNewLine() ? null : this.convertComments(a.trailingTrivia(),
        b);
    };

    d.prototype.convertNodeLeadingComments = function(a, b) {
      return this.convertTokenLeadingComments(a.firstToken(), b);
    };

    d.prototype.convertNodeTrailingComments = function(a, b) {
      return this.convertTokenTrailingComments(a.lastToken(), b + a.leadingTriviaWidth() + a.width());
    };

    d.prototype.visitToken = function(b) {
      this.assertElementAtPosition(b);
      var c = this.getAST(b);

      var d = this.position;
      if (c) {
        this.movePast(b);
      } else {
        if (b.kind() === 35) {
          c = new a.ThisExpression;
        } else if (b.kind() === 50) {
          c = new a.SuperExpression;
        } else if (b.kind() === 37) {
          c = new a.LiteralExpression(3);
        } else if (b.kind() === 24) {
          c = new a.LiteralExpression(4);
        } else if (b.kind() === 32) {
          c = new a.LiteralExpression(8);
        } else if (b.kind() === 14) {
          c = new a.StringLiteral(b.text(), b.valueText());
        } else if (b.kind() === 12) {
          c = new a.RegexLiteral(b.text());
        } else if (b.kind() === 13) {
          var e = this.convertTokenLeadingComments(b, d);

          var f = b.text().indexOf(".") > 0 ? parseFloat(b.text()) : parseInt(b.text());
          c = new a.NumberLiteral(f, b.text());

          c.preComments = e;
        } else {
          c = this.identifierFromToken(b, !1, !0);
        }
        this.movePast(b);
      }
      var g = d + b.leadingTriviaWidth();
      this.setAST(b, c);

      this.setSpanExplicit(c, g, g + b.width());

      return c;
    };

    d.prototype.getLeadingComments = function(a) {
      var b = a.firstToken();

      var c = [];
      if (b.hasLeadingComment()) {
        var d = b.leadingTrivia();
        for (var e = 0, f = d.count(); e < f; e++) {
          var g = d.syntaxTriviaAt(e);
          if (g.isComment()) {
            c.push(g);
          }
        }
      }
      return c;
    };

    d.prototype.hasTopLevelImportOrExport = function(b) {
      var c;
      for (var d = 0, e = b.moduleElements.childCount(); d < e; d++) {
        var f = b.moduleElements.childAt(d);
        c = f.firstToken();
        if (c !== null && c.kind() === 47) {
          return !0;
        }
        if (f.kind() === 133) {
          var g = f;
          if (g.moduleReference.kind() === 245) {
            return !0;
          }
        }
      }
      var h = this.getLeadingComments(b);
      for (var d = 0, e = h.length; d < e; d++) {
        var i = h[d];
        if (a.getImplicitImport(i.fullText())) {
          return !0;
        }
      }
      return !1;
    };

    d.prototype.getAmdDependency = function(a) {
      var b = /^\/\/\/\s*<amd-dependency\s+path=('|")(.+?)\1/gim;

      var c = b.exec(a);
      return c ? c[2] : null;
    };

    d.prototype.visitSourceUnit = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d;

      var e = this.visitSyntaxList(b.moduleElements);

      var f = null;
      if (this.hasTopLevelImportOrExport(b)) {
        var g = a.switchToForwardSlashes(this.fileName);

        var h = new a.Identifier(g);
        f = new a.ModuleDeclaration(h, e, null);

        this.setSpanExplicit(f, c, this.position);

        f.setModuleFlags(f.getModuleFlags() | 512);

        f.setModuleFlags(f.getModuleFlags() | 256);

        f.setModuleFlags(f.getModuleFlags() | 1);

        if (this.isParsingDeclareFile) {
          f.setModuleFlags(f.getModuleFlags() | 8);
        }

        f.prettyName = a.getPrettyName(g);
        var i = this.getLeadingComments(b);
        for (var j = 0, k = i.length; j < k; j++) {
          var l = i[j];

          var m = this.getAmdDependency(l.fullText());
          if (m) {
            f.amdDependencies.push(m);
          }
        }
        e = new a.ASTList;

        this.setSpanExplicit(e, c, this.position);

        e.append(f);
      }
      var n = new a.Script;
      this.setSpanExplicit(n, c, c + b.fullWidth());

      n.moduleElements = e;

      n.topLevelMod = f;

      n.isDeclareFile = this.isParsingDeclareFile;

      n.requiresExtendsBlock = this.requiresExtendsBlock;

      return n;
    };

    d.prototype.visitExternalModuleReference = function(a) {
      this.assertElementAtPosition(a);

      this.moveTo(a, a.stringLiteral);
      var b = this.identifierFromToken(a.stringLiteral, !1, !1);
      this.movePast(a.stringLiteral);

      this.movePast(a.closeParenToken);

      return b;
    };

    d.prototype.visitModuleNameModuleReference = function(a) {
      this.assertElementAtPosition(a);

      return a.moduleName.accept(this);
    };

    d.prototype.visitClassDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.identifier);
        var g = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);
        var h = b.typeParameterList === null ? null : b.typeParameterList.accept(this);

        var i = new a.ASTList;

        var j = new a.ASTList;
        for (var k = 0, l = b.heritageClauses.childCount(); k < l; k++) {
          var m = b.heritageClauses.childAt(k);
          if (m.extendsOrImplementsKeyword.tokenKind === 48) {
            i = m.accept(this);
          } else {
            a.Debug.assert(m.extendsOrImplementsKeyword.tokenKind === 51);
            j = m.accept(this);
          }
        }
        this.movePast(b.openBraceToken);
        var n = this.visitSyntaxList(b.classElements);

        var o = this.position;
        this.movePast(b.closeBraceToken);
        var p = new a.ASTSpan;
        this.setSpan(p, o, b.closeBraceToken);

        d = new a.ClassDeclaration(g, h, n, i, j);

        d.endingToken = p;

        d.preComments = e;

        d.postComments = f;
        for (var k = 0; k < n.members.length; k++) {
          var q = n.members[k];
          if (q.nodeType === 12) {
            var r = q;
            if (r.isConstructor) {
              r.classDecl = d;
              d.constructorDecl = r;
            }
          }
        }
      }
      this.requiresExtendsBlock = this.requiresExtendsBlock || d.extendsList.members.length > 0;

      !this.containingModuleHasExportAssignment && (a.SyntaxUtilities.containsToken(b.modifiers, 47) || this.isParsingAmbientModule) ?
        d.setVarFlags(d.getVarFlags() | 1) : d.setVarFlags(d.getVarFlags() & -2);

      a.SyntaxUtilities.containsToken(b.modifiers, 64) || this.isParsingAmbientModule || this.isParsingDeclareFile ?
        d.setVarFlags(d.getVarFlags() | 8) : d.setVarFlags(d.getVarFlags() & -9);

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitInterfaceDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.identifier);
        var g = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);
        var h = b.typeParameterList === null ? null : b.typeParameterList.accept(this);

        var i = null;
        for (var j = 0, k = b.heritageClauses.childCount(); j < k; j++) {
          var l = b.heritageClauses.childAt(j);
          if (j === 0) {
            i = l.accept(this);
          } else {
            this.movePast(l);
          }
        }
        this.movePast(b.body.openBraceToken);
        var m = this.visitSeparatedSyntaxList(b.body.typeMembers);
        this.movePast(b.body.closeBraceToken);

        d = new a.InterfaceDeclaration(g, h, m, i, null);

        d.preComments = e;

        d.postComments = f;
      }!this.containingModuleHasExportAssignment && (a.SyntaxUtilities.containsToken(b.modifiers, 47) || this.isParsingAmbientModule) ?
        d.setVarFlags(d.getVarFlags() | 1) : d.setVarFlags(d.getVarFlags() & -2);

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitHeritageClause = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        d = new a.ASTList;

        this.movePast(b.extendsOrImplementsKeyword);
        for (var e = 0, f = b.typeNames.childCount(); e < f; e++)
          if (e % 2 === 1) {
            this.movePast(b.typeNames.childAt(e));
          } else {
            var g = this.visitType(b.typeNames.childAt(e)).term;
            d.append(g);
          }
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.getModuleNames = function(a) {
      var b = [];
      a.stringLiteral !== null ? (b.push(this.identifierFromToken(a.stringLiteral, !1, !1)), this.movePast(a.stringLiteral)) :
        this.getModuleNamesHelper(a.moduleName, b);

      return b;
    };

    d.prototype.getModuleNamesHelper = function(a, b) {
      this.assertElementAtPosition(a);
      if (a.kind() === 122) {
        var c = a;
        this.getModuleNamesHelper(c.left, b);

        this.movePast(c.dotToken);

        b.push(this.identifierFromToken(c.right, !1, !1));

        this.movePast(c.right);
      } else {
        b.push(this.identifierFromToken(a, !1, !1));
        this.movePast(a);
      }
    };

    d.prototype.visitModuleDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.moduleKeyword);

        this.movePast(b.moduleKeyword);
        var g = this.getModuleNames(b);
        this.movePast(b.openBraceToken);
        var h = this.isParsingAmbientModule;
        if (a.SyntaxUtilities.containsToken(b.modifiers, 64) || this.isParsingDeclareFile) {
          this.isParsingAmbientModule = !0;
        }
        var i = this.containingModuleHasExportAssignment;
        this.containingModuleHasExportAssignment = a.ArrayUtilities.any(b.moduleElements.toArray(), function(a) {
          return a.kind() === 134;
        });
        var j = this.visitSyntaxList(b.moduleElements);
        this.isParsingAmbientModule = h;

        this.containingModuleHasExportAssignment = i;
        var k = this.position;
        this.movePast(b.closeBraceToken);
        var l = new a.ASTSpan;
        this.setSpan(l, k, b.closeBraceToken);
        for (var m = g.length - 1; m >= 0; m--) {
          var n = g[m];
          d = new a.ModuleDeclaration(n, j, l);

          this.setSpan(d, c, b);

          d.preComments = e;

          d.postComments = f;

          e = null;

          f = null;

          if (m) {
            d.setModuleFlags(d.getModuleFlags() | 1);
          } else {
            if (!this.containingModuleHasExportAssignment && (a.SyntaxUtilities.containsToken(b.modifiers, 47) ||
              this.isParsingAmbientModule)) {
              d.setModuleFlags(d.getModuleFlags() | 1);
            }
          }

          j = new a.ASTList;

          j.append(d);
        }
      }
      a.SyntaxUtilities.containsToken(b.modifiers, 64) || this.isParsingAmbientModule || this.isParsingDeclareFile ?
        d.setModuleFlags(d.getModuleFlags() | 8) : d.setModuleFlags(d.getModuleFlags() & -9);

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.hasDotDotDotParameter = function(a) {
      for (var b = 0, c = a.nonSeparatorCount(); b < c; b++)
        if (a.nonSeparatorAt(b).dotDotDotToken) {
          return !0;
        }
      return !1;
    };

    d.prototype.visitFunctionDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.identifier);
        var g = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);
        var h = b.callSignature.typeParameterList === null ? null : b.callSignature.typeParameterList.accept(this);

        var i = b.callSignature.parameterList.accept(this);

        var j = b.callSignature.typeAnnotation ? b.callSignature.typeAnnotation.accept(this) : null;

        var k = b.block ? b.block.accept(this) : null;
        this.movePast(b.semicolonToken);

        d = new a.FunctionDeclaration(g, k, !1, h, i, 12);

        d.preComments = e;

        d.postComments = f;

        d.variableArgList = this.hasDotDotDotParameter(b.callSignature.parameterList.parameters);

        d.returnTypeAnnotation = j;

        if (b.semicolonToken) {
          d.setFunctionFlags(d.getFunctionFlags() | 128);
        }
      }!this.containingModuleHasExportAssignment && (a.SyntaxUtilities.containsToken(b.modifiers, 47) || this.isParsingAmbientModule) ?
        d.setFunctionFlags(d.getFunctionFlags() | 1) : d.setFunctionFlags(d.getFunctionFlags() & -2);

      a.SyntaxUtilities.containsToken(b.modifiers, 64) || this.isParsingAmbientModule || this.isParsingDeclareFile ?
        d.setFunctionFlags(d.getFunctionFlags() | 8) : d.setFunctionFlags(d.getFunctionFlags() & -9);

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitEnumDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.convertNodeLeadingComments(b, c);

      var e = this.convertNodeTrailingComments(b, c);
      this.moveTo(b, b.identifier);
      var f = this.identifierFromToken(b.identifier, !1, !0);
      this.movePast(b.identifier);

      this.movePast(b.openBraceToken);
      var g = new a.ASTList;

      var h = null;

      var i = [];

      var j;
      for (var k = 0, l = b.enumElements.childCount(); k < l; k++)
        if (k % 2 === 1) {
          this.movePast(b.enumElements.childAt(k));
        } else {
          var m = b.enumElements.childAt(k);

          var n = null;
          j = this.identifierFromToken(m.propertyName, !1, !0);

          this.movePast(m.propertyName);

          if (m.equalsValueClause !== null) {
            n = m.equalsValueClause.accept(this);
            h = null;
          }
          var o = this.position;
          if (n === null)
            if (h === null) {
              n = new a.NumberLiteral(0, "0");
              h = n;
            } else {
              var p = h.value + 1;
              n = new a.NumberLiteral(p, p.toString());

              h = n;
            }
          var q = new a.VariableDeclarator(j);
          q.init = n;

          q.isImplicitlyInitialized = m.equalsValueClause === null;

          q.typeExpr = new a.TypeReference(this.createRef(f.actualText, -1), 0);

          q.setVarFlags(q.getVarFlags() | 256);

          this.setSpanExplicit(q, o, this.position);
          if (n.nodeType === 7) {
            q.setVarFlags(q.getVarFlags() | 4096);
          } else if (n.nodeType === 69) {
            var r = n;
            if (r.operand1.nodeType === 7 && r.operand2.nodeType === 7) {
              q.setVarFlags(q.getVarFlags() | 4096);
            }
          } else if (n.nodeType === 20) {
            var s = n;
            for (var t = 0; t < i.length; t++) {
              j = i[t];
              if (j.text === s.text) {
                q.setVarFlags(q.getVarFlags() | 4096);
                break;
              }
            }
          }
          var u = new a.ASTList;
          u.append(q);
          var v = new a.VariableDeclaration(u);
          this.setSpanExplicit(v, o, this.position);
          var w = new a.VariableStatement(v);
          w.setFlags(16);

          this.setSpanExplicit(w, o, this.position);

          g.append(w);

          i.push(j);

          q.setVarFlags(q.getVarFlags() | 1);
        }
      var x = this.position;
      this.movePast(b.closeBraceToken);
      var y = new a.ASTSpan;
      this.setSpan(y, x, b.closeBraceToken);
      var z = new a.ModuleDeclaration(f, g, y);
      this.setSpan(z, c, b);

      z.preComments = d;

      z.postComments = e;

      z.setModuleFlags(z.getModuleFlags() | 128);

      !this.containingModuleHasExportAssignment && (a.SyntaxUtilities.containsToken(b.modifiers, 47) || this.isParsingAmbientModule) &&
        z.setModuleFlags(z.getModuleFlags() | 1);

      return z;
    };

    d.prototype.visitEnumElement = function(b) {
      throw a.Errors.invalidOperation();
    };

    d.prototype.visitImportDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.identifier);
        var g = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);

        this.movePast(b.equalsToken);
        var h = b.moduleReference.accept(this);
        this.movePast(b.semicolonToken);

        d = new a.ImportDeclaration(g, h);

        d.preComments = e;

        d.postComments = f;

        d.isDynamicImport = b.moduleReference.kind() === 245;
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitExportAssignment = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.moveTo(b, b.identifier);
        var e = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);

        this.movePast(b.semicolonToken);

        d = new a.ExportAssignment(e);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitVariableStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = null;
      if (b.modifiers.childCount() > 0) {
        d = this.convertTokenLeadingComments(b.modifiers.firstToken(), c);
      }

      this.moveTo(b, b.variableDeclaration);
      var e = b.variableDeclaration.accept(this);
      this.movePast(b.semicolonToken);
      for (var f = 0, g = e.declarators.members.length; f < g; f++) {
        var h = e.declarators.members[f];
        if (f === 0) {
          h.preComments = this.mergeComments(d, h.preComments);
        }

        if (!this.containingModuleHasExportAssignment && (a.SyntaxUtilities.containsToken(b.modifiers, 47) || this.isParsingAmbientModule)) {
          h.setVarFlags(h.getVarFlags() | 1);
        } else {
          h.setVarFlags(h.getVarFlags() & -2);
        }

        if (a.SyntaxUtilities.containsToken(b.modifiers, 64) || this.isParsingAmbientModule || this.isParsingDeclareFile) {
          h.setVarFlags(h.getVarFlags() | 8);
        } else {
          h.setVarFlags(h.getVarFlags() & -9);
        }
      }
      var i = new a.VariableStatement(e);
      this.setSpan(i, c, b);

      return i;
    };

    d.prototype.visitVariableDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.convertNodeLeadingComments(b, c);

      var e = this.convertNodeTrailingComments(b, c);
      this.moveTo(b, b.variableDeclarators);
      var f = this.visitSeparatedSyntaxList(b.variableDeclarators);
      for (var g = 0; g < f.members.length; g++) {
        if (g === 0) {
          f.members[g].preComments = d;
          f.members[g].postComments = e;
        }
      }
      var h = new a.VariableDeclaration(f);
      this.setSpan(h, c, b);

      return h;
    };

    d.prototype.visitVariableDeclarator = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.identifierFromToken(b.identifier, !1, !0);
      this.movePast(b.identifier);
      var e = b.typeAnnotation ? b.typeAnnotation.accept(this) : null;

      var f = b.equalsValueClause ? b.equalsValueClause.accept(this) : null;

      var g = new a.VariableDeclarator(d);
      this.setSpan(g, c, b);

      g.typeExpr = e;

      g.init = f;
      if (f && f.nodeType === 12) {
        var h = f;
        h.hint = d.actualText;
      }
      return g;
    };

    d.prototype.visitEqualsValueClause = function(a) {
      this.assertElementAtPosition(a);

      this.previousTokenTrailingComments = this.convertTokenTrailingComments(a.equalsToken, this.position + a.equalsToken
        .leadingTriviaWidth() + a.equalsToken.width());

      this.movePast(a.equalsToken);
      var b = a.value.accept(this);
      this.previousTokenTrailingComments = null;

      return b;
    };

    d.prototype.getUnaryExpressionNodeType = function(b) {
      switch (b) {
        case 163:
          return 26;
        case 164:
          return 27;
        case 165:
          return 72;
        case 166:
          return 73;
        case 167:
          return 74;
        case 168:
          return 75;
        default:
          throw a.Errors.invalidOperation();
      }
    };

    d.prototype.visitPrefixUnaryExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.operatorToken);
        var e = b.operand.accept(this);
        d = new a.UnaryExpression(this.getUnaryExpressionNodeType(b.kind()), e);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.isOnSingleLine = function(a, b) {
      return this.lineMap.getLineNumberFromPosition(a) === this.lineMap.getLineNumberFromPosition(b);
    };

    d.prototype.visitArrayLiteralExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.position + b.openBracketToken.leadingTriviaWidth();
        this.movePast(b.openBracketToken);
        var f = this.visitSeparatedSyntaxList(b.expressions);

        var g = this.position + b.closeBracketToken.leadingTriviaWidth();
        this.movePast(b.closeBracketToken);

        a.Debug.assert(f !== null);

        d = new a.UnaryExpression(21, f);

        if (this.isOnSingleLine(e, g)) {
          d.setFlags(d.getFlags() | 2);
        }
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitOmittedExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      d ? this.movePast(b) : d = new a.OmittedExpression;

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitParenthesizedExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.openParenToken);
        var e = b.expression.accept(this);
        this.movePast(b.closeParenToken);

        d = new a.ParenthesizedExpression(e);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.getArrowFunctionStatements = function(b) {
      if (b.kind() === 145) {
        return b.accept(this);
      }
      var c = new a.ASTList;

      var d = b.accept(this);

      var e = new a.ReturnStatement(d);
      e.preComments = d.preComments;

      d.preComments = null;

      c.append(e);
      var f = new a.Block(c);
      f.closeBraceSpan = c.members[0];

      return f;
    };

    d.prototype.visitSimpleArrowFunctionExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);

        this.movePast(b.equalsGreaterThanToken);
        var f = new a.ASTList;

        var g = new a.Parameter(e);
        this.setSpanExplicit(g, e.minChar, e.limChar);

        f.append(g);
        var h = this.getArrowFunctionStatements(b.body);
        d = new a.FunctionDeclaration(null, h, !1, null, f, 12);

        d.returnTypeAnnotation = null;

        d.setFunctionFlags(d.getFunctionFlags() | 8192);

        d.setFunctionFlags(d.getFunctionFlags() | 2048);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitParenthesizedArrowFunctionExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = b.callSignature.typeParameterList === null ? null : b.callSignature.typeParameterList.accept(this);

        var g = b.callSignature.parameterList.accept(this);

        var h = b.callSignature.typeAnnotation ? b.callSignature.typeAnnotation.accept(this) : null;
        this.movePast(b.equalsGreaterThanToken);
        var i = this.getArrowFunctionStatements(b.body);
        d = new a.FunctionDeclaration(null, i, !1, f, g, 12);

        d.preComments = e;

        d.returnTypeAnnotation = h;

        d.setFunctionFlags(d.getFunctionFlags() | 8192);

        d.setFunctionFlags(d.getFunctionFlags() | 2048);

        d.variableArgList = this.hasDotDotDotParameter(b.callSignature.parameterList.parameters);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitType = function(b) {
      this.assertElementAtPosition(b);
      var c;
      if (b.isToken()) {
        var d = this.position;
        c = new a.TypeReference(b.accept(this), 0);

        this.setSpan(c, d, b);
      } else {
        c = b.accept(this);
      }
      a.Debug.assert(c.nodeType === 11);

      return c;
    };

    d.prototype.visitQualifiedName = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.visitType(b.left).term;
        this.movePast(b.dotToken);
        var f = this.identifierFromToken(b.right, !1, !0);
        this.movePast(b.right);
        var g = new a.BinaryExpression(32, e, f);
        this.setSpan(g, c, b);

        d = new a.TypeReference(g, 0);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitTypeArgumentList = function(b) {
      this.assertElementAtPosition(b);
      var c = new a.ASTList;
      this.movePast(b.lessThanToken);
      var d = this.position;
      for (var e = 0, f = b.typeArguments.childCount(); e < f; e++) {
        if (e % 2 === 1) {
          this.movePast(b.typeArguments.childAt(e));
        } else {
          c.append(this.visitType(b.typeArguments.childAt(e)));
        }
      }
      this.movePast(b.greaterThanToken);

      this.setSpan(c, d, b.typeArguments);

      return c;
    };

    d.prototype.visitConstructorType = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.newKeyword);
        var e = b.typeParameterList === null ? null : b.typeParameterList.accept(this);

        var f = b.parameterList.accept(this);
        this.movePast(b.equalsGreaterThanToken);
        var g = b.type ? this.visitType(b.type) : null;

        var h = new a.FunctionDeclaration(null, null, !1, e, f, 12);
        this.setSpan(h, c, b);

        h.returnTypeAnnotation = g;

        h.setFunctionFlags(h.getFunctionFlags() | 128);

        h.variableArgList = this.hasDotDotDotParameter(b.parameterList.parameters);

        h.setFunctionFlags(h.getFunctionFlags() | 1024);

        h.setFlags(h.getFlags() | 8);

        h.hint = "_construct";

        h.classDecl = null;

        d = new a.TypeReference(h, 0);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitFunctionType = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = b.typeParameterList === null ? null : b.typeParameterList.accept(this);

        var f = b.parameterList.accept(this);
        this.movePast(b.equalsGreaterThanToken);
        var g = b.type ? this.visitType(b.type) : null;

        var h = new a.FunctionDeclaration(null, null, !1, e, f, 12);
        this.setSpan(h, c, b);

        h.returnTypeAnnotation = g;

        h.setFlags(h.getFunctionFlags() | 128);

        h.setFlags(h.getFlags() | 8);

        h.variableArgList = this.hasDotDotDotParameter(b.parameterList.parameters);

        d = new a.TypeReference(h, 0);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitObjectType = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.openBraceToken);
        var e = this.visitSeparatedSyntaxList(b.typeMembers);
        this.movePast(b.closeBraceToken);
        var f = new a.InterfaceDeclaration(new a.Identifier("__anonymous"), null, e, null, null);
        this.setSpan(f, c, b);

        f.setFlags(f.getFlags() | 8);

        d = new a.TypeReference(f, 0);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitArrayType = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.visitType(b.type);
        this.movePast(b.openBracketToken);

        this.movePast(b.closeBracketToken);

        if (e.nodeType === 11) {
          d = e;
          d.arrayCount++;
        } else {
          d = new a.TypeReference(e, 1);
        }

        d.setFlags(d.getFlags() | 8);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitGenericType = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.visitType(b.name).term;

        var f = b.typeArgumentList.accept(this);

        var g = new a.GenericType(e, f);
        this.setSpan(g, c, b);

        g.setFlags(g.getFlags() | 8);

        d = new a.TypeReference(g, 0);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitTypeAnnotation = function(a) {
      this.assertElementAtPosition(a);

      this.movePast(a.colonToken);

      return this.visitType(a.type);
    };

    d.prototype.visitBlock = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.openBraceToken);
        var e = this.visitSyntaxList(b.statements);

        var f = this.position;
        this.movePast(b.closeBraceToken);
        var g = new a.ASTSpan;
        this.setSpan(g, f, b.closeBraceToken);

        d = new a.Block(e);

        d.closeBraceSpan = g;
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitParameter = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.identifier);
        var g = this.identifierFromToken(b.identifier, !! b.questionToken, !0);
        this.movePast(b.identifier);

        this.movePast(b.questionToken);
        var h = b.typeAnnotation ? b.typeAnnotation.accept(this) : null;

        var i = b.equalsValueClause ? b.equalsValueClause.accept(this) : null;
        d = new a.Parameter(g);

        d.preComments = e;

        d.postComments = f;

        d.isOptional = !! b.questionToken;

        d.init = i;

        d.typeExpr = h;

        if (b.publicOrPrivateKeyword) {
          d.setVarFlags(d.getVarFlags() | 256);
          if (b.publicOrPrivateKeyword.kind() === 57) {
            d.setVarFlags(d.getVarFlags() | 4);
          } else {
            d.setVarFlags(d.getVarFlags() | 2);
          }
        }

        if (b.equalsValueClause || b.dotDotDotToken) {
          d.setFlags(d.getFlags() | 4);
        }
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitMemberAccessExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = b.expression.accept(this);
        this.movePast(b.dotToken);
        var f = this.identifierFromToken(b.name, !1, !0);
        this.movePast(b.name);

        d = new a.BinaryExpression(32, e, f);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitPostfixUnaryExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = b.operand.accept(this);
        this.movePast(b.operatorToken);

        d = new a.UnaryExpression(b.kind() === 209 ? 76 : 77, e);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitElementAccessExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = b.expression.accept(this);
        this.movePast(b.openBracketToken);
        var f = b.argumentExpression.accept(this);
        this.movePast(b.closeBracketToken);

        d = new a.BinaryExpression(35, e, f);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.convertArgumentListArguments = function(a) {
      if (a === null) {
        return null;
      }
      var b = this.position;
      this.movePast(a.openParenToken);
      var c = this.visitSeparatedSyntaxList(a.arguments);
      if (a.arguments.fullWidth() === 0 && a.closeParenToken.fullWidth() === 0) {
        var d = b + a.openParenToken.leadingTriviaWidth() + a.openParenToken.width();
        this.setSpanExplicit(c, d, d + a.openParenToken.trailingTriviaWidth());
      }
      this.movePast(a.closeParenToken);

      return c;
    };

    d.prototype.visitInvocationExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = b.expression.accept(this);

        var f = b.argumentList.typeArgumentList !== null ? b.argumentList.typeArgumentList.accept(this) : null;

        var g = this.convertArgumentListArguments(b.argumentList);
        d = new a.CallExpression(36, e, f, g);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitArgumentList = function(b) {
      throw a.Errors.invalidOperation();
    };

    d.prototype.getBinaryExpressionNodeType = function(b) {
      switch (b.kind()) {
        case 172:
          return 25;
        case 173:
          return 38;
        case 174:
          return 39;
        case 175:
          return 40;
        case 176:
          return 42;
        case 177:
          return 41;
        case 178:
          return 43;
        case 179:
          return 44;
        case 180:
          return 45;
        case 181:
          return 46;
        case 182:
          return 47;
        case 183:
          return 48;
        case 184:
          return 49;
        case 186:
          return 51;
        case 187:
          return 52;
        case 188:
          return 53;
        case 189:
          return 54;
        case 190:
          return 55;
        case 191:
          return 56;
        case 192:
          return 57;
        case 193:
          return 58;
        case 194:
          return 59;
        case 195:
          return 60;
        case 196:
          return 62;
        case 197:
          return 61;
        case 198:
          return 63;
        case 199:
          return 33;
        case 200:
          return 31;
        case 201:
          return 69;
        case 202:
          return 70;
        case 203:
          return 71;
        case 204:
          return 66;
        case 205:
          return 67;
        case 206:
          return 68;
        case 207:
          return 64;
        case 208:
          return 65;
      }
      throw a.Errors.invalidOperation();
    };

    d.prototype.visitBinaryExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.getBinaryExpressionNodeType(b);

        var f = b.left.accept(this);
        this.movePast(b.operatorToken);
        var g = b.right.accept(this);
        d = new a.BinaryExpression(e, f, g);
        if (g.nodeType === 12) {
          var h = f.nodeType === 32 ? f.operand2 : f;

          var i = h.nodeType === 20 ? h.actualText : null;

          var j = g;
          j.hint = i;
        }
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitConditionalExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = b.condition.accept(this);
        this.movePast(b.questionToken);
        var f = b.whenTrue.accept(this);
        this.movePast(b.colonToken);
        var g = b.whenFalse.accept(this);
        d = new a.ConditionalExpression(e, f, g);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitConstructSignature = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);
        this.movePast(b.newKeyword);
        var f = b.callSignature.typeParameterList === null ? null : b.callSignature.typeParameterList.accept(this);

        var g = b.callSignature.parameterList.accept(this);

        var h = b.callSignature.typeAnnotation ? b.callSignature.typeAnnotation.accept(this) : null;
        d = new a.FunctionDeclaration(null, null, !1, f, g, 12);

        d.preComments = e;

        d.returnTypeAnnotation = h;

        d.hint = "_construct";

        d.setFunctionFlags(d.getFunctionFlags() | 1024);

        d.setFunctionFlags(d.getFunctionFlags() | 256);

        d.setFunctionFlags(d.getFunctionFlags() | 128);

        d.variableArgList = this.hasDotDotDotParameter(b.callSignature.parameterList.parameters);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitMethodSignature = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.identifierFromToken(b.propertyName, !! b.questionToken, !0);
        this.movePast(b.propertyName);

        this.movePast(b.questionToken);
        var g = b.callSignature.typeParameterList ? b.callSignature.typeParameterList.accept(this) : null;

        var h = b.callSignature.parameterList.accept(this);

        var i = b.callSignature.typeAnnotation ? b.callSignature.typeAnnotation.accept(this) : null;
        d = new a.FunctionDeclaration(f, null, !1, g, h, 12);

        d.preComments = e;

        d.variableArgList = this.hasDotDotDotParameter(b.callSignature.parameterList.parameters);

        d.returnTypeAnnotation = i;

        d.setFunctionFlags(d.getFunctionFlags() | 256);

        d.setFunctionFlags(d.getFunctionFlags() | 128);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitIndexSignature = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);
        this.movePast(b.openBracketToken);
        var f = b.parameter.accept(this);
        this.movePast(b.closeBracketToken);
        var g = b.typeAnnotation ? b.typeAnnotation.accept(this) : null;

        var h = new a.Identifier("__item");
        this.setSpanExplicit(h, c, c);
        var i = new a.ASTList;
        i.append(f);

        d = new a.FunctionDeclaration(h, null, !1, null, i, 12);

        d.preComments = e;

        d.variableArgList = !1;

        d.returnTypeAnnotation = g;

        d.setFunctionFlags(d.getFunctionFlags() | 4096);

        d.setFunctionFlags(d.getFunctionFlags() | 256);

        d.setFunctionFlags(d.getFunctionFlags() | 128);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitPropertySignature = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.identifierFromToken(b.propertyName, !! b.questionToken, !0);
        this.movePast(b.propertyName);

        this.movePast(b.questionToken);
        var g = b.typeAnnotation ? b.typeAnnotation.accept(this) : null;
        d = new a.VariableDeclarator(f);

        d.preComments = e;

        d.typeExpr = g;

        d.setVarFlags(d.getVarFlags() | 256);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitParameterList = function(a) {
      this.assertElementAtPosition(a);
      var b = this.position;

      var c = a.openParenToken;
      this.previousTokenTrailingComments = this.convertTokenTrailingComments(c, b + c.leadingTriviaWidth() + c.width());

      this.movePast(a.openParenToken);
      var d = this.visitSeparatedSyntaxList(a.parameters);
      this.movePast(a.closeParenToken);

      return d;
    };

    d.prototype.visitCallSignature = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = b.typeParameterList === null ? null : b.typeParameterList.accept(this);

        var g = b.parameterList.accept(this);

        var h = b.typeAnnotation ? b.typeAnnotation.accept(this) : null;
        d = new a.FunctionDeclaration(null, null, !1, f, g, 12);

        d.preComments = e;

        d.variableArgList = this.hasDotDotDotParameter(b.parameterList.parameters);

        d.returnTypeAnnotation = h;

        d.hint = "_call";

        d.setFunctionFlags(d.getFunctionFlags() | 512);

        d.setFunctionFlags(d.getFunctionFlags() | 256);

        d.setFunctionFlags(d.getFunctionFlags() | 128);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitTypeParameterList = function(a) {
      this.assertElementAtPosition(a);

      this.movePast(a.lessThanToken);
      var b = this.visitSeparatedSyntaxList(a.typeParameters);
      this.movePast(a.greaterThanToken);

      return b;
    };

    d.prototype.visitTypeParameter = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);
        var f = b.constraint ? b.constraint.accept(this) : null;
        d = new a.TypeParameter(e, f);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitConstraint = function(a) {
      this.assertElementAtPosition(a);

      this.movePast(a.extendsKeyword);

      return this.visitType(a.type);
    };

    d.prototype.visitIfStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.moveTo(b, b.condition);
        var e = b.condition.accept(this);
        this.movePast(b.closeParenToken);
        var f = b.statement.accept(this);

        var g = b.elseClause ? b.elseClause.accept(this) : null;
        d = new a.IfStatement(e, f, g);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitElseClause = function(a) {
      this.assertElementAtPosition(a);

      this.movePast(a.elseKeyword);

      return a.statement.accept(this);
    };

    d.prototype.visitExpressionStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);

        var g = b.expression.accept(this);
        this.movePast(b.semicolonToken);

        d = new a.ExpressionStatement(g);

        d.preComments = e;

        d.postComments = f;
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitConstructorDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.parameterList);
        var g = b.parameterList.accept(this);

        var h = b.block ? b.block.accept(this) : null;
        this.movePast(b.semicolonToken);

        d = new a.FunctionDeclaration(null, h, !0, null, g, 12);

        d.preComments = e;

        d.postComments = f;

        d.variableArgList = this.hasDotDotDotParameter(b.parameterList.parameters);

        if (b.semicolonToken) {
          d.setFunctionFlags(d.getFunctionFlags() | 128);
        }
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitMemberFunctionDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.propertyName);
        var g = this.identifierFromToken(b.propertyName, !1, !0);
        this.movePast(b.propertyName);
        var h = b.callSignature.typeParameterList === null ? null : b.callSignature.typeParameterList.accept(this);

        var i = b.callSignature.parameterList.accept(this);

        var j = b.callSignature.typeAnnotation ? b.callSignature.typeAnnotation.accept(this) : null;

        var k = b.block ? b.block.accept(this) : null;
        this.movePast(b.semicolonToken);

        d = new a.FunctionDeclaration(g, k, !1, h, i, 12);

        d.preComments = e;

        d.postComments = f;

        d.variableArgList = this.hasDotDotDotParameter(b.callSignature.parameterList.parameters);

        d.returnTypeAnnotation = j;

        if (b.semicolonToken) {
          d.setFunctionFlags(d.getFunctionFlags() | 128);
        }

        if (a.SyntaxUtilities.containsToken(b.modifiers, 55)) {
          d.setFunctionFlags(d.getFunctionFlags() | 2);
        } else {
          d.setFunctionFlags(d.getFunctionFlags() | 4);
        }

        if (a.SyntaxUtilities.containsToken(b.modifiers, 58)) {
          d.setFunctionFlags(d.getFunctionFlags() | 16);
        }

        d.setFunctionFlags(d.getFunctionFlags() | 256);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitMemberAccessorDeclaration = function(b, c) {
      this.assertElementAtPosition(b);
      var d = this.position;

      var e = this.getAST(b);
      if (e) {
        this.movePast(b);
      } else {
        var f = this.convertNodeLeadingComments(b, d);

        var g = this.convertNodeTrailingComments(b, d);
        this.moveTo(b, b.propertyName);
        var h = this.identifierFromToken(b.propertyName, !1, !0);
        this.movePast(b.propertyName);
        var i = b.parameterList.accept(this);

        var j = c ? c.accept(this) : null;

        var k = b.block ? b.block.accept(this) : null;
        e = new a.FunctionDeclaration(h, k, !1, null, i, 12);

        e.preComments = f;

        e.postComments = g;

        e.variableArgList = this.hasDotDotDotParameter(b.parameterList.parameters);

        e.returnTypeAnnotation = j;

        if (a.SyntaxUtilities.containsToken(b.modifiers, 55)) {
          e.setFunctionFlags(e.getFunctionFlags() | 2);
        } else {
          e.setFunctionFlags(e.getFunctionFlags() | 4);
        }

        if (a.SyntaxUtilities.containsToken(b.modifiers, 58)) {
          e.setFunctionFlags(e.getFunctionFlags() | 16);
        }

        e.setFunctionFlags(e.getFunctionFlags() | 256);
      }
      this.setAST(b, e);

      this.setSpan(e, d, b);

      return e;
    };

    d.prototype.visitGetMemberAccessorDeclaration = function(a) {
      this.assertElementAtPosition(a);
      var b = this.visitMemberAccessorDeclaration(a, a.typeAnnotation);
      b.setFunctionFlags(b.getFunctionFlags() | 32);

      b.hint = "get" + b.name.actualText;

      return b;
    };

    d.prototype.visitSetMemberAccessorDeclaration = function(a) {
      this.assertElementAtPosition(a);
      var b = this.visitMemberAccessorDeclaration(a, null);
      b.setFunctionFlags(b.getFunctionFlags() | 64);

      b.hint = "set" + b.name.actualText;

      return b;
    };

    d.prototype.visitMemberVariableDeclaration = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.moveTo(b, b.variableDeclarator);

        this.moveTo(b.variableDeclarator, b.variableDeclarator.identifier);
        var g = this.identifierFromToken(b.variableDeclarator.identifier, !1, !0);
        this.movePast(b.variableDeclarator.identifier);
        var h = b.variableDeclarator.typeAnnotation ? b.variableDeclarator.typeAnnotation.accept(this) : null;

        var i = b.variableDeclarator.equalsValueClause ? b.variableDeclarator.equalsValueClause.accept(this) : null;
        this.movePast(b.semicolonToken);

        d = new a.VariableDeclarator(g);

        d.preComments = e;

        d.postComments = f;

        d.typeExpr = h;

        d.init = i;

        if (a.SyntaxUtilities.containsToken(b.modifiers, 58)) {
          d.setVarFlags(d.getVarFlags() | 16);
        }

        if (a.SyntaxUtilities.containsToken(b.modifiers, 55)) {
          d.setVarFlags(d.getVarFlags() | 2);
        } else {
          d.setVarFlags(d.getVarFlags() | 4);
        }

        d.setVarFlags(d.getVarFlags() | 2048);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitThrowStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.throwKeyword);
        var e = b.expression.accept(this);
        this.movePast(b.semicolonToken);

        d = new a.ThrowStatement(e);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitReturnStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.convertNodeTrailingComments(b, c);
        this.movePast(b.returnKeyword);
        var g = b.expression ? b.expression.accept(this) : null;
        this.movePast(b.semicolonToken);

        d = new a.ReturnStatement(g);

        d.preComments = e;

        d.postComments = f;
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitObjectCreationExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.newKeyword);
        var e = b.expression.accept(this);

        var f = b.argumentList === null || b.argumentList.typeArgumentList === null ? null : b.argumentList.typeArgumentList
          .accept(this);

        var g = this.convertArgumentListArguments(b.argumentList);
        d = new a.CallExpression(37, e, f, g);
        if (e.nodeType === 11) {
          var h = e;
          if (h.arrayCount === 0) {
            var i = h.term;
            if (i.nodeType === 32 || i.nodeType === 20) {
              e = i;
            }
          }
        }
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitSwitchStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.switchKeyword);

        this.movePast(b.openParenToken);
        var e = b.expression.accept(this);
        this.movePast(b.closeParenToken);
        var f = this.position;
        this.movePast(b.openBraceToken);

        d = new a.SwitchStatement(e);

        d.statement.minChar = c;

        d.statement.limChar = f;

        d.caseList = new a.ASTList;
        for (var g = 0, h = b.switchClauses.childCount(); g < h; g++) {
          var i = b.switchClauses.childAt(g);

          var j = i.accept(this);
          if (i.kind() === 232) {
            d.defaultCase = j;
          }

          d.caseList.append(j);
        }
        this.movePast(b.closeBraceToken);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitCaseSwitchClause = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.caseKeyword);
        var e = b.expression.accept(this);
        this.movePast(b.colonToken);
        var f = this.visitSyntaxList(b.statements);
        d = new a.CaseClause;

        d.expr = e;

        d.body = f;
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitDefaultSwitchClause = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.defaultKeyword);

        this.movePast(b.colonToken);
        var e = this.visitSyntaxList(b.statements);
        d = new a.CaseClause;

        d.body = e;
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitBreakStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      d ? this.movePast(b) : (this.movePast(b.breakKeyword), this.movePast(b.identifier), this.movePast(b.semicolonToken),
        d = new a.Jump(82), b.identifier !== null && (d.target = b.identifier.valueText()));

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitContinueStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      d ? this.movePast(b) : (this.movePast(b.continueKeyword), this.movePast(b.identifier), this.movePast(b.semicolonToken),
        d = new a.Jump(83), b.identifier !== null && (d.target = b.identifier.valueText()));

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitForStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.forKeyword);

        this.movePast(b.openParenToken);
        var e = b.variableDeclaration ? b.variableDeclaration.accept(this) : b.initializer ? b.initializer.accept(
          this) : null;
        this.movePast(b.firstSemicolonToken);
        var f = b.condition ? b.condition.accept(this) : null;
        this.movePast(b.secondSemicolonToken);
        var g = b.incrementor ? b.incrementor.accept(this) : null;
        this.movePast(b.closeParenToken);
        var h = b.statement.accept(this);
        d = new a.ForStatement(e, f, g, h);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitForInStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.forKeyword);

        this.movePast(b.openParenToken);
        var e = b.variableDeclaration ? b.variableDeclaration.accept(this) : b.left.accept(this);
        this.movePast(b.inKeyword);
        var f = b.expression.accept(this);
        this.movePast(b.closeParenToken);
        var g = b.statement.accept(this);
        d = new a.ForInStatement(e, f, g);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitWhileStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.moveTo(b, b.condition);
        var e = b.condition.accept(this);
        this.movePast(b.closeParenToken);
        var f = b.statement.accept(this);
        d = new a.WhileStatement(e, f);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitWithStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.moveTo(b, b.condition);
        var e = b.condition.accept(this);
        this.movePast(b.closeParenToken);
        var f = b.statement.accept(this);
        d = new a.WithStatement(e, f);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitCastExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.lessThanToken);
        var e = this.visitType(b.type);
        this.movePast(b.greaterThanToken);
        var f = b.expression.accept(this);
        d = new a.UnaryExpression(78, f);

        d.castTerm = e;
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitObjectLiteralExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = this.position + b.openBraceToken.leadingTriviaWidth();
        this.movePast(b.openBraceToken);
        var g = this.visitSeparatedSyntaxList(b.propertyAssignments);

        var h = this.position + b.closeBraceToken.leadingTriviaWidth();
        this.movePast(b.closeBraceToken);

        d = new a.UnaryExpression(22, g);

        d.preComments = e;

        if (this.isOnSingleLine(f, h)) {
          d.setFlags(d.getFlags() | 2);
        }
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitSimplePropertyAssignment = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);

        var f = b.propertyName.accept(this);
        this.previousTokenTrailingComments = this.convertTokenTrailingComments(b.colonToken, this.position + b.colonToken
          .leadingTriviaWidth() + b.colonToken.width());

        this.movePast(b.colonToken);
        var g = b.expression.accept(this);
        d = new a.BinaryExpression(80, f, g);

        d.preComments = e;
        if (g.nodeType === 12) {
          var h = g;
          h.hint = f.text;
        }
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitFunctionPropertyAssignment = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = b.propertyName.accept(this);

        var f = b.callSignature.accept(this);

        var g = b.block.accept(this);
        f.hint = e.text;

        f.block = g;

        f.setFunctionFlags(16384);

        d = new a.BinaryExpression(80, e, f);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitGetAccessorPropertyAssignment = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.moveTo(b, b.propertyName);
        var e = this.identifierFromToken(b.propertyName, !1, !0);

        var f = this.identifierFromToken(b.propertyName, !1, !0);
        this.movePast(b.propertyName);

        this.movePast(b.openParenToken);

        this.movePast(b.closeParenToken);
        var g = b.typeAnnotation ? b.typeAnnotation.accept(this) : null;

        var h = b.block ? b.block.accept(this) : null;

        var i = new a.FunctionDeclaration(f, h, !1, null, new a.ASTList, 12);
        this.setSpan(i, c, b);

        i.setFunctionFlags(i.getFunctionFlags() | 32);

        i.setFunctionFlags(i.getFunctionFlags() | 8192);

        i.hint = "get" + b.propertyName.valueText();

        i.returnTypeAnnotation = g;

        d = new a.BinaryExpression(80, e, i);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitSetAccessorPropertyAssignment = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.moveTo(b, b.propertyName);
        var e = this.identifierFromToken(b.propertyName, !1, !0);

        var f = this.identifierFromToken(b.propertyName, !1, !0);
        this.movePast(b.propertyName);

        this.movePast(b.openParenToken);
        var g = b.parameter.accept(this);
        this.movePast(b.closeParenToken);
        var h = new a.ASTList;
        h.append(g);
        var i = b.block ? b.block.accept(this) : null;

        var j = new a.FunctionDeclaration(f, i, !1, null, h, 12);
        this.setSpan(j, c, b);

        j.setFunctionFlags(j.getFunctionFlags() | 64);

        j.setFunctionFlags(j.getFunctionFlags() | 8192);

        j.hint = "set" + b.propertyName.valueText();

        d = new a.BinaryExpression(80, e, j);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitFunctionExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.convertNodeLeadingComments(b, c);
        this.movePast(b.functionKeyword);
        var f = b.identifier === null ? null : this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);
        var g = b.callSignature.typeParameterList === null ? null : b.callSignature.typeParameterList.accept(this);

        var h = b.callSignature.parameterList.accept(this);

        var i = b.callSignature.typeAnnotation ? b.callSignature.typeAnnotation.accept(this) : null;

        var j = b.block ? b.block.accept(this) : null;
        d = new a.FunctionDeclaration(f, j, !1, g, h, 12);

        d.preComments = e;

        d.variableArgList = this.hasDotDotDotParameter(b.callSignature.parameterList.parameters);

        d.returnTypeAnnotation = i;

        d.setFunctionFlags(d.getFunctionFlags() | 8192);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitEmptyStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      d ? this.movePast(b) : (this.movePast(b.semicolonToken), d = new a.EmptyStatement);

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitTryStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.tryKeyword);
        var e = b.block.accept(this);

        var f = null;
        if (b.catchClause !== null) {
          f = b.catchClause.accept(this);
        }
        var g = null;
        if (b.finallyClause !== null) {
          g = b.finallyClause.accept(this);
        }

        d = new a.TryStatement(e, f, g);
      }
      a.Debug.assert(d !== null);

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitCatchClause = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.catchKeyword);

        this.movePast(b.openParenToken);
        var e = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);
        var f = b.typeAnnotation ? b.typeAnnotation.accept(this) : null;
        this.movePast(b.closeParenToken);
        var g = b.block.accept(this);

        var h = new a.VariableDeclarator(e);
        this.setSpanExplicit(h, e.minChar, e.limChar);

        h.typeExpr = f;

        d = new a.CatchClause(h, g);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitFinallyClause = function(a) {
      this.movePast(a.finallyKeyword);

      return a.block.accept(this);
    };

    d.prototype.visitLabeledStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        var e = this.identifierFromToken(b.identifier, !1, !0);
        this.movePast(b.identifier);

        this.movePast(b.colonToken);
        var f = b.statement.accept(this);
        d = new a.LabeledStatement(e, f);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitDoStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.doKeyword);
        var e = b.statement.accept(this);

        var f = new a.ASTSpan;
        this.setSpan(f, this.position, b.whileKeyword);

        this.movePast(b.whileKeyword);

        this.movePast(b.openParenToken);
        var g = b.condition.accept(this);
        this.movePast(b.closeParenToken);

        this.movePast(b.semicolonToken);

        d = new a.DoStatement(e, g);

        d.whileSpan = f;
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitTypeOfExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.typeOfKeyword);
        var e = b.expression.accept(this);
        d = new a.UnaryExpression(34, e);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitDeleteExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.deleteKeyword);
        var e = b.expression.accept(this);
        d = new a.UnaryExpression(28, e);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitVoidExpression = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      if (d) {
        this.movePast(b);
      } else {
        this.movePast(b.voidKeyword);
        var e = b.expression.accept(this);
        d = new a.UnaryExpression(24, e);
      }
      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.prototype.visitDebuggerStatement = function(b) {
      this.assertElementAtPosition(b);
      var c = this.position;

      var d = this.getAST(b);
      d ? this.movePast(b) : (this.movePast(b.debuggerKeyword), this.movePast(b.semicolonToken), d = new a.DebuggerStatement);

      this.setAST(b, d);

      this.setSpan(d, c, b);

      return d;
    };

    d.checkPositions = !1;

    d.protoString = "__proto__";

    d.protoSubstitutionString = "#__proto__";

    return d;
  }();
  a.SyntaxTreeToAstVisitor = d;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  var b = function() {
    function b(b, c, d, e, f, g, h) {
      this.fileName = b;

      this.compilationSettings = c;

      this.scriptSnapshot = d;

      this.byteOrderMark = e;

      this.version = f;

      this.isOpen = g;

      this._diagnostics = null;

      this._syntaxTree = null;

      this._bloomFilter = null;

      if (g) {
        this._syntaxTree = h;
      } else {
        this._diagnostics = h.diagnostics();
      }
      var i = new a.BlockIntrinsics;

      var j = new a.IdentifierWalker(i);
      h.sourceUnit().accept(j);
      var k = 0;
      for (var l in i) {
        k++;
      }
      this._bloomFilter = new a.BloomFilter(k);

      this._bloomFilter.addKeys(i);

      this.lineMap = h.lineMap();

      this.script = a.SyntaxTreeToAstVisitor.visit(h, b, c);
    }
    b.prototype.diagnostics = function() {
      this._diagnostics === null && (this._diagnostics = this._syntaxTree.diagnostics());

      return this._diagnostics;
    };

    b.prototype.syntaxTree = function() {
      return this._syntaxTree ? this._syntaxTree : a.Parser.parse(this.fileName, a.SimpleText.fromScriptSnapshot(this
        .scriptSnapshot), a.isDTSFile(this.fileName), this.compilationSettings.codeGenTarget, a.getParseOptions(
        this.compilationSettings));
    };

    b.prototype.bloomFilter = function() {
      return this._bloomFilter;
    };

    b.prototype.update = function(c, d, e, f, g) {
      var h = this.script;

      var i = this._syntaxTree;

      var j = a.SimpleText.fromScriptSnapshot(c);

      var k = f === null || i === null ? a.Parser.parse(this.fileName, j, a.isDTSFile(this.fileName), g.codeGenTarget,
        a.getParseOptions(this.compilationSettings)) : a.Parser.incrementalParse(i, f, j);
      return new b(this.fileName, this.compilationSettings, c, this.byteOrderMark, d, e, k);
    };

    b.create = function(c, d, e, f, g, h, i) {
      var j = a.Parser.parse(c, a.SimpleText.fromScriptSnapshot(d), a.isDTSFile(c), i.codeGenTarget, a.getParseOptions(
        i));

      var k = new b(c, i, d, e, f, g, j);
      k.script.referencedFiles = h;

      return k;
    };

    return b;
  }();
  a.Document = b;

  a.globalSemanticInfoChain = null;

  a.globalBinder = null;

  a.globalLogger = null;
  var c = function() {
    function c(b, c, d) {
      if (typeof b == "undefined") {
        b = new a.NullLogger;
      }

      if (typeof c == "undefined") {
        c = new a.CompilationSettings;
      }

      if (typeof d == "undefined") {
        d = null;
      }

      this.logger = b;

      this.settings = c;

      this.diagnosticMessages = d;

      this.pullTypeChecker = null;

      this.semanticInfoChain = null;

      this.fileNameToDocument = new a.StringHashTable;

      this.emitOptions = new a.EmitOptions(this.settings);

      a.globalLogger = b;

      if (this.diagnosticMessages) {
        a.diagnosticMessages = this.diagnosticMessages;
      }
    }
    c.prototype.getDocument = function(a) {
      return this.fileNameToDocument.lookup(a);
    };

    c.prototype.timeFunction = function(b, c) {
      return a.timeFunction(this.logger, b, c);
    };

    c.prototype.addSourceUnit = function(a, c, d, e, f, g) {
      if (typeof g == "undefined") {
        g = [];
      }
      var h = this;
      return this.timeFunction("addSourceUnit(" + a + ")", function() {
        var i = b.create(a, c, d, e, f, g, h.emitOptions.compilationSettings);
        h.fileNameToDocument.addOrUpdate(a, i);

        return i;
      });
    };

    c.prototype.updateSourceUnit = function(a, b, c, d, e) {
      var f = this;
      return this.timeFunction("pullUpdateUnit(" + a + ")", function() {
        var g = f.getDocument(a);

        var h = g.update(b, c, d, e, f.settings);
        f.fileNameToDocument.addOrUpdate(a, h);

        f.pullUpdateScript(g, h);

        return h;
      });
    };

    c.prototype.isDynamicModuleCompilation = function() {
      var a = this.fileNameToDocument.getAllKeys();
      for (var b = 0, c = a.length; b < c; b++) {
        var d = this.getDocument(a[b]);

        var e = d.script;
        if (!e.isDeclareFile && e.topLevelMod !== null) {
          return !0;
        }
      }
      return !1;
    };

    c.prototype.updateCommonDirectoryPath = function() {
      var b = [];

      var c = -1;

      var d = this.fileNameToDocument.getAllKeys();
      for (var e = 0, f = d.length; e < f; e++) {
        var g = d[e];

        var h = this.getDocument(d[e]);

        var i = h.script;
        if (!i.isDeclareFile) {
          var j = a.filePathComponents(g);
          if (c === -1) {
            b = j;
            c = b.length;
          } else {
            var k = !1;
            for (var l = 0; l < c && l < j.length; l++)
              if (b[l] !== j[l]) {
                c = l;

                k = !0;
                if (l === 0) {
                  return new a.Diagnostic(null, 0, 0, 273, null);
                }
                break;
              }
            if (!k && j.length < c) {
              c = j.length;
            }
          }
        }
      }
      this.emitOptions.commonDirectoryPath = b.slice(0, c).join("/") + "/";

      this.emitOptions.compilationSettings.outputOption.charAt(this.emitOptions.compilationSettings.outputOption.length -
        1) !== "/" && (this.emitOptions.compilationSettings.outputOption += "/");

      return null;
    };

    c.prototype.parseEmitOption = function(b) {
      this.emitOptions.ioHost = b;

      return this.emitOptions.compilationSettings.outputOption === "" ? (this.emitOptions.outputMany = !0, this.emitOptions
        .commonDirectoryPath = "", null) : (this.emitOptions.compilationSettings.outputOption = a.switchToForwardSlashes(
          this.emitOptions.ioHost.resolvePath(this.emitOptions.compilationSettings.outputOption)), this.emitOptions.ioHost
        .directoryExists(this.emitOptions.compilationSettings.outputOption) ? this.emitOptions.outputMany = !0 : this
        .emitOptions.ioHost.fileExists(this.emitOptions.compilationSettings.outputOption) ? this.emitOptions.outputMany = !
        1 : this.emitOptions.outputMany = !a.isJSFile(this.emitOptions.compilationSettings.outputOption), this.isDynamicModuleCompilation() && !
        this.emitOptions.outputMany ? new a.Diagnostic(null, 0, 0, 274, null) : this.emitOptions.outputMany ? this.updateCommonDirectoryPath() :
        null);
    };

    c.prototype.getScripts = function() {
      var a = [];

      var b = this.fileNameToDocument.getAllKeys();
      for (var c = 0, d = b.length; c < d; c++) {
        var e = this.getDocument(b[c]);
        a.push(e.script);
      }
      return a;
    };

    c.prototype.writeByteOrderMarkForDocument = function(a) {
      if (this.emitOptions.outputMany) {
        return a.byteOrderMark !== 0;
      }
      var b = this.fileNameToDocument.getAllKeys();
      for (var c = 0, d = b.length; c < d; c++) {
        var a = this.getDocument(b[c]);
        if (a.byteOrderMark !== 0) {
          return !0;
        }
      }
      return !1;
    };

    c.mapToDTSFileName = function(b, c) {
      return a.getDeclareFilePath(b);
    };

    c.prototype.canEmitDeclarations = function(a) {
      return this.settings.generateDeclarationFiles ? !a || !a.isDeclareFile && a.moduleElements !== null ? !0 : !1 : !
        1;
    };

    c.prototype.emitDeclarations = function(b, d) {
      var e = b.script;
      if (this.canEmitDeclarations(e)) {
        if (!d) {
          var f = this.emitOptions.mapOutputFileName(b.fileName, c.mapToDTSFileName);
          d = new a.DeclarationEmitter(f, this.semanticInfoChain, this.emitOptions, b.byteOrderMark !== 0);
        }
        d.fileName = b.fileName;

        d.emitDeclarations(e);
      }
      return d;
    };

    c.prototype.emitAllDeclarations = function() {
      if (this.canEmitDeclarations()) {
        var b = null;

        var c = this.fileNameToDocument.getAllKeys();
        for (var d = 0, e = c.length; d < e; d++) {
          var f = c[d];
          try {
            var g = this.getDocument(c[d]);
            if (this.emitOptions.outputMany) {
              var h = this.emitDeclarations(g);
              if (h) {
                h.close();
              }
            } else {
              b = this.emitDeclarations(g, b);
            }
          } catch (i) {
            return a.Emitter.handleEmitterError(f, i);
          }
        }
        if (b) try {
          b.close();
        } catch (j) {
          return a.Emitter.handleEmitterError(b.fileName, j);
        }
      }
      return [];
    };

    c.prototype.emitUnitDeclarations = function(b) {
      if (this.canEmitDeclarations()) {
        if (!this.emitOptions.outputMany) {
          return this.emitAllDeclarations();
        }
        try {
          var c = this.getDocument(b);

          var d = this.emitDeclarations(c);
          if (d) {
            d.close();
          }
        } catch (e) {
          return a.Emitter.handleEmitterError(b, e);
        }
      }
      return [];
    };

    c.mapToFileNameExtension = function(a, b, c) {
      if (c) {
        return b;
      }
      var d = b.split(".");
      d.pop();

      return d.join(".") + a;
    };

    c.mapToJSFileName = function(a, b) {
      return c.mapToFileNameExtension(".js", a, b);
    };

    c.prototype.emit = function(b, d, e) {
      var f = b.script;
      if (!f.isDeclareFile) {
        var g = b.fileName;
        if (!e) {
          var h = this.emitOptions.mapOutputFileName(g, c.mapToJSFileName);

          var i = this.createFile(h, this.writeByteOrderMarkForDocument(b));
          e = new a.Emitter(h, i, this.emitOptions, this.semanticInfoChain);
          if (this.settings.mapSourceFiles) {
            var j = h + a.SourceMapper.MapFileExtension;
            e.setSourceMappings(new a.SourceMapper(g, h, j, i, this.createFile(j, !1), this.settings.emitFullSourceMapPath));
          }
          if (d) {
            d(g, h);
          }
        } else {
          if (this.settings.mapSourceFiles) {
            e.setSourceMappings(new a.SourceMapper(g, e.emittingFileName, e.sourceMapper.sourceMapFileName, e.outfile,
              e.sourceMapper.sourceMapOut, this.settings.emitFullSourceMapPath));
          }
        }
        e.setDocument(b);

        e.emitJavascript(f, !1);
      }
      return e;
    };

    c.prototype.emitAll = function(b, c) {
      var d = this.parseEmitOption(b);
      if (d) {
        return [d];
      }
      var e = (new Date).getTime();

      var f = this.fileNameToDocument.getAllKeys();

      var g = null;
      for (var h = 0, i = f.length; h < i; h++) {
        var j = f[h];

        var k = this.getDocument(j);
        try {
          if (this.emitOptions.outputMany) {
            var l = this.emit(k, c);
            if (l) {
              l.emitSourceMapsAndClose();
            }
          } else {
            g = this.emit(k, c, g);
          }
        } catch (m) {
          return a.Emitter.handleEmitterError(j, m);
        }
      }
      this.logger.log("Emit: " + ((new Date).getTime() - e));
      if (g) try {
        g.emitSourceMapsAndClose();
      } catch (n) {
        return a.Emitter.handleEmitterError(g.document.fileName, n);
      }
      return [];
    };

    c.prototype.emitUnit = function(b, c, d) {
      var e = this.parseEmitOption(c);
      if (e) {
        return [e];
      }
      if (this.emitOptions.outputMany) {
        var f = this.getDocument(b);
        try {
          var g = this.emit(f, d);
          if (g) {
            g.emitSourceMapsAndClose();
          }
        } catch (h) {
          return a.Emitter.handleEmitterError(b, h);
        }
        return [];
      }
      return this.emitAll(c, d);
    };

    c.prototype.createFile = function(b, c) {
      return new a.TextWriter(this.emitOptions.ioHost, b, c);
    };

    c.prototype.getSyntacticDiagnostics = function(a) {
      return this.getDocument(a).diagnostics();
    };

    c.prototype.getSyntaxTree = function(a) {
      return this.getDocument(a).syntaxTree();
    };

    c.prototype.getScript = function(a) {
      return this.getDocument(a).script;
    };

    c.prototype.getSemanticDiagnostics = function(b) {
      var c = [];

      var d = this.semanticInfoChain.getUnit(b);
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      if (d) {
        var e = this.getDocument(b);

        var f = e.script;
        if (f) {
          this.pullTypeChecker.typeCheckScript(f, b, this);
          d.getDiagnostics(c);
        }
      }
      return c;
    };

    c.prototype.pullTypeCheck = function() {
      var b = this;
      return this.timeFunction("pullTypeCheck()", function() {
        b.semanticInfoChain = new a.SemanticInfoChain;

        a.globalSemanticInfoChain = b.semanticInfoChain;

        b.pullTypeChecker = new a.PullTypeChecker(b.settings, b.semanticInfoChain);
        var c = null;

        var d;

        var e;

        var f = (new Date).getTime();

        var g = b.fileNameToDocument.getAllKeys();
        for (var d = 0, e = g.length; d < e; d++) {
          var h = g[d];

          var i = b.getDocument(h);

          var j = new a.SemanticInfo(h);
          c = new a.DeclCollectionContext(j);

          c.scriptName = h;

          a.getAstWalkerFactory().walk(i.script, a.preCollectDecls, a.postCollectDecls, null, c);

          j.addTopLevelDecl(c.getParent());

          b.semanticInfoChain.addUnit(j);
        }
        var k = (new Date).getTime();

        var l = (new Date).getTime();

        var m = new a.PullSymbolBinder(b.semanticInfoChain);
        a.globalBinder = m;
        var n = (new Date).getTime();
        b.logger.log("Decl creation: " + (k - f));

        b.logger.log("Binding: " + (n - l));

        b.logger.log("    Time in findSymbol: " + a.time_in_findSymbol);

        b.logger.log("Number of symbols created: " + a.pullSymbolID);

        b.logger.log("Number of specialized types created: " + a.nSpecializationsCreated);

        b.logger.log("Number of specialized signatures created: " + a.nSpecializedSignaturesCreated);
      });
    };

    c.prototype.pullUpdateScript = function(b, c) {
      var d = this;
      this.timeFunction("pullUpdateScript: ", function() {
        var e = b.script;

        var f = c.script;

        var g = new a.SemanticInfo(b.fileName);

        var h = d.semanticInfoChain.getUnit(b.fileName);
        a.lastBoundPullDeclId = a.pullDeclID;

        a.lastBoundPullSymbolID = a.pullSymbolID;
        var i = new a.DeclCollectionContext(g);
        i.scriptName = b.fileName;

        a.getAstWalkerFactory().walk(f, a.preCollectDecls, a.postCollectDecls, null, i);
        var j = h.getTopLevelDecls()[0];

        var k = i.getParent();
        g.addTopLevelDecl(k);

        if (d.pullTypeChecker && d.pullTypeChecker.resolver) {
          d.pullTypeChecker.resolver.cleanCachedGlobals();
        }

        d.semanticInfoChain.updateUnit(h, g);

        d.logger.log("Cleaning symbols...");
        var l = (new Date).getTime();
        d.semanticInfoChain.update();
        var m = (new Date).getTime();
        d.logger.log("   time to clean: " + (m - l));

        if (d.pullTypeChecker && d.pullTypeChecker.resolver) {
          d.pullTypeChecker.resolver.setUnitPath(b.fileName);
        }
      });
    };

    c.prototype.getSymbolOfDeclaration = function(b) {
      if (!b) {
        return null;
      }
      var c = this.pullTypeChecker.resolver.getASTForDecl(b);
      if (!c) {
        return null;
      }
      var d = this.pullTypeChecker.resolver.getEnclosingDecl(b);
      if (c.nodeType === 80) {
        return this.getSymbolOfDeclaration(d);
      }
      var e = new a.PullTypeResolutionContext;
      return this.pullTypeChecker.resolver.resolveAST(c, !1, d, e).symbol;
    };

    c.prototype.resolvePosition = function(b, c) {
      var d = [];

      var e = [];

      var f = c.script;

      var g = c.fileName;

      var h = this.semanticInfoChain.getUnit(g);

      var i = null;

      var j = null;

      var k = null;

      var l = null;

      var m = null;

      var n = null;

      var o = [];

      var p = null;

      var q = null;

      var r = [];

      var s = new a.PullTypeResolutionContext;

      var t = !1;

      var u = null;

      var v = !1;
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      var w = function(c, f) {
        if (a.isValidAstNode(c) && b >= c.minChar && b <= c.limChar) {
          var g = e[e.length - 1];
          if (g === undefined || c.minChar >= g.minChar && c.limChar <= g.limChar) {
            var j = h.getDeclForAST(c);
            if (j) {
              d[d.length] = j;
              i = c;
            }

            if (c.nodeType === 12 && a.hasFlag(c.getFunctionFlags(), 8192)) {
              n = c;
            } else {
              if (c.nodeType === 17) {
                o[o.length] = c;
              } else {
                if (c.nodeType === 22) {
                  p = c;
                } else {
                  if (c.nodeType === 78) {
                    r[r.length] = c;
                  } else {
                    if (c.nodeType === 38) {
                      q = c;
                    } else {
                      if (c.nodeType === 11) {
                        t = !0;
                      }
                    }
                  }
                }
              }
            }

            e[e.length] = c;
          }
        }
        return c;
      };
      a.getAstWalkerFactory().walk(f, w);
      if (e.length) {
        this.pullTypeChecker.setUnit(g);

        j = e[e.length - 1];
        if (j.nodeType === 20 && e.length > 1) {
          var x = e[e.length - 2];
          switch (x.nodeType) {
            case 14:
            case 13:
            case 15:
              if (j === x.name) {
                j = x;
              }
              break;
            case 17:
              if (j === x.id) {
                j = x;
              }
              break;
            case 12:
              if (j === x.name) {
                j = x;
              }
          }
        }
        var y = null;
        if (i === j) {
          k = d[d.length - 1].getSymbol();
          this.pullTypeChecker.resolver.resolveDeclaredSymbol(k, null, s);
          k.setUnresolved();
          u = d[d.length - 1].getParentDecl();
          if (j.nodeType === 12) {
            y = j;
          }
        } else {
          for (var z = d.length - 1; z >= 0; z--)
            if (!(d[z].getKind() & 3072)) {
              u = d[z];
              break;
            }
          var A = null;
          if ((j.nodeType === 30 || j.nodeType === 29 || j.nodeType === 20) && e.length > 1)
            for (var z = e.length - 2; z >= 0; z--) {
              if (e[z].nodeType !== 32 || e[z].operand2 !== e[z + 1]) {
                if (e[z].nodeType !== 36 && e[z].nodeType !== 37 || e[z].target !== e[z + 1]) {
                  if (e[z].nodeType === 12 && e[z].name === e[z + 1]) {
                    y = e[z];
                    break;
                  }
                  break;
                }
                A = e[z];
                break;
              }
              j = e[z];
            }
          if (j.nodeType === 1)
            for (var z = 0; z < j.members.length; z++)
              if (j.members[z].minChar > b) {
                j = j.members[z];
                break;
              }
          s.resolvingTypeReference = t;
          var B = !1;
          if (o.length) {
            var C;
            for (var z = 0; z < o.length; z++) {
              C = o[z];

              B = C !== null && C.typeExpr !== null;

              this.pullTypeChecker.resolver.resolveAST(C, !1, null, s);
              var D = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(C, g);

              var E = D && D.symbol;
              if (E && B) {
                var F = E.getType();
                s.pushContextualType(F, !1, null);
              }
              if (C.init) {
                this.pullTypeChecker.resolver.resolveAST(C.init, B, u, s);
              }
            }
          }
          if (r.length)
            for (var z = 0; z < r.length; z++) {
              this.pullTypeChecker.resolver.resolveAST(r[z], B, u, s);
            }
          if (q) {
            this.pullTypeChecker.resolver.resolveAST(q, B, u, s);
          }

          if (p) {
            this.pullTypeChecker.resolver.resolveAST(p, B, u, s);
          }

          if (n) {
            this.pullTypeChecker.resolver.resolveAST(n, !0, u, s);
            u = h.getDeclForAST(n);
          }

          k = this.pullTypeChecker.resolver.resolveAST(j, B, u, s).symbol;
          if (A) {
            var G = k.getKind() === 4096 || k.getKind() === 1024;

            var H = k.getType();
            if (G) {
              G = H.getKind() !== 16 && H.getKind() !== 8388608 || H.getName() === "";
            }
            if (!G) {
              v = j.nodeType === 30 || A.nodeType === 37;

              if (j.nodeType === 30) {
                if (k.getKind() === 8) {
                  m = k.getConstructorMethod().getType().getConstructSignatures();
                }
              } else {
                m = A.nodeType === 36 ? H.getCallSignatures() : H.getConstructSignatures();
              }
              var I = new a.PullAdditionalCallResolutionData;
              if (A.nodeType === 36) {
                this.pullTypeChecker.resolver.resolveCallExpression(A, B, u, s, I);
              } else {
                this.pullTypeChecker.resolver.resolveNewExpression(A, B, u, s, I);
              }

              if (I.candidateSignature) {
                l = I.candidateSignature;
              }

              if (I.targetSymbol && I.targetSymbol.getName() !== "") {
                k = I.targetSymbol;
              }

              j = A;
            }
          }
        }
        if (y) {
          if (k && k.getKind() !== 4096) {
            var J = a.PullHelpers.getSignatureForFuncDecl(y, this.semanticInfoChain.getUnit(g));
            l = J.signature;

            m = J.allSignatures;
          }
        } else if (!m && k && (k.getKind() === 65536 || k.getKind() === 16384)) {
          var K = k.getType();
          if (K) {
            m = K.getCallSignatures();
          }
        }
      }
      var L = this.getSymbolOfDeclaration(u);
      return {
        symbol: k,
        ast: j,
        enclosingScopeSymbol: L,
        candidateSignature: l,
        callSignatures: m,
        isConstructorCall: v
      };
    };

    c.prototype.extractResolutionContextFromPath = function(b, c) {
      var d = c.script;

      var e = c.fileName;

      var f = this.semanticInfoChain.getUnit(e);

      var g = null;

      var h = null;

      var i = !1;
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      var j = new a.PullTypeResolutionContext;
      j.resolveAggressively = !0;
      if (b.count() === 0) {
        return null;
      }
      this.pullTypeChecker.setUnit(f.getPath());
      for (var k = 0, l = b.count(); k < l; k++) {
        var m = b.asts[k];
        switch (m.nodeType) {
          case 12:
            if (a.hasFlag(m.getFunctionFlags(), 8192)) {
              this.pullTypeChecker.resolver.resolveAST(m, !0, g, j);
            }
            break;
          case 17:
            var n = m;
            i = n.typeExpr !== null;

            this.pullTypeChecker.resolver.resolveAST(n, !1, null, j);
            var o = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(n, e);

            var p = o && o.symbol;

            var q = null;
            if (p && i) {
              q = p.getType();
            }

            j.pushContextualType(q, !1, null);

            if (n.init) {
              this.pullTypeChecker.resolver.resolveAST(n.init, i, g, j);
            }
            break;
          case 36:
          case 37:
            var r = m.nodeType === 37;

            var s = m;

            var q = null;
            if (k + 1 < l && s.arguments === b.asts[k + 1]) {
              var t = new a.PullAdditionalCallResolutionData;
              if (r) {
                this.pullTypeChecker.resolver.resolveNewExpression(s, i, g, j, t);
              } else {
                this.pullTypeChecker.resolver.resolveCallExpression(s, i, g, j, t);
              }
              if (t.actualParametersContextTypeSymbols) {
                var u = b.asts[k + 1] && b.asts[k + 1].nodeType === 1 ? b.asts[k + 2] : b.asts[k + 1];
                if (u)
                  for (var v = 0, w = s.arguments.members.length; v < w; v++)
                    if (s.arguments.members[v] === u) {
                      var x = t.actualParametersContextTypeSymbols[v];
                      if (x) {
                        q = x;
                        break;
                      }
                    }
              }
            } else {
              if (r) {
                this.pullTypeChecker.resolver.resolveNewExpression(s, i, g, j);
              } else {
                this.pullTypeChecker.resolver.resolveCallExpression(s, i, g, j);
              }
            }
            j.pushContextualType(q, !1, null);
            break;
          case 21:
            this.pullTypeChecker.resolver.resolveAST(m, i, g, j);
            var q = null;

            var y = j.getContextualType();
            if (y && y.isArray()) {
              q = y.getElementType();
            }

            j.pushContextualType(q, !1, null);
            break;
          case 22:
            var z = m;

            var A = new a.PullAdditionalObjectLiteralResolutionData;
            this.pullTypeChecker.resolver.resolveObjectLiteralExpression(z, i, g, j, A);
            var B = b.asts[k + 1] && b.asts[k + 1].nodeType === 1 ? b.asts[k + 2] : b.asts[k + 1];
            if (B) {
              var q = null;

              var C = z.operand;
              if (C && A.membersContextTypeSymbols)
                for (var v = 0, w = C.members.length; v < w; v++)
                  if (C.members[v] === B) {
                    var D = A.membersContextTypeSymbols[v];
                    if (D) {
                      q = D;
                      break;
                    }
                  }
              j.pushContextualType(q, !1, null);
            }
            break;
          case 38:
            var E = m;

            var q = null;
            if (b.asts[k + 1] && b.asts[k + 1] === E.operand2) {
              var F = this.pullTypeChecker.resolver.resolveAST(E.operand1, i, g, j).symbol.getType();
              if (F) {
                i = !0;
                q = F;
              }
            }
            j.pushContextualType(q, !1, null);
            break;
          case 78:
            var G = m;

            var q = null;
            if (k + 1 < l && b.asts[k + 1] === G.castTerm) {
              j.resolvingTypeReference = !0;
            }
            var H = this.pullTypeChecker.resolver.resolveTypeAssertionExpression(G, i, g, j).symbol;
            if (H) {
              i = !0;
              q = H;
            }

            j.pushContextualType(q, !1, null);
            break;
          case 93:
            var I = m;

            var q = null;
            if (g && g.getKind() & a.PullElementKind.SomeFunction) {
              var J = h;
              if (J.returnTypeAnnotation) {
                var K = j.resolvingTypeReference;
                j.resolvingTypeReference = !0;
                var L = this.pullTypeChecker.resolver.resolveTypeReference(J.returnTypeAnnotation, g, j).symbol;
                j.resolvingTypeReference = K;

                if (L) {
                  i = !0;
                  q = L;
                }
              } else {
                var y = j.getContextualType();
                if (y && y.isFunction()) {
                  var M = y.getDeclarations()[0].getSignatureSymbol();

                  var N = M.getReturnType();
                  if (N) {
                    i = !0;
                    q = N;
                  }
                }
              }
            }
            j.pushContextualType(q, !1, null);
            break;
          case 11:
          case 9:
            j.resolvingTypeReference = !0;
        }
        var O = f.getDeclForAST(m);
        if (O && !(O.getKind() & 11264)) {
          g = O;
          h = m;
        }
      }
      if (b.isNameOfInterface() || b.isInClassImplementsList() || b.isInInterfaceExtendsList()) {
        j.resolvingTypeReference = !0;
      }
      if (b.ast().nodeType === 20 && b.count() > 1)
        for (var k = b.count() - 1; k >= 0; k--) {
          if (b.asts[b.top - 1].nodeType !== 32 || b.asts[b.top - 1].operand2 !== b.asts[b.top]) break;
          b.pop();
        }
      return {
        ast: b.ast(),
        enclosingDecl: g,
        resolutionContext: j,
        inContextuallyTypedAssignment: i
      };
    };

    c.prototype.pullGetSymbolInformationFromPath = function(b, c) {
      var d = this.extractResolutionContextFromPath(b, c);
      if (!d) {
        return null;
      }
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      var e = this.pullTypeChecker.resolver.resolveAST(b.ast(), d.inContextuallyTypedAssignment, d.enclosingDecl, d.resolutionContext);

      var f = e && e.symbol;
      return {
        symbol: f,
        ast: b.ast(),
        enclosingScopeSymbol: this.getSymbolOfDeclaration(d.enclosingDecl)
      };
    };

    c.prototype.pullGetDeclarationSymbolInformation = function(b, c) {
      var d = c.script;

      var e = c.fileName;

      var f = b.ast();
      if (f.nodeType !== 13 && f.nodeType !== 14 && f.nodeType !== 15 && f.nodeType !== 12 && f.nodeType !== 17) {
        return null;
      }
      var g = this.extractResolutionContextFromPath(b, c);
      if (!g) {
        return null;
      }
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      var h = this.semanticInfoChain.getUnit(e);

      var i = h.getDeclForAST(f);

      var j = i.getKind() & a.PullElementKind.SomeSignature ? i.getSignatureSymbol() : i.getSymbol();
      this.pullTypeChecker.resolver.resolveDeclaredSymbol(j, null, g.resolutionContext);

      j.setUnresolved();

      return {
        symbol: j,
        ast: b.ast(),
        enclosingScopeSymbol: this.getSymbolOfDeclaration(g.enclosingDecl)
      };
    };

    c.prototype.pullGetCallInformationFromPath = function(b, c) {
      if (b.ast().nodeType !== 36 && b.ast().nodeType !== 37) {
        return null;
      }
      var d = b.ast().nodeType === 37;

      var e = this.extractResolutionContextFromPath(b, c);
      if (!e) {
        return null;
      }
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      var f = new a.PullAdditionalCallResolutionData;
      d ? this.pullTypeChecker.resolver.resolveNewExpression(b.ast(), e.inContextuallyTypedAssignment, e.enclosingDecl,
        e.resolutionContext, f) : this.pullTypeChecker.resolver.resolveCallExpression(b.ast(), e.inContextuallyTypedAssignment,
        e.enclosingDecl, e.resolutionContext, f);

      return {
        targetSymbol: f.targetSymbol,
        resolvedSignatures: f.resolvedSignatures,
        candidateSignature: f.candidateSignature,
        ast: b.ast(),
        enclosingScopeSymbol: this.getSymbolOfDeclaration(e.enclosingDecl),
        isConstructorCall: d
      };
    };

    c.prototype.pullGetVisibleMemberSymbolsFromPath = function(b, c) {
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      var d = this.extractResolutionContextFromPath(b, c);
      if (!d) {
        return null;
      }
      var e = this.pullTypeChecker.resolver.getVisibleMembersFromExpression(b.ast(), d.enclosingDecl, d.resolutionContext);
      return e ? {
        symbols: e,
        enclosingScopeSymbol: this.getSymbolOfDeclaration(d.enclosingDecl)
      } : null;
    };

    c.prototype.pullGetVisibleDeclsFromPath = function(b, c) {
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      var d = this.extractResolutionContextFromPath(b, c);
      if (!d) {
        return null;
      }
      var e = null;
      return this.pullTypeChecker.resolver.getVisibleDecls(d.enclosingDecl, d.resolutionContext);
    };

    c.prototype.pullGetContextualMembersFromPath = function(b, c) {
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      if (b.ast().nodeType !== 22) {
        return null;
      }
      var d = this.extractResolutionContextFromPath(b, c);
      if (!d) {
        return null;
      }
      var e = this.pullTypeChecker.resolver.getVisibleContextSymbols(d.enclosingDecl, d.resolutionContext);
      return {
        symbols: e,
        enclosingScopeSymbol: this.getSymbolOfDeclaration(d.enclosingDecl)
      };
    };

    c.prototype.pullGetDeclInformation = function(b, c, d) {
      var e = this.extractResolutionContextFromPath(c, d);
      if (!e) {
        return null;
      }
      a.globalSemanticInfoChain = this.semanticInfoChain;

      if (a.globalBinder) {
        a.globalBinder.semanticInfoChain = this.semanticInfoChain;
      }
      var f = b.getSymbol();
      this.pullTypeChecker.resolver.resolveDeclaredSymbol(f, e.enclosingDecl, e.resolutionContext);

      f.setUnresolved();

      return {
        symbol: f,
        ast: c.ast(),
        enclosingScopeSymbol: this.getSymbolOfDeclaration(e.enclosingDecl)
      };
    };

    c.prototype.pullGetTypeInfoAtPosition = function(a, b) {
      var c = this;
      return this.timeFunction("pullGetTypeInfoAtPosition for pos " + a + ":", function() {
        return c.resolvePosition(a, b);
      });
    };

    c.prototype.getTopLevelDeclarations = function(a) {
      var b = this.semanticInfoChain.getUnit(a);
      return b ? b.getTopLevelDecls() : null;
    };

    c.prototype.reportDiagnostics = function(a, b) {
      for (var c = 0; c < a.length; c++) {
        b.addDiagnostic(a[c]);
      }
    };

    return c;
  }();
  a.TypeScriptCompiler = c;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  function d(a, b, c) {
    var d = (new Date).getTime();

    var e = c();

    var f = (new Date).getTime();
    a.log(b + " completed in " + (f - d) + " msec");

    return e;
  }
  (function(a) {
    function b(b) {
      if (a.diagnosticWriter) {
        a.diagnosticWriter.Alert(b);
      }
    }

    function c(c) {
      if (a.debug) {
        b(c);
      }
    }

    function d(c, d) {
      if (a.debug) {
        if (!c) {
          b(d);
        }
      }
    }
    a.debug = !1;

    a.diagnosticWriter = null;

    a.analysisPass = 0;

    a.Alert = b;

    a.debugPrint = c;

    a.assert = d;
  })(a.CompilerDiagnostics || (a.CompilerDiagnostics = {}));
  var b = a.CompilerDiagnostics;

  var c = function() {
    function a() {}
    a.prototype.information = function() {
      return !1;
    };

    a.prototype.debug = function() {
      return !1;
    };

    a.prototype.warning = function() {
      return !1;
    };

    a.prototype.error = function() {
      return !1;
    };

    a.prototype.fatal = function() {
      return !1;
    };

    a.prototype.log = function(a) {};

    return a;
  }();
  a.NullLogger = c;

  a.timeFunction = d;
})(TypeScript || (TypeScript = {}));

if (!String.prototype.trim) {
  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
  };
}

if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function(a, b) {
    if (this == null) throw new TypeError;
    var c = Object(this);

    var d = c.length >>> 0;
    if (d === 0) {
      return -1;
    }
    var e = 0;
    if (arguments.length > 0) {
      e = Number(arguments[1]);
      if (e != e) {
        e = 0;
      } else {
        if (e != 0 && e != Infinity && e != -Infinity) {
          e = (e > 0 || -1) * Math.floor(Math.abs(e));
        }
      }
    }
    if (e >= d) {
      return -1;
    }
    var f = e >= 0 ? e : Math.max(d - Math.abs(e), 0);
    for (; f < d; f++)
      if (f in c && c[f] === a) {
        return f;
      }
    return -1;
  };
}

if (!Array.prototype.filter) {
  Array.prototype.filter = function(a, b) {
    if (this == null) throw new TypeError;
    var c = Object(this);

    var d = c.length >>> 0;
    if (typeof a != "function") throw new TypeError;
    var e = [];
    for (var f = 0; f < d; f++)
      if (f in c) {
        var g = c[f];
        if (a.call(b, g, f, c)) {
          e.push(g);
        }
      }
    return e;
  };
}

if (!Array.prototype.map) {
  Array.prototype.map = function(a, b) {
    var c = undefined;

    var d;

    var e;
    if (this == null) throw new TypeError(" this is null or not defined");
    var f = Object(this);

    var g = f.length >>> 0;
    if ({}.toString.call(a) != "[object Function]") throw new TypeError(a + " is not a function");
    if (b) {
      c = b;
    }

    d = new Array(g);

    e = 0;
    while (e < g) {
      var h;

      var i;
      if (e in f) {
        h = f[e];
        i = a.call(c, h, e, f);
        d[e] = i;
      }

      e++;
    }
    return d;
  };
}

if (!Array.prototype.reduce) {
  Array.prototype.reduce = function(b) {
    if (this === null || this === undefined) throw new TypeError("Object is null or undefined");
    var c = 0;

    var d = this.length >> 0;

    var e;
    if (typeof b != "function") throw new TypeError("First argument is not callable");
    if (arguments.length < 2) {
      if (d === 0) throw new TypeError("Array length is 0 and no second argument");
      e = this[0];

      c = 1;
    } else {
      e = arguments[1];
    }
    while (c < d) {
      if (c in this) {
        e = b.call(undefined, e, this[c], c, this);
      }
      ++c;
    }
    return e;
  };
}

if (!Array.prototype.forEach) {
  Array.prototype.forEach = function(a, b) {
    var c;

    var d;
    if (this == null) throw new TypeError(" this is null or not defined");
    var e = Object(this);

    var f = e.length >>> 0;
    if ({}.toString.call(a) != "[object Function]") throw new TypeError(a + " is not a function");
    if (b) {
      c = b;
    } else {
      c = undefined;
    }

    d = 0;
    while (d < f) {
      var g;
      if (d in e) {
        g = e[d];
        a.call(c, g, d, e);
      }

      d++;
    }
  };
}

if (!Date.now) {
  Date.now = function() {
    return (new Date).getTime();
  };
}

if (!Array.prototype.some) {
  Array.prototype.some = function(a) {
    if (this == null) throw new TypeError;
    var b = Object(this);

    var c = b.length >>> 0;
    if (typeof a != "function") throw new TypeError;
    var d = arguments[1];
    for (var e = 0; e < c; e++) {
      var f = e.toString();
      if (f in b && a.call(d, b[e], e, b)) {
        return !0;
      }
    }
    return !1;
  };
}

var Services;

(function(a) {
  (function(a) {
    a[a.Start = 0] = "Start";

    a[a.InMultiLineCommentTrivia = 1] = "InMultiLineCommentTrivia";

    a[a.InSingleQuoteStringLiteral = 2] = "InSingleQuoteStringLiteral";

    a[a.InDoubleQuoteStringLiteral = 3] = "InDoubleQuoteStringLiteral";
  })(a.EndOfLineState || (a.EndOfLineState = {}));
  var b = a.EndOfLineState;
  (function(a) {
    a[a.Punctuation = 0] = "Punctuation";

    a[a.Keyword = 1] = "Keyword";

    a[a.Operator = 2] = "Operator";

    a[a.Comment = 3] = "Comment";

    a[a.Whitespace = 4] = "Whitespace";

    a[a.Identifier = 5] = "Identifier";

    a[a.NumberLiteral = 6] = "NumberLiteral";

    a[a.StringLiteral = 7] = "StringLiteral";

    a[a.RegExpLiteral = 8] = "RegExpLiteral";
  })(a.TokenClass || (a.TokenClass = {}));
  var c = a.TokenClass;

  var d = [];
  d[11] = !0;

  d[14] = !0;

  d[13] = !0;

  d[12] = !0;

  d[35] = !0;

  d[94] = !0;

  d[95] = !0;

  d[74] = !0;

  d[76] = !0;

  d[72] = !0;

  d[37] = !0;

  d[24] = !0;
  var e = function() {
    function a(a) {
      this.host = a;

      this.characterWindow = TypeScript.ArrayUtilities.createArray(2048, 0);

      this.diagnostics = [];
    }
    a.prototype.getClassificationsForLine = function(a, b) {
      var c = 0;
      if (b !== 0) {
        if (b === 3) {
          a = '"\\\n' + a;
        } else {
          if (b === 2) {
            a = "'\\\n" + a;
          } else {
            if (b === 1) {
              a = "/*\n" + a;
            }
          }
        }
        c = 3;
      }
      var e = new f;
      this.scanner = new TypeScript.Scanner("", TypeScript.SimpleText.fromString(a), 1, this.characterWindow);
      var g = 0;
      while (this.scanner.absoluteIndex() < a.length) {
        this.diagnostics.length = 0;
        var h = this.scanner.scan(this.diagnostics, !d[g]);
        g = h.tokenKind;

        this.processToken(a, c, h, e);
      }
      return e;
    };

    a.prototype.processToken = function(a, b, c, d) {
      this.processTriviaList(a, b, c.leadingTrivia(), d);

      this.addResult(a, b, d, c.width(), c.tokenKind);

      this.processTriviaList(a, b, c.trailingTrivia(), d);
      if (this.scanner.absoluteIndex() >= a.length) {
        if (this.diagnostics.length > 0 && this.diagnostics[this.diagnostics.length - 1].diagnosticCode() === 14) {
          d.finalLexState = 1;
          return;
        }
        if (c.tokenKind === 14) {
          var e = c.text();
          if (e.length > 0 && e.charCodeAt(e.length - 1) === 92) {
            var f = e.charCodeAt(0);
            d.finalLexState = f === 34 ? 3 : 2;
            return;
          }
        }
      }
    };

    a.prototype.processTriviaList = function(a, b, c, d) {
      for (var e = 0, f = c.count(); e < f; e++) {
        var g = c.syntaxTriviaAt(e);
        this.addResult(a, b, d, g.fullWidth(), g.kind());
      }
    };

    a.prototype.addResult = function(a, b, c, d, e) {
      if (d > 0) {
        if (c.entries.length === 0) {
          d -= b;
        }
        c.entries.push(new g(d, this.classFromKind(e)));
      }
    };

    a.prototype.classFromKind = function(a) {
      if (TypeScript.SyntaxFacts.isAnyKeyword(a)) {
        return 1;
      }
      if (TypeScript.SyntaxFacts.isBinaryExpressionOperatorToken(a) || TypeScript.SyntaxFacts.isPrefixUnaryExpressionOperatorToken(
        a)) {
        return 2;
      }
      if (TypeScript.SyntaxFacts.isAnyPunctuation(a)) {
        return 0;
      }
      switch (a) {
        case 4:
          return 4;
        case 6:
        case 7:
          return 3;
        case 13:
          return 6;
        case 14:
          return 7;
        case 12:
          return 8;
        case 11:
        default:
          return 5;
      }
    };

    return a;
  }();
  a.Classifier = e;
  var f = function() {
    function a() {
      this.finalLexState = 0;

      this.entries = [];
    }
    return a;
  }();
  a.ClassificationResult = f;
  var g = function() {
    function a(a, b) {
      this.length = a;

      this.classification = b;
    }
    return a;
  }();
  a.ClassificationInfo = g;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function a(a) {
      this.host = a;

      this.openEditTag = "<Edit>";

      this.closeEditTag = "<Edit/>";
    }
    a.prototype.isLoggingEdits = function() {
      return this.host.getDiagnosticsObject() !== null;
    };

    return a;
  }();
  a.CompilerDiagnostics = b;
  var c = function() {
    function a(a, b) {
      this.internal = a;

      this.diagnostics = b.getDiagnosticsObject();
    }
    a.prototype.writeFile = function(a) {
      this.diagnostics.log(a);
    };

    a.prototype.refresh = function() {
      this.writeFile("refresh: \n");

      this.internal.refresh();
    };

    a.prototype.getSyntacticDiagnostics = function(a) {
      var b = "fileName: " + this.stringify(a);

      var c = this.internal.getSyntacticDiagnostics(a);
      this.writeFile("getSyntacticDiagnostics: " + b + " result: " + this.stringify(c) + "\n");

      return c;
    };

    a.prototype.getSemanticDiagnostics = function(a) {
      var b = "fileName: " + this.stringify(a);

      var c = this.internal.getSemanticDiagnostics(a);
      this.writeFile("getSemanticDiagnostics: " + b + " result: " + this.stringify(c) + "\n");

      return c;
    };

    a.prototype.getCompletionsAtPosition = function(a, b, c) {
      var d = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b) + " isMemberCompletion: " + this.stringify(
        c);

      var e = this.internal.getCompletionsAtPosition(a, b, c);
      this.writeFile("getCompletionsAtPosition: " + d + " result: " + this.stringify(e) + "\n");

      return e;
    };

    a.prototype.getCompletionEntryDetails = function(a, b, c) {
      var d = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b) + " entryName: " + this.stringify(c);

      var e = this.internal.getCompletionEntryDetails(a, b, c);
      this.writeFile("getCompletionEntryDetails: " + d + " result: " + this.stringify(e) + "\n");

      return e;
    };

    a.prototype.getTypeAtPosition = function(a, b) {
      var c = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b);

      var d = this.internal.getTypeAtPosition(a, b);
      this.writeFile("getTypeAtPosition: " + c + " result: " + this.stringify(d) + "\n");

      return d;
    };

    a.prototype.getNameOrDottedNameSpan = function(a, b, c) {
      var d = "fileName: " + this.stringify(a) + " startPos: " + this.stringify(b) + " endPos: " + this.stringify(c);

      var e = this.internal.getNameOrDottedNameSpan(a, b, c);
      this.writeFile("getNameOrDottedNameSpan: " + d + " result: " + this.stringify(e) + "\n");

      return e;
    };

    a.prototype.getBreakpointStatementAtPosition = function(a, b) {
      var c = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b);

      var d = this.internal.getBreakpointStatementAtPosition(a, b);
      this.writeFile("getBreakpointStatementAtPosition: " + c + " result: " + this.stringify(d) + "\n");

      return d;
    };

    a.prototype.getSignatureAtPosition = function(a, b) {
      var c = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b);

      var d = this.internal.getSignatureAtPosition(a, b);
      this.writeFile("getSignatureAtPosition: " + c + " result: " + this.stringify(d) + "\n");

      return d;
    };

    a.prototype.getDefinitionAtPosition = function(a, b) {
      var c = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b);

      var d = this.internal.getDefinitionAtPosition(a, b);
      this.writeFile("getDefinitionAtPosition: " + c + " result: " + this.stringify(d) + "\n");

      return d;
    };

    a.prototype.getReferencesAtPosition = function(a, b) {
      var c = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b);

      var d = this.internal.getReferencesAtPosition(a, b);
      this.writeFile("getReferencesAtPosition: " + c + " result: " + this.stringify(d) + "\n");

      return d;
    };

    a.prototype.getOccurrencesAtPosition = function(a, b) {
      var c = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b);

      var d = this.internal.getOccurrencesAtPosition(a, b);
      this.writeFile("getOccurrencesAtPosition: " + c + " result: " + this.stringify(d) + "\n");

      return d;
    };

    a.prototype.getImplementorsAtPosition = function(a, b) {
      var c = "fileName: " + this.stringify(a) + " pos: " + this.stringify(b);

      var d = this.internal.getImplementorsAtPosition(a, b);
      this.writeFile("getImplementorsAtPosition: " + c + " result: " + this.stringify(d) + "\n");

      return d;
    };

    a.prototype.getNavigateToItems = function(a) {
      var b = "searchValue: " + this.stringify(a);

      var c = this.internal.getNavigateToItems(a);
      this.writeFile("getNavigateToItems: " + b + " result: " + this.stringify(c) + "\n");

      return c;
    };

    a.prototype.getScriptLexicalStructure = function(a) {
      var b = "fileName: " + this.stringify(a);

      var c = this.internal.getScriptLexicalStructure(a);
      this.writeFile("getScriptLexicalStructure: " + b + " result: " + this.stringify(c) + "\n");

      return c;
    };

    a.prototype.getOutliningRegions = function(a) {
      var b = "fileName: " + this.stringify(a);

      var c = this.internal.getOutliningRegions(a);
      this.writeFile("getOutliningRegions: " + b + " result: " + this.stringify(c) + "\n");

      return c;
    };

    a.prototype.getFormattingEditsForRange = function(a, b, c, d) {
      var e = "fileName: " + this.stringify(a) + " minChar: " + this.stringify(b) + " limChar: " + this.stringify(c) +
        " options: " + this.stringify(d);

      var f = this.internal.getFormattingEditsForRange(a, b, c, d);
      this.writeFile("getFormattingEditsForRange: " + e + " result: " + this.stringify(f) + "\n");

      return f;
    };

    a.prototype.getFormattingEditsForDocument = function(a, b, c, d) {
      var e = "fileName: " + this.stringify(a) + " minChar: " + this.stringify(b) + " limChar: " + this.stringify(c) +
        " options: " + this.stringify(d);

      var f = this.internal.getFormattingEditsForDocument(a, b, c, d);
      this.writeFile("getFormattingEditsForDocument: " + e + " result: " + this.stringify(f) + "\n");

      return f;
    };

    a.prototype.getFormattingEditsOnPaste = function(a, b, c, d) {
      var e = "fileName: " + this.stringify(a) + " minChar: " + this.stringify(b) + " limChar: " + this.stringify(c) +
        " options: " + this.stringify(d);

      var f = this.internal.getFormattingEditsOnPaste(a, b, c, d);
      this.writeFile("getFormattingEditsOnPaste: " + e + " result: " + this.stringify(f) + "\n");

      return f;
    };

    a.prototype.getFormattingEditsAfterKeystroke = function(a, b, c, d) {
      var e = "fileName: " + this.stringify(a) + " position: " + this.stringify(b) + " key: " + this.stringify(c) +
        " options: " + this.stringify(d);

      var f = this.internal.getFormattingEditsAfterKeystroke(a, b, c, d);
      this.writeFile("getFormattingEditsAfterKeystroke: " + e + " result: " + this.stringify(f) + "\n");

      return f;
    };

    a.prototype.getBraceMatchingAtPosition = function(a, b) {
      var c = "fileName: " + this.stringify(a) + " position: " + this.stringify(b);

      var d = this.internal.getBraceMatchingAtPosition(a, b);
      this.writeFile("getBraceMatchingAtPosition: " + c + " result: " + this.stringify(d) + "\n");

      return d;
    };

    a.prototype.getIndentationAtPosition = function(a, b, c) {
      var d = "fileName: " + this.stringify(a) + " position: " + this.stringify(b) + " options: " + this.stringify(c);

      var e = this.internal.getIndentationAtPosition(a, b, c);
      this.writeFile("getIndentationAtPosition: " + d + " result: " + this.stringify(e) + "\n");

      return e;
    };

    a.prototype.getEmitOutput = function(a) {
      var b = "fileName: " + this.stringify(a);

      var c = this.internal.getEmitOutput(a);
      this.writeFile("getEmitOutput: " + b + " result: " + this.stringify(c) + "\n");

      return c;
    };

    a.prototype.getSyntaxTree = function(a) {
      var b = "fileName: " + this.stringify(a);

      var c = this.internal.getSyntaxTree(a);
      this.writeFile("getSyntaxTree: " + b + " result: " + this.stringify(c) + "\n");

      return c;
    };

    a.prototype.stringify = function(a) {
      var b = "";
      if (typeof a == "string") {
        b = '"' + a.toString().replace("\n", "\\n") + '"';
      } else if (typeof a == "number") {
        b = a.toString();
      } else if (typeof a == "boolean") {
        b = a;
      } else if (typeof a != "function") {
        var c = [];
        for (var d in a) {
          if (a.hasOwnProperty(d) && typeof a[d] != "function") {
            c.push(d);
          }
        }
        for (var e = 0; e < c.length; e++) {
          d = c[e];
          c[e] = typeof a[d] != "undefined" ? d + ": " + this.stringify(a[d]) : this.stringify(d);
        }
        b = "{ " + c.toString() + " }";
      }
      return b;
    };

    return a;
  }();
  a.DiagnosticService = c;
})(Services || (Services = {}));

var Services;

(function(a) {
  function b(a, b) {
    a.log("*INTERNAL ERROR* - Exception in typescript services: " + b.message);
  }
  a.logInternalError = b;
  var c = function() {
    function a(a, b, c, d) {
      this.fileName = "";

      this.minChar = -1;

      this.limChar = -1;

      this.isWriteAccess = !1;

      this.fileName = a;

      this.minChar = b;

      this.limChar = c;

      this.isWriteAccess = d;
    }
    return a;
  }();
  a.ReferenceEntry = c;
  var d = function() {
    function a() {
      this.name = "";

      this.kind = "";

      this.kindModifiers = "";

      this.matchKind = "";

      this.fileName = "";

      this.minChar = -1;

      this.limChar = -1;

      this.containerName = "";

      this.containerKind = "";
    }
    return a;
  }();
  a.NavigateToItem = d;
  var e = function() {
    function a() {
      this.options = new TypeScript.AstWalkOptions;

      this.fileName = "";

      this.containerKinds = [];

      this.containerASTs = [];

      this.path = new TypeScript.AstPath;

      this.result = [];
    }
    return a;
  }();
  a.NavigateToContext = e;
  var f = function() {
    function a(a, b, c) {
      this.minChar = a;

      this.limChar = b;

      this.text = c;
    }
    a.createInsert = function(b, c) {
      return new a(b, b, c);
    };

    a.createDelete = function(b, c) {
      return new a(b, c, "");
    };

    a.createReplace = function(b, c, d) {
      return new a(b, c, d);
    };

    return a;
  }();
  a.TextEdit = f;
  var g = function() {
    function a() {
      this.IndentSize = 4;

      this.TabSize = 4;

      this.NewLineCharacter = "\r\n";

      this.ConvertTabsToSpaces = !0;
    }
    a.clone = function(b) {
      var c = new a;
      c.IndentSize = b.IndentSize;

      c.TabSize = b.TabSize;

      c.NewLineCharacter = b.NewLineCharacter;

      c.ConvertTabsToSpaces = b.ConvertTabsToSpaces;

      return c;
    };

    return a;
  }();
  a.EditorOptions = g;
  var h = function(a) {
    function b() {
      a.apply(this, arguments);

      this.InsertSpaceAfterCommaDelimiter = !0;

      this.InsertSpaceAfterSemicolonInForStatements = !0;

      this.InsertSpaceBeforeAndAfterBinaryOperators = !0;

      this.InsertSpaceAfterKeywordsInControlFlowStatements = !0;

      this.InsertSpaceAfterFunctionKeywordForAnonymousFunctions = !1;

      this.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = !1;

      this.PlaceOpenBraceOnNewLineForFunctions = !1;

      this.PlaceOpenBraceOnNewLineForControlBlocks = !1;
    }
    __extends(b, a);

    b.clone = function(a) {
      var b = g.clone(a);
      b.InsertSpaceAfterCommaDelimiter = a.InsertSpaceAfterCommaDelimiter;

      b.InsertSpaceAfterSemicolonInForStatements = a.InsertSpaceAfterSemicolonInForStatements;

      b.InsertSpaceBeforeAndAfterBinaryOperators = a.InsertSpaceBeforeAndAfterBinaryOperators;

      b.InsertSpaceAfterKeywordsInControlFlowStatements = a.InsertSpaceAfterKeywordsInControlFlowStatements;

      b.InsertSpaceAfterFunctionKeywordForAnonymousFunctions = a.InsertSpaceAfterFunctionKeywordForAnonymousFunctions;

      b.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = a.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis;

      b.PlaceOpenBraceOnNewLineForFunctions = a.PlaceOpenBraceOnNewLineForFunctions;

      b.PlaceOpenBraceOnNewLineForControlBlocks = a.PlaceOpenBraceOnNewLineForControlBlocks;

      return b;
    };

    return b;
  }(g);
  a.FormatCodeOptions = h;
  var i = function() {
    function a(a, b, c, d, e, f, g) {
      this.fileName = a;

      this.minChar = b;

      this.limChar = c;

      this.kind = d;

      this.name = e;

      this.containerKind = f;

      this.containerName = g;
    }
    return a;
  }();
  a.DefinitionInfo = i;
  var j = function() {
    function a(a, b, c, d, e, f) {
      this.memberName = a;

      this.docComment = b;

      this.fullSymbolName = c;

      this.kind = d;

      this.minChar = e;

      this.limChar = f;
    }
    return a;
  }();
  a.TypeInfo = j;
  var k = function() {
    function a(a, b, c) {
      if (typeof c == "undefined") {
        c = null;
      }

      this.minChar = a;

      this.limChar = b;

      this.text = c;
    }
    return a;
  }();
  a.SpanInfo = k;
  var l = function() {
    function a() {
      this.formal = [];
    }
    return a;
  }();
  a.SignatureInfo = l;
  var m = function() {
    function a() {
      this.typeParameters = [];

      this.parameters = [];
    }
    return a;
  }();
  a.FormalSignatureItemInfo = m;
  var n = function() {
    function a() {}
    return a;
  }();
  a.FormalTypeParameterInfo = n;
  var o = function() {
    function a() {}
    return a;
  }();
  a.FormalParameterInfo = o;
  var p = function() {
    function a() {}
    return a;
  }();
  a.ActualSignatureInfo = p;
  var q = function() {
    function a() {
      this.maybeInaccurate = !1;

      this.isMemberCompletion = !1;

      this.entries = [];
    }
    return a;
  }();
  a.CompletionInfo = q;
  var r = function() {
    function a() {}
    a.unknown = "";

    a.keyword = "keyword";

    a.scriptElement = "script";

    a.moduleElement = "module";

    a.classElement = "class";

    a.interfaceElement = "interface";

    a.enumElement = "enum";

    a.variableElement = "var";

    a.localVariableElement = "local var";

    a.functionElement = "function";

    a.localFunctionElement = "local function";

    a.memberFunctionElement = "method";

    a.memberGetAccessorElement = "getter";

    a.memberSetAccessorElement = "setter";

    a.memberVariableElement = "property";

    a.constructorImplementationElement = "constructor";

    a.callSignatureElement = "call";

    a.indexSignatureElement = "index";

    a.constructSignatureElement = "construct";

    a.parameterElement = "parameter";

    a.typeParameterElement = "type parameter";

    a.primitiveType = "primitive type";

    return a;
  }();
  a.ScriptElementKind = r;
  var s = function() {
    function a() {}
    a.none = "";

    a.publicMemberModifier = "public";

    a.privateMemberModifier = "private";

    a.exportedModifier = "export";

    a.ambientModifier = "declare";

    a.staticModifier = "static";

    return a;
  }();
  a.ScriptElementKindModifier = s;
  var t = function() {
    function a() {}
    a.none = null;

    a.exact = "exact";

    a.subString = "substring";

    a.prefix = "prefix";

    return a;
  }();
  a.MatchKind = t;
  var u = function() {
    function a() {}
    a.none = "";

    a.error = "error";

    a.warning = "warning";

    a.message = "message";

    return a;
  }();
  a.DiagnosticCategory = u;
  var v = function() {
    function a() {
      this.version = -1;

      this.fileName = null;
    }
    return a;
  }();
  a.ScriptSyntaxASTState = v;
  var w = function() {
    function a() {
      this.outputFiles = [];

      this.diagnostics = [];
    }
    return a;
  }();
  a.EmitOutput = w;
})(Services || (Services = {}));

var debugObjectHost = this;

var Services;

(function(a) {
  var b = function() {
    function a(a) {
      this.host = a;
    }
    a.prototype.getPreProcessedFileInfo = function(a, b) {
      var c = new TypeScript.CompilationSettings;
      c.codeGenTarget = 1;
      var d = TypeScript.preProcessFile(a, b, c);
      return d;
    };

    a.prototype.getDefaultCompilationSettings = function() {
      var a = new TypeScript.CompilationSettings;
      a.codeGenTarget = 1;

      return a;
    };

    a.prototype.dumpMemory = function() {
      if (!debugObjectHost || !debugObjectHost.Debug || !debugObjectHost.Debug.dumpHeap) throw new Error(
        "This version of the Javascript runtime doesn't support the 'Debug.dumpHeap()' function.");
      var a = debugObjectHost.Debug.dumpHeap(2);

      var b = 0;
      for (var c = 0; c < a.length; c++) {
        b += a[c].size;
      }
      return "There are " + a.length + " object(s) accessible from 'global', for a total of " + b + " byte(s).";
    };

    a.prototype.getMemoryInfo = function() {
      if (!debugObjectHost || !debugObjectHost.Debug || !debugObjectHost.Debug.getMemoryInfo) throw new Error(
        "This version of the Javascript runtime doesn't support the 'Debug.getMemoryInfo()' function.");
      return debugObjectHost.Debug.getMemoryInfo();
    };

    a.prototype.collectGarbage = function() {
      if (!debugObjectHost || !debugObjectHost.CollectGarbage) throw new Error(
        "This version of the Javascript runtime doesn't support the 'CollectGarbage()' function.");
      debugObjectHost.CollectGarbage();
    };

    return a;
  }();
  a.CoreServices = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function a(a, b) {
      this.name = a;

      this.writeByteOrderMark = b;

      this.useUTF8encoding = b;

      this.text = "";
    }
    a.prototype.Write = function(a) {
      this.text += a;
    };

    a.prototype.WriteLine = function(a) {
      this.text += a + "\n";
    };

    a.prototype.Close = function() {};

    return a;
  }();
  a.EmitOutputTextWriter = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function a(a, b, c, d) {
      this.fileName = a;

      this.host = b;

      this.version = c;

      this.isOpen = d;

      this._sourceText = null;
    }
    a.prototype.getScriptSnapshot = function() {
      this._sourceText === null && (this._sourceText = this.host.getScriptSnapshot(this.fileName));

      return this._sourceText;
    };

    return a;
  }();
  a.HostCacheEntry = b;
  var c = function() {
    function a(a) {
      this.host = a;

      this.map = new TypeScript.StringHashTable;
      var c = this.host.getScriptFileNames();
      for (var d = 0, e = c.length; d < e; d++) {
        var f = c[d];
        this.map.add(f, new b(f, this.host, this.host.getScriptVersion(f), this.host.getScriptIsOpen(f)));
      }
    }
    a.prototype.contains = function(a) {
      return this.map.lookup(a) !== null;
    };

    a.prototype.getFileNames = function() {
      return this.map.getAllKeys();
    };

    a.prototype.getVersion = function(a) {
      return this.map.lookup(a).version;
    };

    a.prototype.isOpen = function(a) {
      return this.map.lookup(a).isOpen;
    };

    a.prototype.getScriptSnapshot = function(a) {
      return this.map.lookup(a).getScriptSnapshot();
    };

    return a;
  }();
  a.HostCache = c;
  var d = function() {
    function b(b) {
      this.host = b;

      this.compiler = null;

      this.hostCache = null;

      this._compilationSettings = null;

      this.logger = this.host;

      this.diagnostics = new a.CompilerDiagnostics(b);
    }
    b.prototype.compilationSettings = function() {
      return this._compilationSettings;
    };

    b.prototype.getFileNames = function() {
      return this.compiler.fileNameToDocument.getAllKeys();
    };

    b.prototype.getScript = function(a) {
      return this.compiler.getDocument(a).script;
    };

    b.prototype.getScripts = function() {
      return this.compiler.getScripts();
    };

    b.prototype.getScriptVersion = function(a) {
      return this.hostCache.getVersion(a);
    };

    b.prototype.getSemanticInfoChain = function() {
      return this.compiler.semanticInfoChain;
    };

    b.prototype.addCompilerUnit = function(a, b) {
      a.addSourceUnit(b, this.hostCache.getScriptSnapshot(b), 0, this.hostCache.getVersion(b), this.hostCache.isOpen(
        b));
    };

    b.prototype.getHostCompilationSettings = function() {
      var a = this.host.getCompilationSettings();
      return a !== null ? a : (a = new TypeScript.CompilationSettings, a.codeGenTarget = 1, a);
    };

    b.prototype.createCompiler = function() {
      this.logger.log("Initializing compiler");

      this._compilationSettings = new TypeScript.CompilationSettings;

      a.copyDataObject(this.compilationSettings(), this.getHostCompilationSettings());

      this.compiler = new TypeScript.TypeScriptCompiler(this.logger, this.compilationSettings());
      var b = this.host.getScriptFileNames();
      for (var c = 0, d = b.length; c < d; c++) {
        this.addCompilerUnit(this.compiler, b[c]);
      }
      this.compiler.pullTypeCheck();
    };

    b.prototype.minimalRefresh = function() {
      this.hostCache = new c(this.host);
    };

    b.prototype.refresh = function() {
      this.hostCache = new c(this.host);

      if (!this.fullRefresh()) {
        this.partialRefresh();
      }
    };

    b.prototype.fullRefresh = function() {
      if (this.compiler == null) {
        this.logger.log("Creating new compiler instance because there is no currently active instance");
        this.createCompiler();
        return !0;
      }
      var a = this.compiler.fileNameToDocument.getAllKeys();
      for (var b = 0, c = a.length; b < c; b++) {
        var d = a[b];
        if (!this.hostCache.contains(d)) {
          this.logger.log("Creating new compiler instance because of unit is not part of program anymore: " + b + "-" +
            d);
          this.createCompiler();
          return !0;
        }
      }
      return !1;
    };

    b.prototype.partialRefresh = function() {
      this.logger.log("Updating files...");
      var a = !1;

      var b = this.host.getScriptFileNames();
      for (var c = 0, d = b.length; c < d; c++) {
        var e = b[c];
        if (this.compiler.getDocument(e)) {
          this.updateCompilerUnit(this.compiler, e);
        } else {
          this.addCompilerUnit(this.compiler, e);
          a = !0;
        }
      }
      if (a) {
        this.compiler.pullTypeCheck();
      }
    };

    b.prototype.getDocument = function(a) {
      return this.compiler.getDocument(a);
    };

    b.prototype.getSyntacticDiagnostics = function(a) {
      return this.compiler.getSyntacticDiagnostics(a);
    };

    b.prototype.getSemanticDiagnostics = function(a) {
      return this.compiler.getSemanticDiagnostics(a);
    };

    b.prototype.getEmitOutput = function(b) {
      var c = new a.EmitOutput;

      var d = this.compiler.getSyntacticDiagnostics(b);
      if (this.containErrors(d)) {
        return c;
      }
      this.compiler.getSemanticDiagnostics(b);
      var e = {
        writeFile: function(b, d, e) {
          var f = new a.EmitOutputTextWriter(b, e);
          f.Write(d);

          c.outputFiles.push(f);
        },
        directoryExists: function(a) {
          return !0;
        },
        fileExists: function(a) {
          return !1;
        },
        resolvePath: function(a) {
          return a;
        }
      };

      var f;
      f = this.compiler.parseEmitOption(e) || [];

      c.diagnostics = c.diagnostics.concat(f);

      return this.containErrors(f) ? c : (f = this.compiler.emitUnit(b, e) || [], c.diagnostics = c.diagnostics.concat(
        f), this.containErrors(f) ? c : (this.shouldEmitDeclarations(b) && (f = this.compiler.emitUnitDeclarations(
        b) || [], c.diagnostics = c.diagnostics.concat(f)), c));
    };

    b.prototype.shouldEmitDeclarations = function(a) {
      var b = this.compiler.getSemanticDiagnostics(a);
      return this.containErrors(b) ? !1 : !0;
    };

    b.prototype.containErrors = function(a) {
      if (a && a.length > 0)
        for (var b = 0; b < a.length; b++) {
          var c = TypeScript.getDiagnosticInfoFromCode(a[b].diagnosticCode());
          if (c.category === 1) {
            return !0;
          }
        }
      return !1;
    };

    b.prototype.getScriptTextChangeRangeSinceVersion = function(a, b) {
      var c = this.hostCache.getVersion(a);
      if (b === c) {
        return TypeScript.TextChangeRange.unchanged;
      }
      var d = this.hostCache.getScriptSnapshot(a);
      return d.getTextChangeRangeSinceVersion(b);
    };

    b.prototype.getScriptSnapshot = function(a) {
      return this.hostCache.getScriptSnapshot(a);
    };

    b.prototype.getDeclarationSymbolInformation = function(a, b) {
      return this.compiler.pullGetDeclarationSymbolInformation(a, b);
    };

    b.prototype.getSymbolInformationFromPath = function(a, b) {
      return this.compiler.pullGetSymbolInformationFromPath(a, b);
    };

    b.prototype.getCallInformationFromPath = function(a, b) {
      return this.compiler.pullGetCallInformationFromPath(a, b);
    };

    b.prototype.getVisibleMemberSymbolsFromPath = function(a, b) {
      return this.compiler.pullGetVisibleMemberSymbolsFromPath(a, b);
    };

    b.prototype.getVisibleDeclsFromPath = function(a, b) {
      return this.compiler.pullGetVisibleDeclsFromPath(a, b);
    };

    b.prototype.geContextualMembersFromPath = function(a, b) {
      return this.compiler.pullGetContextualMembersFromPath(a, b);
    };

    b.prototype.pullGetDeclInformation = function(a, b, c) {
      return this.compiler.pullGetDeclInformation(a, b, c);
    };

    b.prototype.getTopLevelDeclarations = function(a) {
      return this.compiler.getTopLevelDeclarations(a);
    };

    b.prototype.updateCompilerUnit = function(a, b) {
      var c = this.compiler.getDocument(b);

      var d = this.hostCache.getVersion(b);

      var e = this.hostCache.isOpen(b);
      if (c.version === d && c.isOpen === e) return;
      var f = this.getScriptTextChangeRangeSinceVersion(b, c.version);
      a.updateSourceUnit(b, this.hostCache.getScriptSnapshot(b), d, e, f);
    };

    b.prototype.getDocCommentsOfDecl = function(a) {
      var b = this.compiler.semanticInfoChain.getASTForDecl(a);
      return !b || b.nodeType == 15 && a.getKind() == 1024 ? [] : b.getDocComments();
    };

    b.prototype.getDocCommentArray = function(a) {
      var b = [];
      if (!a) {
        return b;
      }
      var c = a.getKind() == 2048;

      var d = a.getDeclarations();
      for (var e = 0; e < d.length; e++) {
        if (c && d[e].getKind() == 4096) continue;
        b = b.concat(this.getDocCommentsOfDecl(d[e]));
      }
      return b;
    };

    b.getDefaultConstructorSymbolForDocComments = function(a) {
      if (a.getHasDefaultConstructor()) {
        var c = a.getExtendedTypes();
        if (c.length) {
          return b.getDefaultConstructorSymbolForDocComments(c[0]);
        }
      }
      return a.getType().getConstructSignatures()[0];
    };

    b.prototype.getDocComments = function(a, b) {
      if (!a) {
        return "";
      }
      var c = a.getDeclarations();
      if (b && c.length && c[0].getKind() == 32768) {
        var d = c[0].getParentDecl();
        return TypeScript.Comment.getDocCommentText(this.getDocCommentsOfDecl(d));
      }
      if (a.docComments === null) {
        var e = "";
        if (!b && a.getKind() == 2097152 && c.length && c[0].getKind() == 8) {
          var f = a.getReturnType();

          var g = f.getExtendedTypes();
          if (g.length) {
            e = this.getDocComments(g[0].getConstructorMethod());
          } else {
            e = "";
          }
        } else if (a.getKind() == 2048) {
          var h = [];

          var i = a.findIncomingLinks(function(a) {
            return a.kind == 13;
          });
          for (var j = 0; j < i.length; j++) {
            var k = i[j].start;

            var l = this.getDocCommentArray(k);

            var m = TypeScript.Comment.getParameterDocCommentText(a.getDisplayName(), l);
            if (m != "") {
              h.push(m);
            }
          }
          var n = TypeScript.Comment.getDocCommentText(this.getDocCommentArray(a));
          if (n != "") {
            h.push(n);
          }

          e = h.join("\n");
        } else {
          var o = !0;
          if (a.getKind() == 16777216) {
            var p = a.findIncomingLinks(function(a) {
              return a.kind == 0;
            });
            if (p.length > 0) {
              e = this.getDocComments(p[0].start);
              o = !1;
            }
          }
          if (o) {
            e = TypeScript.Comment.getDocCommentText(this.getDocCommentArray(a));
            if (e == "" && a.getKind() == 1048576) {
              var q = a.findIncomingLinks(function(a) {
                return a.kind == 15;
              });
              if (q.length == 1) {
                var r = q[0].start;
                if (r.getCallSignatures().length == 1) {
                  e = this.getDocComments(r);
                }
              }
            }
          }
        }
        a.docComments = e;
      }
      return a.docComments;
    };

    return b;
  }();
  a.CompilerState = d;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function a() {}
    a.filterContextualMembersList = function(a, b) {
      if (!b || !b.symbols || b.symbols.length === 0) {
        return a;
      }
      var c = b.symbols;

      var d = {};
      for (var e = 0, f = c.length; e < f; e++) {
        d[TypeScript.stripQuotes(c[e].getDisplayName())] = !0;
      }
      var g = [];
      for (var h = 0, i = a.length; h < i; h++) {
        var j = a[h];
        if (!d[TypeScript.stripQuotes(j.getDisplayName())]) {
          g.push(j);
        }
      }
      return g;
    };

    a.isRightOfDot = function(a, b) {
      return a.count() >= 1 && a.asts[a.top].nodeType === 32 && a.asts[a.top].operand1.limChar < b || a.count() >= 2 &&
        a.asts[a.top].nodeType === 20 && a.asts[a.top - 1].nodeType === 32 && a.asts[a.top - 1].operand2 === a.asts[a
          .top];
    };

    a.isCompletionListBlocker = function(b, c) {
      return TypeScript.Syntax.isEntirelyInsideComment(b, c) || TypeScript.Syntax.isEntirelyInStringOrRegularExpressionLiteral(
        b, c) || a.isIdentifierDefinitionLocation(b, c) || a.isRightOfIllegalDot(b, c);
    };

    a.getContaingingObjectLiteralApplicableForCompletion = function(b, c) {
      var d = a.getNonIdentifierCompleteTokenOnLeft(b, c);
      if (d) {
        var e = d.parent();
        switch (d.kind()) {
          case 71:
          case 80:
            if (e && e.kind() === 2) {
              e = e.parent();
            }
            if (e && e.kind() === 214) {
              return e;
            }
        }
      }
      return null;
    };

    a.isIdentifierDefinitionLocation = function(b, c) {
      var d = a.getNonIdentifierCompleteTokenOnLeft(b, c);
      if (d) {
        var e = d.containingNode() && d.containingNode().kind();
        switch (d.kind()) {
          case 80:
            return e === 226 || e === 223;
          case 73:
            return e === 226 || e === 234;
          case 57:
          case 55:
          case 58:
          case 78:
            return e === 242;
          case 44:
          case 66:
          case 46:
          case 52:
          case 27:
          case 40:
          case 65:
          case 69:
            return !0;
        }
        switch (d.token().text()) {
          case "class":
          case "interface":
          case "enum":
          case "module":
            return !0;
        }
      }
      return !1;
    };

    a.getNonIdentifierCompleteTokenOnLeft = function(a, b) {
      var c = a.findCompleteTokenOnLeft(b, !0);
      c && b === c.end() && c.kind() == 10 && (c = c.previousToken(!0));

      c && b === c.end() && c.kind() === 11 && (c = c.previousToken(!0));

      return c;
    };

    a.isRightOfIllegalDot = function(b, c) {
      var d = a.getNonIdentifierCompleteTokenOnLeft(b, c);
      if (d) switch (d.kind()) {
        case 77:
          var e = d.previousToken(!0);
          return e && e.kind() === 13;
        case 13:
          var f = d.token().text();
          return f.charAt(f.length - 1) === ".";
      }
      return !1;
    };

    a.getValidCompletionEntryDisplayName = function(a, b) {
      if (a && a.length > 0) {
        var c = a.charCodeAt(0);
        if (c !== 39 && c !== 34) {
          return a;
        }
        a = TypeScript.stripQuotes(a);
        if (TypeScript.Scanner.isValidIdentifier(TypeScript.SimpleText.fromString(a), b)) {
          return a;
        }
      }
      return null;
    };

    return a;
  }();
  a.CompletionHelpers = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function b() {}
    b.getKeywordCompltions = function() {
      if (b.keywordCompletions === null) {
        var c = [];
        for (var d = 0, e = b.keywords.length; d < e; d++) {
          var f = b.keywords[d];

          var g = new a.ResolvedCompletionEntry(f, a.ScriptElementKind.keyword, a.ScriptElementKindModifier.none,
            null, f, null);
          c.push(g);
        }
        b.keywordCompletions = c;
      }
      return b.keywordCompletions;
    };

    b.keywords = ["break", "case", "catch", "class", "constructor", "continue", "debugger", "declare", "default",
      "delete", "do", "else", "enum", "export", "extends", "false", "finally", "for", "function", "get", "if",
      "implements", "import", "in", "instanceOf", "interface", "module", "new", "private", "public", "require",
      "return", "set", "static", "super", "switch", "this", "throw", "true", "try", "typeOf", "var", "while", "with"
    ];

    b.keywordCompletions = null;

    return b;
  }();
  a.KeywordCompletions = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function b() {}
    b.isInPartiallyWrittenTypeArgumentList = function(a, c) {
      var d = a.sourceUnit().findTokenOnLeft(c, !0);
      if (d && TypeScript.Syntax.hasAncestorOfKind(d, 228)) {
        return null;
      }
      var e = 0;

      var f = 0;
      a: while (d) {
        switch (d.kind()) {
          case 81:
            if (e === 0) {
              var g = d;
              d = d.previousToken(!0);
              if (!d || d.kind() !== 11) break a;
              return {
                genericIdentifer: d,
                lessThanToken: g,
                argumentIndex: f
              };
            }
            if (e < 0) break a;
            e--;
            break;
          case 98:
            e++;
          case 82:
            e++;
            break;
          case 80:
            if (e == 0) {
              f++;
            }
            break;
          case 72:
            var h = 0;
            d = b.moveBackUpTillMatchingTokenKind(d, 72, 71);
            if (!d) break a;
            break;
          case 86:
            d = d.previousToken(!0);
            if (!d || d.kind() !== 74) break a;
            d = b.moveBackUpTillMatchingTokenKind(d, 74, 73);

            if (d && d.kind() === 82) {
              d = b.moveBackUpTillMatchingTokenKind(d, 82, 81);
            }

            if (d && d.kind() === 31) {
              d = d.previousToken(!0);
            }
            if (!d) break a;
            break;
          case 11:
          case 60:
          case 68:
          case 70:
          case 41:
          case 61:
          case 62:
          case 77:
          case 75:
          case 76:
            break;
          default:
            break a;
        }
        d = d.previousToken(!0);
      }
      return null;
    };

    b.getSignatureInfoFromSignatureSymbol = function(b, c, d, e) {
      var f = [];

      var g = c.length > 1;
      for (var h = 0, i = c.length; h < i; h++) {
        var j = c[h];
        if (g && j.isDefinition()) continue;
        var k = new a.FormalSignatureItemInfo;

        var l = [];

        var m = j.getScopedNameEx(d).toString();
        if (!m) {
          m = b.getDisplayName();
        }
        var n = j.getSignatureTypeNameEx(m, !1, !1, d, !0, !0);
        k.signatureInfo = TypeScript.MemberName.memberNameToString(n, l);

        k.docComment = e.getDocComments(j);
        var o = 0;
        if (j.isGeneric()) {
          var p = j.getTypeParameters();
          for (var q = 0, r = p.length; q < r; q++) {
            var s = p[q];

            var t = new a.FormalTypeParameterInfo;
            t.name = s.getDisplayName();

            t.docComment = e.getDocComments(s);

            t.minChar = l[2 * o];

            t.limChar = l[2 * o + 1];

            o++;

            k.typeParameters.push(t);
          }
        }
        var u = j.getParameters();
        for (var q = 0, r = u.length; q < r; q++) {
          var v = u[q];

          var w = new a.FormalParameterInfo;
          w.isVariable = j.hasVariableParamList() && q === u.length - 1;

          w.name = v.getDisplayName();

          w.docComment = e.getDocComments(v);

          w.minChar = l[2 * o];

          w.limChar = l[2 * o + 1];

          o++;

          k.parameters.push(w);
        }
        f.push(k);
      }
      return f;
    };

    b.getSignatureInfoFromGenericSymbol = function(b, c, d) {
      var e = new a.FormalSignatureItemInfo;

      var f = [];

      var g = b.getScopedNameEx(c, !0, !1, !0);
      e.signatureInfo = TypeScript.MemberName.memberNameToString(g, f);

      e.docComment = d.getDocComments(b);
      var h = 0;

      var i = b.getType();

      var j = i.getTypeParameters();
      for (var k = 0, l = j.length; k < l; k++) {
        var m = j[k];

        var n = new a.FormalTypeParameterInfo;
        n.name = m.getDisplayName();

        n.docComment = d.getDocComments(m);

        n.minChar = f[2 * k];

        n.limChar = f[2 * k + 1];

        e.typeParameters.push(n);
      }
      return [e];
    };

    b.getActualSignatureInfoFromCallExpression = function(b, c, d) {
      if (!b) {
        return null;
      }
      var e = new a.ActualSignatureInfo;

      var f = c;

      var g = c;
      if (b.typeArguments) {
        f = Math.min(b.typeArguments.minChar);
        g = Math.max(Math.max(b.typeArguments.minChar, b.typeArguments.limChar + b.typeArguments.trailingTriviaWidth));
      }

      if (b.arguments) {
        f = Math.min(f, b.arguments.minChar);
        g = Math.max(g, Math.max(b.arguments.minChar, b.arguments.limChar + b.arguments.trailingTriviaWidth));
      }

      e.parameterMinChar = f;

      e.parameterLimChar = g;

      e.currentParameterIsTypeParameter = !1;

      e.currentParameter = -1;
      if (d) {
        e.currentParameterIsTypeParameter = !0;
        e.currentParameter = d.argumentIndex;
      } else if (b.arguments && b.arguments.members) {
        e.currentParameter = 0;
        for (var h = 0; h < b.arguments.members.length; h++) {
          if (c > b.arguments.members[h].limChar + b.arguments.members[h].trailingTriviaWidth) {
            e.currentParameter++;
          }
        }
      }
      return e;
    };

    b.getActualSignatureInfoFromPartiallyWritenGenericExpression = function(b, c) {
      var d = new a.ActualSignatureInfo;
      d.parameterMinChar = c.lessThanToken.start();

      d.parameterLimChar = Math.max(c.lessThanToken.fullEnd(), b);

      d.currentParameterIsTypeParameter = !0;

      d.currentParameter = c.argumentIndex;

      return d;
    };

    b.isSignatureHelpBlocker = function(a, b) {
      return TypeScript.Syntax.isEntirelyInsideComment(a, b);
    };

    b.isTargetOfObjectCreationExpression = function(a) {
      var b = TypeScript.Syntax.getAncestorOfKind(a, 215);
      if (b) {
        var c = b.element();

        var d = c.newKeyword.fullWidth();

        var e = a.fullStart() - b.fullStart();
        return e >= d && e <= d + c.expression.fullWidth();
      }
      return !1;
    };

    b.moveBackUpTillMatchingTokenKind = function(a, b, c) {
      if (!a || a.kind() !== b) throw TypeScript.Errors.invalidOperation();
      a = a.previousToken(!0);
      var d = 0;
      while (a) {
        if (a.kind() === c) {
          if (d === 0) {
            return a;
          }
          if (d < 0) break;
          d--;
        } else {
          if (a.kind() === b) {
            d++;
          }
        }
        a = a.previousToken(!0);
      }
      return null;
    };

    return b;
  }();
  a.SignatureInfoHelpers = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function a(a, b, c, d, e, f) {
      this.name = a;

      this.kind = b;

      this.kindModifiers = c;

      this.type = d;

      this.fullSymbolName = e;

      this.docComment = f;
    }
    a.prototype.isResolved = function() {
      return !0;
    };

    return a;
  }();
  a.ResolvedCompletionEntry = b;
  var c = function() {
    function a(a, b, c, d) {
      this.name = a;

      this.kind = b;

      this.kindModifiers = c;

      this.decl = d;

      this.type = null;

      this.fullSymbolName = null;

      this.docComment = null;

      this.hasBeenResolved = !1;
    }
    a.prototype.isResolved = function() {
      return this.hasBeenResolved;
    };

    a.prototype.resolve = function(a, b, c) {
      this.type = a;

      this.fullSymbolName = b;

      this.docComment = c;

      this.hasBeenResolved = !0;
    };

    return a;
  }();
  a.DeclReferenceCompletionEntry = c;
  var d = function() {
    function a(a, b, c) {
      this.fileName = a;

      this.position = b;

      this.entries = c;
    }
    return a;
  }();
  a.CompletionSession = d;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function b(b) {
      this.host = b;

      this.currentFileName = "";

      this.currentFileVersion = -1;

      this.currentFileSyntaxTree = null;

      this.activeCompletionSession = null;

      this.logger = this.host;

      this.compilerState = new a.CompilerState(this.host);
    }
    b.prototype.refresh = function() {
      var a = this;
      TypeScript.timeFunction(this.logger, "refresh()", function() {
        a.compilerState.refresh();
      });
    };

    b.prototype.minimalRefresh = function() {
      var a = this;
      TypeScript.timeFunction(this.logger, "minimalRefresh()", function() {
        a.compilerState.minimalRefresh();
      });
    };

    b.prototype.getReferencesAtPosition = function(a, b) {
      this.refresh();
      var c = [];

      var d = this.compilerState.getDocument(a);

      var e = d.script;

      var f = this.getAstPathToPosition(e, b);
      if (f.ast() === null || f.ast().nodeType !== 20) {
        this.logger.log("No name found at the given position");
        return c;
      }
      var g = this.compilerState.getSymbolInformationFromPath(f, d);
      if (g === null || g.symbol === null) {
        this.logger.log("No symbol found at the given position");
        return c;
      }
      var h = g.symbol;

      var i = h.getName();

      var j = this.compilerState.getFileNames();
      for (var k = 0, l = j.length; k < l; k++) {
        var m = j[k];

        var n = this.compilerState.getDocument(m);

        var o = n.bloomFilter();
        if (o.probablyContains(i)) {
          c = c.concat(this.getReferencesInFile(m, h));
        }
      }
      return c;
    };

    b.prototype.getOccurrencesAtPosition = function(a, b) {
      this.refresh();
      var c = [];

      var d = this.compilerState.getDocument(a);

      var e = d.script;

      var f = this.getAstPathToPosition(e, b);
      if (f.ast() === null || f.ast().nodeType !== 20) {
        this.logger.log("No name found at the given position");
        return c;
      }
      var g = this.compilerState.getSymbolInformationFromPath(f, d);
      if (g === null || g.symbol === null) {
        this.logger.log("No symbol found at the given position");
        return c;
      }
      var h = g.symbol;
      return this.getReferencesInFile(a, h);
    };

    b.prototype.getImplementorsAtPosition = function(a, b) {
      return [];
    };

    b.prototype.getReferencesInFile = function(b, c) {
      var d = this;

      var e = [];

      var f = c.getDisplayName();

      var g = this.getPossibleSymbolReferencePositions(b, f);
      if (g && g.length > 0) {
        var h = this.compilerState.getDocument(b);

        var i = h.script;
        g.forEach(function(g) {
          var j = d.getAstPathToPosition(i, g);
          if (j.ast() === null || j.ast().nodeType !== 20) return;
          var k = d.compilerState.getSymbolInformationFromPath(j, h);
          if (k !== null) {
            var l = a.FindReferenceHelpers.getCorrectASTForReferencedSymbolName(k.ast, f);
            if (l.limChar - l.minChar === f.length && a.FindReferenceHelpers.compareSymbolsForLexicalIdentity(k.symbol,
              c)) {
              var m = d.isWriteAccess(j.ast(), j.parent());
              e.push(new a.ReferenceEntry(b, l.minChar, l.limChar, m));
            }
          }
        });
      }
      return e;
    };

    b.prototype.isWriteAccess = function(a, b) {
      if (b !== null) {
        var c = b.nodeType;
        switch (c) {
          case 13:
            return b.name === a;
          case 14:
            return b.name === a;
          case 15:
            return b.name === a;
          case 12:
            return b.name === a;
          case 16:
            return b.id === a;
          case 17:
            var d = b;
            return !!d.init && d.id === a;
          case 19:
            return !0;
          case 38:
          case 39:
          case 40:
          case 42:
          case 41:
          case 43:
          case 46:
          case 44:
          case 45:
          case 47:
          case 49:
          case 48:
            return b.operand1 === a;
          case 74:
          case 76:
          case 75:
          case 77:
            return !0;
        }
      }
      return !1;
    };

    b.prototype.getPossibleSymbolReferencePositions = function(a, b) {
      var c = [];

      var d = this.compilerState.getScriptSnapshot(a);

      var e = d.getText(0, d.getLength());

      var f = e.indexOf(b);
      while (f >= 0) {
        c.push(f);
        f = e.indexOf(b, f + b.length + 1);
      }
      return c;
    };

    b.prototype.getSignatureAtPosition = function(b, c) {
      this.refresh();
      var d = this.compilerState.getDocument(b);
      if (a.SignatureInfoHelpers.isSignatureHelpBlocker(d.syntaxTree().sourceUnit(), c)) {
        this.logger.log("position is not a valid singature help location");
        return null;
      }
      var e = a.SignatureInfoHelpers.isInPartiallyWrittenTypeArgumentList(d.syntaxTree(), c);
      if (e) {
        return this.getTypeParameterSignatureFromPartiallyWrittenExpression(d, c, e);
      }
      var f = d.script;

      var g = this.getAstPathToPosition(f, c);
      if (g.count() == 0) {
        return null;
      }
      while (g.count() >= 2) {
        if (g.ast().nodeType === 36 || g.ast().nodeType === 37 || g.isDeclaration() && c > g.ast().minChar) break;
        g.pop();
      }
      if (g.ast().nodeType !== 36 && g.ast().nodeType !== 37) {
        this.logger.log("No call expression or generic arguments found for the given position");
        return null;
      }
      var h = g.ast();

      var i = h.nodeType === 37;
      if (c <= h.target.limChar + h.target.trailingTriviaWidth || c > h.arguments.limChar + h.arguments.trailingTriviaWidth) {
        this.logger.log("Outside argument list");
        return null;
      }
      var j = this.compilerState.getCallInformationFromPath(g, d);
      if (!j || !j.targetSymbol || !j.resolvedSignatures) {
        this.logger.log("Could not find symbol for call expression");
        return null;
      }
      var k = new a.SignatureInfo;
      k.formal = a.SignatureInfoHelpers.getSignatureInfoFromSignatureSymbol(j.targetSymbol, j.resolvedSignatures, j.enclosingScopeSymbol,
        this.compilerState);

      k.actual = a.SignatureInfoHelpers.getActualSignatureInfoFromCallExpression(h, c, e);

      k.activeFormal = j.resolvedSignatures && j.candidateSignature ? j.resolvedSignatures.indexOf(j.candidateSignature) : -
        1;

      return k.actual === null || k.formal === null || k.activeFormal === null ? (this.logger.log(
        "Can't compute actual and/or formal signature of the call expression"), null) : k;
    };

    b.prototype.getTypeParameterSignatureFromPartiallyWrittenExpression = function(b, c, d) {
      var e = b.script;

      var f = this.getAstPathToPosition(e, d.genericIdentifer.start());
      if (f.count() == 0 || f.ast().nodeType !== 20) throw new Error(
        "getTypeParameterSignatureAtPosition: Looking up path for identifier token did not result in an identifer.");
      var g = this.compilerState.getSymbolInformationFromPath(f, b);
      if (!g.symbol) {
        return null;
      }
      var h = a.SignatureInfoHelpers.isTargetOfObjectCreationExpression(d.genericIdentifer);

      var i = g.symbol.getType();
      if (i.getKind() === 16777216 || h && i.getKind() === 33554432) {
        var j = h ? i.getConstructSignatures() : i.getCallSignatures();

        var k = new a.SignatureInfo;
        k.formal = a.SignatureInfoHelpers.getSignatureInfoFromSignatureSymbol(g.symbol, j, g.enclosingScopeSymbol,
          this.compilerState);

        k.actual = a.SignatureInfoHelpers.getActualSignatureInfoFromPartiallyWritenGenericExpression(c, d);

        k.activeFormal = 0;

        return k;
      }
      if (i.isGeneric()) {
        if (i.getKind() === 33554432) {
          i = i.getAssociatedContainerType();
        }
        var k = new a.SignatureInfo;
        k.formal = a.SignatureInfoHelpers.getSignatureInfoFromGenericSymbol(i, g.enclosingScopeSymbol, this.compilerState);

        k.actual = a.SignatureInfoHelpers.getActualSignatureInfoFromPartiallyWritenGenericExpression(c, d);

        k.activeFormal = 0;

        return k;
      }
      return null;
    };

    b.prototype.getDefinitionAtPosition = function(b, c) {
      this.refresh();
      var d = this.compilerState.getDocument(b);

      var e = d.script;

      var f = this.getAstPathToPosition(e, c);
      if (f.count() == 0) {
        return null;
      }
      var g = this.compilerState.getSymbolInformationFromPath(f, d);
      if (g == null || g.symbol == null) {
        this.logger.log("No identifier at the specified location.");
        return null;
      }
      var h = g.symbol.getDeclarations();
      if (h == null || h.length === 0) {
        this.logger.log("Could not find declaration for symbol.");
        return null;
      }
      var i = g.symbol.getDisplayName();

      var j = this.mapPullElementKind(g.symbol.getKind(), g.symbol);

      var k = g.symbol.getContainer();

      var l = k ? k.fullName() : "";

      var m = k ? this.mapPullElementKind(k.getKind(), k) : "";

      var n = [];

      var o = null;
      for (var p = 0, q = h.length; p < q; p++) {
        var r = h[p];

        var s = r.getSpan();

        var t = n.length;

        var u = r.getSignatureSymbol();
        if (u) {
          if (o && !o.isDefinition) {
            t = o.index;
          }
          o = {
            isDefinition: u.isDefinition(),
            index: t
          };
        }

        n[t] = new a.DefinitionInfo(r.getScriptName(), s.start(), s.end(), j, i, m, l);
      }
      return n;
    };

    b.prototype.getNavigateToItems = function(a) {
      return null;
    };

    b.prototype.getScriptLexicalStructure = function(a) {
      this.refresh();
      var b = this.compilerState.getTopLevelDeclarations(a);
      if (!b) {
        return null;
      }
      var c = [];
      this.mapPullDeclsToNavigateToItem(b, c);

      return c;
    };

    b.prototype.mapPullDeclsToNavigateToItem = function(b, c, d, e, f) {
      if (typeof f == "undefined") {
        f = !0;
      }
      for (var g = 0, h = b.length; g < h; g++) {
        var i = b[g];

        var j = this.mapPullElementKind(i.getKind(), null);

        var k = i.getScriptName();
        if (this.shouldIncludeDeclarationInNavigationItems(i, f)) {
          var l = new a.NavigateToItem;

          var m = this.getNavigationItemDispalyName(i);

          var n = d ? d + "." + m : m;
          l.name = m;

          l.matchKind = a.MatchKind.exact;

          l.kind = j;

          l.kindModifiers = this.getScriptElementKindModifiersFromDecl(i);

          l.fileName = k;

          l.minChar = i.getSpan().start();

          l.limChar = i.getSpan().end();

          l.containerName = d || "";

          l.containerKind = e || "";

          c.push(l);
        }
        if (f && this.isContainerDeclaration(i)) {
          this.mapPullDeclsToNavigateToItem(i.getChildDecls(), c, n, j, !0);
        }
      }
    };

    b.prototype.getScriptElementKindModifiersFromDecl = function(b) {
      var c = [];

      var d = b.getFlags();
      d & 1 && c.push(a.ScriptElementKindModifier.exportedModifier);

      d & 8 && c.push(a.ScriptElementKindModifier.ambientModifier);

      d & 4 && c.push(a.ScriptElementKindModifier.publicMemberModifier);

      d & 2 && c.push(a.ScriptElementKindModifier.privateMemberModifier);

      d & 16 && c.push(a.ScriptElementKindModifier.staticModifier);

      return c.length > 0 ? c.join(",") : a.ScriptElementKindModifier.none;
    };

    b.prototype.isContainerDeclaration = function(a) {
      switch (a.getKind()) {
        case 1:
        case 4:
        case 8:
        case 16:
        case 32:
        case 64:
          return !0;
      }
      return !1;
    };

    b.prototype.shouldIncludeDeclarationInNavigationItems = function(a, b) {
      switch (a.getKind()) {
        case 1:
          return !1;
        case 1024:
        case 4096:
          return (a.getFlags() & 245760) === 0;
        case 67108864:
          return !0;
        case 131072:
        case 16384:
          return a.getName() !== "";
      }
      return this.isContainerDeclaration(a) ? b : !0;
    };

    b.prototype.getNavigationItemDispalyName = function(a) {
      switch (a.getKind()) {
        case 32768:
          return "constructor";
        case 1048576:
          return "()";
        case 2097152:
          return "new()";
        case 4194304:
          return "[]";
      }
      return a.getDisplayName();
    };

    b.prototype.getSyntacticDiagnostics = function(a) {
      this.compilerState.refresh();

      return this.compilerState.getSyntacticDiagnostics(a);
    };

    b.prototype.getSemanticDiagnostics = function(a) {
      this.compilerState.refresh();

      return this.compilerState.getSemanticDiagnostics(a);
    };

    b.prototype.getEmitOutput = function(a) {
      this.compilerState.refresh();

      return this.compilerState.getEmitOutput(a);
    };

    b.prototype.getAstPathToPosition = function(a, b, c, d) {
      typeof c == "undefined" && (c = !0);

      typeof d == "undefined" && (d = 0);

      this.logger.information() && this.logger.log("getAstPathToPosition(" + a + ", " + b + ")");

      return TypeScript.getAstPathToPosition(a, b, c, d);
    };

    b.prototype.getFullNameOfSymbol = function(a, b) {
      var c = a.getContainer();
      return this.isLocal(a) || a.getKind() == 2048 ? a.getScopedName(b) : a.getKind() == 2 ? "" : a.fullName(b);
    };

    b.prototype.getTypeInfoEligiblePath = function(a, b, c) {
      this.refresh();
      var d = this.compilerState.getDocument(a);

      var e = d.script;

      var f = this.getAstPathToPosition(e, b, !1);
      if (f.count() == 0) {
        return null;
      }
      var g = f.ast();
      switch (g.nodeType) {
        default: return null;
        case 12:
          var h = g;
          if (!c || !h.isConstructor || !(b >= h.minChar && b <= h.minChar + 11)) {
            return null;
          }
        case 32:
        case 30:
        case 5:
        case 29:
        case 20:
          return f;
      }
    };

    b.prototype.getTypeAtPosition = function(b, c) {
      var d = this.getTypeInfoEligiblePath(b, c, !0);
      if (!d) {
        return null;
      }
      var e = this.compilerState.getDocument(b);

      var f;

      var g;

      var h;

      var i;

      var j = !1;

      var k;

      var l;

      var m;
      if (d.isNameOfClass() || d.isNameOfInterface() || d.isNameOfFunction() || d.isNameOfVariable()) {
        d.pop();
      }
      if (d.isDeclaration()) {
        var n = this.compilerState.getDeclarationSymbolInformation(d, e);
        f = n.ast;

        g = n.symbol;

        i = n.enclosingScopeSymbol;
        if (d.ast().nodeType === 12) {
          var o = d.ast();
          if (g && g.getKind() != 4096) {
            var p = TypeScript.PullHelpers.getSignatureForFuncDecl(o, this.compilerState.getSemanticInfoChain().getUnit(
              b));
            j = !0;

            l = p.signature;

            k = p.allSignatures;
          }
        }
      } else if (d.isCallExpression() || d.isCallExpressionTarget()) {
        while (!d.isCallExpression()) {
          d.pop();
        }
        var q = this.compilerState.getCallInformationFromPath(d, e);
        if (!q.targetSymbol) {
          return null;
        }
        f = q.ast;

        g = q.targetSymbol;

        i = q.enclosingScopeSymbol;
        var r = g.getKind() == 4096 || g.getKind() == 1024;
        h = g.getType();

        if (r) {
          if (h.getName() != "") {
            g = h;
          }
          r = h.getKind() != 16 && h.getKind() != 8388608 || h.getName() == "";
        }

        if (!r) {
          j = !0;
          k = q.resolvedSignatures;
          l = q.candidateSignature;
          m = q.isConstructorCall;
        }
      } else {
        var s = this.compilerState.getSymbolInformationFromPath(d, e);
        if (!s.symbol) {
          return null;
        }
        f = s.ast;

        g = s.symbol;

        i = s.enclosingScopeSymbol;
        if (g.getKind() === 65536 || g.getKind() == 16384) {
          h = g.getType();
          if (h) {
            j = !0;
            k = h.getCallSignatures();
          }
        }
      }
      if (k && (!l || l.isDefinition()))
        for (var t = 0, u = k.length; t < u; t++) {
          if (u > 1 && k[t].isDefinition()) continue;
          l = k[t];
          break;
        }
      var v = j ? TypeScript.PullSignatureSymbol.getSignatureTypeMemberName(l, k, i) : g.getTypeNameEx(i, !0);

      var w = this.mapPullElementKind(g.getKind(), g, !j, j, m);

      var x = this.compilerState.getDocComments(l || g, !j);

      var y = this.getFullNameOfSymbol(g, i);

      var z = f ? f.minChar : -1;

      var A = f ? f.limChar : -1;
      return new a.TypeInfo(v, x, y, w, z, A);
    };

    b.prototype.getCompletionsAtPosition = function(b, c, d) {
      this.refresh();
      var e = this.compilerState.getDocument(b);

      var f = e.script;
      if (a.CompletionHelpers.isCompletionListBlocker(e.syntaxTree().sourceUnit(), c)) {
        this.logger.log("Returning an empty list because completion was blocked.");
        return null;
      }
      var g = this.getAstPathToPosition(f, c);

      var h = !1;
      if (g.count() >= 1 && g.asts[g.top].nodeType === 32 && g.asts[g.top].operand1.limChar < c) {
        h = !0;
        g.push(g.asts[g.top].operand1);
      } else {
        if (g.count() >= 2 && g.asts[g.top].nodeType === 20 && g.asts[g.top - 1].nodeType === 32 && g.asts[g.top - 1]
          .operand2 === g.asts[g.top]) {
          h = !0;
          g.pop();
          g.push(g.asts[g.top].operand1);
        }
      }
      var i = new TypeScript.IdentiferNameHashTable;
      if (h) {
        var j = this.compilerState.getVisibleMemberSymbolsFromPath(g, e);
        if (!j) {
          return null;
        }
        d = !0;

        this.getCompletionEntriesFromSymbols(j, i);
      } else {
        var k = a.CompletionHelpers.getContaingingObjectLiteralApplicableForCompletion(e.syntaxTree().sourceUnit(), c);
        if (k) {
          var l = Math.min(c, k.end());
          g = this.getAstPathToPosition(f, l);
          while (g.ast().nodeType !== 22) {
            g.pop();
          }
          if (!g.ast() || g.ast().nodeType !== 22) throw TypeScript.Errors.invalidOperation(
            "AST Path look up did not result in the same node as Fidelity Syntax Tree look up.");
          d = !0;
          var m = this.compilerState.geContextualMembersFromPath(g, e);
          if (m && m.symbols && m.symbols.length > 0) {
            var n = this.compilerState.getVisibleMemberSymbolsFromPath(g, e);
            this.getCompletionEntriesFromSymbols({
              symbols: a.CompletionHelpers.filterContextualMembersList(m.symbols, n),
              enclosingScopeSymbol: m.enclosingScopeSymbol
            }, i);
          }
        } else {
          d = !1;
          var o = this.compilerState.getVisibleDeclsFromPath(g, e);
          this.getCompletionEntriesFromDecls(o, i);
        }
      }
      if (!d) {
        this.getCompletionEntriesForKeywords(a.KeywordCompletions.getKeywordCompltions(), i);
      }
      var p = new a.CompletionInfo;
      p.isMemberCompletion = d;

      p.entries = [];

      i.map(function(a, b) {
        p.entries.push({
          name: b.name,
          kind: b.kind,
          kindModifiers: b.kindModifiers
        });
      }, null);

      this.activeCompletionSession = new a.CompletionSession(b, c, i);

      return p;
    };

    b.prototype.getCompletionEntriesFromSymbols = function(b, c) {
      for (var d = 0, e = b.symbols.length; d < e; d++) {
        var f = b.symbols[d];

        var g = a.CompletionHelpers.getValidCompletionEntryDisplayName(f.getDisplayName(), this.compilerState.compilationSettings()
          .codeGenTarget);
        if (!g) continue;
        var h = f.getKind();

        var i = c.lookup(g);
        if (i && h & TypeScript.PullElementKind.SomeValue) continue;
        var j = f.getTypeName(b.enclosingScopeSymbol, !0);

        var k = this.mapPullElementKind(h, f, !0);

        var l = this.getScriptElementKindModifiers(f);

        var m = this.getFullNameOfSymbol(f, b.enclosingScopeSymbol);

        var n = f.getType();

        var o = f;
        if (n && n.hasOnlyOverloadCallSignatures()) {
          o = n.getCallSignatures()[0];
        }
        var p = this.compilerState.getDocComments(o, !0);

        var q = new a.ResolvedCompletionEntry(g, k, l, j, m, p);
        c.addOrUpdate(g, q);
      }
    };

    b.prototype.getCompletionEntriesFromDecls = function(b, c) {
      for (var d = 0, e = b.length; d < e; d++) {
        var f = b[d];

        var g = a.CompletionHelpers.getValidCompletionEntryDisplayName(f.getDisplayName(), this.compilerState.compilationSettings()
          .codeGenTarget);
        if (!g) continue;
        var h = f.getKind();

        var i = c.lookup(g);
        if (i && h & TypeScript.PullElementKind.SomeValue) continue;
        var j = this.mapPullElementKind(h, null, !0);

        var k = this.getScriptElementKindModifiersFromFlgas(f.getFlags());

        var l = new a.DeclReferenceCompletionEntry(g, j, k, f);
        c.addOrUpdate(g, l);
      }
    };

    b.prototype.getCompletionEntriesForKeywords = function(a, b) {
      for (var c = 0, d = a.length; c < d; c++) {
        var e = a[c];
        b.addOrUpdate(e.name, e);
      }
    };

    b.prototype.getCompletionEntryDetails = function(a, b, c) {
      if (!this.activeCompletionSession || this.activeCompletionSession.fileName !== a || this.activeCompletionSession
        .position !== b) {
        return null;
      }
      var d = this.activeCompletionSession.entries.lookup(c);
      if (!d) {
        return null;
      }
      if (!d.isResolved()) {
        var e = d;

        var f = e.decl;

        var g = this.compilerState.getDocument(a);

        var h = this.getAstPathToPosition(g.script, b);

        var i = this.compilerState.pullGetDeclInformation(f, h, g);
        if (!i) {
          return null;
        }
        var j = i.symbol;

        var k = j.getTypeName(i.enclosingScopeSymbol, !0);

        var l = this.getFullNameOfSymbol(j, i.enclosingScopeSymbol);

        var m = j.getType();

        var n = j;
        if (m && m.hasOnlyOverloadCallSignatures()) {
          n = m.getCallSignatures()[0];
        }
        var o = this.compilerState.getDocComments(n, !0);
        e.resolve(k, l, o);
      }
      return {
        name: d.name,
        kind: d.kind,
        kindModifiers: d.kindModifiers,
        type: d.type,
        fullSymbolName: d.fullSymbolName,
        docComment: d.docComment
      };
    };

    b.prototype.isLocal = function(a) {
      var b = a.getContainer();
      if (b) {
        var c = b.getKind();
        if (c & (TypeScript.PullElementKind.SomeFunction | 16777216)) {
          return !0;
        }
        if (c == 33554432 && !a.hasFlag(16)) {
          return !0;
        }
      }
      return !1;
    };

    b.prototype.isModule = function(a) {
      return this.isOneDeclarationOfKind(a, 4);
    };

    b.prototype.isDynamicModule = function(a) {
      return this.isOneDeclarationOfKind(a, 32);
    };

    b.prototype.isConstructorMethod = function(a) {
      return a.hasFlag(16896);
    };

    b.prototype.isClass = function(a) {
      return this.isOneDeclarationOfKind(a, 8);
    };

    b.prototype.isOneDeclarationOfKind = function(a, b) {
      var c = a.getDeclarations();
      for (var d = 0; d < c.length; d++)
        if (c[d].getKind() === b) {
          return !0;
        }
      return !1;
    };

    b.prototype.mapPullElementKind = function(b, c, d, e, f) {
      if (f) {
        return a.ScriptElementKind.constructorImplementationElement;
      }
      if (e) switch (b) {
        case 4:
        case 32:
        case 256:
        case 16:
        case 8:
        case 2048:
          return a.ScriptElementKind.functionElement;
        case 1024:
          return c && this.isLocal(c) ? a.ScriptElementKind.localFunctionElement : a.ScriptElementKind.functionElement;
        case 4096:
          return a.ScriptElementKind.memberFunctionElement;
        case 16384:
          return c && this.isLocal(c) ? a.ScriptElementKind.localFunctionElement : a.ScriptElementKind.functionElement;
        case 32768:
          return a.ScriptElementKind.constructorImplementationElement;
        case 65536:
          return a.ScriptElementKind.memberFunctionElement;
        case 131072:
          return a.ScriptElementKind.localFunctionElement;
        case 262144:
          return a.ScriptElementKind.memberGetAccessorElement;
        case 524288:
          return a.ScriptElementKind.memberSetAccessorElement;
        case 1048576:
          return a.ScriptElementKind.callSignatureElement;
        case 2097152:
          return a.ScriptElementKind.constructSignatureElement;
        case 4194304:
          return a.ScriptElementKind.indexSignatureElement;
        case 8192:
          return a.ScriptElementKind.typeParameterElement;
        case 2:
          return a.ScriptElementKind.primitiveType;
      } else switch (b) {
        case 1:
          return a.ScriptElementKind.scriptElement;
        case 4:
        case 32:
        case 256:
          return a.ScriptElementKind.moduleElement;
        case 16:
          return a.ScriptElementKind.interfaceElement;
        case 8:
          return a.ScriptElementKind.classElement;
        case 64:
          return a.ScriptElementKind.enumElement;
        case 1024:
          if (c && this.isModule(c)) {
            return a.ScriptElementKind.moduleElement;
          }
          return c && this.isLocal(c) ? a.ScriptElementKind.localVariableElement : a.ScriptElementKind.variableElement;
        case 2048:
          return a.ScriptElementKind.parameterElement;
        case 4096:
          return a.ScriptElementKind.memberVariableElement;
        case 16384:
          return c && this.isLocal(c) ? a.ScriptElementKind.localFunctionElement : a.ScriptElementKind.functionElement;
        case 32768:
          return d ? a.ScriptElementKind.classElement : a.ScriptElementKind.constructorImplementationElement;
        case 65536:
          return a.ScriptElementKind.memberFunctionElement;
        case 131072:
          return a.ScriptElementKind.localFunctionElement;
        case 262144:
          return a.ScriptElementKind.memberGetAccessorElement;
        case 524288:
          return a.ScriptElementKind.memberSetAccessorElement;
        case 1048576:
          return a.ScriptElementKind.callSignatureElement;
        case 2097152:
          return a.ScriptElementKind.constructSignatureElement;
        case 4194304:
          return a.ScriptElementKind.indexSignatureElement;
        case 67108864:
          return a.ScriptElementKind.memberVariableElement;
        case 8192:
          return a.ScriptElementKind.typeParameterElement;
        case 2:
          return a.ScriptElementKind.primitiveType;
      }
      return a.ScriptElementKind.unknown;
    };

    b.prototype.getScriptElementKindModifiers = function(b) {
      var c = [];
      b.hasFlag(1) && c.push(a.ScriptElementKindModifier.exportedModifier);

      b.hasFlag(8) && c.push(a.ScriptElementKindModifier.ambientModifier);

      b.hasFlag(4) && c.push(a.ScriptElementKindModifier.publicMemberModifier);

      b.hasFlag(2) && c.push(a.ScriptElementKindModifier.privateMemberModifier);

      b.hasFlag(16) && c.push(a.ScriptElementKindModifier.staticModifier);

      return c.length > 0 ? c.join(",") : a.ScriptElementKindModifier.none;
    };

    b.prototype.getScriptElementKindModifiersFromFlgas = function(b) {
      var c = [];
      b & 1 && c.push(a.ScriptElementKindModifier.exportedModifier);

      b & 8 && c.push(a.ScriptElementKindModifier.ambientModifier);

      b & 4 && c.push(a.ScriptElementKindModifier.publicMemberModifier);

      b & 2 && c.push(a.ScriptElementKindModifier.privateMemberModifier);

      b & 16 && c.push(a.ScriptElementKindModifier.staticModifier);

      return c.length > 0 ? c.join(",") : a.ScriptElementKindModifier.none;
    };

    b.prototype.getNameOrDottedNameSpan = function(b, c, d) {
      var e = this.getTypeInfoEligiblePath(b, c, !1);
      if (!e) {
        return null;
      }
      while (e.count() > 0) {
        if (!e.isMemberOfMemberAccessExpression()) break;
        e.pop();
      }
      var f = e.ast();

      var g = new a.SpanInfo(f.minChar, f.limChar);
      return g;
    };

    b.prototype.getBreakpointStatementAtPosition = function(b, c) {
      this.minimalRefresh();
      var d = this.getSyntaxTreeInternal(b);
      return a.Breakpoints.getBreakpointLocation(d, c);
    };

    b.prototype.getFormattingEditsForRange = function(a, b, c, d) {
      this.minimalRefresh();
      var e = this.getFormattingManager(a, d);
      return e.formatSelection(b, c);
    };

    b.prototype.getFormattingEditsForDocument = function(a, b, c, d) {
      this.minimalRefresh();
      var e = this.getFormattingManager(a, d);
      return e.formatDocument(b, c);
    };

    b.prototype.getFormattingEditsOnPaste = function(a, b, c, d) {
      this.minimalRefresh();
      var e = this.getFormattingManager(a, d);
      return e.formatOnPaste(b, c);
    };

    b.prototype.getFormattingEditsAfterKeystroke = function(a, b, c, d) {
      this.minimalRefresh();
      var e = this.getFormattingManager(a, d);
      return c === "}" ? e.formatOnClosingCurlyBrace(b) : c === ";" ? e.formatOnSemicolon(b) : c === "\n" ? e.formatOnEnter(
        b) : [];
    };

    b.prototype.getFormattingManager = function(a, b) {
      if (this.formattingRulesProvider == null) {
        this.formattingRulesProvider = new TypeScript.Formatting.RulesProvider(this.logger);
      }

      this.formattingRulesProvider.ensureUpToDate(b);
      var c = this.getSyntaxTreeInternal(a);

      var d = this.compilerState.getScriptSnapshot(a);

      var e = TypeScript.SimpleText.fromScriptSnapshot(d);

      var f = new TypeScript.Formatting.TextSnapshot(e);

      var g = new TypeScript.Formatting.FormattingManager(c, f, this.formattingRulesProvider, b);
      return g;
    };

    b.prototype.getOutliningRegions = function(b) {
      this.minimalRefresh();
      var c = this.getSyntaxTree(b);
      return a.OutliningElementsCollector.collectElements(c.sourceUnit());
    };

    b.prototype.getIndentationAtPosition = function(a, b, c) {
      this.minimalRefresh();
      var d = this.getSyntaxTree(a);

      var e = this.compilerState.getScriptSnapshot(a);

      var f = TypeScript.SimpleText.fromScriptSnapshot(e);

      var g = new TypeScript.Formatting.TextSnapshot(f);

      var h = new FormattingOptions(!c.ConvertTabsToSpaces, c.TabSize, c.IndentSize, c.NewLineCharacter);
      return TypeScript.Formatting.SingleTokenIndenter.getIndentationAmount(b, d.sourceUnit(), g, h);
    };

    b.prototype.getBraceMatchingAtPosition = function(b, c) {
      this.minimalRefresh();
      var d = this.getSyntaxTreeInternal(b);
      return a.BraceMatcher.getMatchSpans(d, c);
    };

    b.prototype.getSyntaxTree = function(a) {
      this.minimalRefresh();

      return this.getSyntaxTreeInternal(a);
    };

    b.prototype.getSyntaxTreeInternal = function(a) {
      var b = this.compilerState.getScriptVersion(a);

      var c = null;
      this.currentFileSyntaxTree === null || this.currentFileName !== a ? c = this.createSyntaxTree(a) : this.currentFileVersion !==
        b && (c = this.updateSyntaxTree(a, this.currentFileSyntaxTree, this.currentFileVersion));

      c !== null && (this.currentFileVersion = b, this.currentFileName = a, this.currentFileSyntaxTree = c);

      return this.currentFileSyntaxTree;
    };

    b.prototype.createSyntaxTree = function(a) {
      var b = this.compilerState.getScriptSnapshot(a);

      var c = TypeScript.SimpleText.fromScriptSnapshot(b);

      var d = TypeScript.Parser.parse(a, c, TypeScript.isDTSFile(a), this.compilerState.getHostCompilationSettings().codeGenTarget,
        TypeScript.getParseOptions(this.compilerState.getHostCompilationSettings()));
      return d;
    };

    b.prototype.updateSyntaxTree = function(a, b, c) {
      var d = this.compilerState.getScriptTextChangeRangeSinceVersion(a, c);
      if (d === null) {
        return b;
      }
      var e = this.compilerState.getScriptSnapshot(a);

      var f = TypeScript.SimpleText.fromScriptSnapshot(e);

      var g = TypeScript.Parser.incrementalParse(b, d, f);
      return g;
    };

    return b;
  }();
  a.LanguageService = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function a() {}
    a.getCorrectASTForReferencedSymbolName = function(a, b) {
      if (a.nodeType == 32) {
        var c = a;

        var d = c.operand1;

        var e = c.operand2;
        if (d.actualText === b) {
          return c.operand1;
        }
        if (e.actualText === b) {
          return c.operand2;
        }
      }
      return a;
    };

    a.compareSymbolsForLexicalIdentity = function(a, b) {
      if (a.getKind() === b.getKind()) {
        return a === b;
      }
      switch (a.getKind()) {
        case 8:
          return this.checkSymbolsForDeclarationEquality(a, b);
        case 4096:
          if (a.isAccessor()) {
            var c = a.getGetter();

            var d = a.getSetter();
            if (c && c === b) {
              return !0;
            }
            if (d && d === b) {
              return !0;
            }
          }
          return !1;
        case 16384:
          if (b.isAccessor()) {
            var c = b.getGetter();

            var d = b.getSetter();
            if (c && c === a) {
              return !0;
            }
            if (d && d === a) {
              return !0;
            }
          }
          return !1;
        case 32768:
          return this.checkSymbolsForDeclarationEquality(a, b);
      }
      return a === b;
    };

    a.checkSymbolsForDeclarationEquality = function(a, b) {
      var c = a.getDeclarations();

      var d = b.getDeclarations();
      for (var e = 0, f = c.length; e < f; e++)
        for (var g = 0, h = d.length; g < h; g++)
          if (this.declarationsAreSameOrParents(c[e], d[g])) {
            return !0;
          }
      return !1;
    };

    a.declarationsAreSameOrParents = function(a, b) {
      var c = a.getParentDecl();

      var d = b.getParentDecl();
      return a === b || a === d || c === b || c === d ? !0 : !1;
    };

    return a;
  }();
  a.FindReferenceHelpers = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  function e(a, b, c) {
    a.log(b);
    var d = Date.now();

    var e = c();

    var f = Date.now();
    a.log(b + " completed in " + (f - d) + " msec");
    if (typeof e == "string") {
      var g = e;
      if (g.length > 128) {
        g = g.substring(0, 128) + "...";
      }

      a.log("  result.length=" + g.length + ", result='" + JSON.stringify(g) + "'");
    }
    return e;
  }

  function f(b, c, d) {
    try {
      var f = e(b, c, d);
      return JSON.stringify({
        result: f
      });
    } catch (g) {
      a.logInternalError(b, g);

      return JSON.stringify({
        error: g
      });
    }
  }
  var b = function() {
    function a(a) {
      this.factory = a;

      a.registerShim(this);
    }
    a.prototype.dispose = function(a) {
      this.factory.unregisterShim(this);
    };

    return a;
  }();
  a.ShimBase = b;
  var c = function() {
    function a(a) {
      this.scriptSnapshotShim = a;

      this.lineStartPositions = null;
    }
    a.prototype.getText = function(a, b) {
      return this.scriptSnapshotShim.getText(a, b);
    };

    a.prototype.getLength = function() {
      return this.scriptSnapshotShim.getLength();
    };

    a.prototype.getLineStartPositions = function() {
      this.lineStartPositions == null && (this.lineStartPositions = JSON.parse(this.scriptSnapshotShim.getLineStartPositions()));

      return this.lineStartPositions;
    };

    a.prototype.getTextChangeRangeSinceVersion = function(a) {
      var b = this.scriptSnapshotShim.getTextChangeRangeSinceVersion(a);
      if (b == null) {
        return null;
      }
      var c = JSON.parse(b);
      return new TypeScript.TextChangeRange(new TypeScript.TextSpan(c.span.start, c.span.length), c.newLength);
    };

    return a;
  }();

  var d = function() {
    function a(a) {
      this.shimHost = a;
    }
    a.prototype.information = function() {
      return this.shimHost.information();
    };

    a.prototype.debug = function() {
      return this.shimHost.debug();
    };

    a.prototype.warning = function() {
      return this.shimHost.warning();
    };

    a.prototype.error = function() {
      return this.shimHost.error();
    };

    a.prototype.fatal = function() {
      return this.shimHost.fatal();
    };

    a.prototype.log = function(a) {
      this.shimHost.log(a);
    };

    a.prototype.getCompilationSettings = function() {
      var a = this.shimHost.getCompilationSettings();
      if (a == null || a == "") {
        return null;
      }
      var b = JSON.parse(a);
      return b;
    };

    a.prototype.getScriptFileNames = function() {
      var a = this.shimHost.getScriptFileNames();
      return JSON.parse(a);
    };

    a.prototype.getScriptSnapshot = function(a) {
      return new c(this.shimHost.getScriptSnapshot(a));
    };

    a.prototype.getScriptVersion = function(a) {
      return this.shimHost.getScriptVersion(a);
    };

    a.prototype.getScriptIsOpen = function(a) {
      return this.shimHost.getScriptIsOpen(a);
    };

    a.prototype.getDiagnosticsObject = function() {
      return this.shimHost.getDiagnosticsObject();
    };

    return a;
  }();
  a.LanguageServiceShimHostAdapter = d;

  a.simpleForwardCall = e;

  a.forwardJSONCall = f;
  var g = function(b) {
    function c(a, c, d) {
      b.call(this, a);

      this.host = c;

      this.languageService = d;

      this.logger = this.host;
    }
    __extends(c, b);

    c.prototype.forwardJSONCall = function(b, c) {
      return a.forwardJSONCall(this.logger, b, c);
    };

    c.prototype.dispose = function(a) {
      this.logger.log("dispose()");

      this.languageService = null;

      this.logger = null;

      b.prototype.dispose.call(this, a);
    };

    c.prototype.refresh = function(a) {
      var b = this;
      this.forwardJSONCall("refresh(" + a + ")", function() {
        b.languageService.refresh();

        return null;
      });
    };

    c.realizeDiagnosticCategory = function(b) {
      switch (b) {
        case 1:
          return a.DiagnosticCategory.error;
        case 0:
          return a.DiagnosticCategory.warning;
        case 2:
          return a.DiagnosticCategory.message;
        default:
          return a.DiagnosticCategory.none;
      }
    };

    c.realizeDiagnostic = function(a) {
      return {
        message: a.text(),
        start: a.start(),
        length: a.length(),
        category: c.realizeDiagnosticCategory(TypeScript.getDiagnosticInfoFromCode(a.diagnosticCode()).category)
      };
    };

    c.prototype.getSyntacticDiagnostics = function(a) {
      var b = this;
      return this.forwardJSONCall('getSyntacticDiagnostics("' + a + '")', function() {
        var d = b.languageService.getSyntacticDiagnostics(a);
        return d.map(c.realizeDiagnostic);
      });
    };

    c.prototype.getSemanticDiagnostics = function(a) {
      var b = this;
      return this.forwardJSONCall('getSemanticDiagnostics("' + a + '")', function() {
        var d = b.languageService.getSemanticDiagnostics(a);
        return d.map(c.realizeDiagnostic);
      });
    };

    c.prototype.getTypeAtPosition = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getTypeAtPosition("' + a + '", ' + b + ")", function() {
        var d = c.languageService.getTypeAtPosition(a, b);
        return d;
      });
    };

    c.prototype.getNameOrDottedNameSpan = function(a, b, c) {
      var d = this;
      return this.forwardJSONCall('getNameOrDottedNameSpan("' + a + '", ' + b + ", " + c + ")", function() {
        var e = d.languageService.getNameOrDottedNameSpan(a, b, c);
        return e;
      });
    };

    c.prototype.getBreakpointStatementAtPosition = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getBreakpointStatementAtPosition("' + a + '", ' + b + ")", function() {
        var d = c.languageService.getBreakpointStatementAtPosition(a, b);
        return d;
      });
    };

    c.prototype.getSignatureAtPosition = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getSignatureAtPosition("' + a + '", ' + b + ")", function() {
        var d = c.languageService.getSignatureAtPosition(a, b);
        return d;
      });
    };

    c.prototype.getDefinitionAtPosition = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getDefinitionAtPosition("' + a + '", ' + b + ")", function() {
        return c.languageService.getDefinitionAtPosition(a, b);
      });
    };

    c.prototype.getBraceMatchingAtPosition = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getBraceMatchingAtPosition("' + a + '", ' + b + ")", function() {
        var d = c.languageService.getBraceMatchingAtPosition(a, b);
        return d;
      });
    };

    c.prototype.getIndentationAtPosition = function(a, b, c) {
      var d = this;
      return this.forwardJSONCall('getIndentationAtPosition("' + a + '", ' + b + ")", function() {
        var e = JSON.parse(c);

        var f = d.languageService.getIndentationAtPosition(a, b, e);
        return {
          value: f
        };
      });
    };

    c.prototype.getReferencesAtPosition = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getReferencesAtPosition("' + a + '", ' + b + ")", function() {
        return c.languageService.getReferencesAtPosition(a, b);
      });
    };

    c.prototype.getOccurrencesAtPosition = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getOccurrencesAtPosition("' + a + '", ' + b + ")", function() {
        return c.languageService.getOccurrencesAtPosition(a, b);
      });
    };

    c.prototype.getImplementorsAtPosition = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getImplementorsAtPosition("' + a + '", ' + b + ")", function() {
        return c.languageService.getImplementorsAtPosition(a, b);
      });
    };

    c.prototype.getCompletionsAtPosition = function(a, b, c) {
      var d = this;
      return this.forwardJSONCall('getCompletionsAtPosition("' + a + '", ' + b + ", " + c + ")", function() {
        var e = d.languageService.getCompletionsAtPosition(a, b, c);
        return e;
      });
    };

    c.prototype.getCompletionEntryDetails = function(a, b, c) {
      var d = this;
      return this.forwardJSONCall('getCompletionEntryDetails("' + a + '", ' + b + ", " + c + ")", function() {
        var e = d.languageService.getCompletionEntryDetails(a, b, c);
        return e;
      });
    };

    c.prototype.getFormattingEditsForRange = function(a, b, c, d) {
      var e = this;
      return this.forwardJSONCall('getFormattingEditsForRange("' + a + '", ' + b + ", " + c + ")", function() {
        var f = JSON.parse(d);

        var g = e.languageService.getFormattingEditsForRange(a, b, c, f);
        return g;
      });
    };

    c.prototype.getFormattingEditsForDocument = function(a, b, c, d) {
      var e = this;
      return this.forwardJSONCall('getFormattingEditsForDocument("' + a + '", ' + b + ", " + c + ")", function() {
        var f = JSON.parse(d);

        var g = e.languageService.getFormattingEditsForDocument(a, b, c, f);
        return g;
      });
    };

    c.prototype.getFormattingEditsOnPaste = function(a, b, c, d) {
      var e = this;
      return this.forwardJSONCall('getFormattingEditsOnPaste("' + a + '", ' + b + ", " + c + ")", function() {
        var f = JSON.parse(d);

        var g = e.languageService.getFormattingEditsOnPaste(a, b, c, f);
        return g;
      });
    };

    c.prototype.getFormattingEditsAfterKeystroke = function(a, b, c, d) {
      var e = this;
      return this.forwardJSONCall('getFormattingEditsAfterKeystroke("' + a + '", ' + b + ', "' + c + '")', function() {
        var f = JSON.parse(d);

        var g = e.languageService.getFormattingEditsAfterKeystroke(a, b, c, f);
        return g;
      });
    };

    c.prototype.getNavigateToItems = function(a) {
      var b = this;
      return this.forwardJSONCall('getNavigateToItems("' + a + '")', function() {
        var c = b.languageService.getNavigateToItems(a);

        var d = b._navigateToItemsToString(c);
        return d;
      });
    };

    c.prototype.getScriptLexicalStructure = function(a) {
      var b = this;
      return this.forwardJSONCall('getScriptLexicalStructure("' + a + '")', function() {
        var c = b.languageService.getScriptLexicalStructure(a);

        var d = b._navigateToItemsToString(c);
        return d;
      });
    };

    c.prototype.getOutliningRegions = function(a) {
      var b = this;
      return this.forwardJSONCall('getOutliningRegions("' + a + '")', function() {
        var c = b.languageService.getOutliningRegions(a);
        return c;
      });
    };

    c.prototype.getEmitOutput = function(a) {
      var b = this;
      return this.forwardJSONCall('getEmitOutput("' + a + '")', function() {
        var c = b.languageService.getEmitOutput(a);
        return c;
      });
    };

    c.prototype._navigateToItemsToString = function(a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        var d = a[c];
        b.push({
          name: d.name,
          kind: d.kind,
          kindModifiers: d.kindModifiers,
          containerName: d.containerName,
          containerKind: d.containerKind,
          matchKind: d.matchKind,
          fileName: d.fileName,
          minChar: d.minChar,
          limChar: d.limChar
        });
      }
      return b;
    };

    return c;
  }(b);
  a.LanguageServiceShim = g;
  var h = function(b) {
    function c(c, d) {
      b.call(this, c);

      this.host = d;

      this.classifier = new a.Classifier(this.host);
    }
    __extends(c, b);

    c.prototype.getClassificationsForLine = function(a, b) {
      var c = this.classifier.getClassificationsForLine(a, b);

      var d = c.entries;

      var e = "";
      for (var f = 0; f < d.length; f++) {
        e += d[f].length + "\n";
        e += d[f].classification + "\n";
      }
      e += c.finalLexState;

      return e;
    };

    return c;
  }(b);
  a.ClassifierShim = h;
  var i = function(b) {
    function c(c, d) {
      b.call(this, c);

      this.host = d;

      this.logger = this.host.logger;

      this.services = new a.CoreServices(this.host);
    }
    __extends(c, b);

    c.prototype.forwardJSONCall = function(b, c) {
      return a.forwardJSONCall(this.logger, b, c);
    };

    c.prototype.getPreProcessedFileInfo = function(a, b) {
      var c = this;
      return this.forwardJSONCall('getPreProcessedFileInfo("' + a + '")', function() {
        var d = c.services.getPreProcessedFileInfo(a, b);
        return d;
      });
    };

    c.prototype.getDefaultCompilationSettings = function() {
      var a = this;
      return this.forwardJSONCall("getDefaultCompilationSettings()", function() {
        var b = a.services.getDefaultCompilationSettings();
        return b;
      });
    };

    c.prototype.dumpMemory = function(a) {
      var b = this;
      return this.forwardJSONCall("dumpMemory()", function() {
        return b.services.dumpMemory();
      });
    };

    c.prototype.getMemoryInfo = function(a) {
      var b = this;
      return this.forwardJSONCall("getMemoryInfo()", function() {
        var a = b.services.getMemoryInfo();
        return a;
      });
    };

    return c;
  }(b);
  a.CoreServicesShim = i;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function(a) {
    function b() {
      a.call(this, b.MaximumDepth);

      this.elements = [];
    }
    __extends(b, a);

    b.prototype.visitClassDeclaration = function(b) {
      this.addOutlineRange(b, b.openBraceToken, b.closeBraceToken);

      a.prototype.visitClassDeclaration.call(this, b);
    };

    b.prototype.visitInterfaceDeclaration = function(b) {
      this.addOutlineRange(b, b.body, b.body);

      a.prototype.visitInterfaceDeclaration.call(this, b);
    };

    b.prototype.visitModuleDeclaration = function(b) {
      this.addOutlineRange(b, b.openBraceToken, b.closeBraceToken);

      a.prototype.visitModuleDeclaration.call(this, b);
    };

    b.prototype.visitEnumDeclaration = function(b) {
      this.addOutlineRange(b, b.openBraceToken, b.closeBraceToken);

      a.prototype.visitEnumDeclaration.call(this, b);
    };

    b.prototype.visitFunctionDeclaration = function(b) {
      this.addOutlineRange(b, b.block, b.block);

      a.prototype.visitFunctionDeclaration.call(this, b);
    };

    b.prototype.visitFunctionExpression = function(b) {
      this.addOutlineRange(b, b.block, b.block);

      a.prototype.visitFunctionExpression.call(this, b);
    };

    b.prototype.visitConstructorDeclaration = function(b) {
      this.addOutlineRange(b, b.block, b.block);

      a.prototype.visitConstructorDeclaration.call(this, b);
    };

    b.prototype.visitMemberFunctionDeclaration = function(b) {
      this.addOutlineRange(b, b.block, b.block);

      a.prototype.visitMemberFunctionDeclaration.call(this, b);
    };

    b.prototype.visitGetMemberAccessorDeclaration = function(b) {
      this.addOutlineRange(b, b.block, b.block);

      a.prototype.visitGetMemberAccessorDeclaration.call(this, b);
    };

    b.prototype.visitSetMemberAccessorDeclaration = function(b) {
      this.addOutlineRange(b, b.block, b.block);

      a.prototype.visitSetMemberAccessorDeclaration.call(this, b);
    };

    b.prototype.addOutlineRange = function(a, b, c) {
      if (b && c) {
        var d = this.position() + TypeScript.Syntax.childOffset(a, b);

        var e = this.position() + TypeScript.Syntax.childOffset(a, c) + c.leadingTriviaWidth() + c.width();
        this.elements.push(TypeScript.TextSpan.fromBounds(d, e));
      }
    };

    b.collectElements = function(a) {
      var c = new b;
      a.accept(c);

      return c.elements;
    };

    b.MaximumDepth = 10;

    return b;
  }(TypeScript.DepthLimitedWalker);
  a.OutliningElementsCollector = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function a() {}
    a.getMatchSpans = function(b, c) {
      var d = [];

      var e = b.sourceUnit().findToken(c);
      a.getMatchingCloseBrace(e, c, d);

      a.getMatchingOpenBrace(e, c, d);

      return d;
    };

    a.getMatchingCloseBrace = function(b, c, d) {
      if (b.start() === c) {
        var e = a.getMatchingCloseBraceTokenKind(b);
        if (e !== null) {
          var f = b.parentElement();

          var g = b.parent().fullStart();
          for (var h = 0, i = f.childCount(); h < i; h++) {
            var j = f.childAt(h);
            if (j !== null && j.fullWidth() > 0) {
              if (j.kind() === e) {
                var k = new TypeScript.TextSpan(c, b.token().width());

                var l = new TypeScript.TextSpan(g + j.leadingTriviaWidth(), j.width());
                d.push(k, l);
                break;
              }
              g += j.fullWidth();
            }
          }
        }
      }
    };

    a.getMatchingOpenBrace = function(b, c, d) {
      if (b.fullStart() === c) {
        b = b.previousToken();
      }
      if (b !== null && b.start() === c - 1) {
        var e = a.getMatchingOpenBraceTokenKind(b);
        if (e !== null) {
          var f = b.parentElement();

          var g = b.parent().fullStart() + f.fullWidth();
          for (var h = f.childCount() - 1; h >= 0; h--) {
            var i = f.childAt(h);
            if (i !== null && i.fullWidth() > 0) {
              if (i.kind() === e) {
                var j = new TypeScript.TextSpan(c - 1, b.token().width());

                var k = new TypeScript.TextSpan(g - i.trailingTriviaWidth() - i.width(), i.width());
                d.push(j, k);
                break;
              }
              g -= i.fullWidth();
            }
          }
        }
      }
    };

    a.getMatchingCloseBraceTokenKind = function(a) {
      var b = a !== null && a.element();
      switch (b.kind()) {
        case 71:
          return 72;
        case 73:
          return 74;
        case 75:
          return 76;
        case 81:
          return TypeScript.SyntaxUtilities.isAngleBracket(a) ? 82 : null;
      }
      return null;
    };

    a.getMatchingOpenBraceTokenKind = function(a) {
      var b = a !== null && a.element();
      switch (b.kind()) {
        case 72:
          return 71;
        case 74:
          return 73;
        case 76:
          return 75;
        case 82:
          return TypeScript.SyntaxUtilities.isAngleBracket(a) ? 81 : null;
      }
      return null;
    };

    return a;
  }();
  a.BraceMatcher = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  var b = function() {
    function a() {}
    a.getIndentation = function(b, c, d, e) {
      var f = 0;

      var g = b.findToken(d);

      var h = g;
      if (g.token().kind() === 10) {
        h = g.previousToken();
      } else {
        if (a.belongsToBracket(c, g, d)) {
          h = g.parent();
        }
      }
      if (h === null) {
        return f;
      }
      if (h.kind() === 14 || h.kind() === 12) {
        return f;
      }
      var i = h.element();

      var j = h.parent();
      while (j !== null) {
        if (j.fullStart() !== h.fullStart())
          if (a.isInContainerNode(j.element(), i)) {
            f += e.IndentSize;
          } else {
            var k = a.getCustomListIndentation(j.element(), i);
            if (k !== -1) {
              return f + k;
            }
          }
        h = j;

        i = j.element();

        j = j.parent();
      }
      return f;
    };

    a.belongsToBracket = function(a, b, c) {
      switch (b.token().kind()) {
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (c < b.start()) {
            var d = a.getText(c, b.start());
            for (var e = 0; e < d.length; e++)
              if (TypeScript.CharacterInfo.isLineTerminator(d.charCodeAt(e))) {
                return !1;
              }
          }
          return !0;
      }
      return !1;
    };

    a.isInContainerNode = function(a, b) {
      switch (a.kind()) {
        case 131:
        case 130:
        case 132:
        case 133:
        case 145:
        case 150:
        case 231:
        case 232:
          return !0;
        case 123:
          return !0;
        case 128:
          return b.kind() !== 123;
        case 129:
        case 135:
        case 138:
        case 139:
        case 239:
        case 240:
        case 221:
        case 234:
        case 235:
        case 129:
        case 137:
        case 153:
        case 154:
        case 157:
        case 160:
        case 162:
        case 146:
        case 233:
          return b.kind() !== 145;
        case 158:
          return !1;
        default:
          return a.isNode() && a.isStatement();
      }
    };

    a.getCustomListIndentation = function(b, c) {
      switch (b.kind()) {
        case 2:
          for (var d = 0, e = b.childCount(); d < e; d++) {
            var f = b.childAt(d);
            if (f !== null && f === c) {
              return a.getListItemIndentation(b, d - 1);
            }
          }
          break;
        case 225:
          var g = b;

          var h = g.arguments;
          if (h !== null && g.closeParenToken === c) {
            return a.getListItemIndentation(h, h.childCount() - 1);
          }
          break;
        case 226:
          var i = b;

          var j = i.parameters;
          if (j !== null && i.closeParenToken === c) {
            return a.getListItemIndentation(j, j.childCount() - 1);
          }
          break;
        case 227:
          var k = b;

          var l = k.typeArguments;
          if (l !== null && k.greaterThanToken === c) {
            return a.getListItemIndentation(l, l.childCount() - 1);
          }
          break;
        case 228:
          var m = b;

          var n = m.typeParameters;
          if (n !== null && m.greaterThanToken === c) {
            return a.getListItemIndentation(n, n.childCount() - 1);
          }
      }
      return -1;
    };

    a.getListItemIndentation = function(a, b) {
      for (var c = b; c > 0; c--) {
        var d = a.childAt(c);

        var e = a.childAt(c - 1);
        if (d !== null && d.leadingTrivia().hasNewLine() || e !== null && e.trailingTrivia().hasNewLine()) {
          return d.leadingTriviaWidth();
        }
      }
      return -1;
    };

    return a;
  }();
  a.Indenter = b;
})(Services || (Services = {}));

var Services;

(function(a) {
  (function(b) {
    function c(b) {
      var c = [];
      for (var d = 0; d < arguments.length - 1; d++) {
        c[d] = arguments[d + 1];
      }
      if (!b) {
        return null;
      }
      if (c.length == 0) {
        return new a.SpanInfo(b.start(), b.end());
      }
      var e;

      var f;
      for (var g = 0; g < c.length; g++) {
        var h = c[g];
        if (h) {
          if (e == undefined) {
            e = b.childStart(h);
          }
          f = b.childEnd(h);
        }
      }
      return new a.SpanInfo(e, f);
    }

    function d(b, c) {
      return new a.SpanInfo(b.start(), c);
    }

    function f(a, b) {
      if (TypeScript.isDTSFile(a.fileName())) {
        return null;
      }
      var c = a.sourceUnit();

      var d = c.findToken(b);

      var f = a.lineMap();

      var g = f.getLineNumberFromPosition(b);

      var h = f.getLineNumberFromPosition(d.start());
      if (g < h) {
        return null;
      }
      var i = new e(g, f);
      return i.breakpointSpanOf(d);
    }
    var e = function() {
      function a(a, b) {
        this.posLine = a;

        this.lineMap = b;
      }
      a.prototype.breakpointSpanOfToken = function(a) {
        switch (a.token().tokenKind) {
          case 71:
            return this.breakpointSpanOfOpenBrace(a);
          case 72:
            return this.breakpointSpanOfCloseBrace(a);
          case 80:
            return this.breakpointSpanOfComma(a);
          case 79:
          case 10:
            return this.breakpointSpanIfStartsOnSameLine(a.previousToken());
          case 74:
            return this.breakpointSpanOfCloseParen(a);
          case 22:
            var b = a.parent();
            if (b && b.kind() == 160) {
              return this.breakpointSpanIfStartsOnSameLine(a.nextToken());
            }
        }
        return this.breakpointSpanOfContainingNode(a);
      };

      a.prototype.breakpointSpanOfOpenBrace = function(a) {
        var b = a.containingNode();
        if (b) {
          var c = b;
          if (b && b.kind() == 145) {
            b = b.containingNode();
            if (!b) {
              b = c;
            }
          }
          switch (b.kind()) {
            case 145:
              if (!this.canHaveBreakpointInBlock(b)) {
                return null();
              }
              return this.breakpointSpanOfFirstStatementInBlock(b);
            case 130:
            case 131:
            case 129:
            case 137:
            case 135:
            case 138:
            case 139:
            case 221:
              if (!this.canHaveBreakpointInDeclaration(b)) {
                return null;
              }
              return this.posLine != this.lineMap.getLineNumberFromPosition(b.start()) ? this.breakpointSpanOfFirstChildOfSyntaxList(
                this.getSyntaxListOfDeclarationWithElements(b)) : this.breakpointSpanOf(b);
            case 132:
              if (!this.canHaveBreakpointInDeclaration(b)) {
                return null;
              }
              return this.posLine != this.lineMap.getLineNumberFromPosition(b.start()) ? this.breakpointSpanOfFirstEnumElement(
                b) : this.breakpointSpanOf(b);
            case 146:
            case 154:
            case 157:
            case 234:
              return this.posLine != this.lineMap.getLineNumberFromPosition(b.start()) ? this.breakpointSpanOfFirstStatementInBlock(
                c) : this.breakpointSpanOf(b);
            case 160:
              return this.breakpointSpanOfFirstStatementInBlock(c);
            case 153:
              return this.posLine != this.lineMap.getLineNumberFromPosition(b.start()) ? this.breakpointSpanOfFirstStatementInBlock(
                c) : this.breakpointSpanOf(a.previousToken());
            case 233:
            case 231:
            case 232:
            case 162:
            case 158:
            case 235:
              return this.breakpointSpanOfFirstStatementInBlock(c);
            case 150:
              return this.posLine != this.lineMap.getLineNumberFromPosition(b.start()) ? this.breakpointSpanOfFirstStatementOfFirstCaseClause(
                b) : this.breakpointSpanOf(b);
          }
        }
        return null;
      };

      a.prototype.breakpointSpanOfCloseBrace = function(a) {
        var b = a.containingNode();
        if (b) {
          var d = b;
          if (b.kind() == 145) {
            b = b.containingNode();
            if (!b) {
              b = d;
            }
          }
          switch (b.kind()) {
            case 145:
              if (!this.canHaveBreakpointInBlock(b)) {
                return null();
              }
              return this.breakpointSpanOfLastStatementInBlock(b);
            case 130:
              if (!this.canHaveBreakpointInDeclaration(b)) {
                return null;
              }
              var e = b.node();
              return e.moduleElements && e.moduleElements.childCount() > 0 ? c(a) : null;
            case 131:
            case 129:
            case 137:
            case 135:
            case 138:
            case 139:
            case 221:
              if (!this.canHaveBreakpointInDeclaration(b)) {
                return null;
              }
              return c(a);
            case 132:
              if (!this.canHaveBreakpointInDeclaration(b)) {
                return null;
              }
              return c(a);
            case 146:
            case 233:
            case 154:
            case 153:
            case 157:
            case 160:
            case 231:
            case 232:
            case 162:
            case 158:
            case 234:
            case 235:
              return this.breakpointSpanOfLastStatementInBlock(d);
            case 150:
              return this.breakpointSpanOfLastStatementOfLastCaseClause(b);
          }
        }
        return null;
      };

      a.prototype.breakpointSpanOfComma = function(a) {
        var b = a.parent();
        if (b && b.element().isSeparatedList()) {
          var c = b.parent();
          if (c) switch (c.kind()) {
            case 223:
            case 132:
            case 226:
              var d = b.childIndex(a.token());
              if (d > 0) {
                var e = b.childAt(d - 1);
                return this.breakpointSpanOf(e);
              }
              if (c.kind() == 132) {
                return null;
              }
          }
        }
        return this.breakpointSpanOfContainingNode(a);
      };

      a.prototype.breakpointSpanOfCloseParen = function(a) {
        var b = a.parent();
        if (b) switch (b.kind()) {
          case 153:
          case 226:
            return this.breakpointSpanOf(a.previousToken());
        }
        return this.breakpointSpanOfContainingNode(a);
      };

      a.prototype.canHaveBreakpointInBlock = function(a) {
        if (!a || TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a)) {
          return !1;
        }
        var b = a.node();
        return b.statements && b.statements.childCount() != 0;
      };

      a.prototype.breakpointSpanOfFirstStatementInBlock = function(a) {
        if (!a) {
          return null;
        }
        var b = a.node();

        var c = a.getPositionedChild(b.statements);
        if (!c || c.childCount() == 0) {
          return null;
        }
        var d = c.childAt(0);
        return d && d.kind() == 145 ? this.canHaveBreakpointInBlock(d) ? this.breakpointSpanOfFirstStatementInBlock(
          d) : null : this.breakpointSpanOf(d);
      };

      a.prototype.breakpointSpanOfLastStatementInBlock = function(a) {
        if (!a) {
          return null;
        }
        var b = a.node();

        var c = a.getPositionedChild(b.statements);
        if (!c || c.childCount() == 0) {
          return null;
        }
        var d = c.childAt(c.childCount() - 1);
        return d && d.kind() == 145 ? this.canHaveBreakpointInBlock(d) ? this.breakpointSpanOfLastStatementInBlock(
          d) : null : this.breakpointSpanOf(d);
      };

      a.prototype.breakpointSpanOfFirstChildOfSyntaxList = function(a) {
        if (!a) {
          return null;
        }
        var b = a.list();
        if (b.childCount() == 0) {
          return null;
        }
        var c = a.childAt(0);
        return c && c.kind() == 145 ? this.canHaveBreakpointInBlock(c) ? this.breakpointSpanOfFirstStatementInBlock(
          c) : null : this.breakpointSpanOf(c);
      };

      a.prototype.breakpointSpanOfLastChildOfSyntaxList = function(a) {
        if (!a) {
          return null;
        }
        var b = a.list();
        if (b.childCount() == 0) {
          return null;
        }
        var c = a.childAt(0);
        return c && c.kind() == 145 ? this.canHaveBreakpointInBlock(c) ? this.breakpointSpanOfLastStatementInBlock(
          c) : null : this.breakpointSpanOf(c);
      };

      a.prototype.breakpointSpanOfNode = function(a) {
        var b = a.node();
        switch (b.kind()) {
          case 130:
          case 131:
          case 129:
          case 137:
          case 135:
          case 138:
          case 139:
            return this.breakpointSpanOfDeclarationWithElements(a);
          case 224:
            return this.breakpointSpanOfVariableDeclarator(a);
          case 223:
            return this.breakpointSpanOfVariableDeclaration(a);
          case 147:
            return this.breakpointSpanOfVariableStatement(a);
          case 242:
            return this.breakpointSpanOfParameter(a);
          case 136:
            return this.breakpointSpanOfMemberVariableDeclaration(a);
          case 133:
            return this.breakpointSpanOfImportDeclaration(a);
          case 132:
            return this.breakpointSpanOfEnumDeclaration(a);
          case 243:
            return this.breakpointSpanOfEnumElement(a);
          case 146:
            return this.breakpointSpanOfIfStatement(a);
          case 233:
            return this.breakpointSpanOfElseClause(a);
          case 154:
            return this.breakpointSpanOfForInStatement(a);
          case 153:
            return this.breakpointSpanOfForStatement(a);
          case 157:
            return this.breakpointSpanOfWhileStatement(a);
          case 160:
            return this.breakpointSpanOfDoStatement(a);
          case 150:
            return this.breakpointSpanOfSwitchStatement(a);
          case 231:
            return this.breakpointSpanOfCaseSwitchClause(a);
          case 232:
            return this.breakpointSpanOfDefaultSwitchClause(a);
          case 162:
            return this.breakpointSpanOfWithStatement(a);
          case 158:
            return this.breakpointSpanOfTryStatement(a);
          case 234:
            return this.breakpointSpanOfCatchClause(a);
          case 235:
            return this.breakpointSpanOfFinallyClause(a);
          default:
            return b.isStatement() ? this.breakpointSpanOfStatement(a) : this.breakpointOfExpression(a);
        }
      };

      a.prototype.isInitializerOfForStatement = function(a) {
        if (!a) {
          return !1;
        }
        var b = a.parent();
        if (b && b.kind() == 153) {
          var c = a.element();

          var d = b.element();

          var e = b.getPositionedChild(d.initializer);
          return e && e.element() == c;
        }
        return b && b.kind() == 172 ? this.isInitializerOfForStatement(b) : !1;
      };

      a.prototype.isConditionOfForStatement = function(a) {
        if (!a) {
          return !1;
        }
        var b = a.parent();
        if (b && b.kind() == 153) {
          var c = a.element();

          var d = b.element();

          var e = b.getPositionedChild(d.condition);
          return e && e.element() == c;
        }
        return b && b.kind() == 172 ? this.isConditionOfForStatement(b) : !1;
      };

      a.prototype.isIncrememtorOfForStatement = function(a) {
        if (!a) {
          return !1;
        }
        var b = a.parent();
        if (b && b.kind() == 153) {
          var c = a.element();

          var d = b.element();

          var e = b.getPositionedChild(d.incrementor);
          return e && e.element() == c;
        }
        return b && b.kind() == 172 ? this.isIncrememtorOfForStatement(b) : !1;
      };

      a.prototype.breakpointOfLeftOfCommaExpression = function(a) {
        var b = a.node();
        return this.breakpointSpanOf(a.getPositionedChild(b.left));
      };

      a.prototype.breakpointOfExpression = function(a) {
        if (this.isInitializerOfForStatement(a) || this.isConditionOfForStatement(a) || this.isIncrememtorOfForStatement(
          a)) {
          return a.kind() == 172 ? this.breakpointOfLeftOfCommaExpression(a) : c(a);
        }
        if (a.kind() == 134) {
          var b = a.node();
          return c(a, b.exportKeyword, b.equalsToken, b.identifier);
        }
        return this.breakpointSpanOfContainingNode(a);
      };

      a.prototype.breakpointSpanOfStatement = function(a) {
        var b = a.node();
        if (b.kind() == 155) {
          return null;
        }
        var d = a.containingNode();
        if (d && d.node().isStatement()) {
          var e = !1;
          switch (d.kind()) {
            case 130:
            case 131:
            case 129:
            case 137:
            case 135:
            case 138:
            case 139:
            case 145:
            case 146:
            case 233:
            case 154:
            case 153:
            case 157:
            case 160:
            case 150:
            case 231:
            case 232:
            case 162:
            case 158:
            case 234:
            case 235:
            case 145:
              e = !0;
          }
          if (!e) {
            return this.breakpointSpanOfContainingNode(a);
          }
        }
        switch (b.kind()) {
          case 148:
            var f = b;
            return c(a.getPositionedChild(f.expression));
          case 149:
            var g = b;
            return c(a, g.returnKeyword, g.expression);
          case 156:
            var h = b;
            return c(a, h.throwKeyword, h.expression);
          case 151:
            var i = b;
            return c(a, i.breakKeyword, i.identifier);
          case 152:
            var j = b;
            return c(a, j.continueKeyword, j.identifier);
          case 161:
            var k = b;
            return c(a.getPositionedChild(k.debuggerKeyword));
          case 159:
            var l = b;
            return this.breakpointSpanOf(a.getPositionedChild(l.statement));
        }
        return null;
      };

      a.prototype.getSyntaxListOfDeclarationWithElements = function(a) {
        var b = a.node();

        var c;

        var d;
        switch (b.kind()) {
          case 130:
            c = b.moduleElements;
            break;
          case 131:
            c = b.classElements;
            break;
          case 129:
            d = b.block;
            break;
          case 137:
            d = b.block;
            break;
          case 135:
            d = b.block;
            break;
          case 138:
            d = b.block;
            break;
          case 139:
            d = b.block;
            break;
          case 221:
            d = b.block;
            break;
          default:
            throw TypeScript.Errors.argument("positionNode",
              "unknown node kind in getSyntaxListOfDeclarationWithElements");
        }
        var e = a;
        d && (e = a.getPositionedChild(d), c = d.statements);

        return e.getPositionedChild(c);
      };

      a.prototype.canHaveBreakpointInDeclaration = function(a) {
        return a && !TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a);
      };

      a.prototype.breakpointSpanOfDeclarationWithElements = function(a) {
        if (!this.canHaveBreakpointInDeclaration(a)) {
          return null;
        }
        var b = a.node();

        var d = a.node();
        return b.isModuleElement() && a.containingNode().kind() != 121 || b.isClassElement() || d.kind() == 130 &&
          d.moduleName && d.moduleName.kind() == 122 ? c(a) : this.breakpointSpanOfFirstChildOfSyntaxList(this.getSyntaxListOfDeclarationWithElements(
            a));
      };

      a.prototype.canHaveBreakpointInVariableDeclarator = function(a) {
        if (!a || TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a)) {
          return !1;
        }
        var b = a.node();
        return !!b.equalsValueClause;
      };

      a.prototype.breakpointSpanOfVariableDeclarator = function(a) {
        if (!this.canHaveBreakpointInVariableDeclarator(a)) {
          return null;
        }
        var b = a.containingNode();
        if (b && b.kind() == 223) {
          var d = a.parent();
          return d && d.list().childAt(0) == a.node() ? this.breakpointSpanOfVariableDeclaration(b) : this.canHaveBreakpointInVariableDeclarator(
            a) ? c(a) : null;
        }
        return b ? this.breakpointSpanOfMemberVariableDeclaration(b) : null;
      };

      a.prototype.canHaveBreakpointInVariableDeclaration = function(a) {
        if (!a || TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a)) {
          return !1;
        }
        var b = a.node();

        var c = a.getPositionedChild(b.variableDeclarators);
        if (!c || c.childCount() == 0) {
          return !1;
        }
        var d = c.childAt(0);
        return d && d.element().isNode() ? this.canHaveBreakpointInVariableDeclarator(c.childAt(0)) : !1;
      };

      a.prototype.breakpointSpanOfVariableDeclaration = function(a) {
        if (!this.canHaveBreakpointInDeclaration(a)) {
          return null;
        }
        var b = a.containingNode();

        var c = a.node();

        var e = a.getPositionedChild(c.variableDeclarators);

        var f = e.childCount();
        return b && b.kind() == 147 ? this.breakpointSpanOfVariableStatement(b) : this.canHaveBreakpointInVariableDeclaration(
          a) ? d(a, e.childEndAt(0)) : null;
      };

      a.prototype.canHaveBreakpointInVariableStatement = function(a) {
        if (!a || TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a)) {
          return !1;
        }
        var b = a.node();
        return this.canHaveBreakpointInVariableDeclaration(a.getPositionedChild(b.variableDeclaration));
      };

      a.prototype.breakpointSpanOfVariableStatement = function(a) {
        if (!this.canHaveBreakpointInVariableStatement(a)) {
          return null;
        }
        var b = a.node();

        var c = a.getPositionedChild(b.variableDeclaration);

        var e = c.node();

        var f = c.getPositionedChild(e.variableDeclarators);
        return d(a, f.childEndAt(0));
      };

      a.prototype.breakpointSpanOfParameter = function(a) {
        if (TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a)) {
          return null;
        }
        var b = a.node();
        return b.dotDotDotToken || b.equalsValueClause || b.publicOrPrivateKeyword ? c(a) : null;
      };

      a.prototype.breakpointSpanOfMemberVariableDeclaration = function(a) {
        if (TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a)) {
          return null;
        }
        var b = a.node();
        return this.canHaveBreakpointInVariableDeclarator(a.getPositionedChild(b.variableDeclarator)) ? c(a) : null;
      };

      a.prototype.breakpointSpanOfImportDeclaration = function(a) {
        if (TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a)) {
          return null;
        }
        var b = a.node();
        return c(a, b.importKeyword, b.identifier, b.equalsToken, b.moduleReference);
      };

      a.prototype.breakpointSpanOfEnumDeclaration = function(a) {
        return this.canHaveBreakpointInDeclaration(a) ? c(a) : null;
      };

      a.prototype.breakpointSpanOfFirstEnumElement = function(a) {
        var b = a.node();

        var c = a.getPositionedChild(b.enumElements);
        return c && c.childCount() ? this.breakpointSpanOf(c.childAt(0)) : null;
      };

      a.prototype.breakpointSpanOfEnumElement = function(a) {
        return TypeScript.SyntaxUtilities.isAmbientDeclarationSyntax(a) ? null : c(a);
      };

      a.prototype.breakpointSpanOfIfStatement = function(a) {
        var b = a.node();
        return c(a, b.ifKeyword, b.openParenToken, b.condition, b.closeParenToken);
      };

      a.prototype.breakpointSpanOfElseClause = function(a) {
        var b = a.node();
        return this.breakpointSpanOf(a.getPositionedChild(b.statement));
      };

      a.prototype.breakpointSpanOfForInStatement = function(a) {
        var b = a.node();
        return c(a, b.forKeyword, b.openParenToken, b.variableDeclaration, b.left, b.inKeyword, b.expression, b.closeParenToken);
      };

      a.prototype.breakpointSpanOfForStatement = function(a) {
        var b = a.node();
        return this.breakpointSpanOf(a.getPositionedChild(b.variableDeclaration ? b.variableDeclaration : b.initializer));
      };

      a.prototype.breakpointSpanOfWhileStatement = function(a) {
        var b = a.node();
        return c(a, b.whileKeyword, b.openParenToken, b.condition, b.closeParenToken);
      };

      a.prototype.breakpointSpanOfDoStatement = function(a) {
        var b = a.node();
        return c(a, b.whileKeyword, b.openParenToken, b.condition, b.closeParenToken);
      };

      a.prototype.breakpointSpanOfSwitchStatement = function(a) {
        var b = a.node();
        return c(a, b.switchKeyword, b.openParenToken, b.expression, b.closeParenToken);
      };

      a.prototype.breakpointSpanOfFirstStatementOfFirstCaseClause = function(a) {
        var b = a.node();
        if (b.switchClauses && b.switchClauses.childCount() == 0) {
          return null;
        }
        var c = a.getPositionedChild(b.switchClauses);
        if (c.childCount() == 0) {
          return null;
        }
        var d = c.childAt(0);

        var e = null;
        if (d && d.kind() == 231) {
          var f = d.node();
          e = f.statements;
        } else {
          if (!d || d.kind() != 232) {
            return null;
          }
          var g = d.node();
          e = g.statements;
        }
        return this.breakpointSpanOfFirstChildOfSyntaxList(d.getPositionedChild(e));
      };

      a.prototype.breakpointSpanOfLastStatementOfLastCaseClause = function(a) {
        var b = a.node();
        if (b.switchClauses && b.switchClauses.childCount() == 0) {
          return null;
        }
        var c = a.getPositionedChild(b.switchClauses);
        if (c.childCount() == 0) {
          return null;
        }
        var d = c.childAt(c.childCount() - 1);

        var e = null;
        if (d && d.kind() == 231) {
          var f = d.node();
          e = f.statements;
        } else {
          if (!d || d.kind() != 232) {
            return null;
          }
          var g = d.node();
          e = g.statements;
        }
        return this.breakpointSpanOfLastChildOfSyntaxList(d.getPositionedChild(e));
      };

      a.prototype.breakpointSpanOfCaseSwitchClause = function(a) {
        var b = a.node();
        return this.breakpointSpanOfFirstChildOfSyntaxList(a.getPositionedChild(b.statements));
      };

      a.prototype.breakpointSpanOfDefaultSwitchClause = function(a) {
        var b = a.node();
        return this.breakpointSpanOfFirstChildOfSyntaxList(a.getPositionedChild(b.statements));
      };

      a.prototype.breakpointSpanOfWithStatement = function(a) {
        var b = a.node();
        return this.breakpointSpanOf(a.getPositionedChild(b.statement));
      };

      a.prototype.breakpointSpanOfTryStatement = function(a) {
        var b = a.node();
        return this.breakpointSpanOfFirstStatementInBlock(a.getPositionedChild(b.block));
      };

      a.prototype.breakpointSpanOfCatchClause = function(a) {
        var b = a.node();
        return c(a, b.catchKeyword, b.openParenToken, b.identifier, b.typeAnnotation, b.closeParenToken);
      };

      a.prototype.breakpointSpanOfFinallyClause = function(a) {
        var b = a.node();
        return this.breakpointSpanOfFirstStatementInBlock(a.getPositionedChild(b.block));
      };

      a.prototype.breakpointSpanOfContainingNode = function(a) {
        return this.breakpointSpanOf(a.containingNode());
      };

      a.prototype.breakpointSpanIfStartsOnSameLine = function(a) {
        return a && this.posLine == this.lineMap.getLineNumberFromPosition(a.start()) ? this.breakpointSpanOf(a) :
          null;
      };

      a.prototype.breakpointSpanOf = function(a) {
        if (!a) {
          return null;
        }
        for (var b = a.containingNode(); b != null; b = b.containingNode())
          if (b.kind() == 244) {
            return this.breakpointSpanIfStartsOnSameLine(b);
          }
        var c = a.element();
        return c.isNode() ? this.breakpointSpanOfNode(a) : c.isToken() ? this.breakpointSpanOfToken(a) : this.breakpointSpanOfContainingNode(
          a);
      };

      return a;
    }();
    b.getBreakpointLocation = f;
  })(a.Breakpoints || (a.Breakpoints = {}));
  var b = a.Breakpoints;
})(Services || (Services = {}));

var Services;

(function(a) {
  function b(a, c) {
    for (var d in a) {
      if (typeof a[d] == "object") {
        b(a[d], c[d]);
      } else {
        if (typeof a[d] != "function") {
          a[d] = c[d];
        }
      }
    }
    return a;
  }

  function c(a, b) {
    for (var d in a)
      if (typeof a[d] == "object") {
        if (!c(a[d], b[d])) {
          return !1;
        }
      } else if (typeof a[d] != "function" && a[d] !== b[d]) {
      return !1;
    }
    return !0;
  }
  a.copyDataObject = b;

  a.compareDataObjects = c;
  var d = function() {
    function b() {
      this._shims = [];
    }
    b.prototype.createPullLanguageService = function(b) {
      try {
        return new a.LanguageService(b);
      } catch (c) {
        throw a.logInternalError(b, c), c;
      }
    };

    b.prototype.createLanguageServiceShim = function(b) {
      try {
        var c = new a.LanguageServiceShimHostAdapter(b);

        var d = this.createPullLanguageService(c);
        return new a.LanguageServiceShim(this, b, d);
      } catch (e) {
        throw a.logInternalError(b, e), e;
      }
    };

    b.prototype.createClassifier = function(b) {
      try {
        return new a.Classifier(b);
      } catch (c) {
        throw a.logInternalError(b, c), c;
      }
    };

    b.prototype.createClassifierShim = function(b) {
      try {
        return new a.ClassifierShim(this, b);
      } catch (c) {
        throw a.logInternalError(b, c), c;
      }
    };

    b.prototype.createCoreServices = function(b) {
      try {
        return new a.CoreServices(b);
      } catch (c) {
        throw a.logInternalError(b.logger, c), c;
      }
    };

    b.prototype.createCoreServicesShim = function(b) {
      try {
        return new a.CoreServicesShim(this, b);
      } catch (c) {
        throw a.logInternalError(b.logger, c), c;
      }
    };

    b.prototype.close = function() {
      this._shims = [];
    };

    b.prototype.registerShim = function(a) {
      this._shims.push(a);
    };

    b.prototype.unregisterShim = function(a) {
      for (var b = 0, c = this._shims.length; b < c; b++)
        if (this._shims[b] === a) {
          delete this._shims[b];
          return;
        }
      throw TypeScript.Errors.invalidOperation();
    };

    return b;
  }();
  a.TypeScriptServicesFactory = d;
})(Services || (Services = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function() {
      function c(a, b, c, d, e) {
        this._snapshot = a;

        this._lineNumber = b;

        this._start = c;

        this._end = d;

        this._lineBreak = e;
      }
      c.prototype.snapshot = function() {
        return this._snapshot;
      };

      c.prototype.start = function() {
        return new b.SnapshotPoint(this._snapshot, this._start);
      };

      c.prototype.startPosition = function() {
        return this._start;
      };

      c.prototype.end = function() {
        return new b.SnapshotPoint(this._snapshot, this._end);
      };

      c.prototype.endPosition = function() {
        return this._end;
      };

      c.prototype.endIncludingLineBreak = function() {
        return new b.SnapshotPoint(this._snapshot, this._end + this._lineBreak.length);
      };

      c.prototype.endIncludingLineBreakPosition = function() {
        return this._end + this._lineBreak.length;
      };

      c.prototype.length = function() {
        return this._end - this._start;
      };

      c.prototype.lineNumber = function() {
        return this._lineNumber;
      };

      c.prototype.getText = function() {
        return this._snapshot.getText(a.TextSpan.fromBounds(this._start, this._end));
      };

      return c;
    }();
    b.TextSnapshotLine = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function a(a, b) {
        this.snapshot = a;

        this.position = b;
      }
      a.prototype.getContainingLine = function() {
        return this.snapshot.getLineFromPosition(this.position);
      };

      a.prototype.add = function(b) {
        return new a(this.snapshot, this.position + b);
      };

      return a;
    }();
    a.SnapshotPoint = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function() {
      function b(b, c) {
        this.snapshot = b;

        this.formattingRequestKind = c;

        this.currentTokenSpan = null;

        this.nextTokenSpan = null;

        this.contextNode = null;

        this.currentTokenParent = null;

        this.nextTokenParent = null;

        this.contextNodeAllOnSameLine = null;

        this.tokensAreOnSameLine = null;

        this.tokensAreSiblingNodesOnSameLine = null;

        a.Debug.assert(this.snapshot != null, "snapshot is null");
      }
      b.prototype.updateContext = function(b, c, d, e, f) {
        a.Debug.assert(b != null, "currentTokenSpan is null");

        a.Debug.assert(c != null, "currentTokenParent is null");

        a.Debug.assert(d != null, "nextTokenSpan is null");

        a.Debug.assert(e != null, "nextTokenParent is null");

        a.Debug.assert(f != null, "commonParent is null");

        this.currentTokenSpan = b;

        this.currentTokenParent = c;

        this.nextTokenSpan = d;

        this.nextTokenParent = e;

        this.contextNode = f;

        this.contextNodeAllOnSameLine = null;

        this.tokensAreOnSameLine = null;

        this.tokensAreSiblingNodesOnSameLine = null;
      };

      b.prototype.ContextNodeAllOnSameLine = function() {
        if (this.contextNodeAllOnSameLine === null) {
          var a = this.snapshot.getLineNumberFromPosition(this.contextNode.start());

          var b = this.snapshot.getLineNumberFromPosition(this.contextNode.end());
          this.contextNodeAllOnSameLine = a == b;
        }
        return this.contextNodeAllOnSameLine;
      };

      b.prototype.TokensAreOnSameLine = function() {
        if (this.tokensAreOnSameLine === null) {
          var a = this.snapshot.getLineNumberFromPosition(this.currentTokenSpan.start());

          var b = this.snapshot.getLineNumberFromPosition(this.nextTokenSpan.start());
          this.tokensAreOnSameLine = a == b;
        }
        return this.tokensAreOnSameLine;
      };

      return b;
    }();
    b.FormattingContext = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function() {
      function c(a, b, c, d) {
        this.syntaxTree = a;

        this.snapshot = b;

        this.rulesProvider = c;

        this.options = new FormattingOptions(!d.ConvertTabsToSpaces, d.TabSize, d.IndentSize, d.NewLineCharacter);
      }
      c.prototype.formatSelection = function(b, c) {
        var d = a.TextSpan.fromBounds(b, c);
        return this.formatSpan(d, 1);
      };

      c.prototype.formatDocument = function(b, c) {
        var d = a.TextSpan.fromBounds(b, c);
        return this.formatSpan(d, 0);
      };

      c.prototype.formatOnPaste = function(b, c) {
        var d = a.TextSpan.fromBounds(b, c);
        return this.formatSpan(d, 5);
      };

      c.prototype.formatOnSemicolon = function(b) {
        var c = this.syntaxTree.sourceUnit();

        var d = c.findToken(b - 1);
        if (d.kind() === 79) {
          var e = d;
          while (e.parent() !== null && e.parent().end() === d.end() && e.parent().kind() !== 1) {
            e = e.parent();
          }
          var f = new a.TextSpan(e.fullStart(), e.fullWidth());
          return this.formatSpan(f, 3);
        }
        return [];
      };

      c.prototype.formatOnClosingCurlyBrace = function(b) {
        var c = this.syntaxTree.sourceUnit();

        var d = c.findToken(b - 1);
        if (d.kind() === 72) {
          var e = d;
          while (e.parent() !== null && e.parent().end() === d.end() && e.parent().kind() !== 1) {
            e = e.parent();
          }
          var f = new a.TextSpan(e.fullStart(), e.fullWidth());
          return this.formatSpan(f, 4);
        }
        return [];
      };

      c.prototype.formatOnEnter = function(b) {
        var c = this.snapshot.getLineNumberFromPosition(b);
        if (c > 0) {
          var d = this.snapshot.getLineFromLineNumber(c - 1);

          var e = this.snapshot.getLineFromLineNumber(c);

          var f = a.TextSpan.fromBounds(d.startPosition(), e.endPosition());
          return this.formatSpan(f, 2);
        }
        return [];
      };

      c.prototype.formatSpan = function(c, d) {
        var e = this.snapshot.getLineFromPosition(c.start());
        c = a.TextSpan.fromBounds(e.startPosition(), c.end());
        var f = [];

        var g = b.Formatter.getEdits(c, this.syntaxTree.sourceUnit(), this.options, !0, this.snapshot, this.rulesProvider,
          d);
        g.forEach(function(a) {
          var b = new Services.TextEdit(a.position, a.position + a.length, a.replaceWith);
          f.push(b);
        });

        return f;
      };

      return c;
    }();
    b.FormattingManager = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    (function(a) {
      a[a.FormatDocument = 0] = "FormatDocument";

      a[a.FormatSelection = 1] = "FormatSelection";

      a[a.FormatOnEnter = 2] = "FormatOnEnter";

      a[a.FormatOnSemicolon = 3] = "FormatOnSemicolon";

      a[a.FormatOnClosingCurlyBrace = 4] = "FormatOnClosingCurlyBrace";

      a[a.FormatOnPaste = 5] = "FormatOnPaste";
    })(a.FormattingRequestKind || (a.FormattingRequestKind = {}));
    var b = a.FormattingRequestKind;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function a(a, b, c) {
        if (typeof c == "undefined") {
          c = 0;
        }

        this.Descriptor = a;

        this.Operation = b;

        this.Flag = c;
      }
      a.prototype.toString = function() {
        return "[desc=" + this.Descriptor + "," + "operation=" + this.Operation + "," + "flag=" + this.Flag + "]";
      };

      return a;
    }();
    a.Rule = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    (function(a) {
      a[a.Ignore = 0] = "Ignore";

      a[a.Space = 1] = "Space";

      a[a.NewLine = 2] = "NewLine";

      a[a.Delete = 3] = "Delete";
    })(a.RuleAction || (a.RuleAction = {}));
    var b = a.RuleAction;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function b(a, b) {
        this.LeftTokenRange = a;

        this.RightTokenRange = b;
      }
      b.prototype.toString = function() {
        return "[leftRange=" + this.LeftTokenRange + "," + "rightRange=" + this.RightTokenRange + "]";
      };

      b.create1 = function(c, d) {
        return b.create4(a.Shared.TokenRange.FromToken(c), a.Shared.TokenRange.FromToken(d));
      };

      b.create2 = function(c, d) {
        return b.create4(c, a.Shared.TokenRange.FromToken(d));
      };

      b.create3 = function(c, d) {
        return b.create4(a.Shared.TokenRange.FromToken(c), d);
      };

      b.create4 = function(a, c) {
        return new b(a, c);
      };

      return b;
    }();
    a.RuleDescriptor = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    (function(a) {
      a[a.None = 0] = "None";

      a[a.CanDeleteNewLines = 1] = "CanDeleteNewLines";
    })(a.RuleFlags || (a.RuleFlags = {}));
    var b = a.RuleFlags;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function b() {
        this.Context = null;

        this.Action = null;
      }
      b.prototype.toString = function() {
        return "[context=" + this.Context + "," + "action=" + this.Action + "]";
      };

      b.create1 = function(c) {
        return b.create2(a.RuleOperationContext.Any, c);
      };

      b.create2 = function(a, c) {
        var d = new b;
        d.Context = a;

        d.Action = c;

        return d;
      };

      return b;
    }();
    a.RuleOperation = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function a() {
        var a = [];
        for (var b = 0; b < arguments.length - 0; b++) {
          a[b] = arguments[b + 0];
        }
        this.customContextChecks = a;
      }
      a.prototype.IsAny = function() {
        return this == a.Any;
      };

      a.prototype.InContext = function(a) {
        if (this.IsAny()) {
          return !0;
        }
        for (var b = 0, c = this.customContextChecks.length; b < c; b++)
          if (!this.customContextChecks[b](a)) {
            return !1;
          }
        return !0;
      };

      a.Any = new a;

      return a;
    }();
    a.RuleOperationContext = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function b() {
        this.IgnoreBeforeComment = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.Any, a.Shared.TokenRange
          .Comments), a.RuleOperation.create1(0));

        this.IgnoreAfterLineComment = new a.Rule(a.RuleDescriptor.create3(7, a.Shared.TokenRange.Any), a.RuleOperation
          .create1(0));

        this.NoSpaceBeforeSemicolon = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 79), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceBeforeColon = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 107), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsNotBinaryOpContext), 3));

        this.NoSpaceBeforeQMark = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 106), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsNotBinaryOpContext), 3));

        this.SpaceAfterColon = new a.Rule(a.RuleDescriptor.create3(107, a.Shared.TokenRange.Any), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsNotBinaryOpContext), 1));

        this.SpaceAfterQMark = new a.Rule(a.RuleDescriptor.create3(106, a.Shared.TokenRange.Any), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsNotBinaryOpContext), 1));

        this.SpaceAfterSemicolon = new a.Rule(a.RuleDescriptor.create3(79, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.NewLineAfterCloseBrace = new a.Rule(a.RuleDescriptor.create3(72, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsMultilineChildParentContext), 2));

        this.SpaceAfterCloseBrace = new a.Rule(a.RuleDescriptor.create3(72, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsAfterCodeBlockContext), 1));

        this.SpaceBetweenCloseBraceAndElse = new a.Rule(a.RuleDescriptor.create1(72, 23), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.SpaceBetweenCloseBraceAndWhile = new a.Rule(a.RuleDescriptor.create1(72, 42), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.NoSpaceAfterCloseBrace = new a.Rule(a.RuleDescriptor.create3(72, a.Shared.TokenRange.FromTokens([74,
          76, 80, 79
        ])), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceBeforeDot = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 77), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceAfterDot = new a.Rule(a.RuleDescriptor.create3(77, a.Shared.TokenRange.Any), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceBeforeOpenBracket = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 75), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceAfterOpenBracket = new a.Rule(a.RuleDescriptor.create3(75, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceBeforeCloseBracket = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 76), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceAfterCloseBracket = new a.Rule(a.RuleDescriptor.create3(76, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.SpaceAfterOpenBrace = new a.Rule(a.RuleDescriptor.create3(71, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSingleLineBlockContext), 1));

        this.SpaceBeforeCloseBrace = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 72), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSingleLineBlockContext), 1));

        this.NoSpaceBetweenEmptyBraceBrackets = new a.Rule(a.RuleDescriptor.create1(71, 72), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsObjectContext), 3));

        this.NewLineAfterOpenBraceInBlockContext = new a.Rule(a.RuleDescriptor.create3(71, a.Shared.TokenRange.Any),
          a.RuleOperation.create2(new a.RuleOperationContext(b.IsMultilineBlockContext), 2));

        this.NewLineBeforeCloseBraceInBlockContext = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any,
          72), a.RuleOperation.create2(new a.RuleOperationContext(b.IsMultilineBlockContext), 2));

        this.NoSpaceAfterUnaryPrefixOperator = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.UnaryPrefixOperators,
          a.Shared.TokenRange.UnaryPrefixExpressions), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext,
          b.IsNotBinaryOpContext), 3));

        this.NoSpaceAfterUnaryPreincrementOperator = new a.Rule(a.RuleDescriptor.create3(94, a.Shared.TokenRange.UnaryPreincrementExpressions),
          a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceAfterUnaryPredecrementOperator = new a.Rule(a.RuleDescriptor.create3(95, a.Shared.TokenRange.UnaryPredecrementExpressions),
          a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceBeforeUnaryPostincrementOperator = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.UnaryPostincrementExpressions,
          94), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceBeforeUnaryPostdecrementOperator = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.UnaryPostdecrementExpressions,
          95), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.SpaceAfterPostincrementWhenFollowedByAdd = new a.Rule(a.RuleDescriptor.create1(94, 90), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext), 1));

        this.SpaceAfterAddWhenFollowedByUnaryPlus = new a.Rule(a.RuleDescriptor.create1(90, 90), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext), 1));

        this.SpaceAfterAddWhenFollowedByPreincrement = new a.Rule(a.RuleDescriptor.create1(90, 94), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext), 1));

        this.SpaceAfterPostdecrementWhenFollowedBySubtract = new a.Rule(a.RuleDescriptor.create1(95, 91), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext), 1));

        this.SpaceAfterSubtractWhenFollowedByUnaryMinus = new a.Rule(a.RuleDescriptor.create1(91, 91), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext), 1));

        this.SpaceAfterSubtractWhenFollowedByPredecrement = new a.Rule(a.RuleDescriptor.create1(91, 95), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext), 1));

        this.NoSpaceBeforeComma = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 80), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.SpaceAfterCertainKeywords = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.FromTokens([40, 36,
          31, 21, 33, 41, 39
        ]), a.Shared.TokenRange.Any), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext),
          1));

        this.NoSpaceBeforeOpenParenInFuncCall = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 73), a
          .RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsFunctionCallOrNewContext),
            3));

        this.SpaceAfterFunctionInFuncDecl = new a.Rule(a.RuleDescriptor.create3(27, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsFunctionDeclContext), 1));

        this.NoSpaceBeforeOpenParenInFuncDecl = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 73), a
          .RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsFunctionOrGetSetDeclContext),
            3));

        this.SpaceBetweenStatements = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.FromTokens([74, 22,
          23, 16
        ]), a.Shared.TokenRange.Any), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext,
          b.IsNotForContext), 1));

        this.SpaceAfterTryFinally = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.FromTokens([38, 25]),
          71), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.SpaceAfterGetSetInMember = new a.Rule(a.RuleDescriptor.create1(11, 11), a.RuleOperation.create2(new a.RuleOperationContext(
          b.IsGetSetMemberContext), 1));

        this.SpaceBeforeBinaryKeywordOperator = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.Any, a.Shared
          .TokenRange.BinaryKeywordOperators), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext,
          b.IsBinaryOpContext), 1));

        this.SpaceAfterBinaryKeywordOperator = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.BinaryKeywordOperators,
          a.Shared.TokenRange.Any), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext,
          b.IsBinaryOpContext), 1));

        this.NoSpaceAfterConstructor = new a.Rule(a.RuleDescriptor.create1(63, 73), a.RuleOperation.create2(new a.RuleOperationContext(
          b.IsSameLineTokenContext), 3));

        this.NoSpaceAfterModuleImport = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.FromTokens([66, 67]),
          73), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.SpaceAfterCertainTypeScriptKeywords = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.FromTokens(
          [44, 64, 46, 47, 48, 65, 51, 49, 52, 66, 55, 57, 69, 58]), a.Shared.TokenRange.Any), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.SpaceBeforeCertainTypeScriptKeywords = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.Any, a.Shared
          .TokenRange.FromTokens([48, 51])), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext),
          1));

        this.SpaceAfterModuleName = new a.Rule(a.RuleDescriptor.create1(14, 71), a.RuleOperation.create2(new a.RuleOperationContext(
          b.IsModuleDeclContext), 1));

        this.SpaceAfterArrow = new a.Rule(a.RuleDescriptor.create3(86, a.Shared.TokenRange.Any), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.NoSpaceAfterEllipsis = new a.Rule(a.RuleDescriptor.create1(78, 11), a.RuleOperation.create2(new a.RuleOperationContext(
          b.IsSameLineTokenContext), 3));

        this.NoSpaceAfterOptionalParameters = new a.Rule(a.RuleDescriptor.create3(106, a.Shared.TokenRange.FromTokens(
          [74, 80])), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsNotBinaryOpContext),
          3));

        this.NoSpaceBeforeOpenAngularBracket = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.TypeNames,
          81), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsTypeArgumentOrParameterContext),
          3));

        this.NoSpaceBetweenCloseParenAndAngularBracket = new a.Rule(a.RuleDescriptor.create1(74, 81), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsTypeArgumentOrParameterContext), 3));

        this.NoSpaceAfterOpenAngularBracket = new a.Rule(a.RuleDescriptor.create3(81, a.Shared.TokenRange.TypeNames),
          a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsTypeArgumentOrParameterContext),
            3));

        this.NoSpaceBeforeCloseAngularBracket = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 82), a
          .RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsTypeArgumentOrParameterContext),
            3));

        this.NoSpaceAfterCloseAngularBracket = new a.Rule(a.RuleDescriptor.create3(82, a.Shared.TokenRange.FromTokens(
          [73, 75, 82, 80])), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsTypeArgumentOrParameterContext),
          3));

        this.NoSpaceBetweenEmptyInterfaceBraceBrackets = new a.Rule(a.RuleDescriptor.create1(71, 72), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsObjectTypeContext), 3));

        this.HighPriorityCommonRules = [this.IgnoreBeforeComment, this.IgnoreAfterLineComment, this.NoSpaceBeforeSemicolon,
          this.NoSpaceBeforeColon, this.SpaceAfterColon, this.NoSpaceBeforeQMark, this.SpaceAfterQMark, this.NewLineAfterCloseBrace,
          this.NoSpaceBeforeDot, this.NoSpaceAfterDot, this.NoSpaceAfterUnaryPrefixOperator, this.NoSpaceAfterUnaryPreincrementOperator,
          this.NoSpaceAfterUnaryPredecrementOperator, this.NoSpaceBeforeUnaryPostincrementOperator, this.NoSpaceBeforeUnaryPostdecrementOperator,
          this.SpaceAfterPostincrementWhenFollowedByAdd, this.SpaceAfterAddWhenFollowedByUnaryPlus, this.SpaceAfterAddWhenFollowedByPreincrement,
          this.SpaceAfterPostdecrementWhenFollowedBySubtract, this.SpaceAfterSubtractWhenFollowedByUnaryMinus, this
          .SpaceAfterSubtractWhenFollowedByPredecrement, this.NoSpaceAfterCloseBrace, this.SpaceAfterOpenBrace,
          this.SpaceBeforeCloseBrace, this.NewLineBeforeCloseBraceInBlockContext, this.SpaceAfterCloseBrace, this.SpaceBetweenCloseBraceAndElse,
          this.SpaceBetweenCloseBraceAndWhile, this.NoSpaceBetweenEmptyBraceBrackets, this.SpaceAfterFunctionInFuncDecl,
          this.NewLineAfterOpenBraceInBlockContext, this.SpaceAfterGetSetInMember, this.SpaceAfterCertainKeywords,
          this.NoSpaceBeforeOpenParenInFuncCall, this.SpaceBeforeBinaryKeywordOperator, this.SpaceAfterBinaryKeywordOperator,
          this.NoSpaceAfterConstructor, this.NoSpaceAfterModuleImport, this.SpaceAfterCertainTypeScriptKeywords,
          this.SpaceBeforeCertainTypeScriptKeywords, this.SpaceAfterModuleName, this.SpaceAfterArrow, this.NoSpaceAfterEllipsis,
          this.NoSpaceAfterOptionalParameters, this.NoSpaceBetweenEmptyInterfaceBraceBrackets, this.NoSpaceBeforeOpenAngularBracket,
          this.NoSpaceBetweenCloseParenAndAngularBracket, this.NoSpaceAfterOpenAngularBracket, this.NoSpaceBeforeCloseAngularBracket,
          this.NoSpaceAfterCloseAngularBracket
        ];

        this.LowPriorityCommonRules = [this.NoSpaceBeforeComma, this.NoSpaceBeforeOpenBracket, this.NoSpaceAfterOpenBracket,
          this.NoSpaceBeforeCloseBracket, this.NoSpaceAfterCloseBracket, this.SpaceAfterSemicolon, this.NoSpaceBeforeOpenParenInFuncDecl,
          this.SpaceBetweenStatements, this.SpaceAfterTryFinally
        ];

        this.SpaceAfterComma = new a.Rule(a.RuleDescriptor.create3(80, a.Shared.TokenRange.Any), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.NoSpaceAfterComma = new a.Rule(a.RuleDescriptor.create3(80, a.Shared.TokenRange.Any), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.SpaceBeforeBinaryOperator = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.Any, a.Shared.TokenRange
          .BinaryOperators), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext),
          1));

        this.SpaceAfterBinaryOperator = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.BinaryOperators, a.Shared
          .TokenRange.Any), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext),
          1));

        this.NoSpaceBeforeBinaryOperator = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.Any, a.Shared.TokenRange
          .BinaryOperators), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsBinaryOpContext),
          3));

        this.NoSpaceAfterBinaryOperator = new a.Rule(a.RuleDescriptor.create4(a.Shared.TokenRange.BinaryOperators,
          a.Shared.TokenRange.Any), a.RuleOperation.create2(new a.RuleOperationContext(b.IsSameLineTokenContext,
          b.IsBinaryOpContext), 3));

        this.SpaceAfterKeywordInControl = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Keywords, 73), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsControlDeclContext), 1));

        this.NoSpaceAfterKeywordInControl = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Keywords, 73),
          a.RuleOperation.create2(new a.RuleOperationContext(b.IsControlDeclContext), 3));

        this.FunctionOpenBraceLeftTokenRange = a.Shared.TokenRange.Any;

        this.FunctionOpenBraceLeftTokenRange_Js = a.Shared.TokenRange.FromTokens([74, 7]);

        this.SpaceBeforeOpenBraceInFunction = new a.Rule(a.RuleDescriptor.create2(this.FunctionOpenBraceLeftTokenRange,
          71), a.RuleOperation.create2(new a.RuleOperationContext(b.IsFunctionDeclContext, b.IsNotFormatOnEnter,
          b.IsSameLineTokenOrMultilineBlockContext), 1), 1);

        this.NewLineBeforeOpenBraceInFunction = new a.Rule(a.RuleDescriptor.create2(this.FunctionOpenBraceLeftTokenRange,
          71), a.RuleOperation.create2(new a.RuleOperationContext(b.IsFunctionDeclContext, b.IsMultilineBlockContext),
          2), 1);

        this.TypeScriptOpenBraceLeftTokenRange = a.Shared.TokenRange.FromTokens([11, 7]);

        this.SpaceBeforeOpenBraceInTypeScriptDeclWithBlock = new a.Rule(a.RuleDescriptor.create2(this.TypeScriptOpenBraceLeftTokenRange,
          71), a.RuleOperation.create2(new a.RuleOperationContext(b.IsTypeScriptDeclWithBlockContext, b.IsNotFormatOnEnter,
          b.IsSameLineTokenOrMultilineBlockContext), 1), 1);

        this.NewLineBeforeOpenBraceInTypeScriptDeclWithBlock = new a.Rule(a.RuleDescriptor.create2(this.TypeScriptOpenBraceLeftTokenRange,
          71), a.RuleOperation.create2(new a.RuleOperationContext(b.IsTypeScriptDeclWithBlockContext, b.IsMultilineBlockContext),
          2), 1);

        this.ControlOpenBraceLeftTokenRange = a.Shared.TokenRange.FromTokens([74, 7, 22, 38, 25, 23]);

        this.SpaceBeforeOpenBraceInControl = new a.Rule(a.RuleDescriptor.create2(this.ControlOpenBraceLeftTokenRange,
          71), a.RuleOperation.create2(new a.RuleOperationContext(b.IsControlDeclContext, b.IsNotFormatOnEnter, b
          .IsSameLineTokenOrMultilineBlockContext), 1), 1);

        this.NewLineBeforeOpenBraceInControl = new a.Rule(a.RuleDescriptor.create2(this.ControlOpenBraceLeftTokenRange,
          71), a.RuleOperation.create2(new a.RuleOperationContext(b.IsControlDeclContext, b.IsMultilineBlockContext),
          2), 1);

        this.SpaceAfterSemicolonInFor = new a.Rule(a.RuleDescriptor.create3(79, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsForContext), 1));

        this.NoSpaceAfterSemicolonInFor = new a.Rule(a.RuleDescriptor.create3(79, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext, b.IsForContext), 3));

        this.SpaceAfterOpenParen = new a.Rule(a.RuleDescriptor.create3(73, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.SpaceBeforeCloseParen = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 74), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 1));

        this.NoSpaceBetweenParens = new a.Rule(a.RuleDescriptor.create1(73, 74), a.RuleOperation.create2(new a.RuleOperationContext(
          b.IsSameLineTokenContext), 3));

        this.NoSpaceAfterOpenParen = new a.Rule(a.RuleDescriptor.create3(73, a.Shared.TokenRange.Any), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.NoSpaceBeforeCloseParen = new a.Rule(a.RuleDescriptor.create2(a.Shared.TokenRange.Any, 74), a.RuleOperation
          .create2(new a.RuleOperationContext(b.IsSameLineTokenContext), 3));

        this.SpaceAfterAnonymousFunctionKeyword = new a.Rule(a.RuleDescriptor.create1(27, 73), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsFunctionDeclContext), 1));

        this.NoSpaceAfterAnonymousFunctionKeyword = new a.Rule(a.RuleDescriptor.create1(27, 73), a.RuleOperation.create2(
          new a.RuleOperationContext(b.IsFunctionDeclContext), 3));
      }
      b.prototype.getRuleName = function(a) {
        var b = this;
        for (var c in b)
          if (b[c] === a) {
            return c;
          }
        throw new Error("Unknown rule");
      };

      b.IsForContext = function(a) {
        return a.contextNode.kind() === 153;
      };

      b.IsNotForContext = function(a) {
        return !b.IsForContext(a);
      };

      b.IsBinaryOpContext = function(a) {
        switch (a.contextNode.kind()) {
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
            return !0;
          case 133:
          case 224:
          case 230:
            return a.currentTokenSpan.kind() === 108 || a.nextTokenSpan.kind() === 108;
          case 154:
            return a.currentTokenSpan.kind() === 29 || a.nextTokenSpan.kind() === 29;
        }
        return !1;
      };

      b.IsNotBinaryOpContext = function(a) {
        return !b.IsBinaryOpContext(a);
      };

      b.IsBlockContext = function(a) {
        if (b.IsTypeScriptDeclWithBlockContext(a) || b.IsFunctionDeclContext(a)) {
          return !0;
        }
        switch (a.contextNode.kind()) {
          case 145:
          case 150:
          case 214:
            return !0;
        }
        return !1;
      };

      b.IsSingleLineBlockContext = function(a) {
        return b.IsBlockContext(a) ? b.IsSingleLineContext(a) : !1;
      };

      b.IsMultilineBlockContext = function(a) {
        return b.IsBlockContext(a) ? !b.IsSingleLineContext(a) : !1;
      };

      b.IsSingleLineContext = function(a) {
        var b = a.contextNode;

        var c;
        b.kind() === 123 && b.parent().kind() === 128 ? (a.contextNode = b.parent(), c = a.ContextNodeAllOnSameLine(),
          a.contextNode = b) : b.kind() === 145 && (a.contextNode = b.parent(), this.IsFunctionDeclContext(a) && (c =
          a.ContextNodeAllOnSameLine()), a.contextNode = b);

        return c === undefined ? a.ContextNodeAllOnSameLine() : c;
      };

      b.IsFunctionDeclContext = function(a) {
        switch (a.contextNode.kind()) {
          case 129:
          case 135:
          case 138:
          case 139:
          case 144:
          case 141:
          case 221:
          case 137:
          case 218:
          case 217:
            return !0;
        }
        return !1;
      };

      b.IsTypeScriptDeclWithBlockContext = function(a) {
        switch (a.contextNode.kind()) {
          case 131:
          case 132:
          case 128:
          case 123:
          case 130:
            return !0;
        }
        return !1;
      };

      b.IsControlDeclContext = function(a) {
        switch (a.contextNode.kind()) {
          case 146:
          case 150:
          case 153:
          case 154:
          case 157:
          case 158:
          case 160:
          case 162:
          case 233:
          case 234:
          case 235:
            return !0;
          default:
            return !1;
        }
      };

      b.IsObjectContext = function(a) {
        return a.contextNode.kind() === 214;
      };

      b.IsFunctionCallContext = function(a) {
        return a.contextNode.kind() === 212;
      };

      b.IsNewContext = function(a) {
        return a.contextNode.kind() === 215;
      };

      b.IsFunctionCallOrNewContext = function(a) {
        return b.IsFunctionCallContext(a) || b.IsNewContext(a);
      };

      b.IsSameLineTokenContext = function(a) {
        return a.TokensAreOnSameLine();
      };

      b.IsCodeBlockContext = function(a) {
        switch (a.contextNode.kind()) {
          case 131:
          case 130:
          case 132:
          case 145:
          case 150:
            return !0;
        }
        return !1;
      };

      b.IsAfterCodeBlockContext = function(a) {
        switch (a.currentTokenParent.kind()) {
          case 131:
          case 130:
          case 132:
          case 145:
          case 150:
            return !0;
        }
        return !1;
      };

      b.IsMultilineChildParentContext = function(a) {
        return !1;
      };

      b.IsNotFormatOnEnter = function(a) {
        return a.formattingRequestKind != 2;
      };

      b.IsSameLineTokenOrMultilineBlockContext = function(a) {
        return a.TokensAreOnSameLine() || b.IsMultilineBlockContext(a);
      };

      b.IsFunctionOrGetSetDeclContext = function(a) {
        return b.IsFunctionDeclContext(a) || b.IsGetSetMemberContext(a);
      };

      b.IsGetSetMemberContext = function(a) {
        switch (a.contextNode.kind()) {
          case 239:
          case 138:
          case 240:
          case 139:
            return !0;
        }
        return !1;
      };

      b.IsModuleDeclContext = function(a) {
        return a.contextNode.kind() === 130;
      };

      b.IsObjectTypeContext = function(a) {
        return a.contextNode.kind() === 123 && a.contextNode.parent().kind() !== 128;
      };

      b.IsTypeArgumentOrParameter = function(a, b) {
        return (a === 81 || a === 82) && (b === 228 || b === 227);
      };

      b.IsTypeArgumentOrParameterContext = function(a) {
        return b.IsTypeArgumentOrParameter(a.currentTokenSpan.kind(), a.currentTokenParent.kind()) || b.IsTypeArgumentOrParameter(
          a.nextTokenSpan.kind(), a.nextTokenParent.kind());
      };

      return b;
    }();
    a.Rules = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function() {
      function a() {
        this.map = [];

        this.mapRowLength = 0;
      }
      a.create = function(b) {
        var c = new a;
        c.Initialize(b);

        return c;
      };

      a.prototype.Initialize = function(a) {
        this.mapRowLength = 121;

        this.map = new Array(this.mapRowLength * this.mapRowLength);
        var b = new Array(this.map.length);
        this.FillRules(a, b);

        return this.map;
      };

      a.prototype.FillRules = function(a, b) {
        var c = this;
        a.forEach(function(a) {
          c.FillRule(a, b);
        });
      };

      a.prototype.GetRuleBucketIndex = function(a, b) {
        var c = a * this.mapRowLength + b;
        return c;
      };

      a.prototype.FillRule = function(a, c) {
        var d = this;

        var e = a.Descriptor.LeftTokenRange != b.Shared.TokenRange.Any && a.Descriptor.RightTokenRange != b.Shared.TokenRange
          .Any;
        a.Descriptor.LeftTokenRange.GetTokens().forEach(function(b) {
          a.Descriptor.RightTokenRange.GetTokens().forEach(function(f) {
            var g = d.GetRuleBucketIndex(b, f);

            var i = d.map[g];
            if (i == undefined) {
              i = d.map[g] = new h;
            }

            i.AddRule(a, e, c, g);
          });
        });
      };

      a.prototype.GetRule = function(a) {
        var b = this.GetRuleBucketIndex(a.currentTokenSpan.kind(), a.nextTokenSpan.kind());

        var c = this.map[b];
        if (c != null)
          for (var d = 0, e = c.Rules().length; d < e; d++) {
            var f = c.Rules()[d];
            if (f.Operation.Context.InContext(a)) {
              return f;
            }
          }
        return null;
      };

      return a;
    }();
    b.RulesMap = c;
    var d = 5;

    var e = 31;
    (function(a) {
      a[a.IgnoreRulesSpecific = 0] = "IgnoreRulesSpecific";

      a[a.IgnoreRulesAny = d * 1] = "IgnoreRulesAny";

      a[a.ContextRulesSpecific = d * 2] = "ContextRulesSpecific";

      a[a.ContextRulesAny = d * 3] = "ContextRulesAny";

      a[a.NoContextRulesSpecific = d * 4] = "NoContextRulesSpecific";

      a[a.NoContextRulesAny = d * 5] = "NoContextRulesAny";
    })(b.RulesPosition || (b.RulesPosition = {}));
    var f = b.RulesPosition;

    var g = function() {
      function b() {
        this.rulesInsertionIndexBitmap = 0;
      }
      b.prototype.GetInsertionIndex = function(a) {
        var b = 0;

        var c = 0;

        var f = this.rulesInsertionIndexBitmap;
        while (c <= a) {
          b += f & e;
          f >>= d;
          c += d;
        }
        return b;
      };

      b.prototype.IncreaseInsertionIndex = function(b) {
        var c = this.rulesInsertionIndexBitmap >> b & e;
        c++;

        a.Debug.assert((c & e) == c,
          "Adding more rules into the sub-bucket than allowed. Maximum allowed is 32 rules.");
        var d = this.rulesInsertionIndexBitmap & ~(e << b);
        d |= c << b;

        this.rulesInsertionIndexBitmap = d;
      };

      return b;
    }();
    b.RulesBucketConstructionState = g;
    var h = function() {
      function a() {
        this.rules = [];
      }
      a.prototype.Rules = function() {
        return this.rules;
      };

      a.prototype.AddRule = function(a, b, c, d) {
        var e;
        if (a.Operation.Action == 0) {
          e = b ? 0 : f.IgnoreRulesAny;
        } else {
          if (a.Operation.Context.IsAny()) {
            e = b ? f.NoContextRulesSpecific : f.NoContextRulesAny;
          } else {
            e = b ? f.ContextRulesSpecific : f.ContextRulesAny;
          }
        }
        var h = c[d];
        if (h === undefined) {
          h = c[d] = new g;
        }
        var i = h.GetInsertionIndex(e);
        this.rules.splice(i, 0, a);

        h.IncreaseInsertionIndex(e);
      };

      return a;
    }();
    b.RulesBucket = h;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function() {
      function c(a) {
        this.logger = a;

        this.globalRules = new b.Rules;
      }
      c.prototype.getRuleName = function(a) {
        return this.globalRules.getRuleName(a);
      };

      c.prototype.getRuleByName = function(a) {
        return this.globalRules[a];
      };

      c.prototype.getRulesMap = function() {
        return this.rulesMap;
      };

      c.prototype.ensureUpToDate = function(c) {
        var d = this;
        if (this.options == null || !Services.compareDataObjects(this.options, c)) {
          var e = a.timeFunction(this.logger, "RulesProvider: createActiveRules()", function() {
            return d.createActiveRules(c);
          });

          var f = a.timeFunction(this.logger, "RulesProvider: RulesMap.create()", function() {
            return b.RulesMap.create(e);
          });
          this.activeRules = e;

          this.rulesMap = f;

          this.options = Services.FormatCodeOptions.clone(c);
        }
      };

      c.prototype.createActiveRules = function(a) {
        var b = this.globalRules.HighPriorityCommonRules.slice(0);
        a.InsertSpaceAfterCommaDelimiter ? b.push(this.globalRules.SpaceAfterComma) : b.push(this.globalRules.NoSpaceAfterComma);

        a.InsertSpaceAfterFunctionKeywordForAnonymousFunctions ? b.push(this.globalRules.SpaceAfterAnonymousFunctionKeyword) :
          b.push(this.globalRules.NoSpaceAfterAnonymousFunctionKeyword);

        a.InsertSpaceAfterKeywordsInControlFlowStatements ? b.push(this.globalRules.SpaceAfterKeywordInControl) : b
          .push(this.globalRules.NoSpaceAfterKeywordInControl);

        a.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis ? (b.push(this.globalRules.SpaceAfterOpenParen),
          b.push(this.globalRules.SpaceBeforeCloseParen), b.push(this.globalRules.NoSpaceBetweenParens)) : (b.push(
          this.globalRules.NoSpaceAfterOpenParen), b.push(this.globalRules.NoSpaceBeforeCloseParen), b.push(this.globalRules
          .NoSpaceBetweenParens));

        a.InsertSpaceAfterSemicolonInForStatements ? b.push(this.globalRules.SpaceAfterSemicolonInFor) : b.push(
          this.globalRules.NoSpaceAfterSemicolonInFor);

        a.InsertSpaceBeforeAndAfterBinaryOperators ? (b.push(this.globalRules.SpaceBeforeBinaryOperator), b.push(
          this.globalRules.SpaceAfterBinaryOperator)) : (b.push(this.globalRules.NoSpaceBeforeBinaryOperator), b.push(
          this.globalRules.NoSpaceAfterBinaryOperator));

        a.PlaceOpenBraceOnNewLineForControlBlocks ? b.push(this.globalRules.NewLineBeforeOpenBraceInControl) : b.push(
          this.globalRules.SpaceBeforeOpenBraceInControl);

        a.PlaceOpenBraceOnNewLineForFunctions ? (b.push(this.globalRules.NewLineBeforeOpenBraceInFunction), b.push(
          this.globalRules.NewLineBeforeOpenBraceInTypeScriptDeclWithBlock)) : (b.push(this.globalRules.SpaceBeforeOpenBraceInFunction),
          b.push(this.globalRules.SpaceBeforeOpenBraceInTypeScriptDeclWithBlock));

        b = b.concat(this.globalRules.LowPriorityCommonRules);

        return b;
      };

      return c;
    }();
    b.RulesProvider = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function a(a, b, c) {
        this.position = a;

        this.length = b;

        this.replaceWith = c;
      }
      a.prototype.toString = function() {
        return "[ position: " + this.position + ", length: " + this.length + ", replaceWith: '" + this.replaceWith +
          "' ]";
      };

      return a;
    }();
    a.TextEditInfo = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    (function(b) {
      var c = function() {
        function b(a, b, c) {
          this.tokens = [];
          for (var d = a; d <= b; d++) {
            if (c.indexOf(d) < 0) {
              this.tokens.push(d);
            }
          }
        }
        b.prototype.GetTokens = function() {
          return this.tokens;
        };

        b.prototype.Contains = function(a) {
          return this.tokens.indexOf(a) >= 0;
        };

        b.prototype.toString = function() {
          return "[tokenRangeStart=" + a.SyntaxKind[this.tokens[0]] + "," + "tokenRangeEnd=" + a.SyntaxKind[this.tokens[
            this.tokens.length - 1]] + "]";
        };

        return b;
      }();
      b.TokenRangeAccess = c;
      var d = function() {
        function a(a) {
          this.tokens = a && a.length ? a : [];
        }
        a.prototype.GetTokens = function() {
          return this.tokens;
        };

        a.prototype.Contains = function(a) {
          return this.tokens.indexOf(a) >= 0;
        };

        return a;
      }();
      b.TokenValuesAccess = d;
      var e = function() {
        function b(a) {
          this.token = a;
        }
        b.prototype.GetTokens = function() {
          return [this.token];
        };

        b.prototype.Contains = function(a) {
          return a == this.token;
        };

        b.prototype.toString = function() {
          return "[singleTokenKind=" + a.SyntaxKind[this.token] + "]";
        };

        return b;
      }();
      b.TokenSingleValueAccess = e;
      var f = function() {
        function a() {}
        a.prototype.GetTokens = function() {
          var a = [];
          for (var b = 9; b <= 120; b++) {
            a.push(b);
          }
          return a;
        };

        a.prototype.Contains = function(a) {
          return !0;
        };

        a.prototype.toString = function() {
          return "[allTokens]";
        };

        return a;
      }();
      b.TokenAllAccess = f;
      var g = function() {
        function b(a) {
          this.tokenAccess = a;
        }
        b.FromToken = function(a) {
          return new b(new e(a));
        };

        b.FromTokens = function(a) {
          return new b(new d(a));
        };

        b.FromRange = function(a, d, e) {
          typeof e == "undefined" && (e = []);

          return new b(new c(a, d, e));
        };

        b.AllTokens = function() {
          return new b(new f);
        };

        b.prototype.GetTokens = function() {
          return this.tokenAccess.GetTokens();
        };

        b.prototype.Contains = function(a) {
          return this.tokenAccess.Contains(a);
        };

        b.prototype.toString = function() {
          return this.tokenAccess.toString();
        };

        b.Any = b.AllTokens();

        b.Keywords = b.FromRange(a.SyntaxKind.FirstKeyword, a.SyntaxKind.LastKeyword);

        b.Operators = b.FromRange(79, 120);

        b.BinaryOperators = b.FromRange(81, 120);

        b.BinaryKeywordOperators = b.FromTokens([29, 30]);

        b.ReservedKeywords = b.FromRange(51, 59);

        b.UnaryPrefixOperators = b.FromTokens([94, 95, 103, 102]);

        b.UnaryPrefixExpressions = b.FromTokens([13, 11, 73, 75, 71, 35, 31]);

        b.UnaryPreincrementExpressions = b.FromTokens([11, 73, 35, 31]);

        b.UnaryPostincrementExpressions = b.FromTokens([11, 74, 76, 31]);

        b.UnaryPredecrementExpressions = b.FromTokens([11, 73, 35, 31]);

        b.UnaryPostdecrementExpressions = b.FromTokens([11, 74, 76, 31]);

        b.Comments = b.FromTokens([7, 6]);

        b.TypeNames = b.FromTokens([11, 68, 70, 61, 62, 41, 60]);

        return b;
      }();
      b.TokenRange = g;
    })(b.Shared || (b.Shared = {}));
    var c = b.Shared;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function(a) {
      function b(b, c, d) {
        a.call(this, c, d);

        this._kind = b;
      }
      __extends(b, a);

      b.prototype.kind = function() {
        return this._kind;
      };

      return b;
    }(a.TextSpan);
    b.TokenSpan = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function() {
      function b(a, b, c, d, e) {
        this.update(a, b, c, d, e);
      }
      b.prototype.parent = function() {
        return this._parent;
      };

      b.prototype.node = function() {
        return this._node;
      };

      b.prototype.fullStart = function() {
        return this._fullStart;
      };

      b.prototype.fullWidth = function() {
        return this._node.fullWidth();
      };

      b.prototype.start = function() {
        return this._fullStart + this._node.leadingTriviaWidth();
      };

      b.prototype.end = function() {
        return this._fullStart + this._node.leadingTriviaWidth() + this._node.width();
      };

      b.prototype.indentationAmount = function() {
        return this._indentationAmount;
      };

      b.prototype.childIndentationAmountDelta = function() {
        return this._childIndentationAmountDelta;
      };

      b.prototype.depth = function() {
        return this._depth;
      };

      b.prototype.kind = function() {
        return this._node.kind();
      };

      b.prototype.hasSkippedOrMissingTokenChild = function() {
        this._hasSkippedOrMissingTokenChild === null && (this._hasSkippedOrMissingTokenChild = a.Syntax.nodeHasSkippedOrMissingTokens(
          this._node));

        return this._hasSkippedOrMissingTokenChild;
      };

      b.prototype.clone = function(a) {
        var b = null;
        this._parent && (b = this._parent.clone(a));

        return a.getNode(b, this._node, this._fullStart, this._indentationAmount, this._childIndentationAmountDelta);
      };

      b.prototype.update = function(a, b, c, d, e) {
        this._parent = a;

        this._node = b;

        this._fullStart = c;

        this._indentationAmount = d;

        this._childIndentationAmountDelta = e;

        this._hasSkippedOrMissingTokenChild = null;

        if (a) {
          this._depth = a.depth() + 1;
        } else {
          this._depth = 0;
        }
      };

      return b;
    }();
    b.IndentationNodeContext = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function b() {
        this.nodes = [];
      }
      b.prototype.getNode = function(b, c, d, e, f) {
        if (this.nodes.length > 0) {
          var g = this.nodes.pop();
          g.update(b, c, d, e, f);

          return g;
        }
        return new a.IndentationNodeContext(b, c, d, e, f);
      };

      b.prototype.releaseNode = function(a, b) {
        if (typeof b == "undefined") {
          b = !1;
        }

        this.nodes.push(a);
        if (b) {
          var c = a.parent();
          if (c) {
            this.releaseNode(c, b);
          }
        }
      };

      return b;
    }();
    a.IndentationNodeContextPool = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function(c) {
      function d(a, d, e, f, g) {
        c.call(this);

        this.options = g;

        this._position = 0;

        this._parent = null;

        this._indentationNodeContextPool = new b.IndentationNodeContextPool;

        this._textSpan = a;

        this._snapshot = e;

        this._parent = this._indentationNodeContextPool.getNode(null, d, 0, 0, 0);

        this._lastTriviaWasNewLine = f;
      }
      __extends(d, c);

      d.prototype.position = function() {
        return this._position;
      };

      d.prototype.parent = function() {
        return this._parent;
      };

      d.prototype.textSpan = function() {
        return this._textSpan;
      };

      d.prototype.snapshot = function() {
        return this._snapshot;
      };

      d.prototype.indentationNodeContextPool = function() {
        return this._indentationNodeContextPool;
      };

      d.prototype.forceIndentNextToken = function(a) {
        this._lastTriviaWasNewLine = !0;

        this.forceRecomputeIndentationOfParent(a, !0);
      };

      d.prototype.forceSkipIndentingNextToken = function(a) {
        this._lastTriviaWasNewLine = !1;

        this.forceRecomputeIndentationOfParent(a, !1);
      };

      d.prototype.indentToken = function(b, c, d) {
        throw a.Errors.abstract();
      };

      d.prototype.visitTokenInSpan = function(a) {
        if (this._lastTriviaWasNewLine) {
          var b = this.getTokenIndentationAmount(a);

          var c = this.getCommentIndentationAmount(a);
          this.indentToken(a, b, c);
        }
      };

      d.prototype.visitToken = function(b) {
        var c = new a.TextSpan(this._position, b.fullWidth());
        if (c.intersectsWithTextSpan(this._textSpan)) {
          this.visitTokenInSpan(b);
          var d = b.trailingTrivia();
          this._lastTriviaWasNewLine = b.hasTrailingNewLine() && d.syntaxTriviaAt(d.count() - 1).kind() == 5;
        }
        this._position += b.fullWidth();
      };

      d.prototype.visitNode = function(b) {
        var c = new a.TextSpan(this._position, b.fullWidth());
        if (c.intersectsWithTextSpan(this._textSpan)) {
          var d = this.getNodeIndentation(b);

          var e = this._parent;
          this._parent = this._indentationNodeContextPool.getNode(e, b, this._position, d.indentationAmount, d.indentationAmountDelta);

          b.accept(this);

          this._indentationNodeContextPool.releaseNode(this._parent);

          this._parent = e;
        } else {
          this._position += b.fullWidth();
        }
      };

      d.prototype.getTokenIndentationAmount = function(a) {
        return this._parent.node().firstToken() === a || a.kind() === 71 || a.kind() === 72 || a.kind() === 75 || a
          .kind() === 76 || a.kind() === 42 && this._parent.node().kind() == 160 ? this._parent.indentationAmount() :
          this._parent.indentationAmount() + this._parent.childIndentationAmountDelta();
      };

      d.prototype.getCommentIndentationAmount = function(a) {
        return a.kind() === 72 || a.kind() === 76 ? this._parent.indentationAmount() + this._parent.childIndentationAmountDelta() :
          this._parent.indentationAmount();
      };

      d.prototype.getNodeIndentation = function(b, c) {
        var d = this._parent.node();

        var e;
        if (this._textSpan.containsPosition(this._parent.start())) {
          e = this._parent.indentationAmount();
        } else {
          var f = this._snapshot.getLineFromPosition(this._parent.start()).getText();

          var g = a.Indentation.firstNonWhitespacePosition(f);
          e = a.Indentation.columnForPositionInString(f, g, this.options);
        }
        var h = this._parent.childIndentationAmountDelta();

        var i;

        var j;
        switch (b.kind()) {
          default: i = e + h;

          j = 0;
          break;
          case 131:
          case 130:
          case 123:
          case 132:
          case 150:
          case 214:
          case 137:
          case 129:
          case 221:
          case 135:
          case 138:
          case 139:
          case 234:
          case 213:
          case 125:
          case 220:
          case 143:
          case 153:
          case 154:
          case 157:
          case 160:
          case 162:
          case 231:
          case 232:
          case 149:
          case 156:
          case 218:
          case 217:
          case 223:
          case 134:
          case 212:
          case 215:
          case 141:
          case 142:
            i = e + h;

            j = this.options.indentSpaces;
            break;
          case 146:
            if (d.kind() === 233 && !d.elseKeyword.hasTrailingNewLine() && !b.ifKeyword.hasLeadingNewLine()) {
              i = e;
            } else {
              i = e + h;
            }

            j = this.options.indentSpaces;
            break;
          case 233:
            i = e;

            j = this.options.indentSpaces;
            break;
          case 145:
            switch (d.kind()) {
              case 121:
              case 130:
              case 145:
              case 231:
              case 232:
                i = e + h;
                break;
              default:
                i = e;
            }
            j = this.options.indentSpaces;
        }
        if (d && !c) {
          var k = this._snapshot.getLineNumberFromPosition(this._parent.start());

          var l = this._snapshot.getLineNumberFromPosition(this._position + b.leadingTriviaWidth());
          if (k === l || c === !1) {
            i = e;
            j = Math.min(this.options.indentSpaces, h + j);
          }
        }
        return {
          indentationAmount: i,
          indentationAmountDelta: j
        };
      };

      d.prototype.forceRecomputeIndentationOfParent = function(a, b) {
        var c = this._parent;
        if (c.fullStart() === a) {
          var d = this.getNodeIndentation(c.node(), b);
          c.update(c.parent(), c.node(), c.fullStart(), d.indentationAmount, d.indentationAmountDelta);
        }
      };

      return d;
    }(a.SyntaxWalker);
    b.IndentationTrackingWalker = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function(c) {
      function d(a, b, d, e, f) {
        c.call(this, a, b, d, e, f);

        this._edits = [];
      }
      __extends(d, c);

      d.prototype.indentToken = function(b, c, d) {
        if (b.fullWidth() === 0) return;
        if (this.parent().hasSkippedOrMissingTokenChild()) return;
        var e = new a.TextSpan(this.position() + b.leadingTriviaWidth(), b.width());
        if (!this.textSpan().containsTextSpan(e)) return;
        var f = a.Indentation.indentationString(c, this.options);

        var g = a.Indentation.indentationString(d, this.options);
        this.recordIndentationEditsForToken(b, f, g);
      };

      d.prototype.edits = function() {
        return this._edits;
      };

      d.prototype.recordEdit = function(a, c, d) {
        this._edits.push(new b.TextEditInfo(a, c, d));
      };

      d.prototype.recordIndentationEditsForToken = function(b, c, d) {
        var e = this.position();

        var f = !0;

        var g = "";

        var h = b.leadingTrivia();
        if (h)
          for (var i = 0, j = h.count(); i < j; i++) {
            var k = h.syntaxTriviaAt(i);
            switch (k.kind()) {
              case 6:
                this.recordIndentationEditsForMultiLineComment(k, e, d, g, !f);

                f = !1;

                g = "";
                break;
              case 7:
              case 8:
                if (f) {
                  this.recordIndentationEditsForSingleLineOrSkippedText(k, e, d);
                  f = !1;
                }
                break;
              case 4:
                var l = h.count() > i + 1 && h.syntaxTriviaAt(i + 1).isComment();
                if (f) {
                  this.recordIndentationEditsForWhitespace(k, e, l ? d : c);
                  f = !1;
                }

                g += k.fullText();
                break;
              case 5:
                f = !0;

                g = "";
                break;
              default:
                throw a.Errors.invalidOperation();
            }
            e += k.fullWidth();
          }
        if (b.kind() !== 10 && f && c.length > 0) {
          this.recordEdit(e, 0, c);
        }
      };

      d.prototype.recordIndentationEditsForSingleLineOrSkippedText = function(a, b, c) {
        if (c.length > 0) {
          this.recordEdit(b, 0, c);
        }
      };

      d.prototype.recordIndentationEditsForWhitespace = function(a, b, c) {
        var d = a.fullText();
        if (c === d) return;
        this.recordEdit(b, d.length, c);
      };

      d.prototype.recordIndentationEditsForMultiLineComment = function(b, c, d, e, f) {
        var g = c;

        var h = a.Syntax.splitMultiLineCommentTriviaIntoMultipleLines(b);
        if (h.length <= 1) {
          if (!f) {
            this.recordIndentationEditsForSingleLineOrSkippedText(b, c, d);
          }
          return;
        }
        var i = a.Indentation.columnForPositionInString(e, e.length, this.options);

        var j = a.Indentation.columnForPositionInString(d, d.length, this.options);

        var k = 0;
        if (f) {
          k = 1;
          g += h[0].length;
        }
        for (var l = k; l < h.length; l++) {
          var m = h[l];
          this.recordIndentationEditsForSegment(m, g, j, i);

          g += m.length;
        }
      };

      d.prototype.recordIndentationEditsForSegment = function(b, c, d, e) {
        var f = a.Indentation.firstNonWhitespacePosition(b);

        var g = a.Indentation.columnForPositionInString(b, f, this.options);

        var h = g - e;

        var i = d + h;
        if (i < 0) {
          i = 0;
        }
        var j = a.Indentation.indentationString(i, this.options);
        if (f < b.length && a.CharacterInfo.isLineTerminator(b.charCodeAt(f))) return;
        if (j === b.substring(0, f)) return;
        this.recordEdit(c, f, j);
      };

      return d;
    }(b.IndentationTrackingWalker);
    b.MultipleTokenIndenter = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function(b) {
      function c(c, d, e, f, g) {
        b.call(this, new a.TextSpan(c, 1), d, e, f, g);

        this.indentationAmount = null;

        this.indentationPosition = c;
      }
      __extends(c, b);

      c.getIndentationAmount = function(a, b, d, e) {
        var f = new c(a, b, d, !0, e);
        b.accept(f);

        return f.indentationAmount;
      };

      c.prototype.indentToken = function(a, b, c) {
        if (a.fullWidth() === 0 || this.indentationPosition - this.position() < a.leadingTriviaWidth()) {
          this.indentationAmount = c;
        } else {
          this.indentationAmount = b;
        }
      };

      return c;
    }(b.IndentationTrackingWalker);
    b.SingleTokenIndenter = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(b) {
    var c = function(c) {
      function d(a, d, e, f, g, h, i) {
        c.call(this, a, d, g, e, f);

        this.previousTokenSpan = null;

        this.previousTokenParent = null;

        this.scriptHasErrors = !1;

        this.previousTokenParent = this.parent().clone(this.indentationNodeContextPool());

        this.rulesProvider = h;

        this.formattingRequestKind = i;

        this.formattingContext = new b.FormattingContext(this.snapshot(), this.formattingRequestKind);
      }
      __extends(d, c);

      d.getEdits = function(a, b, c, e, f, g, h) {
        var i = new d(a, b, e, c, f, g, h);
        b.accept(i);

        return i.edits();
      };

      d.prototype.visitTokenInSpan = function(b) {
        if (b.fullWidth() !== 0) {
          var d = new a.TextSpan(this.position() + b.leadingTriviaWidth(), b.width());
          if (this.textSpan().containsTextSpan(d)) {
            this.processToken(b);
          }
        }
        c.prototype.visitTokenInSpan.call(this, b);
      };

      d.prototype.processToken = function(a) {
        var c = this.position();
        if (a.leadingTriviaWidth() !== 0) {
          this.processTrivia(a.leadingTrivia(), c);
          c += a.leadingTriviaWidth();
        }
        if (a.kind() !== 10) {
          var d = new b.TokenSpan(a.kind(), c, a.width());
          if (this.previousTokenSpan && !this.parent().hasSkippedOrMissingTokenChild()) {
            this.formatPair(this.previousTokenSpan, this.previousTokenParent, d, this.parent());
          }

          this.previousTokenSpan = d;

          if (this.previousTokenParent) {
            this.indentationNodeContextPool().releaseNode(this.previousTokenParent, !0);
          }

          this.previousTokenParent = this.parent().clone(this.indentationNodeContextPool());

          c += a.width();

          if (a.trailingTriviaWidth() !== 0) {
            this.processTrivia(a.trailingTrivia(), c);
          }
        }
      };

      d.prototype.processTrivia = function(a, c) {
        var d = c;
        for (var e = 0, f = a.count(); e < f; e++) {
          var g = a.syntaxTriviaAt(e);
          if (g.isComment() || g.isSkippedToken()) {
            var h = new b.TokenSpan(g.kind(), d, g.fullWidth());
            if (this.previousTokenSpan && g.isComment()) {
              this.formatPair(this.previousTokenSpan, this.previousTokenParent, h, this.parent());
            }

            this.previousTokenSpan = h;

            if (this.previousTokenParent) {
              this.indentationNodeContextPool().releaseNode(this.previousTokenParent, !0);
            }

            this.previousTokenParent = this.parent().clone(this.indentationNodeContextPool());
          }
          d += g.fullWidth();
        }
      };

      d.prototype.findCommonParents = function(b, c) {
        var d;

        var e;

        var f;

        var g;
        if (b.depth() < c.depth()) {
          d = b;
          e = b.depth();
          f = c;
          g = c.depth();
        } else {
          d = c;
          e = c.depth();
          f = b;
          g = b.depth();
        }

        a.Debug.assert(e >= 0, "Expected shallowParentDepth >= 0");

        a.Debug.assert(g >= 0, "Expected deepParentDepth >= 0");

        a.Debug.assert(g >= e, "Expected deepParentDepth >= shallowParentDepth");
        while (g > e) {
          f = f.parent();
          g--;
        }
        a.Debug.assert(g === e, "Expected deepParentDepth === shallowParentDepth");
        while (f.node() && d.node()) {
          if (f.node() === d.node()) {
            return f;
          }
          f = f.parent();

          d = d.parent();
        }
        throw a.Errors.invalidOperation();
      };

      d.prototype.formatPair = function(a, b, c, d) {
        var e = this.getLineNumber(a);

        var f = this.getLineNumber(c);

        var g = this.findCommonParents(b, d);
        this.formattingContext.updateContext(a, b, c, d, g);
        var h = this.rulesProvider.getRulesMap().GetRule(this.formattingContext);
        if (h != null) {
          this.RecordRuleEdits(h, a, c);
          if ((h.Operation.Action == 1 || h.Operation.Action == 3) && e != f) {
            this.forceSkipIndentingNextToken(c.start());
          }
          if (h.Operation.Action == 2 && e == f) {
            this.forceIndentNextToken(c.start());
          }
        }

        if (e != f) {
          this.TrimWhitespaceInLineRange(a, e, f - 1);
        }
      };

      d.prototype.getLineNumber = function(a) {
        return this.snapshot().getLineNumberFromPosition(a.start());
      };

      d.prototype.TrimWhitespaceInLineRange = function(a, b, c) {
        for (var d = b; d <= c; ++d) {
          var e = this.snapshot().getLineFromLineNumber(d);
          this.TrimWhitespace2(a, e);
        }
      };

      d.prototype.TrimWhitespace = function(a) {
        var b = this.snapshot().getLineFromPosition(a.start());
        this.TrimWhitespace2(a, b);
      };

      d.prototype.TrimWhitespace2 = function(b, c) {
        if ((b.kind() == 6 || b.kind() == 7) && b.start() <= c.endPosition() && b.end() >= c.endPosition()) return;
        var d = c.getText();

        var e = 0;
        for (e = d.length - 1; e >= 0; --e)
          if (!a.CharacterInfo.isWhitespace(d.charCodeAt(e))) break;
          ++e;

        if (e < d.length) {
          this.recordEdit(c.startPosition() + e, c.length() - e, "");
        }
      };

      d.prototype.RecordRuleEdits = function(b, c, d) {
        if (b.Operation.Action == 0) return;
        var e;
        switch (b.Operation.Action) {
          case 3:
            e = new a.TextSpan(c.end(), d.start() - c.end());
            if (e.length() > 0) {
              this.recordEdit(e.start(), e.length(), "");
              return;
            }
            break;
          case 2:
            if (b.Flag == 1) {
              e = new a.TextSpan(c.end(), c.start() - c.end());
            } else {
              var f;
              if (this.getLineNumber(c) == this.getLineNumber(d)) {
                f = d.start() - c.end();
              } else {
                f = this.snapshot().getLineFromPosition(c.end()).endIncludingLineBreakPosition() - c.end();
              }

              e = new a.TextSpan(c.end(), Math.max(0, f));
            }
            var g = !1;

            var h = this.snapshot().getText(e);

            var i = h.indexOf(this.options.newLineCharacter);
            if (i < 0) {
              g = !0;
            } else {
              i = h.indexOf(this.options.newLineCharacter, i + 1);
              if (i >= 0) {
                g = !0;
              }
            }
            if (g) {
              this.recordEdit(e.start(), e.length(), this.options.newLineCharacter);
              return;
            }
            break;
          case 1:
            if (b.Flag == 1) {
              e = new a.TextSpan(c.end(), d.start() - c.end());
            } else {
              if (this.getLineNumber(c) == this.getLineNumber(d)) {
                f = d.start() - c.end();
              } else {
                f = this.snapshot().getLineFromPosition(c.end()).endPosition() - c.end();
              }
              e = new a.TextSpan(c.end(), Math.max(0, f));
            }
            if (e.length() > 1 || this.snapshot().getText(e) != " ") {
              this.recordEdit(e.start(), e.length(), " ");
              return;
            }
        }
      };

      return d;
    }(b.MultipleTokenIndenter);
    b.Formatter = c;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));

var TypeScript;

(function(a) {
  (function(a) {
    var b = function() {
      function b(a) {
        this.snapshot = a;

        this.lines = [];
      }
      b.prototype.getText = function(a) {
        return this.snapshot.substr(a.start(), a.length(), !1);
      };

      b.prototype.getLineNumberFromPosition = function(a) {
        return this.snapshot.lineMap().getLineNumberFromPosition(a);
      };

      b.prototype.getLineFromPosition = function(a) {
        var b = this.getLineNumberFromPosition(a);
        return this.getLineFromLineNumber(b);
      };

      b.prototype.getLineFromLineNumber = function(a) {
        var b = this.lines[a];
        b === undefined && (b = this.getLineFromLineNumberWorker(a), this.lines[a] = b);

        return b;
      };

      b.prototype.getLineFromLineNumberWorker = function(b) {
        var c = this.snapshot.lineMap().lineStarts();

        var d = b;
        if (d < 0 || d >= c.length) throw new Error("invalid line number (" + d + ")");
        var e = c[d];

        var f;

        var g;

        var h = "";
        if (d == c.length) {
          f = g = this.snapshot.length();
        } else {
          g = d >= c.length - 1 ? this.snapshot.length() : c[d + 1];
          for (var i = g - 1; i >= e; i--) {
            var j = this.snapshot.substr(i, 1, !1);
            if (j != "\r" && j != "\n") break;
          }
          f = i + 1;

          h = this.snapshot.substr(f, g - f, !1);
        }
        var k = new a.TextSnapshotLine(this, b, e, f, h);
        return k;
      };

      return b;
    }();
    a.TextSnapshot = b;
  })(a.Formatting || (a.Formatting = {}));
  var b = a.Formatting;
})(TypeScript || (TypeScript = {}));